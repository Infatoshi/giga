{
  "documents": [
    {
      "content": "module.exports = {\n  parser: '@typescript-eslint/parser',\n  plugins: ['@typescript-eslint'],\n  extends: [\n    'eslint:recommended',\n    '@typescript-eslint/recommended',\n  ],\n  env: {\n    node: true,\n    es6: true,\n  },\n  rules: {\n    '@typescript-eslint/no-unused-vars': 'error',\n    '@typescript-eslint/no-explicit-any': 'warn',\n  },\n};",
      "filePath": "../.eslintrc.js",
      "embedding": [
        0.27,
        0,
        0,
        0,
        0.1,
        0.08468236624595053,
        0.0120541524858782,
        0.05940272053720291,
        0.014326019696651949,
        0.07047389786876133,
        0.023302598827770495,
        0.05209715415557151,
        0.02806892363052208,
        0.0303353376303986,
        0.00616788890795007,
        0.05684356484098281,
        0.09020281399822377,
        0.08974251238727504,
        0.0362360998794024,
        0.09802782850125574,
        0.006631239819715829,
        0.06173224989378241,
        0.0014025038760136612,
        0.00528838113359037,
        0.009151877157852806,
        0.03969072697213292,
        0.08072822971085204,
        0.09374975286450013,
        0.07781690239860288,
        0.09677271691418858,
        0.009747840859678792,
        0.074523941497474,
        0.049575052821734605,
        0.06550564056090438,
        0.09642563087430435,
        0.03412946491579879,
        0.08763135978093717,
        0.013176710470388365,
        0.06984028160360205,
        0.09319972386127563,
        0.014641564765503979,
        0.018416522666159264,
        0.07263812663333587,
        0.019608302642035814,
        0.03225720940721462,
        0.056853293682255925,
        0.021524118819274962,
        0.09841185051449768,
        0.041826112936260776,
        0.01298381917900069,
        0.08198170196002935,
        0.08613053767993384,
        0.08847012444653354,
        0.052017828597898434,
        0.02620724608545786,
        0.04826166321034384,
        0.06892188232947408,
        0.08076937222959352,
        0.07415877298575421,
        0.09906688400114178,
        0.016261463328183602,
        0.0009431581171302051,
        0.05126928877812545,
        0.09713551374137987,
        0.05424138239158204,
        0.05983097457136769,
        0.07055832926714675,
        0.003035642686641993,
        0.027884159077123962,
        0.09641938267209885,
        0.03970738444799679,
        0.08058147864546801,
        0.01893580684387777,
        0.04104111898358248,
        0.05455909756756588,
        0.026654728061007462,
        0.08585646247323318,
        0.036619827257880766,
        0.03351375850581856,
        0.06607572591526555,
        0.060450057972777284,
        0.022501254570234365,
        0.06917759265098437,
        0.01654254956433838,
        0.05614465572795302,
        0.018746692413357847,
        0.0930511272720761,
        0.08601006408712765,
        0.08098291146063616,
        0.02857612792155704,
        0.04273180864177539,
        0.03473005875343036,
        0.014565850085271748,
        0.040604568753760055,
        0.09497769706063663,
        0.030920670740016976,
        0.003924878966215084,
        0.08403943264859878,
        0.06538512084125907,
        0.08002532406744836
      ]
    },
    {
      "content": "/// <reference types=\"node\" />\nimport { GrokToolCall } from \"../giga/client\";\nimport { ToolResult } from \"../types\";\nimport { EventEmitter } from \"events\";\nimport { AgentMode } from \"../types\";\nexport interface ChatEntry {\n    type: \"user\" | \"assistant\" | \"tool_result\";\n    content: string;\n    timestamp: Date;\n    toolCalls?: GrokToolCall[];\n    toolCall?: GrokToolCall;\n    toolResult?: {\n        success: boolean;\n        output?: string;\n        error?: string;\n        metadata?: {\n            userSummary?: string;\n            query?: string;\n            [key: string]: any;\n        };\n    };\n    isStreaming?: boolean;\n    metrics?: {\n        prefillTimeMs: number;\n        decodeTimeMs: number;\n        outputTokens: number;\n        tokensPerSecond: number;\n    };\n}\nexport interface StreamingChunk {\n    type: \"content\" | \"tool_calls\" | \"tool_result\" | \"done\" | \"token_count\";\n    content?: string;\n    toolCalls?: GrokToolCall[];\n    toolCall?: GrokToolCall;\n    toolResult?: ToolResult;\n    tokenCount?: number;\n}\nexport declare class GigaAgent extends EventEmitter {\n    private gigaClient;\n    private textEditor;\n    private bash;\n    private todoTool;\n    private confirmationTool;\n    private mcpTool;\n    private perplexityTool;\n    private mcpManager;\n    private chatHistory;\n    private messages;\n    private tokenCounter;\n    private abortController;\n    private selectedCustomPrompt;\n    private baseSystemPrompt;\n    constructor(apiKey: string, groqApiKey?: string);\n    private initializeMcpConnections;\n    refreshMcpConnections(): Promise<void>;\n    processUserMessage(message: string): Promise<ChatEntry[]>;\n    private messageReducer;\n    processUserMessageStream(message: string): AsyncGenerator<StreamingChunk, void, unknown>;\n    private getExpertModelForTool;\n    private executeTool;\n    getChatHistory(): ChatEntry[];\n    getCurrentDirectory(): string;\n    executeBashCommand(command: string): Promise<ToolResult>;\n    getCurrentModel(): string;\n    setModel(model: string): void;\n    abortCurrentOperation(): void;\n    setSelectedCustomPrompt(promptName: string | null): void;\n    getSelectedCustomPrompt(): string | null;\n    restoreConversation(chatEntries: ChatEntry[]): void;\n    updateMode(mode: AgentMode): void;\n    getCurrentMode(): AgentMode;\n    getModeConfig(): import(\"../types\").ModeConfig;\n    private updateSystemPrompt;\n}\n",
      "filePath": "../dist/agent/giga-agent.d.ts",
      "embedding": [
        1.98,
        0,
        0.1,
        0.5,
        0.3,
        0.04715218632667463,
        0.03369073729683741,
        0.07078861723170428,
        0.004496394494566791,
        0.07640514956482979,
        0.04776476260109948,
        0.0716659075888582,
        0.07050084440469194,
        0.09147014511477819,
        0.005424574934581428,
        0.0020664201352014744,
        0.048220735222417814,
        0.006685440947818921,
        0.09192330246992245,
        0.04489210288220833,
        0.08223507754655535,
        0.0032414514640385253,
        0.07822167961693688,
        0.034277374655977376,
        0.07863685296331674,
        0.022263570429936208,
        0.0034413334678694454,
        0.07207801978602056,
        0.0726873283445947,
        0.0038341050621813035,
        0.07716330840721713,
        0.008578906659230745,
        0.07302650709411132,
        0.05044862246772267,
        0.02723376147393121,
        0.06487491589612535,
        0.02209281749915736,
        0.003806751847065293,
        0.08492005271481429,
        0.02427716175985909,
        0.003962122528103152,
        0.010428800372823122,
        0.09891306076344937,
        0.01022770393967072,
        0.052416686770224465,
        0.06695401926548177,
        0.06584182408537285,
        0.051220482632788646,
        0.04175656146622045,
        0.09176852717488898,
        0.03448972516991307,
        0.04478494822985329,
        0.08182436207226877,
        0.054938628500337885,
        0.05862297768762015,
        0.03700588066341356,
        0.023425459272303842,
        0.01939249433946018,
        0.0433755325778468,
        0.06739615137468376,
        0.08337917434713156,
        0.07918998837741525,
        0.06891134603122406,
        0.04990258240438511,
        0.05929361993391366,
        0.09354442392717643,
        0.06630158205675193,
        0.02865648342382412,
        0.03400859497061837,
        0.04639837036741214,
        0.034285276664990975,
        0.09382315656065504,
        0.030634128000918772,
        0.02831165745039689,
        0.059908480909449294,
        0.06504514774503074,
        0.0354651498179101,
        0.02059544068481466,
        0.07628907772012014,
        0.09347187395840365,
        0.040752831303443204,
        0.08365904470864902,
        0.0825738123201077,
        0.03846344236485219,
        0.06298463419829023,
        0.05821378632907098,
        0.05881747764831711,
        0.012626566168649057,
        0.014707989404122157,
        0.038376729553309986,
        0.08624419697176296,
        0.0623057142581494,
        0.09389084219369548,
        0.06518823845491781,
        0.07017226093916114,
        0.036622706452328846,
        0.08773604701270613,
        0.06484640964087886,
        0.08107382697483301,
        0.02115457503439119
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GigaAgent = void 0;\nconst client_1 = require(\"../giga/client\");\nconst tools_1 = require(\"../giga/tools\");\nconst tools_2 = require(\"../tools\");\nconst events_1 = require(\"events\");\nconst token_counter_1 = require(\"../utils/token-counter\");\nconst api_keys_1 = require(\"../utils/api-keys\");\nconst mcp_manager_1 = require(\"../mcp/mcp-manager\");\nconst expert_models_manager_1 = require(\"../utils/expert-models-manager\");\nconst mode_manager_1 = require(\"../utils/mode-manager\");\nconst types_1 = require(\"../types\");\nclass GigaAgent extends events_1.EventEmitter {\n    constructor(apiKey, groqApiKey) {\n        super();\n        this.chatHistory = [];\n        this.messages = [];\n        this.abortController = null;\n        this.selectedCustomPrompt = null;\n        // Load all API keys from settings file and environment variables\n        const savedKeys = (0, api_keys_1.loadApiKeys)();\n        const xaiKey = apiKey || savedKeys.xaiApiKey || process.env.XAI_API_KEY;\n        const groqKey = groqApiKey || savedKeys.groqApiKey || process.env.GROQ_API_KEY;\n        const anthropicKey = savedKeys.anthropicApiKey || process.env.ANTHROPIC_API_KEY;\n        const openRouterKey = savedKeys.openRouterApiKey || process.env.OPENROUTER_API_KEY;\n        const googleKey = savedKeys.googleApiKey || process.env.GOOGLE_API_KEY;\n        const cerebrasKey = savedKeys.cerebrasApiKey || process.env.CEREBRAS_API_KEY;\n        const perplexityKey = savedKeys.perplexityApiKey || process.env.PERPLEXITY_API_KEY;\n        const openaiKey = savedKeys.openaiApiKey || process.env.OPENAI_API_KEY;\n        if (!xaiKey) {\n            throw new Error('XAI API key is required. Please configure it in /providers or set XAI_API_KEY environment variable.');\n        }\n        this.gigaClient = new client_1.GigaClient(xaiKey, undefined, groqKey, anthropicKey, openRouterKey, googleKey, cerebrasKey, perplexityKey, openaiKey, savedKeys.ollamaBaseUrl);\n        this.textEditor = new tools_2.TextEditorTool();\n        this.bash = new tools_2.BashTool();\n        this.todoTool = new tools_2.TodoTool();\n        this.confirmationTool = new tools_2.ConfirmationTool();\n        this.mcpTool = new tools_2.McpTool();\n        this.perplexityTool = new tools_2.PerplexityTool();\n        this.mcpManager = mcp_manager_1.McpManager.getInstance();\n        this.tokenCounter = (0, token_counter_1.createTokenCounter)(\"grok-4-latest\");\n        // Initialize MCP connections\n        this.initializeMcpConnections();\n        // Attempt to migrate expert models config from sessions if needed\n        expert_models_manager_1.expertModelsManager.migrateFromAllSessions();\n        // Store base system prompt\n        this.baseSystemPrompt = `You are GIGA, an AI assistant that helps with file editing, coding tasks, and system operations.\n\nYou have access to these tools:\n- view_file: View file contents or directory listings\n- create_file: Create new files with content (ONLY use this for files that don't exist yet)\n- str_replace_editor: Replace text in existing files (ALWAYS use this to edit or update existing files)\n- bash: Execute bash commands (use for searching, file discovery, navigation, and system operations)\n- perplexity_search: Search the web for current information, documentation, and research using Perplexity\n- create_todo_list: Create a visual todo list for planning and tracking tasks\n- update_todo_list: Update existing todos in your todo list\n\nIMPORTANT TOOL USAGE RULES:\n- NEVER use create_file on files that already exist - this will overwrite them completely\n- ALWAYS use str_replace_editor to modify existing files, even for small changes\n- Before editing a file, use view_file to see its current contents\n- Use create_file ONLY when creating entirely new files that don't exist\n\nSEARCHING AND EXPLORATION:\n- Use bash with commands like 'find', 'grep', 'rg' (ripgrep), 'ls', etc. for searching files and content\n- Examples: 'find . -name \"*.js\"', 'grep -r \"function\" src/', 'rg \"import.*react\"'\n- Use bash for directory navigation, file discovery, and content searching\n- view_file is best for reading specific files you already know exist\n\nWhen a user asks you to edit, update, modify, or change an existing file:\n1. First use view_file to see the current contents\n2. Then use str_replace_editor to make the specific changes\n3. Never use create_file for existing files\n\nWhen a user asks you to create a new file that doesn't exist:\n1. Use create_file with the full content\n\nTASK PLANNING WITH TODO LISTS:\n- For complex requests with multiple steps, ALWAYS create a todo list first to plan your approach\n- Use create_todo_list to break down tasks into manageable items with priorities\n- Mark tasks as 'in_progress' when you start working on them (only one at a time)\n- Mark tasks as 'completed' immediately when finished\n- Use update_todo_list to track your progress throughout the task\n- Todo lists provide visual feedback with colors: ✅ Green (completed), 🔄 Cyan (in progress), ⏳ Yellow (pending)\n- Always create todos with priorities: 'high' (🔴), 'medium' (🟡), 'low' (🟢)\n\nUSER CONFIRMATION SYSTEM:\nFile operations (create_file, str_replace_editor) and bash commands will automatically request user confirmation before execution. The confirmation system will show users the actual content or command before they decide. Users can choose to approve individual operations or approve all operations of that type for the session.\n\nIf a user rejects an operation, the tool will return an error and you should not proceed with that specific operation.\n\nBe helpful, direct, and efficient. Always explain what you're doing and show the results.\n\nIMPORTANT RESPONSE GUIDELINES:\n- After using tools, do NOT respond with pleasantries like \"Thanks for...\" or \"Great!\"\n- Only provide necessary explanations or next steps if relevant to the task\n- Keep responses concise and focused on the actual work being done\n- If a tool execution completes the user's request, you can remain silent or give a brief confirmation\n\nCurrent working directory: ${process.cwd()}`;\n        // Initialize with system message\n        this.updateSystemPrompt();\n    }\n    async initializeMcpConnections() {\n        try {\n            await this.mcpManager.initializeAllServers();\n        }\n        catch (error) {\n            console.warn('Failed to initialize some MCP servers:', error);\n        }\n    }\n    async refreshMcpConnections() {\n        try {\n            await this.mcpManager.refreshConnections();\n        }\n        catch (error) {\n            console.warn('Failed to refresh MCP connections:', error);\n        }\n    }\n    async processUserMessage(message) {\n        // Add user message to conversation\n        const userEntry = {\n            type: \"user\",\n            content: message,\n            timestamp: new Date(),\n        };\n        this.chatHistory.push(userEntry);\n        this.messages.push({ role: \"user\", content: message });\n        const newEntries = [userEntry];\n        const maxToolRounds = 20; // Prevent infinite loops\n        let toolRounds = 0;\n        try {\n            // For initial response, always use the main model - expert routing happens at tool level\n            let currentResponse = await this.gigaClient.chat(this.messages, (0, tools_1.getAllTools)());\n            // Agent loop - continue until no more tool calls or max rounds reached\n            while (toolRounds < maxToolRounds) {\n                const assistantMessage = currentResponse.choices[0]?.message;\n                if (!assistantMessage) {\n                    throw new Error(\"No response from Grok\");\n                }\n                // Handle tool calls\n                if (assistantMessage.tool_calls &&\n                    assistantMessage.tool_calls.length > 0) {\n                    toolRounds++;\n                    // Add assistant message with tool calls\n                    const assistantEntry = {\n                        type: \"assistant\",\n                        content: assistantMessage.content || \"Using tools to help you...\",\n                        timestamp: new Date(),\n                        toolCalls: assistantMessage.tool_calls,\n                    };\n                    this.chatHistory.push(assistantEntry);\n                    newEntries.push(assistantEntry);\n                    // Add assistant message to conversation\n                    this.messages.push({\n                        role: \"assistant\",\n                        content: assistantMessage.content || \"\",\n                        tool_calls: assistantMessage.tool_calls,\n                    });\n                    // Execute tool calls\n                    for (const toolCall of assistantMessage.tool_calls) {\n                        const result = await this.executeTool(toolCall);\n                        // Log expert model usage for debugging\n                        const expertModel = this.getExpertModelForTool(toolCall.function.name);\n                        if (expertModel) {\n                            console.log(`DEBUG: Used expert model ${expertModel} for tool ${toolCall.function.name}`);\n                        }\n                        const toolResultEntry = {\n                            type: \"tool_result\",\n                            content: result.success\n                                ? result.output || \"Success\"\n                                : result.error || \"Error occurred\",\n                            timestamp: new Date(),\n                            toolCall: toolCall,\n                            toolResult: result,\n                        };\n                        this.chatHistory.push(toolResultEntry);\n                        newEntries.push(toolResultEntry);\n                        // Add tool result to messages with proper format (needed for AI context)\n                        this.messages.push({\n                            role: \"tool\",\n                            content: result.success\n                                ? result.output || \"Success\"\n                                : result.error || \"Error\",\n                            tool_call_id: toolCall.id,\n                        });\n                    }\n                    // Get next response - this might contain more tool calls\n                    // Use the main model for coordinating between tools\n                    currentResponse = await this.gigaClient.chat(this.messages, (0, tools_1.getAllTools)());\n                }\n                else {\n                    // No more tool calls, add final response\n                    const finalEntry = {\n                        type: \"assistant\",\n                        content: assistantMessage.content ||\n                            \"I understand, but I don't have a specific response.\",\n                        timestamp: new Date(),\n                        metrics: currentResponse.metrics,\n                    };\n                    this.chatHistory.push(finalEntry);\n                    this.messages.push({\n                        role: \"assistant\",\n                        content: assistantMessage.content || \"\",\n                    });\n                    newEntries.push(finalEntry);\n                    break; // Exit the loop\n                }\n            }\n            if (toolRounds >= maxToolRounds) {\n                const warningEntry = {\n                    type: \"assistant\",\n                    content: \"Maximum tool execution rounds reached. Stopping to prevent infinite loops.\",\n                    timestamp: new Date(),\n                };\n                this.chatHistory.push(warningEntry);\n                newEntries.push(warningEntry);\n            }\n            return newEntries;\n        }\n        catch (error) {\n            const errorEntry = {\n                type: \"assistant\",\n                content: `Sorry, I encountered an error: ${error.message}`,\n                timestamp: new Date(),\n            };\n            this.chatHistory.push(errorEntry);\n            return [userEntry, errorEntry];\n        }\n    }\n    messageReducer(previous, item) {\n        const reduce = (acc, delta) => {\n            acc = { ...acc };\n            for (const [key, value] of Object.entries(delta)) {\n                if (acc[key] === undefined || acc[key] === null) {\n                    acc[key] = value;\n                    // Clean up index properties from tool calls\n                    if (Array.isArray(acc[key])) {\n                        for (const arr of acc[key]) {\n                            delete arr.index;\n                        }\n                    }\n                }\n                else if (typeof acc[key] === \"string\" && typeof value === \"string\") {\n                    acc[key] += value;\n                }\n                else if (Array.isArray(acc[key]) && Array.isArray(value)) {\n                    const accArray = acc[key];\n                    for (let i = 0; i < value.length; i++) {\n                        if (!accArray[i])\n                            accArray[i] = {};\n                        accArray[i] = reduce(accArray[i], value[i]);\n                    }\n                }\n                else if (typeof acc[key] === \"object\" && typeof value === \"object\") {\n                    acc[key] = reduce(acc[key], value);\n                }\n            }\n            return acc;\n        };\n        return reduce(previous, item.choices[0]?.delta || {});\n    }\n    async *processUserMessageStream(message) {\n        // Create new abort controller for this request\n        this.abortController = new AbortController();\n        // Add user message to conversation\n        const userEntry = {\n            type: \"user\",\n            content: message,\n            timestamp: new Date(),\n        };\n        this.chatHistory.push(userEntry);\n        this.messages.push({ role: \"user\", content: message });\n        // Calculate input tokens\n        const inputTokens = this.tokenCounter.countMessageTokens(this.messages);\n        yield {\n            type: \"token_count\",\n            tokenCount: inputTokens,\n        };\n        const maxToolRounds = 30; // Prevent infinite loops\n        let toolRounds = 0;\n        let totalOutputTokens = 0;\n        try {\n            // Agent loop - continue until no more tool calls or max rounds reached\n            while (toolRounds < maxToolRounds) {\n                // Check if operation was cancelled\n                if (this.abortController?.signal.aborted) {\n                    yield {\n                        type: \"content\",\n                        content: \"\\n\\n[Operation cancelled by user]\",\n                    };\n                    yield { type: \"done\" };\n                    return;\n                }\n                // Stream response and accumulate\n                // Use the main model for conversation flow - expert routing happens at tool level\n                const stream = this.gigaClient.chatStream(this.messages, (0, tools_1.getAllTools)());\n                let accumulatedMessage = {};\n                let accumulatedContent = \"\";\n                let toolCallsYielded = false;\n                for await (const chunk of stream) {\n                    // Check for cancellation in the streaming loop\n                    if (this.abortController?.signal.aborted) {\n                        yield {\n                            type: \"content\",\n                            content: \"\\n\\n[Operation cancelled by user]\",\n                        };\n                        yield { type: \"done\" };\n                        return;\n                    }\n                    if (!chunk.choices?.[0])\n                        continue;\n                    // Accumulate the message using reducer\n                    accumulatedMessage = this.messageReducer(accumulatedMessage, chunk);\n                    // Check for tool calls - yield when we have complete tool calls with function names\n                    if (!toolCallsYielded && accumulatedMessage.tool_calls?.length > 0) {\n                        // Check if we have at least one complete tool call with a function name\n                        const hasCompleteTool = accumulatedMessage.tool_calls.some((tc) => tc.function?.name);\n                        if (hasCompleteTool) {\n                            yield {\n                                type: \"tool_calls\",\n                                toolCalls: accumulatedMessage.tool_calls,\n                            };\n                            toolCallsYielded = true;\n                        }\n                    }\n                    // Stream content as it comes\n                    if (chunk.choices[0].delta?.content) {\n                        accumulatedContent += chunk.choices[0].delta.content;\n                        // Update token count in real-time\n                        const currentOutputTokens = this.tokenCounter.estimateStreamingTokens(accumulatedContent);\n                        totalOutputTokens = currentOutputTokens;\n                        yield {\n                            type: \"content\",\n                            content: chunk.choices[0].delta.content,\n                        };\n                        // Emit token count update\n                        yield {\n                            type: \"token_count\",\n                            tokenCount: inputTokens + totalOutputTokens,\n                        };\n                    }\n                }\n                // Add assistant entry to history\n                const assistantEntry = {\n                    type: \"assistant\",\n                    content: accumulatedMessage.content || \"Using tools to help you...\",\n                    timestamp: new Date(),\n                    toolCalls: accumulatedMessage.tool_calls || undefined,\n                };\n                this.chatHistory.push(assistantEntry);\n                // Add accumulated message to conversation\n                this.messages.push({\n                    role: \"assistant\",\n                    content: accumulatedMessage.content || \"\",\n                    tool_calls: accumulatedMessage.tool_calls,\n                });\n                // Handle tool calls if present\n                if (accumulatedMessage.tool_calls?.length > 0) {\n                    toolRounds++;\n                    // Only yield tool_calls if we haven't already yielded them during streaming\n                    if (!toolCallsYielded) {\n                        yield {\n                            type: \"tool_calls\",\n                            toolCalls: accumulatedMessage.tool_calls,\n                        };\n                    }\n                    // Execute tools\n                    for (const toolCall of accumulatedMessage.tool_calls) {\n                        // Check for cancellation before executing each tool\n                        if (this.abortController?.signal.aborted) {\n                            yield {\n                                type: \"content\",\n                                content: \"\\n\\n[Operation cancelled by user]\",\n                            };\n                            yield { type: \"done\" };\n                            return;\n                        }\n                        const result = await this.executeTool(toolCall);\n                        // Log expert model usage for debugging\n                        const expertModel = this.getExpertModelForTool(toolCall.function.name);\n                        if (expertModel) {\n                            console.log(`DEBUG: Used expert model ${expertModel} for tool ${toolCall.function.name}`);\n                        }\n                        const toolResultEntry = {\n                            type: \"tool_result\",\n                            content: result.success\n                                ? result.output || \"Success\"\n                                : result.error || \"Error occurred\",\n                            timestamp: new Date(),\n                            toolCall: toolCall,\n                            toolResult: result,\n                        };\n                        this.chatHistory.push(toolResultEntry);\n                        yield {\n                            type: \"tool_result\",\n                            toolCall,\n                            toolResult: result,\n                        };\n                        // Add tool result with proper format (needed for AI context)\n                        this.messages.push({\n                            role: \"tool\",\n                            content: result.success\n                                ? result.output || \"Success\"\n                                : result.error || \"Error\",\n                            tool_call_id: toolCall.id,\n                        });\n                    }\n                    // Continue the loop to get the next response (which might have more tool calls)\n                }\n                else {\n                    // No tool calls, we're done - add metrics to the last assistant entry\n                    const lastAssistantEntry = this.chatHistory\n                        .slice()\n                        .reverse()\n                        .find(entry => entry.type === \"assistant\");\n                    if (lastAssistantEntry) {\n                        const streamingMetrics = this.gigaClient.getLastStreamingMetrics();\n                        if (streamingMetrics) {\n                            lastAssistantEntry.metrics = streamingMetrics;\n                        }\n                    }\n                    break;\n                }\n            }\n            if (toolRounds >= maxToolRounds) {\n                yield {\n                    type: \"content\",\n                    content: \"\\n\\nMaximum tool execution rounds reached. Stopping to prevent infinite loops.\",\n                };\n            }\n            yield { type: \"done\" };\n        }\n        catch (error) {\n            // Check if this was a cancellation\n            if (this.abortController?.signal.aborted) {\n                yield {\n                    type: \"content\",\n                    content: \"\\n\\n[Operation cancelled by user]\",\n                };\n                yield { type: \"done\" };\n                return;\n            }\n            const errorEntry = {\n                type: \"assistant\",\n                content: `Sorry, I encountered an error: ${error.message}`,\n                timestamp: new Date(),\n            };\n            this.chatHistory.push(errorEntry);\n            yield {\n                type: \"content\",\n                content: errorEntry.content,\n            };\n            yield { type: \"done\" };\n        }\n        finally {\n            // Clean up abort controller\n            this.abortController = null;\n        }\n    }\n    getExpertModelForTool(toolName) {\n        const expertConfig = expert_models_manager_1.expertModelsManager.getExpertModelsConfig();\n        // Check if current mode allows expert models\n        if (!mode_manager_1.modeManager.shouldAllowExpertModels() || !expertConfig.enabled) {\n            return null;\n        }\n        // Fast operations (file navigation, simple commands)\n        const fastTools = [\n            'view_file',\n            'bash' // Only simple bash commands - complex ones should use reasoning\n        ];\n        // Code-specific operations\n        const codeTools = [\n            'str_replace_editor',\n            'create_file'\n        ];\n        // Reasoning-heavy operations  \n        const reasoningTools = [\n            'create_todo_list',\n            'update_todo_list'\n        ];\n        // Tool orchestration and complex workflows\n        const toolsTools = [\n            'list_mcp_tools',\n            'call_mcp_tool',\n            'perplexity_search'\n        ];\n        if (fastTools.includes(toolName)) {\n            return expertConfig.fastModel;\n        }\n        else if (codeTools.includes(toolName)) {\n            return expertConfig.codeModel;\n        }\n        else if (reasoningTools.includes(toolName)) {\n            return expertConfig.reasoningModel;\n        }\n        else if (toolsTools.includes(toolName) || toolName.startsWith('mcp_')) {\n            return expertConfig.toolsModel;\n        }\n        return null;\n    }\n    async executeTool(toolCall) {\n        try {\n            const args = JSON.parse(toolCall.function.arguments);\n            switch (toolCall.function.name) {\n                case \"view_file\":\n                    const range = args.start_line && args.end_line\n                        ? [args.start_line, args.end_line]\n                        : undefined;\n                    return await this.textEditor.view(args.path, range);\n                case \"create_file\":\n                    return await this.textEditor.create(args.path, args.content);\n                case \"str_replace_editor\":\n                    return await this.textEditor.strReplace(args.path, args.old_str, args.new_str);\n                case \"bash\":\n                    return await this.bash.execute(args.command);\n                case \"create_todo_list\":\n                    return await this.todoTool.createTodoList(args.todos);\n                case \"update_todo_list\":\n                    return await this.todoTool.updateTodoList(args.updates);\n                case \"perplexity_search\":\n                    return await this.perplexityTool.search(args.query, args.max_results, args.summarize);\n                case \"list_mcp_tools\":\n                    return await this.mcpTool.listMcpTools();\n                case \"call_mcp_tool\":\n                    return await this.mcpTool.callMcpTool(args.tool_name, args.arguments || {});\n                default:\n                    // Check if it's a dynamic MCP tool\n                    if (toolCall.function.name.startsWith(\"mcp_\")) {\n                        const parts = toolCall.function.name.split(\"_\");\n                        if (parts.length >= 3) {\n                            const serverName = parts[1];\n                            const toolName = parts.slice(2).join(\"_\");\n                            return await this.mcpTool.callMcpTool(toolName, args);\n                        }\n                    }\n                    return {\n                        success: false,\n                        error: `Unknown tool: ${toolCall.function.name}`,\n                    };\n            }\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Tool execution error: ${error.message}`,\n            };\n        }\n    }\n    getChatHistory() {\n        return [...this.chatHistory];\n    }\n    getCurrentDirectory() {\n        return this.bash.getCurrentDirectory();\n    }\n    async executeBashCommand(command) {\n        return await this.bash.execute(command);\n    }\n    getCurrentModel() {\n        return this.gigaClient.getCurrentModel();\n    }\n    setModel(model) {\n        this.gigaClient.setModel(model);\n        // Update token counter for new model\n        this.tokenCounter.dispose();\n        this.tokenCounter = (0, token_counter_1.createTokenCounter)(model);\n    }\n    abortCurrentOperation() {\n        if (this.abortController) {\n            this.abortController.abort();\n        }\n    }\n    setSelectedCustomPrompt(promptName) {\n        this.selectedCustomPrompt = promptName;\n        this.updateSystemPrompt();\n    }\n    getSelectedCustomPrompt() {\n        return this.selectedCustomPrompt;\n    }\n    // Method to restore conversation state when switching conversations\n    restoreConversation(chatEntries) {\n        // Clear current messages (but keep system prompt)\n        const systemMessage = this.messages.find(m => m.role === 'system');\n        this.messages = systemMessage ? [systemMessage] : [];\n        this.chatHistory = [];\n        // Convert ChatEntry[] back to GrokMessage[] format\n        for (const entry of chatEntries) {\n            if (entry.type === 'user') {\n                this.messages.push({\n                    role: 'user',\n                    content: entry.content\n                });\n            }\n            else if (entry.type === 'assistant') {\n                this.messages.push({\n                    role: 'assistant',\n                    content: entry.content,\n                    tool_calls: entry.toolCalls\n                });\n            }\n            else if (entry.type === 'tool_result' && entry.toolCall) {\n                this.messages.push({\n                    role: 'tool',\n                    content: entry.content,\n                    tool_call_id: entry.toolCall.id\n                });\n            }\n        }\n        // Restore chat history\n        this.chatHistory = [...chatEntries];\n    }\n    updateMode(mode) {\n        mode_manager_1.modeManager.setMode(mode);\n    }\n    getCurrentMode() {\n        return mode_manager_1.modeManager.getCurrentMode();\n    }\n    getModeConfig() {\n        return mode_manager_1.modeManager.getCurrentModeConfig();\n    }\n    updateSystemPrompt() {\n        let systemContent = '';\n        // If a custom prompt is selected, use ONLY that prompt\n        if (this.selectedCustomPrompt) {\n            const { getPromptByName } = require('../utils/prompts');\n            const customPrompt = getPromptByName(this.selectedCustomPrompt);\n            if (customPrompt) {\n                systemContent = customPrompt.content;\n            }\n            else {\n                // Fallback to base system prompt if custom prompt not found\n                systemContent = this.baseSystemPrompt;\n            }\n        }\n        else {\n            // Use base GIGA system prompt when no custom prompt is selected\n            systemContent = this.baseSystemPrompt;\n        }\n        // Add mode-specific instructions\n        const currentMode = mode_manager_1.modeManager.getCurrentMode();\n        if (currentMode !== types_1.AgentMode.GIGA) {\n            systemContent += `\\n\\nCURRENT MODE: ${mode_manager_1.modeManager.getModeDisplayName()}\\n${mode_manager_1.modeManager.getModeDescription()}`;\n            if (currentMode === types_1.AgentMode.PLAN) {\n                systemContent += '\\n\\nIn PLAN MODE: Focus on planning and analysis. Avoid complex tool usage - prefer thinking through problems step by step.';\n            }\n            else if (currentMode === types_1.AgentMode.CHILL) {\n                systemContent += '\\n\\nIn CHILL MODE: All capabilities available but ask for permission before making changes to files or running potentially impactful commands.';\n            }\n        }\n        // Update or add system message\n        if (this.messages.length > 0 && this.messages[0].role === 'system') {\n            this.messages[0].content = systemContent;\n        }\n        else {\n            this.messages.unshift({\n                role: 'system',\n                content: systemContent\n            });\n        }\n    }\n}\nexports.GigaAgent = GigaAgent;\n//# sourceMappingURL=giga-agent.js.map",
      "filePath": "../dist/agent/giga-agent.js",
      "embedding": [
        26.1,
        1.3,
        0.1,
        0.1,
        0.3,
        0.07415459474993895,
        0.06300724904481601,
        0.024244835173898374,
        0.012695130665605892,
        0.01810267196145964,
        0.01401357864812265,
        0.05574999466487323,
        0.0207416486225675,
        0.03253215443864279,
        0.011345344565416693,
        0.04977066745825481,
        0.008929889870074216,
        0.09774789305115905,
        0.08193559931267201,
        0.08280127011347062,
        0.04190867438168655,
        0.08235867518945932,
        0.0764194068611147,
        0.03293315494587867,
        0.08157333467361744,
        0.05240538132872137,
        0.06256717400823122,
        0.04053342648686442,
        0.04439949646007188,
        0.011466444059799708,
        0.05851198403276993,
        0.08930213954545772,
        0.06839263282064821,
        0.0477449917094041,
        0.03556330865927484,
        0.09180087792672281,
        0.0844823051386473,
        0.040523676060783824,
        0.03640497786869357,
        0.04387603154705222,
        0.06573786163519696,
        0.032934898710519626,
        0.07598864131693152,
        0.061351800516435274,
        0.0782475780623064,
        0.018747895706000373,
        0.022852490711036733,
        0.09413894291518134,
        0.06516315251051996,
        0.014960663783678852,
        0.023315116539429706,
        0.07531126575352604,
        0.0679886261658438,
        0.07467814469343777,
        0.003092576134599479,
        0.09515865200021485,
        0.09472371368023338,
        0.04698187679223668,
        0.049224686074659074,
        0.07266820353729554,
        0.08881483261246,
        0.013586121593383871,
        0.039492579014727774,
        0.09199695197697443,
        0.00996068231276459,
        0.03981356132144649,
        0.023972109044098612,
        0.04276384365729311,
        0.09449270524810319,
        0.05203825354848235,
        0.027219636907287837,
        0.05494246711498967,
        0.09862171660378174,
        0.030498292986298838,
        0.018659122180507404,
        0.03826323748274919,
        0.08086708193685099,
        0.024474508331142467,
        0.09632182154883889,
        0.026911980511710044,
        0.056956662412123986,
        0.0000360230562181596,
        0.059836852967853155,
        0.049275838169717756,
        0.0024188742613770243,
        0.061454914756082106,
        0.08681117619252282,
        0.041632153558686415,
        0.003203174313966828,
        0.02496629195792277,
        0.011652257016729417,
        0.06306256667253006,
        0.0532983566090488,
        0.04022195711567869,
        0.039264470804922326,
        0.007373715218989597,
        0.012057511914841834,
        0.03862978736180921,
        0.05500233103303309,
        0.04489191308495264
      ]
    },
    {
      "content": "import { ToolResult, AgentState } from '../types';\nexport declare class Agent {\n    private textEditor;\n    private bash;\n    private state;\n    constructor();\n    processCommand(input: string): Promise<ToolResult>;\n    private parseViewCommand;\n    private parseStrReplaceCommand;\n    private parseCreateCommand;\n    private parseInsertCommand;\n    private getHelp;\n    getCurrentState(): AgentState;\n}\n",
      "filePath": "../dist/agent/index.d.ts",
      "embedding": [
        0.36,
        0,
        0.1,
        0.1,
        0.1,
        0.008612214409805585,
        0.06327196085360291,
        0.04777643446494158,
        0.0017469271929445584,
        0.08534206917100168,
        0.03764420442165938,
        0.06270002250749729,
        0.010250757396005894,
        0.08745266671146373,
        0.016027115884014963,
        0.08177644199422797,
        0.05436372102507747,
        0.05619587701192337,
        0.09416093779619032,
        0.09837260865689225,
        0.03194386191290236,
        0.0929503355117903,
        0.08045769267733574,
        0.02452432060444806,
        0.000017308594337828167,
        0.02151926801704225,
        0.020502734341652087,
        0.08149895462144346,
        0.0055164923310600305,
        0.02044033906127465,
        0.08448309758864875,
        0.013077101737021979,
        0.04524610689420844,
        0.08031491782554595,
        0.06667600967917273,
        0.049050785355617146,
        0.0443281728009686,
        0.01973192982414348,
        0.06934423383720738,
        0.014326663939185547,
        0.052492672179056926,
        0.040084144674140565,
        0.00011408183320384958,
        0.035173168632250444,
        0.041549613331890306,
        0.07092427638237178,
        0.05808310860232681,
        0.06553916367230965,
        0.0975799535741328,
        0.08347836191497798,
        0.05959573634484192,
        0.028949964382679216,
        0.03525709550857608,
        0.07708747186819846,
        0.05502748581430064,
        0.05730180569074779,
        0.0038649212357048214,
        0.014385911800146756,
        0.03715649182739692,
        0.020853213159616468,
        0.06731728046025066,
        0.07324086587327648,
        0.09788613234350384,
        0.0015237362151749867,
        0.02888311969592544,
        0.03884490921173883,
        0.008772721744922806,
        0.029935016932382198,
        0.06511043293750485,
        0.0280464372481262,
        0.011315107233032485,
        0.09589651442463804,
        0.009534239111580502,
        0.08937925146183696,
        0.08028795948161471,
        0.0761680593589469,
        0.04670841064765824,
        0.02068687088807234,
        0.034243501201575835,
        0.037339320629332144,
        0.0308198246569083,
        0.05701791646568876,
        0.019198261862946698,
        0.09719019346453453,
        0.007985602207600173,
        0.04327265631741023,
        0.09738922733366094,
        0.08807243662327487,
        0.031001464625880305,
        0.04012899140661889,
        0.03396716709600949,
        0.036489217595929456,
        0.02276517384931197,
        0.08617624918455558,
        0.0603664575294976,
        0.024090713063469826,
        0.02485354656919485,
        0.07428533714986664,
        0.004095131714745792,
        0.06367572654611878
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Agent = void 0;\nconst tools_1 = require(\"../tools\");\nclass Agent {\n    constructor() {\n        this.textEditor = new tools_1.TextEditorTool();\n        this.bash = new tools_1.BashTool();\n        this.state = {\n            currentDirectory: process.cwd(),\n            editHistory: [],\n            tools: []\n        };\n    }\n    async processCommand(input) {\n        const trimmedInput = input.trim();\n        if (trimmedInput.startsWith('view ')) {\n            const args = this.parseViewCommand(trimmedInput);\n            return this.textEditor.view(args.path, args.range);\n        }\n        if (trimmedInput.startsWith('str_replace ')) {\n            const args = this.parseStrReplaceCommand(trimmedInput);\n            if (!args) {\n                return { success: false, error: 'Invalid str_replace command format' };\n            }\n            return this.textEditor.strReplace(args.path, args.oldStr, args.newStr);\n        }\n        if (trimmedInput.startsWith('create ')) {\n            const args = this.parseCreateCommand(trimmedInput);\n            if (!args) {\n                return { success: false, error: 'Invalid create command format' };\n            }\n            return this.textEditor.create(args.path, args.content);\n        }\n        if (trimmedInput.startsWith('insert ')) {\n            const args = this.parseInsertCommand(trimmedInput);\n            if (!args) {\n                return { success: false, error: 'Invalid insert command format' };\n            }\n            return this.textEditor.insert(args.path, args.line, args.content);\n        }\n        if (trimmedInput === 'undo_edit') {\n            return this.textEditor.undoEdit();\n        }\n        if (trimmedInput.startsWith('bash ') || trimmedInput.startsWith('$ ')) {\n            const command = trimmedInput.startsWith('bash ')\n                ? trimmedInput.substring(5)\n                : trimmedInput.substring(2);\n            return this.bash.execute(command);\n        }\n        if (trimmedInput === 'pwd') {\n            return {\n                success: true,\n                output: this.bash.getCurrentDirectory()\n            };\n        }\n        if (trimmedInput === 'history') {\n            const history = this.textEditor.getEditHistory();\n            return {\n                success: true,\n                output: history.length > 0\n                    ? JSON.stringify(history, null, 2)\n                    : 'No edit history'\n            };\n        }\n        if (trimmedInput === 'help') {\n            return this.getHelp();\n        }\n        return this.bash.execute(trimmedInput);\n    }\n    parseViewCommand(input) {\n        const parts = input.split(' ');\n        const path = parts[1];\n        if (parts.length > 2) {\n            const rangePart = parts[2];\n            if (rangePart.includes('-')) {\n                const [start, end] = rangePart.split('-').map(Number);\n                return { path, range: [start, end] };\n            }\n        }\n        return { path };\n    }\n    parseStrReplaceCommand(input) {\n        const match = input.match(/str_replace\\s+(\\S+)\\s+\"([^\"]+)\"\\s+\"([^\"]*)\"/);\n        if (!match)\n            return null;\n        return {\n            path: match[1],\n            oldStr: match[2],\n            newStr: match[3]\n        };\n    }\n    parseCreateCommand(input) {\n        const match = input.match(/create\\s+(\\S+)\\s+\"([^\"]*)\"/);\n        if (!match)\n            return null;\n        return {\n            path: match[1],\n            content: match[2]\n        };\n    }\n    parseInsertCommand(input) {\n        const match = input.match(/insert\\s+(\\S+)\\s+(\\d+)\\s+\"([^\"]*)\"/);\n        if (!match)\n            return null;\n        return {\n            path: match[1],\n            line: parseInt(match[2]),\n            content: match[3]\n        };\n    }\n    getHelp() {\n        return {\n            success: true,\n            output: `Available commands:\n  view <path> [start-end]     - View file contents or directory\n  str_replace <path> \"old\" \"new\" - Replace text in file\n  create <path> \"content\"     - Create new file with content\n  insert <path> <line> \"text\" - Insert text at specific line\n  undo_edit                   - Undo last edit operation\n  bash <command>              - Execute bash command\n  $ <command>                 - Execute bash command (shorthand)\n  pwd                         - Show current directory\n  history                     - Show edit history\n  help                        - Show this help message`\n        };\n    }\n    getCurrentState() {\n        return {\n            ...this.state,\n            currentDirectory: this.bash.getCurrentDirectory(),\n            editHistory: this.textEditor.getEditHistory()\n        };\n    }\n}\nexports.Agent = Agent;\n//# sourceMappingURL=index.js.map",
      "filePath": "../dist/agent/index.js",
      "embedding": [
        4.17,
        0,
        0.1,
        0,
        0.3,
        0.0327018377746543,
        0.011761628774114486,
        0.09690518033321607,
        0.08083770728578768,
        0.012589384145954164,
        0.08411511451095205,
        0.07040567711561704,
        0.0072348051671565,
        0.05251082334823102,
        0.05421935460278802,
        0.011693693013488493,
        0.04740679182549338,
        0.05531413448799072,
        0.06775277078634687,
        0.04996780599506785,
        0.04596290174863787,
        0.09881442742041112,
        0.0029564804770310874,
        0.08797034147770082,
        0.0479536844605146,
        0.00350512950963221,
        0.048398626310027074,
        0.07478459833318228,
        0.06630654843367638,
        0.02626007003522847,
        0.015114996405977422,
        0.041524613638045965,
        0.034757996538149726,
        0.0780997152138117,
        0.0978187608297295,
        0.029479699905302817,
        0.029406535362583454,
        0.009942651971511741,
        0.047534718155596456,
        0.014106753694328634,
        0.04837579906359529,
        0.04651379775495416,
        0.04541090095965683,
        0.024220910543658238,
        0.03419042964346319,
        0.0021270206648539847,
        0.0067994506852777975,
        0.018889405031716044,
        0.00315066767571468,
        0.06615749081091388,
        0.07763247973948864,
        0.04382773785964962,
        0.06280309065645293,
        0.023283838268153247,
        0.02984826374831752,
        0.038555003202284666,
        0.0845554943510117,
        0.031456755579349696,
        0.08531250146171838,
        0.08242651642691962,
        0.07648687114324774,
        0.05460727936697386,
        0.010942725279581223,
        0.09433967351400888,
        0.07877761293982162,
        0.021077538182132628,
        0.0785182620106,
        0.02078242049452943,
        0.00311462859590399,
        0.02687821937801539,
        0.032992495189328064,
        0.08661720515345128,
        0.007486961140296233,
        0.0020838515422999192,
        0.03348009902011053,
        0.06600997411229297,
        0.006385861945585792,
        0.018993109847779566,
        0.030579738996850715,
        0.07566004690729769,
        0.0528649572599523,
        0.034960390608922864,
        0.05863855221378155,
        0.02133786650327123,
        0.0857439336839575,
        0.04920361716808416,
        0.029994129144973514,
        0.09435589018756757,
        0.08570911168061174,
        0.09557398400721248,
        0.08418692314401523,
        0.07458410997651359,
        0.07497887418610388,
        0.003276825393338456,
        0.07714858586294082,
        0.07916184697614613,
        0.06534256527110792,
        0.01751885717830747,
        0.031088897773930747,
        0.005724399439526729
      ]
    },
    {
      "content": "import type { ChatCompletionMessageParam } from 'openai/resources/chat';\nexport type GrokMessage = ChatCompletionMessageParam;\nexport interface GrokTool {\n    type: 'function';\n    function: {\n        name: string;\n        description: string;\n        parameters: {\n            type: 'object';\n            properties: Record<string, any>;\n            required: string[];\n        };\n    };\n}\nexport interface GrokToolCall {\n    id: string;\n    type: 'function';\n    function: {\n        name: string;\n        arguments: string;\n    };\n}\nexport interface GrokResponse {\n    choices: Array<{\n        message: {\n            role: string;\n            content: string | null;\n            tool_calls?: GrokToolCall[];\n        };\n        finish_reason: string;\n    }>;\n    usage?: {\n        prompt_tokens?: number;\n        completion_tokens?: number;\n        total_tokens?: number;\n    };\n    metrics?: {\n        prefillTimeMs: number;\n        decodeTimeMs: number;\n        outputTokens: number;\n        tokensPerSecond: number;\n    };\n}\nexport interface ApiCallMetrics {\n    model: string;\n    inputTokens: number;\n    outputTokens: number;\n    totalTokens: number;\n    durationMs: number;\n    tokensPerSecond: number;\n}\nexport declare class GigaClient {\n    private xaiClient;\n    private groqClient;\n    private anthropicClient;\n    private openRouterClient;\n    private googleClient;\n    private cerebrasClient;\n    private perplexityClient;\n    private openaiClient;\n    private ollamaClient;\n    private groqApiKey?;\n    private anthropicApiKey?;\n    private openRouterApiKey?;\n    private googleApiKey?;\n    private cerebrasApiKey?;\n    private perplexityApiKey?;\n    private openaiApiKey?;\n    private ollamaBaseUrl?;\n    private lastStreamingMetrics?;\n    constructor(apiKey: string, model?: string, groqApiKey?: string, anthropicApiKey?: string, openRouterApiKey?: string, googleApiKey?: string, cerebrasApiKey?: string, perplexityApiKey?: string, openaiApiKey?: string, ollamaBaseUrl?: string);\n    private getClientForModel;\n    setModel(model: string): void;\n    getCurrentModel(): string;\n    getLastStreamingMetrics(): {\n        prefillTimeMs: number;\n        decodeTimeMs: number;\n        outputTokens: number;\n        tokensPerSecond: number;\n    } | undefined;\n    chat(messages: GrokMessage[], tools?: GrokTool[], model?: string): Promise<GrokResponse>;\n    chatStream(messages: GrokMessage[], tools?: GrokTool[], model?: string): AsyncGenerator<any, void, unknown>;\n}\n",
      "filePath": "../dist/giga/client.d.ts",
      "embedding": [
        2.09,
        0.4,
        0.1,
        0.1,
        0.6,
        0.08923584992305288,
        0.014006457154233454,
        0.03279065584557811,
        0.0025024111523011985,
        0.05636096922076385,
        0.08583586577195547,
        0.08442311975712896,
        0.033697644895979505,
        0.07181012898484253,
        0.05896246989154777,
        0.018865466929744935,
        0.03898365224995934,
        0.02203662898068234,
        0.0702625144496205,
        0.07756401659695372,
        0.022293475846002244,
        0.02172173001343393,
        0.029235640371567784,
        0.05316277692703314,
        0.04919485744306467,
        0.07890394013785455,
        0.015467900950075431,
        0.07967349465794923,
        0.027188535498481926,
        0.008611578885663851,
        0.01474387003969131,
        0.03142295348305082,
        0.03402801914261503,
        0.02196166810264043,
        0.04845227092406468,
        0.005029491000710207,
        0.07400539878828692,
        0.06600580333866181,
        0.034191194271669015,
        0.03308207596688695,
        0.09809619151482257,
        0.05514309681382931,
        0.0126709597993371,
        0.030596171460872314,
        0.03215848488923637,
        0.04701002111406849,
        0.050676926024728876,
        0.02866934167816181,
        0.013927148816619883,
        0.024644009295560532,
        0.060836655229671625,
        0.06743153371879186,
        0.09937430365388111,
        0.03723517719923055,
        0.028436218667075387,
        0.05492108589980456,
        0.09066107479250626,
        0.010410767707855885,
        0.020018956137674928,
        0.012969363139357648,
        0.058814686751571504,
        0.0895018735312933,
        0.08062985827684,
        0.014472914416281159,
        0.01715116205399977,
        0.06266527988637004,
        0.07116552878491213,
        0.05733839890637791,
        0.054194410813677846,
        0.07439884720435615,
        0.059680565260809004,
        0.015295183733098428,
        0.08469942096768962,
        0.04267919746653501,
        0.07308949299860298,
        0.08992783056721859,
        0.04082790863033148,
        0.09460244759048897,
        0.006675118754450382,
        0.0012756809818296967,
        0.09970042618974599,
        0.07675453685261034,
        0.07215871233484225,
        0.07569763348678311,
        0.02175217042083688,
        0.06348661579547642,
        0.0726182124021412,
        0.002004815556649442,
        0.06135171809180112,
        0.07158596736486378,
        0.00084679314877808,
        0.03386006223858934,
        0.08038334368254635,
        0.02081329441552822,
        0.07791694700571154,
        0.01043097863656034,
        0.01990829627991003,
        0.028603844413526414,
        0.005277591491957889,
        0.05856950065559788
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GigaClient = void 0;\nconst openai_1 = __importDefault(require(\"openai\"));\nconst cerebras_cloud_sdk_1 = __importDefault(require(\"@cerebras/cerebras_cloud_sdk\"));\nconst session_manager_1 = require(\"../utils/session-manager\");\nconst added_models_1 = require(\"../utils/added-models\");\nconst token_counter_1 = require(\"../utils/token-counter\");\nclass GigaClient {\n    constructor(apiKey, model, groqApiKey, anthropicApiKey, openRouterApiKey, googleApiKey, cerebrasApiKey, perplexityApiKey, openaiApiKey, ollamaBaseUrl) {\n        this.xaiClient = new openai_1.default({\n            apiKey,\n            baseURL: 'https://api.x.ai/v1',\n            timeout: 360000,\n        });\n        this.groqApiKey = groqApiKey;\n        if (groqApiKey) {\n            this.groqClient = new openai_1.default({\n                apiKey: groqApiKey,\n                baseURL: 'https://api.groq.com/openai/v1',\n                timeout: 360000,\n            });\n        }\n        this.anthropicApiKey = anthropicApiKey;\n        if (anthropicApiKey) {\n            this.anthropicClient = new openai_1.default({\n                apiKey: anthropicApiKey,\n                baseURL: 'https://api.anthropic.com/v1',\n                timeout: 360000,\n            });\n        }\n        this.openRouterApiKey = openRouterApiKey;\n        if (openRouterApiKey) {\n            this.openRouterClient = new openai_1.default({\n                apiKey: openRouterApiKey,\n                baseURL: 'https://openrouter.ai/api/v1',\n                timeout: 360000\n            });\n        }\n        this.googleApiKey = googleApiKey;\n        if (googleApiKey) {\n            this.googleClient = new openai_1.default({\n                apiKey: googleApiKey,\n                baseURL: 'https://generativelanguage.googleapis.com/v1beta/openai',\n                timeout: 360000,\n            });\n        }\n        this.cerebrasApiKey = cerebrasApiKey;\n        if (cerebrasApiKey) {\n            this.cerebrasClient = new cerebras_cloud_sdk_1.default({\n                apiKey: cerebrasApiKey,\n                timeout: 360000,\n            });\n        }\n        this.perplexityApiKey = perplexityApiKey;\n        if (perplexityApiKey) {\n            this.perplexityClient = new openai_1.default({\n                apiKey: perplexityApiKey,\n                baseURL: 'https://api.perplexity.ai',\n                timeout: 360000,\n            });\n        }\n        this.openaiApiKey = openaiApiKey;\n        if (openaiApiKey) {\n            this.openaiClient = new openai_1.default({\n                apiKey: openaiApiKey,\n                baseURL: 'https://api.openai.com/v1',\n                timeout: 360000,\n            });\n        }\n        this.ollamaBaseUrl = ollamaBaseUrl || 'http://localhost:11434';\n        // Ensure Ollama base URL has proper protocol\n        let cleanOllamaUrl = this.ollamaBaseUrl;\n        if (!cleanOllamaUrl.startsWith('http://') && !cleanOllamaUrl.startsWith('https://')) {\n            cleanOllamaUrl = `http://${cleanOllamaUrl}`;\n        }\n        this.ollamaClient = new openai_1.default({\n            apiKey: 'ollama',\n            baseURL: cleanOllamaUrl + '/v1',\n            timeout: 360000,\n        });\n        if (model) {\n            session_manager_1.sessionManager.setCurrentModel(model);\n        }\n    }\n    getClientForModel(model) {\n        // First check added models to get the correct provider\n        const addedModels = require('../utils/added-models').loadAddedModels();\n        const addedModel = addedModels.find((m) => m.modelName === model);\n        if (addedModel) {\n            const providerName = addedModel.providerName.toLowerCase();\n            switch (providerName) {\n                case 'openrouter':\n                    if (!this.openRouterClient) {\n                        throw new Error('OpenRouter API key not provided. Please configure it in /providers.');\n                    }\n                    return this.openRouterClient;\n                case 'anthropic':\n                    if (!this.anthropicClient) {\n                        throw new Error('Anthropic API key not provided. Please configure it in /providers.');\n                    }\n                    return this.anthropicClient;\n                case 'google':\n                    if (!this.googleClient) {\n                        throw new Error('Google API key not provided. Please configure it in /providers.');\n                    }\n                    return this.googleClient;\n                case 'xai':\n                    return this.xaiClient;\n                case 'groq':\n                    if (!this.groqClient) {\n                        throw new Error('Groq API key not provided. Please configure it in /providers.');\n                    }\n                    return this.groqClient;\n                case 'cerebras':\n                    if (!this.cerebrasClient) {\n                        throw new Error('Cerebras API key not provided. Please configure it in /providers.');\n                    }\n                    return this.cerebrasClient;\n                case 'perplexity':\n                    if (!this.perplexityClient) {\n                        throw new Error('Perplexity API key not provided. Please configure it in /providers.');\n                    }\n                    return this.perplexityClient;\n                case 'openai':\n                    if (!this.openaiClient) {\n                        throw new Error('OpenAI API key not provided. Please configure it in /providers.');\n                    }\n                    return this.openaiClient;\n                case 'ollama':\n                    return this.ollamaClient;\n            }\n        }\n        // OpenRouter models (access to multiple providers through one API)\n        const openRouterModels = [\n            'qwen/qwen3-235b-a22b-07-25',\n            'openai/gpt-4.1',\n            'qwen/qwen3-coder',\n            'deepseek/deepseek-r1-0528',\n            'deepseek/deepseek-chat',\n            'deepseek/deepseek-coder',\n            'z-ai/glm-4.5',\n            'meta-llama/llama-3.2-1b-instruct',\n            'anthropic/claude-3.5-sonnet',\n            'openai/gpt-4o',\n            'openai/gpt-3.5-turbo'\n        ];\n        // Anthropic models\n        const anthropicModels = [\n            'claude-sonnet-4-20250514',\n            'claude-3-5-sonnet-20241022',\n            'claude-3-opus-20240229'\n        ];\n        // Google models\n        const googleModels = [\n            'gemini-2.0-flash',\n            'gemini-2.5-flash',\n            'gemini-1.5-pro'\n        ];\n        // xAI models (Grok)\n        const xaiModels = [\n            'grok-4-latest',\n            'grok-3-latest',\n            'grok-3-fast',\n            'grok-3-mini-fast',\n            'grok-beta'\n        ];\n        // Groq models\n        const groqModels = [\n            'moonshotai/kimi-k2-instruct',\n            'llama-3.3-70b-versatile',\n            'llama3-8b-8192',\n            'llama3-70b-8192',\n            'llama-3.1-8b-instant',\n            'gemma2-9b-it'\n        ];\n        // Cerebras models\n        const cerebrasModels = [\n            'llama3.1-8b',\n            'llama-4-scout-17b-16e-instruct',\n            'llama-3.3-70b',\n            'qwen-3-32b',\n            'qwen-3-235b-a22b-instruct-2507'\n        ];\n        // Perplexity models\n        const perplexityModels = [\n            'sonar',\n            'sonar-pro',\n            'sonar-deep-research',\n            'llama-3.1-sonar-small-128k-online'\n        ];\n        // OpenAI models\n        const openaiModels = [\n            'gpt-4o',\n            'gpt-4o-mini',\n            'gpt-3.5-turbo',\n            'gpt-4'\n        ];\n        // Ollama models (dynamic - check by model format or known models)\n        const isOllamaModel = (modelName) => {\n            // Check if it's a known Ollama model format or common Ollama models\n            const commonOllamaModels = [\n                'llama2', 'llama2:7b', 'llama2:13b', 'llama2:70b',\n                'llama3', 'llama3:8b', 'llama3:70b', 'llama3.1', 'llama3.1:8b', 'llama3.1:70b', 'llama3.1:405b',\n                'llama3.2', 'llama3.2:3b', 'llama3.2:11b', 'llama3.2:90b',\n                'codellama', 'codellama:7b', 'codellama:13b', 'codellama:34b',\n                'mistral', 'mistral:7b', 'mistral:instruct',\n                'mixtral', 'mixtral:8x7b', 'mixtral:8x22b',\n                'qwen', 'qwen:4b', 'qwen:7b', 'qwen:14b', 'qwen:32b', 'qwen:72b',\n                'qwen2', 'qwen2:0.5b', 'qwen2:1.5b', 'qwen2:7b', 'qwen2:72b',\n                'qwen2.5', 'qwen2.5:0.5b', 'qwen2.5:1.5b', 'qwen2.5:3b', 'qwen2.5:7b', 'qwen2.5:14b', 'qwen2.5:32b', 'qwen2.5:72b',\n                'deepseek-coder', 'deepseek-coder:6.7b', 'deepseek-coder:33b',\n                'gemma', 'gemma:2b', 'gemma:7b', 'gemma2', 'gemma2:9b', 'gemma2:27b',\n                'phi', 'phi3', 'phi3:3.8b', 'phi3:14b',\n                'vicuna', 'vicuna:7b', 'vicuna:13b', 'vicuna:33b',\n                'orca-mini', 'orca-mini:3b', 'orca-mini:7b', 'orca-mini:13b',\n                'neural-chat', 'neural-chat:7b',\n                'starling-lm', 'starling-lm:7b',\n                'tinyllama', 'tinyllama:1.1b',\n                'wizard-vicuna-uncensored', 'wizard-vicuna-uncensored:7b', 'wizard-vicuna-uncensored:13b',\n                'nous-hermes', 'nous-hermes:7b', 'nous-hermes:13b', 'nous-hermes2',\n                'dolphin-mistral', 'dolphin-mistral:7b',\n                'solar', 'solar:10.7b'\n            ];\n            if (commonOllamaModels.includes(modelName.toLowerCase())) {\n                return true;\n            }\n            // Check for Ollama model format patterns (model:tag or model/variant)\n            return /^[a-zA-Z0-9._-]+:[a-zA-Z0-9._-]+$/.test(modelName) ||\n                /^[a-zA-Z0-9._-]+\\/[a-zA-Z0-9._-]+$/.test(modelName) ||\n                // Simple heuristic: if it doesn't match other providers and contains certain patterns\n                (modelName.includes('llama') || modelName.includes('qwen') || modelName.includes('mistral') ||\n                    modelName.includes('gemma') || modelName.includes('phi') || modelName.includes('deepseek')) &&\n                    !openRouterModels.includes(modelName) &&\n                    !anthropicModels.includes(modelName) &&\n                    !googleModels.includes(modelName) &&\n                    !xaiModels.includes(modelName) &&\n                    !groqModels.includes(modelName) &&\n                    !cerebrasModels.includes(modelName) &&\n                    !perplexityModels.includes(modelName) &&\n                    !openaiModels.includes(modelName);\n        };\n        if (openRouterModels.includes(model)) {\n            if (!this.openRouterClient) {\n                throw new Error('OpenRouter API key not provided. Please configure it in /providers.');\n            }\n            return this.openRouterClient;\n        }\n        else if (anthropicModels.includes(model)) {\n            if (!this.anthropicClient) {\n                throw new Error('Anthropic API key not provided. Please configure it in /providers.');\n            }\n            return this.anthropicClient;\n        }\n        else if (googleModels.includes(model)) {\n            if (!this.googleClient) {\n                throw new Error('Google API key not provided. Please configure it in /providers.');\n            }\n            return this.googleClient;\n        }\n        else if (xaiModels.includes(model)) {\n            return this.xaiClient; // Default xAI client\n        }\n        else if (groqModels.includes(model)) {\n            if (!this.groqClient) {\n                throw new Error('Groq API key not provided. Please configure it in /providers.');\n            }\n            return this.groqClient;\n        }\n        else if (cerebrasModels.includes(model)) {\n            if (!this.cerebrasClient) {\n                throw new Error('Cerebras API key not provided. Please configure it in /providers.');\n            }\n            return this.cerebrasClient;\n        }\n        else if (perplexityModels.includes(model)) {\n            if (!this.perplexityClient) {\n                throw new Error('Perplexity API key not provided. Please configure it in /providers.');\n            }\n            return this.perplexityClient;\n        }\n        else if (openaiModels.includes(model)) {\n            if (!this.openaiClient) {\n                throw new Error('OpenAI API key not provided. Please configure it in /providers.');\n            }\n            return this.openaiClient;\n        }\n        else if (isOllamaModel(model)) {\n            return this.ollamaClient;\n        }\n        // Default to XAI for unknown models or grok models\n        return this.xaiClient;\n    }\n    setModel(model) {\n        session_manager_1.sessionManager.setCurrentModel(model);\n    }\n    getCurrentModel() {\n        return session_manager_1.sessionManager.getCurrentModel();\n    }\n    getLastStreamingMetrics() {\n        return this.lastStreamingMetrics;\n    }\n    async chat(messages, tools, model) {\n        const startTime = Date.now();\n        const targetModel = model || session_manager_1.sessionManager.getCurrentModel();\n        try {\n            // Check if no model is configured\n            if (!targetModel) {\n                throw new Error('No model selected. Please configure a model first:\\n\\n1. Set up API keys: /providers\\n2. Add models: /add-model\\n3. Select a model: /models\\n\\nFor a quick start, try:\\n• /providers → Add your API keys\\n• /add-model → Add models from your providers\\n• /models → Select the current model');\n            }\n            const tokenCounter = (0, token_counter_1.createTokenCounter)(targetModel);\n            const inputTokens = tokenCounter.countMessageTokens(messages);\n            const client = this.getClientForModel(targetModel);\n            // Check if this is a Cerebras client\n            if (client === this.cerebrasClient) {\n                const requestBody = {\n                    model: targetModel,\n                    messages,\n                    temperature: session_manager_1.sessionManager.getTemperature(),\n                    max_completion_tokens: 4000,\n                    top_p: 0.95,\n                };\n                console.log(`DEBUG: Using Cerebras model: ${targetModel}`);\n                console.log(`DEBUG: Cerebras API Key present: ${this.cerebrasApiKey ? 'Yes' : 'No'}`);\n                const response = await client.chat.completions.create(requestBody);\n                const endTime = Date.now();\n                const durationMs = endTime - startTime;\n                // Calculate tokens and throughput for Cerebras\n                let outputTokens = 0;\n                if (response.usage?.completion_tokens) {\n                    outputTokens = response.usage.completion_tokens;\n                }\n                else {\n                    // Fallback: estimate from response content\n                    const content = response.choices[0]?.message?.content || '';\n                    outputTokens = tokenCounter.countTokens(content);\n                }\n                const totalTokens = inputTokens + outputTokens;\n                const outputTokensPerSecond = outputTokens / (durationMs / 1000);\n                // Add metrics to response (console display handled by streaming or agent)\n                // For non-streaming, estimate prefill as 30% of total time or max 1s\n                const prefillTime = Math.min(1000, Math.round(durationMs * 0.3));\n                const decodeTime = durationMs - prefillTime;\n                const decodeTokensPerSecond = decodeTime > 0 ? outputTokens / (decodeTime / 1000) : 0;\n                response.metrics = {\n                    prefillTimeMs: prefillTime,\n                    decodeTimeMs: decodeTime,\n                    outputTokens: outputTokens,\n                    tokensPerSecond: Math.round(decodeTokensPerSecond)\n                };\n                tokenCounter.dispose();\n                return response;\n            }\n            // Handle OpenAI-compatible clients\n            const openRouterProvider = (0, added_models_1.getOpenRouterProvider)(targetModel);\n            const requestBody = {\n                model: targetModel,\n                messages,\n                tools: tools || [],\n                tool_choice: tools ? 'auto' : undefined,\n                temperature: session_manager_1.sessionManager.getTemperature(),\n                max_tokens: 4000,\n            };\n            // If using OpenRouter client and have a provider preference, add provider routing\n            if (client === this.openRouterClient && openRouterProvider) {\n                requestBody.provider = {\n                    order: [openRouterProvider],\n                    allow_fallbacks: true\n                };\n                console.log(`DEBUG: Using preferred OpenRouter provider: ${openRouterProvider} for model: ${targetModel}`);\n            }\n            // Debug logging\n            console.log(`DEBUG: Using model: ${targetModel}`);\n            console.log(`DEBUG: Client type: ${client === this.openRouterClient ? 'OpenRouter' : client === this.groqClient ? 'Groq' : client === this.xaiClient ? 'XAI' : 'Other'}`);\n            console.log(`DEBUG: API Key present: ${this.openRouterApiKey ? 'Yes' : 'No'}`);\n            console.log(`DEBUG: Request payload:`, {\n                model: targetModel,\n                messages: messages.slice(0, 1),\n                provider: requestBody.provider,\n            });\n            const response = await client.chat.completions.create(requestBody);\n            const endTime = Date.now();\n            const durationMs = endTime - startTime;\n            // Calculate tokens and throughput\n            let outputTokens = 0;\n            if (response.usage?.completion_tokens) {\n                outputTokens = response.usage.completion_tokens;\n            }\n            else {\n                // Fallback: estimate from response content\n                const content = response.choices[0]?.message?.content || '';\n                outputTokens = tokenCounter.countTokens(content);\n            }\n            const totalTokens = inputTokens + outputTokens;\n            const outputTokensPerSecond = outputTokens / (durationMs / 1000);\n            // Add metrics to response (console display handled by streaming or agent)\n            // For non-streaming, estimate prefill as 30% of total time or max 1s\n            const prefillTime = Math.min(1000, Math.round(durationMs * 0.3));\n            const decodeTime = durationMs - prefillTime;\n            const decodeTokensPerSecond = decodeTime > 0 ? outputTokens / (decodeTime / 1000) : 0;\n            response.metrics = {\n                prefillTimeMs: prefillTime,\n                decodeTimeMs: decodeTime,\n                outputTokens: outputTokens,\n                tokensPerSecond: Math.round(decodeTokensPerSecond)\n            };\n            tokenCounter.dispose();\n            return response;\n        }\n        catch (error) {\n            const endTime = Date.now();\n            const durationMs = endTime - startTime;\n            console.log(`DEBUG: API Error for model ${targetModel} after ${(durationMs / 1000).toFixed(1)}s:`, error.message);\n            throw new Error(`API error: ${error.message}`);\n        }\n    }\n    async *chatStream(messages, tools, model) {\n        const startTime = Date.now();\n        const targetModel = model || session_manager_1.sessionManager.getCurrentModel();\n        let accumulatedContent = '';\n        let firstTokenTime = null;\n        try {\n            // Check if no model is configured\n            if (!targetModel) {\n                throw new Error('No model selected. Please configure a model first:\\n\\n1. Set up API keys: /providers\\n2. Add models: /add-model\\n3. Select a model: /models\\n\\nFor a quick start, try:\\n• /providers → Add your API keys\\n• /add-model → Add models from your providers\\n• /models → Select the current model');\n            }\n            const tokenCounter = (0, token_counter_1.createTokenCounter)(targetModel);\n            const inputTokens = tokenCounter.countMessageTokens(messages);\n            const client = this.getClientForModel(targetModel);\n            // Check if this is a Cerebras client\n            if (client === this.cerebrasClient) {\n                const requestBody = {\n                    model: targetModel,\n                    messages,\n                    temperature: session_manager_1.sessionManager.getTemperature(),\n                    max_completion_tokens: 4000,\n                    top_p: 0.95,\n                    stream: true,\n                };\n                console.log(`DEBUG: Streaming with Cerebras model: ${targetModel}`);\n                const stream = await client.chat.completions.create(requestBody);\n                for await (const chunk of stream) {\n                    if (chunk.choices?.[0]?.delta?.content) {\n                        if (firstTokenTime === null) {\n                            firstTokenTime = Date.now();\n                        }\n                        accumulatedContent += chunk.choices[0].delta.content;\n                    }\n                    yield chunk;\n                }\n                // Calculate and display metrics for Cerebras streaming\n                const endTime = Date.now();\n                const durationMs = endTime - startTime;\n                const outputTokens = tokenCounter.countTokens(accumulatedContent);\n                const totalTokens = inputTokens + outputTokens;\n                const outputTokensPerSecond = outputTokens / (durationMs / 1000);\n                // Calculate actual prefill and decode times\n                const prefillTime = firstTokenTime ? firstTokenTime - startTime : Math.round(durationMs * 0.3);\n                const decodeTime = firstTokenTime ? endTime - firstTokenTime : durationMs - prefillTime;\n                const decodeTokensPerSecond = decodeTime > 0 ? outputTokens / (decodeTime / 1000) : 0;\n                console.log(`\\x1b[34mprefill - ${prefillTime}ms\\x1b[0m | \\x1b[33mdecode - ${Math.round(decodeTokensPerSecond)} toks/sec (${outputTokens} out / ${decodeTime}ms)\\x1b[0m`);\n                this.lastStreamingMetrics = {\n                    prefillTimeMs: prefillTime,\n                    decodeTimeMs: decodeTime,\n                    outputTokens: outputTokens,\n                    tokensPerSecond: Math.round(decodeTokensPerSecond)\n                };\n                tokenCounter.dispose();\n                return;\n            }\n            // Handle OpenAI-compatible clients\n            const openRouterProvider = (0, added_models_1.getOpenRouterProvider)(targetModel);\n            const requestBody = {\n                model: targetModel,\n                messages,\n                tools: tools || [],\n                tool_choice: tools ? 'auto' : undefined,\n                temperature: session_manager_1.sessionManager.getTemperature(),\n                max_tokens: 4000,\n                stream: true,\n            };\n            // If using OpenRouter client and have a provider preference, add provider routing\n            if (client === this.openRouterClient && openRouterProvider) {\n                requestBody.provider = {\n                    order: [openRouterProvider],\n                    allow_fallbacks: true\n                };\n                console.log(`DEBUG: Streaming with preferred OpenRouter provider: ${openRouterProvider} for model: ${targetModel}`);\n            }\n            const stream = await client.chat.completions.create(requestBody);\n            for await (const chunk of stream) {\n                if (chunk.choices?.[0]?.delta?.content) {\n                    if (firstTokenTime === null) {\n                        firstTokenTime = Date.now();\n                    }\n                    accumulatedContent += chunk.choices[0].delta.content;\n                }\n                yield chunk;\n            }\n            // Calculate and display metrics for streaming\n            const endTime = Date.now();\n            const durationMs = endTime - startTime;\n            const outputTokens = tokenCounter.countTokens(accumulatedContent);\n            const totalTokens = inputTokens + outputTokens;\n            const outputTokensPerSecond = outputTokens / (durationMs / 1000);\n            // Calculate actual prefill and decode times\n            const prefillTime = firstTokenTime ? firstTokenTime - startTime : Math.round(durationMs * 0.3);\n            const decodeTime = firstTokenTime ? endTime - firstTokenTime : durationMs - prefillTime;\n            const decodeTokensPerSecond = decodeTime > 0 ? outputTokens / (decodeTime / 1000) : 0;\n            console.log(`\\x1b[34mprefill - ${prefillTime}ms\\x1b[0m | \\x1b[33mdecode - ${Math.round(decodeTokensPerSecond)} toks/sec (${outputTokens} out / ${decodeTime}ms)\\x1b[0m`);\n            this.lastStreamingMetrics = {\n                prefillTimeMs: prefillTime,\n                decodeTimeMs: decodeTime,\n                outputTokens: outputTokens,\n                tokensPerSecond: Math.round(decodeTokensPerSecond)\n            };\n            tokenCounter.dispose();\n        }\n        catch (error) {\n            const endTime = Date.now();\n            const durationMs = endTime - startTime;\n            console.log(`DEBUG: Streaming API Error for model ${targetModel} after ${(durationMs / 1000).toFixed(1)}s:`, error.message);\n            throw new Error(`API error: ${error.message}`);\n        }\n    }\n}\nexports.GigaClient = GigaClient;\n//# sourceMappingURL=client.js.map",
      "filePath": "../dist/giga/client.js",
      "embedding": [
        19.86,
        0.1,
        0.1,
        0.4,
        0.3,
        0.012665781011726641,
        0.05336865470804528,
        0.09677161422139444,
        0.09548812561273969,
        0.020851984186202877,
        0.0631475221449873,
        0.0441017380739261,
        0.006909021776177449,
        0.09185919213951048,
        0.04372480611349571,
        0.013608391865555115,
        0.08667898852669383,
        0.00109810819782028,
        0.00602549092271042,
        0.08550022650780502,
        0.03736875700490707,
        0.012318952137419526,
        0.04307221390250391,
        0.0018069441158541256,
        0.09656396647185445,
        0.03891918138659848,
        0.04888373509493363,
        0.045361666877276344,
        0.009657240739890738,
        0.036195983746723115,
        0.013515298372816576,
        0.007752936236065999,
        0.062694437114784,
        0.03191454271223063,
        0.038515872663507755,
        0.01778630160883332,
        0.08499910340334062,
        0.09570771460750306,
        0.00007283895787041361,
        0.09050825920998798,
        0.029391749791577704,
        0.09637287083240381,
        0.07570525986496784,
        0.08670649428662648,
        0.08742930609303166,
        0.0538221782041961,
        0.03183831011863965,
        0.02712009684844934,
        0.09585047818481525,
        0.08421911483536779,
        0.05518107040445635,
        0.0010612886597374583,
        0.09963136245403274,
        0.013731609220614194,
        0.07831952666572264,
        0.04240366853001022,
        0.017364079156183956,
        0.009775380509443356,
        0.049180451434791585,
        0.024588064573385516,
        0.07202911355710763,
        0.08009211177115866,
        0.08133447940248478,
        0.06664640566506967,
        0.09387407950040533,
        0.08965371545917433,
        0.04550985551094902,
        0.0481515635865328,
        0.07613284351020969,
        0.04424683791134444,
        0.006039032192726335,
        0.0901076387899428,
        0.024560533046091272,
        0.05347724336128865,
        0.07149596130524623,
        0.09373188999396616,
        0.011141267626601836,
        0.04682117126311283,
        0.043612897628759285,
        0.09775899510018951,
        0.008185130407409247,
        0.012070452436713076,
        0.06096209986177623,
        0.09461553621824766,
        0.035080375890779114,
        0.009363481216379988,
        0.006725792540557551,
        0.07255237994037163,
        0.004376514429231493,
        0.006290491045555924,
        0.004725767263086123,
        0.009422719670116476,
        0.03982399040639049,
        0.09519360728415982,
        0.021948035733396223,
        0.06030364418351519,
        0.08732225288487572,
        0.0959309421709733,
        0.047145811593441105,
        0.030532607578363125
      ]
    },
    {
      "content": "import { GrokTool } from './client';\nexport declare const GROK_TOOLS: GrokTool[];\nexport declare function getAllTools(): GrokTool[];\n",
      "filePath": "../dist/giga/tools.d.ts",
      "embedding": [
        0.17,
        0.1,
        0,
        0.1,
        0.2,
        0.03876393240151176,
        0.03680836498663307,
        0.0018834856259990263,
        0.05036309780648362,
        0.031859169420353564,
        0.03686638544357212,
        0.09354404064778989,
        0.02735363203681055,
        0.08709693511644931,
        0.05374345860413813,
        0.0651993983213634,
        0.010570039807403642,
        0.03974010759747046,
        0.039993549548886634,
        0.02303729323457874,
        0.06108344498863936,
        0.050723280361180505,
        0.06946097222759737,
        0.011880960240095374,
        0.04331347650623013,
        0.00910515076334043,
        0.013206927123561607,
        0.08365871760377457,
        0.0647445836269299,
        0.06387623325286224,
        0.04958110418366797,
        0.008248493469227758,
        0.027717127512054254,
        0.08051944513719682,
        0.04411237203616223,
        0.005405350919033103,
        0.033537866588510455,
        0.004683128927738878,
        0.05928075061607846,
        0.05924010330796754,
        0.05249698786097853,
        0.05208706355556028,
        0.023757174605665822,
        0.02218696864712102,
        0.05171013994934,
        0.03332505123163106,
        0.0795181525285974,
        0.03232862707742408,
        0.08774103493458218,
        0.002975841879642671,
        0.03876813073815062,
        0.03321941130192576,
        0.0975383139926805,
        0.013152105224994071,
        0.07760588073621104,
        0.07527411168907808,
        0.007965112593303592,
        0.08825284490497469,
        0.028115256989350593,
        0.000592346841699043,
        0.00724077620341016,
        0.07628457323966258,
        0.051241699742446294,
        0.030186963693163482,
        0.03019095077816062,
        0.036508874477443734,
        0.05726851833259353,
        0.024100088438597945,
        0.04457616644003562,
        0.040361120225204966,
        0.05901125084490695,
        0.048886258033766894,
        0.06381903036226613,
        0.00026668156074495243,
        0.07652633637893021,
        0.012936698009588922,
        0.06393684453135716,
        0.09926431759632437,
        0.028665019051138576,
        0.014216584856436287,
        0.09140197657836108,
        0.08406179075447179,
        0.01814398843512798,
        0.05115007738089494,
        0.04876254575033065,
        0.04581933670722641,
        0.04436710439863744,
        0.02377251647481692,
        0.012310711424691013,
        0.0792960394943511,
        0.02769023867439903,
        0.05346579573879273,
        0.004415545121066767,
        0.03488217419339747,
        0.0837224902741256,
        0.051621795224244996,
        0.08468365123133954,
        0.08750174925327217,
        0.07570102182218488,
        0.061578187179429124
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAllTools = exports.GROK_TOOLS = void 0;\nconst mcp_manager_1 = require(\"../mcp/mcp-manager\");\nexports.GROK_TOOLS = [\n    {\n        type: 'function',\n        function: {\n            name: 'view_file',\n            description: 'View contents of a file or list directory contents',\n            parameters: {\n                type: 'object',\n                properties: {\n                    path: {\n                        type: 'string',\n                        description: 'Path to file or directory to view'\n                    },\n                    start_line: {\n                        type: 'number',\n                        description: 'Starting line number for partial file view (optional)'\n                    },\n                    end_line: {\n                        type: 'number',\n                        description: 'Ending line number for partial file view (optional)'\n                    }\n                },\n                required: ['path']\n            }\n        }\n    },\n    {\n        type: 'function',\n        function: {\n            name: 'create_file',\n            description: 'Create a new file with specified content',\n            parameters: {\n                type: 'object',\n                properties: {\n                    path: {\n                        type: 'string',\n                        description: 'Path where the file should be created'\n                    },\n                    content: {\n                        type: 'string',\n                        description: 'Content to write to the file'\n                    }\n                },\n                required: ['path', 'content']\n            }\n        }\n    },\n    {\n        type: 'function',\n        function: {\n            name: 'str_replace_editor',\n            description: 'Replace specific text in a file',\n            parameters: {\n                type: 'object',\n                properties: {\n                    path: {\n                        type: 'string',\n                        description: 'Path to the file to edit'\n                    },\n                    old_str: {\n                        type: 'string',\n                        description: 'Text to replace (must match exactly)'\n                    },\n                    new_str: {\n                        type: 'string',\n                        description: 'Text to replace with'\n                    }\n                },\n                required: ['path', 'old_str', 'new_str']\n            }\n        }\n    },\n    {\n        type: 'function',\n        function: {\n            name: 'bash',\n            description: 'Execute a bash command',\n            parameters: {\n                type: 'object',\n                properties: {\n                    command: {\n                        type: 'string',\n                        description: 'The bash command to execute'\n                    }\n                },\n                required: ['command']\n            }\n        }\n    },\n    {\n        type: 'function',\n        function: {\n            name: 'create_todo_list',\n            description: 'Create a new todo list for planning and tracking tasks',\n            parameters: {\n                type: 'object',\n                properties: {\n                    todos: {\n                        type: 'array',\n                        description: 'Array of todo items',\n                        items: {\n                            type: 'object',\n                            properties: {\n                                id: {\n                                    type: 'string',\n                                    description: 'Unique identifier for the todo item'\n                                },\n                                content: {\n                                    type: 'string',\n                                    description: 'Description of the todo item'\n                                },\n                                status: {\n                                    type: 'string',\n                                    enum: ['pending', 'in_progress', 'completed'],\n                                    description: 'Current status of the todo item'\n                                },\n                                priority: {\n                                    type: 'string',\n                                    enum: ['high', 'medium', 'low'],\n                                    description: 'Priority level of the todo item'\n                                }\n                            },\n                            required: ['id', 'content', 'status', 'priority']\n                        }\n                    }\n                },\n                required: ['todos']\n            }\n        }\n    },\n    {\n        type: 'function',\n        function: {\n            name: 'update_todo_list',\n            description: 'Update existing todos in the todo list',\n            parameters: {\n                type: 'object',\n                properties: {\n                    updates: {\n                        type: 'array',\n                        description: 'Array of todo updates',\n                        items: {\n                            type: 'object',\n                            properties: {\n                                id: {\n                                    type: 'string',\n                                    description: 'ID of the todo item to update'\n                                },\n                                status: {\n                                    type: 'string',\n                                    enum: ['pending', 'in_progress', 'completed'],\n                                    description: 'New status for the todo item'\n                                },\n                                content: {\n                                    type: 'string',\n                                    description: 'New content for the todo item'\n                                },\n                                priority: {\n                                    type: 'string',\n                                    enum: ['high', 'medium', 'low'],\n                                    description: 'New priority for the todo item'\n                                }\n                            },\n                            required: ['id']\n                        }\n                    }\n                },\n                required: ['updates']\n            }\n        }\n    },\n    {\n        type: 'function',\n        function: {\n            name: 'perplexity_search',\n            description: 'Search the web using Perplexity for current information, documentation, and research',\n            parameters: {\n                type: 'object',\n                properties: {\n                    query: {\n                        type: 'string',\n                        description: 'The search query to look up'\n                    },\n                    max_results: {\n                        type: 'number',\n                        description: 'Maximum number of results to return (default: 10)'\n                    },\n                    summarize: {\n                        type: 'boolean',\n                        description: 'Whether to summarize results for concise output (default: true)'\n                    }\n                },\n                required: ['query']\n            }\n        }\n    },\n    {\n        type: 'function',\n        function: {\n            name: 'list_mcp_tools',\n            description: 'List all available MCP tools from connected servers',\n            parameters: {\n                type: 'object',\n                properties: {},\n                required: []\n            }\n        }\n    },\n    {\n        type: 'function',\n        function: {\n            name: 'call_mcp_tool',\n            description: 'Call an MCP tool with specified arguments',\n            parameters: {\n                type: 'object',\n                properties: {\n                    tool_name: {\n                        type: 'string',\n                        description: 'Name of the MCP tool to call'\n                    },\n                    arguments: {\n                        type: 'object',\n                        description: 'Arguments to pass to the MCP tool'\n                    }\n                },\n                required: ['tool_name']\n            }\n        }\n    }\n];\nfunction getAllTools() {\n    const mcpManager = mcp_manager_1.McpManager.getInstance();\n    const mcpTools = mcpManager.getAllTools();\n    // Convert MCP tools to Grok tools\n    const dynamicMcpTools = mcpTools.map(tool => ({\n        type: 'function',\n        function: {\n            name: `mcp_${tool.serverName}_${tool.name}`,\n            description: `[MCP: ${tool.serverName}] ${tool.description || tool.name}`,\n            parameters: tool.inputSchema || {\n                type: 'object',\n                properties: {},\n                required: []\n            }\n        }\n    }));\n    return [...exports.GROK_TOOLS, ...dynamicMcpTools];\n}\nexports.getAllTools = getAllTools;\n//# sourceMappingURL=tools.js.map",
      "filePath": "../dist/giga/tools.js",
      "embedding": [
        6.64,
        2.1,
        0,
        0,
        0.6,
        0.028340650577945815,
        0.023497866514901503,
        0.02125220609836528,
        0.041102020604157546,
        0.03365470215078111,
        0.08257185129864025,
        0.054063833464669565,
        0.05786197783484766,
        0.05301058930562041,
        0.021672667792523505,
        0.05905292219883299,
        0.000005467251377866412,
        0.054251088099917855,
        0.06079764446594001,
        0.01743274023266884,
        0.06590685992196364,
        0.08974738576664168,
        0.04137398174836746,
        0.060584975369190386,
        0.07059160798174965,
        0.07368623703023792,
        0.09414383140828342,
        0.0821354106020401,
        0.029112045921025877,
        0.005112500015154853,
        0.08451064377015816,
        0.07389371881235172,
        0.05960503806798734,
        0.0868211625142423,
        0.028559208651392467,
        0.0688829201755383,
        0.09640512538751464,
        0.0620950680425612,
        0.08299044055423148,
        0.09538734847213473,
        0.06640879559639291,
        0.07519099257435925,
        0.020606712938096617,
        0.06651330436500973,
        0.0949873260070175,
        0.0556766372124665,
        0.0830151517479243,
        0.035452652015123785,
        0.09386166921174677,
        0.06729282172422979,
        0.0286797175837911,
        0.09043668520942606,
        0.04257873017035002,
        0.0928208041520947,
        0.040643428665359894,
        0.07106691824686896,
        0.08457038427624994,
        0.08556443110097797,
        0.05583431187044394,
        0.07773540704012412,
        0.07823941119238638,
        0.042392103550860906,
        0.04055627300954984,
        0.0791103930127402,
        0.03027163595720265,
        0.09833182675099958,
        0.09197791059024274,
        0.046792917280645566,
        0.007236689991712209,
        0.00015558475448906872,
        0.059198218837168554,
        0.0938296485629812,
        0.030862762440321812,
        0.012728698534866224,
        0.07189112713631332,
        0.03258300777354563,
        0.07080921056170303,
        0.0679572055137458,
        0.04968257432667375,
        0.05545860972172546,
        0.01765866130046768,
        0.07443269632094265,
        0.020404465846693566,
        0.016135318763241015,
        0.005003929964251053,
        0.09315697904573327,
        0.07652295983031976,
        0.09340643596434339,
        0.053755171848054874,
        0.075991888532021,
        0.00869448619575266,
        0.07736857025158891,
        0.04783129292202362,
        0.05777179224096401,
        0.0846834324936392,
        0.039625897182565775,
        0.00985033086267726,
        0.09858332276800624,
        0.007942497042916675,
        0.02879493989709774
      ]
    },
    {
      "content": "/// <reference types=\"react\" />\nimport { GigaAgent, ChatEntry } from \"../agent/giga-agent\";\nimport { AddedMcpServer } from \"../utils/added-mcp-servers\";\nimport { OpenRouterProvider } from \"../utils/openrouter-providers\";\nimport { AgentMode } from \"../types\";\ninterface UseInputHandlerProps {\n    agent: GigaAgent;\n    chatHistory: ChatEntry[];\n    setChatHistory: React.Dispatch<React.SetStateAction<ChatEntry[]>>;\n    setIsProcessing: (processing: boolean) => void;\n    setIsStreaming: (streaming: boolean) => void;\n    setTokenCount: (count: number) => void;\n    setProcessingTime: (time: number) => void;\n    processingStartTime: React.MutableRefObject<number>;\n    isProcessing: boolean;\n    isStreaming: boolean;\n    isConfirmationActive?: boolean;\n    onModeChange?: (mode: AgentMode) => void;\n}\ninterface CommandSuggestion {\n    command: string;\n    description: string;\n}\ninterface ModelOption {\n    model: string;\n    description: string;\n}\ninterface Provider {\n    name: string;\n    keyName: string;\n    description: string;\n}\nexport declare function useInputHandler({ agent, chatHistory, setChatHistory, setIsProcessing, setIsStreaming, setTokenCount, setProcessingTime, processingStartTime, isProcessing, isStreaming, isConfirmationActive, onModeChange, }: UseInputHandlerProps): {\n    input: string;\n    showCommandSuggestions: boolean;\n    selectedCommandIndex: number;\n    showModelSelection: boolean;\n    selectedModelIndex: number;\n    showProviderSettings: boolean;\n    selectedProviderIndex: number;\n    showAddModel: boolean;\n    showDeleteModel: boolean;\n    showPromptsList: boolean;\n    showAddPrompt: boolean;\n    showDeletePrompt: boolean;\n    showMcpServers: boolean;\n    showAddMcpServer: boolean;\n    showDeleteMcpServer: boolean;\n    selectedMcpServerIndex: number;\n    showConversationHistory: boolean;\n    showTemperatureSelector: boolean;\n    currentTemperature: number;\n    showExpertModels: boolean;\n    showRouteSelection: boolean;\n    routeViewMode: \"providers\" | \"models\";\n    selectedRouteModelIndex: number;\n    selectedRouteProviderIndex: number;\n    currentSelectedModel: string;\n    routeProviders: OpenRouterProvider[];\n    isLoadingProviders: boolean;\n    showFileFinder: boolean;\n    selectedFileIndex: number;\n    filteredFiles: string[];\n    fileQuery: string;\n    commandSuggestions: CommandSuggestion[];\n    availableModels: ModelOption[];\n    mcpServers: AddedMcpServer[];\n    providerList: Provider[];\n    closeProviderSettings: () => void;\n    closeAddModel: () => void;\n    closeDeleteModel: () => void;\n    closePromptsList: () => void;\n    closeAddPrompt: () => void;\n    closeDeletePrompt: () => void;\n    closeMcpServers: () => void;\n    closeAddMcpServer: () => void;\n    closeDeleteMcpServer: () => void;\n    closeConversationHistory: () => void;\n    closeTemperatureSelector: () => void;\n    closeExpertModels: () => void;\n    closeRouteSelection: () => void;\n    closeFileFinder: () => void;\n    refreshModels: () => void;\n    refreshMcpServers: () => void;\n    openRouterModels: ModelOption[];\n    agent: GigaAgent;\n};\nexport {};\n",
      "filePath": "../dist/hooks/use-input-handler.d.ts",
      "embedding": [
        2.61,
        0.1,
        0,
        0.4,
        0.2,
        0.0643622156768243,
        0.04840577349971586,
        0.0731981204961241,
        0.02815781275817998,
        0.025308128620788097,
        0.021178188869678007,
        0.05961804307913049,
        0.02201597201422344,
        0.01587447563070693,
        0.09247632009252392,
        0.02588022380924131,
        0.07910330763496157,
        0.05361071834339525,
        0.02774709485074797,
        0.046869322368391725,
        0.08097250460380884,
        0.02238089451524551,
        0.04783520160500879,
        0.015018491693701687,
        0.01350015991058281,
        0.029375056168428317,
        0.07704833357167612,
        0.011136586338289923,
        0.06590029527580603,
        0.09076731635342221,
        0.006006554492610783,
        0.07773106255346532,
        0.036195535455203064,
        0.09160459567019552,
        0.04502312864258856,
        0.07985628050182018,
        0.05218807732260511,
        0.05797411043289155,
        0.08001086549555841,
        0.07069599536507504,
        0.056320511178399736,
        0.05126332826596001,
        0.05112119399911569,
        0.05579729747013831,
        0.06039828763296186,
        0.01715774219788373,
        0.07535854365274931,
        0.07350750375391311,
        0.05779768150267628,
        0.03778746497843752,
        0.018203471499787773,
        0.03581233124867259,
        0.03580059029961209,
        0.036011223319643806,
        0.04532189907335881,
        0.015411639924104936,
        0.08400844952519311,
        0.07590908045682843,
        0.03147344914295578,
        0.020635564907984495,
        0.06127555335923496,
        0.06118892676506743,
        0.06751311629416878,
        0.062436433865500254,
        0.07939079963810394,
        0.09103842665881641,
        0.0031383414861608006,
        0.019103727577372387,
        0.060515351687380405,
        0.07362595901200984,
        0.03792572354573629,
        0.08617110261510849,
        0.08465123647971404,
        0.059046859434762525,
        0.016283302297723012,
        0.08635304437913505,
        0.0668162628869985,
        0.032545806714531327,
        0.001670372304807588,
        0.028834678175685736,
        0.03449640375767956,
        0.00015814388046132556,
        0.04506311618980041,
        0.03366860323767734,
        0.057235774021596214,
        0.05711853907238404,
        0.07429524355340843,
        0.01177437539144507,
        0.04690917544073773,
        0.06250275104320008,
        0.0010959011899001724,
        0.09770988640021865,
        0.061630480232140544,
        0.014156118214379744,
        0.021093398892280124,
        0.07987899620782797,
        0.07470198007039731,
        0.004550271895986869,
        0.054939868685254294,
        0.020341368907586078
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useInputHandler = void 0;\nconst react_1 = require(\"react\");\nconst ink_1 = require(\"ink\");\nconst confirmation_service_1 = require(\"../utils/confirmation-service\");\nconst added_mcp_servers_1 = require(\"../utils/added-mcp-servers\");\nconst fuzzy_search_1 = require(\"../utils/fuzzy-search\");\nconst instance_models_1 = require(\"../utils/instance-models\");\nconst file_finder_1 = require(\"../utils/file-finder\");\nconst added_models_1 = require(\"../utils/added-models\");\nconst session_manager_1 = require(\"../utils/session-manager\");\nconst mode_manager_1 = require(\"../utils/mode-manager\");\n// Helper function to get OpenRouter models consistently\nconst getOpenRouterModels = (models) => {\n    return models.filter(model => model.description.includes('(OpenRouter)'));\n};\nfunction useInputHandler({ agent, chatHistory, setChatHistory, setIsProcessing, setIsStreaming, setTokenCount, setProcessingTime, processingStartTime, isProcessing, isStreaming, isConfirmationActive = false, onModeChange, }) {\n    const [input, setInput] = (0, react_1.useState)(\"\");\n    const [showCommandSuggestions, setShowCommandSuggestions] = (0, react_1.useState)(false);\n    const [selectedCommandIndex, setSelectedCommandIndex] = (0, react_1.useState)(0);\n    const [showModelSelection, setShowModelSelection] = (0, react_1.useState)(false);\n    const [selectedModelIndex, setSelectedModelIndex] = (0, react_1.useState)(0);\n    const [showProviderSettings, setShowProviderSettings] = (0, react_1.useState)(false);\n    const [selectedProviderIndex, setSelectedProviderIndex] = (0, react_1.useState)(0);\n    const [showAddModel, setShowAddModel] = (0, react_1.useState)(false);\n    const [showDeleteModel, setShowDeleteModel] = (0, react_1.useState)(false);\n    const [showPromptsList, setShowPromptsList] = (0, react_1.useState)(false);\n    const [showAddPrompt, setShowAddPrompt] = (0, react_1.useState)(false);\n    const [showDeletePrompt, setShowDeletePrompt] = (0, react_1.useState)(false);\n    const [showMcpServers, setShowMcpServers] = (0, react_1.useState)(false);\n    const [showAddMcpServer, setShowAddMcpServer] = (0, react_1.useState)(false);\n    const [showDeleteMcpServer, setShowDeleteMcpServer] = (0, react_1.useState)(false);\n    const [selectedMcpServerIndex, setSelectedMcpServerIndex] = (0, react_1.useState)(0);\n    const [dynamicModels, setDynamicModels] = (0, react_1.useState)([]);\n    const [mcpServers, setMcpServers] = (0, react_1.useState)([]);\n    const [showConversationHistory, setShowConversationHistory] = (0, react_1.useState)(false);\n    const [showTemperatureSelector, setShowTemperatureSelector] = (0, react_1.useState)(false);\n    const [currentTemperature, setCurrentTemperature] = (0, react_1.useState)(0.7);\n    const [showExpertModels, setShowExpertModels] = (0, react_1.useState)(false);\n    // Route selection state\n    const [showRouteSelection, setShowRouteSelection] = (0, react_1.useState)(false);\n    const [routeViewMode, setRouteViewMode] = (0, react_1.useState)('models');\n    const [selectedRouteModelIndex, setSelectedRouteModelIndex] = (0, react_1.useState)(0);\n    const [selectedRouteProviderIndex, setSelectedRouteProviderIndex] = (0, react_1.useState)(0);\n    const [currentSelectedModel, setCurrentSelectedModel] = (0, react_1.useState)('');\n    const [routeProviders, setRouteProviders] = (0, react_1.useState)([]);\n    const [isLoadingProviders, setIsLoadingProviders] = (0, react_1.useState)(false);\n    // Command history state\n    const [commandHistory, setCommandHistory] = (0, react_1.useState)([]);\n    const [historyIndex, setHistoryIndex] = (0, react_1.useState)(-1);\n    const [temporaryInput, setTemporaryInput] = (0, react_1.useState)(\"\");\n    // File finder state\n    const [showFileFinder, setShowFileFinder] = (0, react_1.useState)(false);\n    const [selectedFileIndex, setSelectedFileIndex] = (0, react_1.useState)(0);\n    const [availableFiles, setAvailableFiles] = (0, react_1.useState)([]);\n    const [filteredFiles, setFilteredFiles] = (0, react_1.useState)([]);\n    const [fileQuery, setFileQuery] = (0, react_1.useState)(\"\");\n    // Streaming content batching state\n    const streamingBufferRef = (0, react_1.useRef)(\"\");\n    const batchTimeoutRef = (0, react_1.useRef)(null);\n    // Double Ctrl+C detection as fallback\n    const lastCtrlCRef = (0, react_1.useRef)(0);\n    const ctrlCTimeoutRef = (0, react_1.useRef)(null);\n    // Batched state update for streaming content\n    const flushStreamingBuffer = (0, react_1.useCallback)(() => {\n        if (streamingBufferRef.current) {\n            const content = streamingBufferRef.current;\n            streamingBufferRef.current = \"\";\n            setChatHistory((prev) => prev.map((entry, idx) => idx === prev.length - 1 && entry.isStreaming\n                ? { ...entry, content: entry.content + content }\n                : entry));\n        }\n        if (batchTimeoutRef.current) {\n            clearTimeout(batchTimeoutRef.current);\n            batchTimeoutRef.current = null;\n        }\n    }, [setChatHistory]);\n    // Debounced streaming content update\n    const addStreamingContent = (0, react_1.useCallback)((content) => {\n        streamingBufferRef.current += content;\n        if (batchTimeoutRef.current) {\n            clearTimeout(batchTimeoutRef.current);\n        }\n        batchTimeoutRef.current = setTimeout(() => {\n            setImmediate(flushStreamingBuffer);\n        }, 16); // 16ms debounce for ~60fps updates\n    }, [flushStreamingBuffer]);\n    // Helper function to add command to history\n    const addToHistory = (command) => {\n        if (command.trim() && command !== commandHistory[commandHistory.length - 1]) {\n            setCommandHistory(prev => [...prev, command.trim()]);\n        }\n        setHistoryIndex(-1);\n        setTemporaryInput(\"\");\n    };\n    const closeProviderSettings = () => {\n        setShowProviderSettings(false);\n        setSelectedProviderIndex(0);\n    };\n    const closeAddModel = () => {\n        setShowAddModel(false);\n    };\n    const closeDeleteModel = () => {\n        setShowDeleteModel(false);\n    };\n    const closePromptsList = () => {\n        setShowPromptsList(false);\n    };\n    const closeAddPrompt = () => {\n        setShowAddPrompt(false);\n    };\n    const closeDeletePrompt = () => {\n        setShowDeletePrompt(false);\n    };\n    const closeMcpServers = () => {\n        setShowMcpServers(false);\n        setSelectedMcpServerIndex(0);\n    };\n    const closeAddMcpServer = () => {\n        setShowAddMcpServer(false);\n    };\n    const closeDeleteMcpServer = () => {\n        setShowDeleteMcpServer(false);\n    };\n    const closeRouteSelection = () => {\n        setShowRouteSelection(false);\n        setRouteViewMode('models');\n        setSelectedRouteModelIndex(0);\n        setSelectedRouteProviderIndex(0);\n        setCurrentSelectedModel('');\n        setRouteProviders([]);\n        setIsLoadingProviders(false);\n    };\n    const closeConversationHistory = () => {\n        setShowConversationHistory(false);\n    };\n    const closeTemperatureSelector = () => {\n        setShowTemperatureSelector(false);\n    };\n    const closeExpertModels = () => {\n        setShowExpertModels(false);\n    };\n    const closeFileFinder = () => {\n        setShowFileFinder(false);\n        setSelectedFileIndex(0);\n        setFilteredFiles([]);\n        setFileQuery(\"\");\n    };\n    const updateFileFinder = (currentInput) => {\n        const queryInfo = (0, file_finder_1.extractFileQuery)(currentInput);\n        if (queryInfo) {\n            const { query, isDirectory } = queryInfo;\n            setFileQuery(query);\n            if (isDirectory) {\n                // Handle directory search - use simple filtering\n                const filtered = (0, file_finder_1.getFilteredItems)(availableFiles, query, true);\n                setFilteredFiles(filtered);\n                setShowFileFinder(true); // Always show when @ query is active\n                setSelectedFileIndex(0);\n            }\n            else {\n                // Handle file search\n                if (query === '') {\n                    // Just @ typed, show recent/common files\n                    const recentFiles = availableFiles\n                        .filter(file => !file.isDirectory)\n                        .map(file => file.relativePath)\n                        .sort()\n                        .slice(0, 10);\n                    setFilteredFiles(recentFiles);\n                }\n                else {\n                    // Use fuzzy search for better matching\n                    const filtered = (0, fuzzy_search_1.fuzzySearch)(query, availableFiles.filter(file => !file.isDirectory), (file) => file.relativePath, 10).map(file => file.relativePath);\n                    setFilteredFiles(filtered);\n                }\n                setShowFileFinder(true); // Always show when @ query is active\n                setSelectedFileIndex(0);\n            }\n        }\n        else {\n            setShowFileFinder(false);\n            setFilteredFiles([]);\n            setFileQuery(\"\");\n        }\n    };\n    const refreshModels = () => {\n        const instanceModels = (0, instance_models_1.getInstanceAvailableModels)();\n        const modelOptions = instanceModels.map(model => ({\n            model: model.model,\n            description: `${model.description}${model.isFavorite ? ' ⭐' : ''}${model.isRecentlyUsed ? ' 🕒' : ''}`\n        }));\n        setDynamicModels(modelOptions);\n    };\n    const refreshMcpServers = () => {\n        const addedServers = (0, added_mcp_servers_1.loadAddedMcpServers)();\n        setMcpServers(addedServers);\n    };\n    // Helper function to get current filtered suggestions based on input\n    const getFilteredSuggestions = (currentInput) => {\n        return currentInput.startsWith(\"/\")\n            ? (0, fuzzy_search_1.fuzzySearch)(currentInput.substring(1), // Remove the \"/\" for fuzzy matching\n            commandSuggestions.filter(s => s.command.startsWith(\"/\")), (suggestion) => suggestion.command.substring(1), // Remove \"/\" for matching\n            8)\n            : (0, fuzzy_search_1.fuzzySearch)(currentInput, commandSuggestions, (suggestion) => suggestion.command, 8);\n    };\n    (0, react_1.useEffect)(() => {\n        refreshModels();\n        refreshMcpServers();\n        setCurrentTemperature(session_manager_1.sessionManager.getTemperature());\n        // Load available files\n        try {\n            const files = (0, file_finder_1.getAllFiles)();\n            setAvailableFiles(files);\n        }\n        catch (error) {\n            console.error('Failed to load files:', error);\n        }\n        // Cleanup function to clear any pending timeouts\n        return () => {\n            if (batchTimeoutRef.current) {\n                clearTimeout(batchTimeoutRef.current);\n                batchTimeoutRef.current = null;\n            }\n            if (ctrlCTimeoutRef.current) {\n                clearTimeout(ctrlCTimeoutRef.current);\n                ctrlCTimeoutRef.current = null;\n            }\n        };\n    }, []);\n    const { exit } = (0, ink_1.useApp)();\n    const commandSuggestions = [\n        { command: \"/help\", description: \"Show help information\" },\n        { command: \"/clear\", description: \"Clear chat history\" },\n        { command: \"/history\", description: \"Browse conversation history\" },\n        { command: \"/models\", description: \"Switch Grok Model\" },\n        { command: \"/route\", description: \"Configure model provider routing\" },\n        { command: \"/add-model\", description: \"Add models from providers\" },\n        { command: \"/delete-model\", description: \"Delete added models\" },\n        { command: \"/prompts\", description: \"View custom prompts\" },\n        { command: \"/add-prompt\", description: \"Add custom prompt\" },\n        { command: \"/delete-prompt\", description: \"Delete custom prompt\" },\n        { command: \"/mcps\", description: \"View MCP servers\" },\n        { command: \"/add-mcp\", description: \"Add MCP server\" },\n        { command: \"/delete-mcp\", description: \"Delete MCP server\" },\n        { command: \"/sampling\", description: \"Adjust sampling temperature\" },\n        { command: \"/experts\", description: \"Configure expert model routing\" },\n        { command: \"/providers\", description: \"Configure API Keys\" },\n        { command: \"/exit\", description: \"Exit the application\" },\n    ];\n    const availableModels = [];\n    const providerList = [\n        { name: \"OpenRouter\", keyName: \"openRouterApiKey\", description: \"OpenRouter API (Multi-model access)\" },\n        { name: \"Anthropic\", keyName: \"anthropicApiKey\", description: \"Claude models\" },\n        { name: \"Google\", keyName: \"googleApiKey\", description: \"Gemini models\" },\n        { name: \"xAI\", keyName: \"xaiApiKey\", description: \"Grok models\" },\n        { name: \"Groq\", keyName: \"groqApiKey\", description: \"Fast inference\" },\n        { name: \"Cerebras\", keyName: \"cerebrasApiKey\", description: \"Cerebras models\" },\n        { name: \"Perplexity\", keyName: \"perplexityApiKey\", description: \"Perplexity models\" },\n        { name: \"OpenAI\", keyName: \"openaiApiKey\", description: \"GPT models\" },\n        { name: \"Ollama\", keyName: \"ollamaBaseUrl\", description: \"Local Ollama models\" },\n    ];\n    const handleDirectCommand = async (input) => {\n        const trimmedInput = input.trim();\n        if (trimmedInput === \"/clear\") {\n            // Reset chat history\n            setChatHistory([]);\n            // Reset processing states\n            setIsProcessing(false);\n            setIsStreaming(false);\n            setTokenCount(0);\n            setProcessingTime(0);\n            processingStartTime.current = 0;\n            // Reset confirmation service session flags\n            const confirmationService = confirmation_service_1.ConfirmationService.getInstance();\n            confirmationService.resetSession();\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/help\") {\n            const helpEntry = {\n                type: \"assistant\",\n                content: `GIGA Help:\n\nBuilt-in Commands:\n  /clear        - Clear chat history\n  /help         - Show this help\n  /history      - Browse conversation history (Ctrl+H)\n  /models       - Switch models\n  /route        - Configure model provider routing\n  /add-model    - Add models from providers\n  /delete-model - Delete added models\n  /prompts      - View custom prompts\n  /add-prompt   - Add custom prompt\n  /delete-prompt- Delete custom prompt\n  /mcps         - View MCP servers\n  /add-mcp      - Add MCP server\n  /delete-mcp   - Delete MCP server\n  /sampling     - Adjust sampling temperature\n  /experts      - Configure expert model routing\n  /providers    - Configure API keys\n  /exit         - Exit application\n  exit, quit    - Exit application\n\nDirect Commands (executed immediately):\n  ls [path]   - List directory contents\n  pwd         - Show current directory  \n  cd <path>   - Change directory\n  cat <file>  - View file contents\n  mkdir <dir> - Create directory\n  touch <file>- Create empty file\n\nFor complex operations, just describe what you want in natural language.\nExamples:\n  \"edit package.json and add a new script\"\n  \"create a new React component called Header\"\n  \"show me all TypeScript files in this project\"`,\n                timestamp: new Date(),\n            };\n            setChatHistory((prev) => [...prev, helpEntry]);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/history\") {\n            setShowConversationHistory(true);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/models\") {\n            setShowModelSelection(true);\n            setSelectedModelIndex(0);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/providers\") {\n            setShowProviderSettings(true);\n            setSelectedProviderIndex(0);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/add-model\") {\n            setShowAddModel(true);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/delete-model\") {\n            setShowDeleteModel(true);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/mcps\") {\n            setShowMcpServers(true);\n            setSelectedMcpServerIndex(0);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/add-mcp\") {\n            setShowAddMcpServer(true);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/delete-mcp\") {\n            setShowDeleteMcpServer(true);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/prompts\") {\n            setShowPromptsList(true);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/add-prompt\") {\n            setShowAddPrompt(true);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/delete-prompt\") {\n            setShowDeletePrompt(true);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/route\") {\n            setShowRouteSelection(true);\n            setRouteViewMode('models');\n            setSelectedRouteModelIndex(0);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/sampling\") {\n            setShowTemperatureSelector(true);\n            setCurrentTemperature(session_manager_1.sessionManager.getTemperature());\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput === \"/experts\") {\n            setShowExpertModels(true);\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        if (trimmedInput.startsWith(\"/models \")) {\n            const modelArg = trimmedInput.split(\" \")[1];\n            const modelNames = dynamicModels.map(m => m.model);\n            if (modelNames.includes(modelArg)) {\n                (0, instance_models_1.onModelSelected)(modelArg);\n                agent.setModel(modelArg);\n                const confirmEntry = {\n                    type: \"assistant\",\n                    content: `✓ Switched to model: ${modelArg}`,\n                    timestamp: new Date(),\n                };\n                setChatHistory((prev) => [...prev, confirmEntry]);\n            }\n            else {\n                const errorEntry = {\n                    type: \"assistant\",\n                    content: `Invalid model: ${modelArg}\n\nAvailable models: ${modelNames.join(\", \")}`,\n                    timestamp: new Date(),\n                };\n                setChatHistory((prev) => [...prev, errorEntry]);\n            }\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        const directBashCommands = [\n            \"ls\", \"pwd\", \"cd\", \"cat\", \"mkdir\", \"touch\", \"echo\", \"grep\", \"find\", \"cp\", \"mv\", \"rm\",\n        ];\n        const firstWord = trimmedInput.split(\" \")[0];\n        if (directBashCommands.includes(firstWord)) {\n            const userEntry = {\n                type: \"user\",\n                content: trimmedInput,\n                timestamp: new Date(),\n            };\n            setChatHistory((prev) => [...prev, userEntry]);\n            try {\n                const result = await agent.executeBashCommand(trimmedInput);\n                const commandEntry = {\n                    type: \"tool_result\",\n                    content: result.success\n                        ? result.output || \"Command completed\"\n                        : result.error || \"Command failed\",\n                    timestamp: new Date(),\n                    toolCall: {\n                        id: `bash_${Date.now()}`,\n                        type: \"function\",\n                        function: {\n                            name: \"bash\",\n                            arguments: JSON.stringify({ command: trimmedInput }),\n                        },\n                    },\n                    toolResult: result,\n                };\n                setChatHistory((prev) => [...prev, commandEntry]);\n            }\n            catch (error) {\n                const errorEntry = {\n                    type: \"assistant\",\n                    content: `Error executing command: ${error.message}`,\n                    timestamp: new Date(),\n                };\n                setChatHistory((prev) => [...prev, errorEntry]);\n            }\n            addToHistory(trimmedInput);\n            setInput(\"\");\n            return true;\n        }\n        return false;\n    };\n    const processUserMessage = async (userInput) => {\n        const userEntry = {\n            type: \"user\",\n            content: userInput,\n            timestamp: new Date(),\n        };\n        setChatHistory((prev) => [...prev, userEntry]);\n        addToHistory(userInput);\n        setIsProcessing(true);\n        setInput(\"\");\n        try {\n            setIsStreaming(true);\n            let streamingEntry = null;\n            for await (const chunk of agent.processUserMessageStream(userInput)) {\n                switch (chunk.type) {\n                    case \"content\":\n                        if (chunk.content) {\n                            if (!streamingEntry) {\n                                const newStreamingEntry = {\n                                    type: \"assistant\",\n                                    content: chunk.content,\n                                    timestamp: new Date(),\n                                    isStreaming: true,\n                                };\n                                setChatHistory((prev) => [...prev, newStreamingEntry]);\n                                streamingEntry = newStreamingEntry;\n                            }\n                            else {\n                                // Use batched streaming content update\n                                addStreamingContent(chunk.content);\n                            }\n                        }\n                        break;\n                    case \"token_count\":\n                        if (chunk.tokenCount !== undefined) {\n                            setTokenCount(chunk.tokenCount);\n                        }\n                        break;\n                    case \"tool_calls\":\n                        if (chunk.toolCalls) {\n                            // Stop streaming for the current assistant message\n                            setChatHistory((prev) => prev.map((entry) => entry.isStreaming ? { ...entry, isStreaming: false, toolCalls: chunk.toolCalls } : entry));\n                            streamingEntry = null;\n                        }\n                        break;\n                    case \"tool_result\":\n                        if (chunk.toolCall && chunk.toolResult) {\n                            setChatHistory((prev) => prev.map((entry) => entry.isStreaming ? { ...entry, isStreaming: false } : entry));\n                            const toolResultEntry = {\n                                type: \"tool_result\",\n                                content: chunk.toolResult.success\n                                    ? chunk.toolResult.output || \"Success\"\n                                    : chunk.toolResult.error || \"Error occurred\",\n                                timestamp: new Date(),\n                                toolCall: chunk.toolCall,\n                                toolResult: chunk.toolResult,\n                            };\n                            setChatHistory((prev) => [...prev, toolResultEntry]);\n                            streamingEntry = null;\n                        }\n                        break;\n                    case \"done\":\n                        // Flush any remaining buffered content\n                        flushStreamingBuffer();\n                        if (streamingEntry) {\n                            setChatHistory((prev) => prev.map((entry) => entry.isStreaming ? { ...entry, isStreaming: false } : entry));\n                        }\n                        setIsStreaming(false);\n                        break;\n                }\n            }\n        }\n        catch (error) {\n            const errorEntry = {\n                type: \"assistant\",\n                content: `Error: ${error.message}`,\n                timestamp: new Date(),\n            };\n            setChatHistory((prev) => [...prev, errorEntry]);\n            setIsStreaming(false);\n        }\n        setIsProcessing(false);\n        processingStartTime.current = 0;\n    };\n    const handleRouteSelectionInput = async (inputChar, key) => {\n        if (key.escape) {\n            if (routeViewMode === 'providers') {\n                // Go back to models view\n                setRouteViewMode('models');\n                setSelectedRouteProviderIndex(0);\n                setCurrentSelectedModel('');\n                setRouteProviders([]);\n                setIsLoadingProviders(false);\n            }\n            else {\n                // Close route selection entirely\n                closeRouteSelection();\n            }\n            return;\n        }\n        if (routeViewMode === 'models') {\n            // Filter to only show OpenRouter models (same as the component filter)\n            const openRouterModels = getOpenRouterModels(dynamicModels);\n            if (key.upArrow) {\n                setSelectedRouteModelIndex((prev) => prev === 0 ? openRouterModels.length - 1 : prev - 1);\n                return;\n            }\n            if (key.downArrow) {\n                setSelectedRouteModelIndex((prev) => (prev + 1) % openRouterModels.length);\n                return;\n            }\n            if (key.return || key.tab) {\n                const selectedModel = openRouterModels[selectedRouteModelIndex];\n                console.log(`DEBUG: Selected model index: ${selectedRouteModelIndex}, Model: ${selectedModel?.model}`);\n                if (selectedModel) {\n                    // Move to provider selection\n                    setCurrentSelectedModel(selectedModel.model);\n                    setRouteViewMode('providers');\n                    setSelectedRouteProviderIndex(0);\n                    setIsLoadingProviders(true);\n                    setRouteProviders([]);\n                    try {\n                        const { loadApiKeys } = await Promise.resolve().then(() => __importStar(require('../utils/api-keys')));\n                        const { getModelProvidersWithFallback } = await Promise.resolve().then(() => __importStar(require('../utils/openrouter-providers')));\n                        const apiKeys = loadApiKeys();\n                        const openRouterKey = apiKeys.openRouterApiKey;\n                        if (openRouterKey) {\n                            const modelProviders = await getModelProvidersWithFallback(selectedModel.model, openRouterKey);\n                            setRouteProviders(modelProviders);\n                        }\n                        else {\n                            // Show error message\n                            const errorEntry = {\n                                type: \"assistant\",\n                                content: \"OpenRouter API key is required to fetch providers. Please configure it in /providers.\",\n                                timestamp: new Date(),\n                            };\n                            setChatHistory((prev) => [...prev, errorEntry]);\n                            closeRouteSelection();\n                        }\n                    }\n                    catch (error) {\n                        console.error('Error fetching providers:', error);\n                        setRouteProviders([]);\n                    }\n                    finally {\n                        setIsLoadingProviders(false);\n                    }\n                }\n                return;\n            }\n        }\n        else if (routeViewMode === 'providers') {\n            if (key.upArrow) {\n                setSelectedRouteProviderIndex((prev) => prev === 0 ? routeProviders.length - 1 : prev - 1);\n                return;\n            }\n            if (key.downArrow) {\n                setSelectedRouteProviderIndex((prev) => (prev + 1) % routeProviders.length);\n                return;\n            }\n            if (key.return || key.tab) {\n                const selectedProvider = routeProviders[selectedRouteProviderIndex];\n                console.log(`DEBUG: Setting provider ${selectedProvider?.id} for model ${currentSelectedModel}`);\n                if (selectedProvider && currentSelectedModel) {\n                    // Save OpenRouter provider preference to the global models file\n                    const success = (0, added_models_1.setOpenRouterProvider)(currentSelectedModel, selectedProvider.id);\n                    console.log(`DEBUG: setOpenRouterProvider result: ${success}`);\n                    if (success) {\n                        // Show confirmation message\n                        const confirmEntry = {\n                            type: \"assistant\",\n                            content: `✓ Set OpenRouter provider for ${currentSelectedModel}: ${selectedProvider.name}`,\n                            timestamp: new Date(),\n                        };\n                        setChatHistory((prev) => [...prev, confirmEntry]);\n                    }\n                    else {\n                        const errorEntry = {\n                            type: \"assistant\",\n                            content: `❌ Failed to set provider for ${currentSelectedModel} - model not found in OpenRouter`,\n                            timestamp: new Date(),\n                        };\n                        setChatHistory((prev) => [...prev, errorEntry]);\n                    }\n                    closeRouteSelection();\n                }\n                return;\n            }\n        }\n    };\n    (0, ink_1.useInput)(async (inputChar, key) => {\n        // Don't handle input if confirmation dialog or prompt dialogs are active\n        if (isConfirmationActive || showAddPrompt || showDeletePrompt || showPromptsList || showRouteSelection || showConversationHistory || showTemperatureSelector || showExpertModels) {\n            // Special handling for route selection\n            if (showRouteSelection) {\n                await handleRouteSelectionInput(inputChar, key);\n            }\n            // Special handling for temperature selector\n            if (showTemperatureSelector) {\n                if (key.escape) {\n                    closeTemperatureSelector();\n                    return;\n                }\n                if (key.leftArrow) {\n                    const newTemp = Math.max(0.0, currentTemperature - 0.1);\n                    setCurrentTemperature(Math.round(newTemp * 10) / 10);\n                    return;\n                }\n                if (key.rightArrow) {\n                    const newTemp = Math.min(1.0, currentTemperature + 0.1);\n                    setCurrentTemperature(Math.round(newTemp * 10) / 10);\n                    return;\n                }\n                if (key.return) {\n                    session_manager_1.sessionManager.setTemperature(currentTemperature);\n                    const confirmEntry = {\n                        type: \"assistant\",\n                        content: `✓ Temperature set to ${currentTemperature.toFixed(1)}`,\n                        timestamp: new Date(),\n                    };\n                    setChatHistory((prev) => [...prev, confirmEntry]);\n                    closeTemperatureSelector();\n                    return;\n                }\n            }\n            return;\n        }\n        // Fallback double Ctrl+C detection in case process-level handler doesn't work\n        if (key.ctrl && inputChar === \"c\") {\n            const now = Date.now();\n            const timeSinceLastCtrlC = now - lastCtrlCRef.current;\n            if (timeSinceLastCtrlC < 1000 && lastCtrlCRef.current > 0) {\n                // Second Ctrl+C within 1 second - exit immediately\n                if (ctrlCTimeoutRef.current) {\n                    clearTimeout(ctrlCTimeoutRef.current);\n                    ctrlCTimeoutRef.current = null;\n                }\n                console.log('\\n👋 Goodbye! (from useInput)');\n                exit();\n                return;\n            }\n            else {\n                // First Ctrl+C or too late - show message and start timer\n                lastCtrlCRef.current = now;\n                console.log('\\nPress Ctrl+C again within 1 second to exit (useInput)');\n                // Clear any existing timeout\n                if (ctrlCTimeoutRef.current) {\n                    clearTimeout(ctrlCTimeoutRef.current);\n                }\n                // Reset the timer after 1 second\n                ctrlCTimeoutRef.current = setTimeout(() => {\n                    lastCtrlCRef.current = 0;\n                    ctrlCTimeoutRef.current = null;\n                }, 1000);\n                return;\n            }\n        }\n        // Handle Shift+Tab for mode cycling\n        if (key.shift && key.tab) {\n            const newMode = mode_manager_1.modeManager.cycleMode();\n            agent.updateMode(newMode);\n            if (onModeChange) {\n                onModeChange(newMode);\n            }\n            const modeEntry = {\n                type: \"assistant\",\n                content: `🔄 Mode switched to: **${mode_manager_1.modeManager.getModeDisplayName()}** - ${mode_manager_1.modeManager.getModeDescription()}`,\n                timestamp: new Date(),\n            };\n            setChatHistory((prev) => [...prev, modeEntry]);\n            return;\n        }\n        if (key.ctrl && inputChar === \"h\") {\n            setShowConversationHistory(true);\n            return;\n        }\n        if (key.escape) {\n            if (showCommandSuggestions) {\n                setShowCommandSuggestions(false);\n                setSelectedCommandIndex(0);\n                return;\n            }\n            if (showModelSelection) {\n                setShowModelSelection(false);\n                setSelectedModelIndex(0);\n                return;\n            }\n            if (showProviderSettings) {\n                setShowProviderSettings(false);\n                setSelectedProviderIndex(0);\n                return;\n            }\n            if (showAddModel) {\n                setShowAddModel(false);\n                return;\n            }\n            if (showDeleteModel) {\n                setShowDeleteModel(false);\n                return;\n            }\n            if (showPromptsList) {\n                setShowPromptsList(false);\n                return;\n            }\n            if (showAddPrompt) {\n                setShowAddPrompt(false);\n                return;\n            }\n            if (showDeletePrompt) {\n                setShowDeletePrompt(false);\n                return;\n            }\n            if (showConversationHistory) {\n                setShowConversationHistory(false);\n                return;\n            }\n            if (showTemperatureSelector) {\n                setShowTemperatureSelector(false);\n                return;\n            }\n            if (showExpertModels) {\n                setShowExpertModels(false);\n                return;\n            }\n            if (showMcpServers) {\n                setShowMcpServers(false);\n                setSelectedMcpServerIndex(0);\n                return;\n            }\n            if (showAddMcpServer) {\n                setShowAddMcpServer(false);\n                return;\n            }\n            if (showDeleteMcpServer) {\n                setShowDeleteMcpServer(false);\n                return;\n            }\n            if (isProcessing || isStreaming) {\n                agent.abortCurrentOperation();\n                setIsProcessing(false);\n                setIsStreaming(false);\n                setTokenCount(0);\n                setProcessingTime(0);\n                processingStartTime.current = 0;\n                return;\n            }\n        }\n        if (showCommandSuggestions) {\n            const filteredSuggestions = getFilteredSuggestions(input);\n            if (key.upArrow) {\n                setSelectedCommandIndex((prev) => prev === 0 ? filteredSuggestions.length - 1 : prev - 1);\n                return;\n            }\n            if (key.downArrow) {\n                setSelectedCommandIndex((prev) => (prev + 1) % filteredSuggestions.length);\n                return;\n            }\n            if (key.tab || key.return) {\n                const selectedCommand = filteredSuggestions[selectedCommandIndex];\n                if (selectedCommand) {\n                    setInput(selectedCommand.command + \" \");\n                    setShowCommandSuggestions(false);\n                    setSelectedCommandIndex(0);\n                }\n                return;\n            }\n        }\n        if (showModelSelection) {\n            if (key.upArrow) {\n                setSelectedModelIndex((prev) => prev === 0 ? dynamicModels.length - 1 : prev - 1);\n                return;\n            }\n            if (key.downArrow) {\n                setSelectedModelIndex((prev) => (prev + 1) % dynamicModels.length);\n                return;\n            }\n            if (key.tab || key.return) {\n                const selectedModel = dynamicModels[selectedModelIndex];\n                (0, instance_models_1.onModelSelected)(selectedModel.model);\n                agent.setModel(selectedModel.model);\n                const confirmEntry = {\n                    type: \"assistant\",\n                    content: `✓ Switched to model: ${selectedModel.model}`,\n                    timestamp: new Date(),\n                };\n                setChatHistory((prev) => [...prev, confirmEntry]);\n                setShowModelSelection(false);\n                setSelectedModelIndex(0);\n                return;\n            }\n        }\n        if (showMcpServers) {\n            if (key.upArrow) {\n                setSelectedMcpServerIndex((prev) => prev === 0 ? mcpServers.length - 1 : prev - 1);\n                return;\n            }\n            if (key.downArrow) {\n                setSelectedMcpServerIndex((prev) => (prev + 1) % mcpServers.length);\n                return;\n            }\n            if (key.tab || key.return) {\n                const selectedServer = mcpServers[selectedMcpServerIndex];\n                if (selectedServer) {\n                    const serverInfo = {\n                        type: \"assistant\",\n                        content: `MCP Server: ${selectedServer.name}\nCommand: ${selectedServer.command}\n${selectedServer.args ? `Args: ${selectedServer.args.join(' ')}` : ''}\n${selectedServer.env ? `Environment: ${Object.entries(selectedServer.env).map(([k, v]) => `${k}=${v}`).join(' ')}` : ''}\n${selectedServer.description ? `Description: ${selectedServer.description}` : ''}\nAdded: ${new Date(selectedServer.dateAdded).toLocaleDateString()}`,\n                        timestamp: new Date(),\n                    };\n                    setChatHistory((prev) => [...prev, serverInfo]);\n                }\n                setShowMcpServers(false);\n                setSelectedMcpServerIndex(0);\n                return;\n            }\n        }\n        if (showAddModel || showDeleteModel || showAddMcpServer || showDeleteMcpServer) {\n            return;\n        }\n        if (showProviderSettings) {\n            return;\n        }\n        // Handle file finder navigation when active (takes precedence over history)\n        if (showFileFinder && filteredFiles.length > 0) {\n            if (key.upArrow) {\n                setSelectedFileIndex((prev) => prev === 0 ? filteredFiles.length - 1 : prev - 1);\n                return;\n            }\n            if (key.downArrow) {\n                setSelectedFileIndex((prev) => (prev + 1) % filteredFiles.length);\n                return;\n            }\n            if (key.return || key.tab) {\n                const selectedFile = filteredFiles[selectedFileIndex];\n                if (selectedFile) {\n                    const newInput = (0, file_finder_1.replaceFileQuery)(input, selectedFile);\n                    setInput(newInput);\n                    closeFileFinder();\n                }\n                return;\n            }\n        }\n        // Handle command history navigation with up/down arrows\n        if (key.upArrow && !showCommandSuggestions && !showModelSelection && !showMcpServers) {\n            if (commandHistory.length > 0) {\n                if (historyIndex === -1) {\n                    // Store current input before navigating history\n                    setTemporaryInput(input);\n                    setHistoryIndex(commandHistory.length - 1);\n                    setInput(commandHistory[commandHistory.length - 1]);\n                }\n                else if (historyIndex > 0) {\n                    setHistoryIndex(historyIndex - 1);\n                    setInput(commandHistory[historyIndex - 1]);\n                }\n            }\n            return;\n        }\n        if (key.downArrow && !showCommandSuggestions && !showModelSelection && !showMcpServers) {\n            if (commandHistory.length > 0 && historyIndex !== -1) {\n                if (historyIndex < commandHistory.length - 1) {\n                    setHistoryIndex(historyIndex + 1);\n                    setInput(commandHistory[historyIndex + 1]);\n                }\n                else {\n                    // Return to original input\n                    setHistoryIndex(-1);\n                    setInput(temporaryInput);\n                }\n            }\n            return;\n        }\n        if (key.return) {\n            const userInput = input.trim();\n            if (userInput === \"exit\" || userInput === \"quit\") {\n                exit();\n                return;\n            }\n            if (userInput) {\n                const directCommandResult = await handleDirectCommand(userInput);\n                if (!directCommandResult) {\n                    await processUserMessage(userInput);\n                }\n            }\n            return;\n        }\n        if (key.backspace || key.delete) {\n            const newInput = input.slice(0, -1);\n            setInput(newInput);\n            // Reset history navigation when user edits input\n            if (historyIndex !== -1) {\n                setHistoryIndex(-1);\n                setTemporaryInput(\"\");\n            }\n            // Update file finder\n            updateFileFinder(newInput);\n            if (!newInput.startsWith(\"/\")) {\n                setShowCommandSuggestions(false);\n                setSelectedCommandIndex(0);\n            }\n            else if (showCommandSuggestions) {\n                // Reset selected index when input changes to avoid out-of-bounds\n                setSelectedCommandIndex(0);\n            }\n            return;\n        }\n        if (inputChar && !key.ctrl && !key.meta) {\n            const newInput = input + inputChar;\n            setInput(newInput);\n            // Reset history navigation when user types new input\n            if (historyIndex !== -1) {\n                setHistoryIndex(-1);\n                setTemporaryInput(\"\");\n            }\n            // Update file finder based on @ symbol\n            updateFileFinder(newInput);\n            if (newInput === \"/\" ||\n                [\"ls\", \"pwd\", \"cd\", \"cat\", \"mkdir\", \"touch\"].some((cmd) => cmd.startsWith(newInput))) {\n                setShowCommandSuggestions(true);\n                setSelectedCommandIndex(0);\n            }\n            else if (!newInput.startsWith(\"/\") &&\n                ![\"ls\", \"pwd\", \"cd\", \"cat\", \"mkdir\", \"touch\"].some((cmd) => cmd.startsWith(newInput))) {\n                setShowCommandSuggestions(false);\n                setSelectedCommandIndex(0);\n            }\n            else if (showCommandSuggestions) {\n                // Reset selected index when input changes to avoid out-of-bounds\n                setSelectedCommandIndex(0);\n            }\n        }\n    });\n    return {\n        input,\n        showCommandSuggestions,\n        selectedCommandIndex,\n        showModelSelection,\n        selectedModelIndex,\n        showProviderSettings,\n        selectedProviderIndex,\n        showAddModel,\n        showDeleteModel,\n        showPromptsList,\n        showAddPrompt,\n        showDeletePrompt,\n        showMcpServers,\n        showAddMcpServer,\n        showDeleteMcpServer,\n        selectedMcpServerIndex,\n        showConversationHistory,\n        showTemperatureSelector,\n        currentTemperature,\n        showExpertModels,\n        showRouteSelection,\n        routeViewMode,\n        selectedRouteModelIndex,\n        selectedRouteProviderIndex,\n        currentSelectedModel,\n        routeProviders,\n        isLoadingProviders,\n        showFileFinder,\n        selectedFileIndex,\n        filteredFiles,\n        fileQuery,\n        commandSuggestions,\n        availableModels: dynamicModels,\n        mcpServers,\n        providerList,\n        closeProviderSettings,\n        closeAddModel,\n        closeDeleteModel,\n        closePromptsList,\n        closeAddPrompt,\n        closeDeletePrompt,\n        closeMcpServers,\n        closeAddMcpServer,\n        closeDeleteMcpServer,\n        closeConversationHistory,\n        closeTemperatureSelector,\n        closeExpertModels,\n        closeRouteSelection,\n        closeFileFinder,\n        refreshModels,\n        refreshMcpServers,\n        openRouterModels: getOpenRouterModels(dynamicModels),\n        agent,\n    };\n}\nexports.useInputHandler = useInputHandler;\n//# sourceMappingURL=use-input-handler.js.map",
      "filePath": "../dist/hooks/use-input-handler.js",
      "embedding": [
        35.41,
        1.3,
        0,
        0.4,
        0.3,
        0.07324578776998526,
        0.03415151652834055,
        0.008851730556979565,
        0.0831584523035428,
        0.06275881989319532,
        0.04259643672396423,
        0.03866499286932976,
        0.01402081456396106,
        0.05496573213779648,
        0.018187813391569108,
        0.06712844439854802,
        0.09043908579346216,
        0.06364759126142237,
        0.030989635462766507,
        0.07692872478314666,
        0.0708462625263279,
        0.014054206867766395,
        0.08003361645492163,
        0.018816994093472816,
        0.09292447646943264,
        0.04099979052496832,
        0.010877604727215051,
        0.09627348805530772,
        0.06321869252606281,
        0.027909148522378958,
        0.09376143322488689,
        0.009436889708218266,
        0.04217593091742514,
        0.02433197859698537,
        0.033509290240695065,
        0.042764056054054755,
        0.04016327105346629,
        0.06165266737735373,
        0.006651305128495633,
        0.03319463544328808,
        0.04899434114638338,
        0.002322330158383534,
        0.021791056512638088,
        0.01603204138588259,
        0.013400748211348713,
        0.04027951268235713,
        0.04377357016138921,
        0.09329088897246779,
        0.0888840972138867,
        0.026709071231017168,
        0.05954073963363835,
        0.05015645457505574,
        0.04697810859825618,
        0.03479609048055267,
        0.08177241012566076,
        0.03801528108676805,
        0.03186225749496707,
        0.011346413837493852,
        0.08554849138525568,
        0.05771694582871371,
        0.06423805862200858,
        0.05440102503457067,
        0.04825690187262786,
        0.036123343403658435,
        0.08592326622580793,
        0.010299511152470875,
        0.01616978537316509,
        0.06509998541424716,
        0.026940748617436328,
        0.09151418246742905,
        0.006207533242766516,
        0.05363598377080432,
        0.005523354212574805,
        0.07665829972022704,
        0.05796616517360468,
        0.022475414435604704,
        0.0682284118272396,
        0.02239818193297949,
        0.022694413583861563,
        0.06096069976218632,
        0.04629606979778061,
        0.061389857141263576,
        0.024881599290336766,
        0.0810663035659437,
        0.006516705481643181,
        0.032547504291039475,
        0.03991831717073884,
        0.017425490635180396,
        0.08558501683655495,
        0.042611784980809246,
        0.03765740200934477,
        0.09991185603268339,
        0.057573533652288046,
        0.05352939244702118,
        0.04307693784004,
        0.010728156390789957,
        0.009177760887301134,
        0.09105663174171423,
        0.0004139184681434705,
        0.053068500003258294
      ]
    },
    {
      "content": "#!/usr/bin/env node\nexport {};\n",
      "filePath": "../dist/index.d.ts",
      "embedding": [
        0.05,
        0,
        0,
        0,
        0.1,
        0.0979273973215261,
        0.07089569308250762,
        0.07395442661898192,
        0.07901209306031645,
        0.007017819903661205,
        0.03682479290136883,
        0.09347712551230053,
        0.06724686758514395,
        0.08531095502230658,
        0.015134040312397257,
        0.0636655255280781,
        0.08944348547302414,
        0.03881501133429669,
        0.0059312526389876385,
        0.08762047943820794,
        0.03618894460474912,
        0.08382870454581222,
        0.044830560357025755,
        0.04251522759646528,
        0.04899322257822242,
        0.08436400621471173,
        0.03906757601507682,
        0.0004411661464235994,
        0.002407305084461109,
        0.06621056415451354,
        0.016455728069988896,
        0.09384533704171011,
        0.0977150455220813,
        0.0036169411313619285,
        0.02083743541671941,
        0.00048578070202576207,
        0.04986883754832641,
        0.03561848577710971,
        0.08727917652207785,
        0.009789080792453265,
        0.03500086814061715,
        0.07577764398465046,
        0.06867041847073972,
        0.09083067805923357,
        0.08443916586243017,
        0.09835196488623962,
        0.05460677929931151,
        0.07224374370144414,
        0.02461840352948739,
        0.08764170890951804,
        0.04728568374784932,
        0.010646432734307744,
        0.03851718906490434,
        0.01973691337578557,
        0.015105610653674596,
        0.09915850059876286,
        0.03316467476938644,
        0.05510511566820501,
        0.022404585810000058,
        0.011286326156983462,
        0.09536586783895154,
        0.014123365882907425,
        0.07156080488191846,
        0.04573948262303648,
        0.06500486602530114,
        0.028128666965548377,
        0.0458793950776481,
        0.07045620126588241,
        0.0500388652647758,
        0.08208106637028605,
        0.07748472189516015,
        0.06449551216338388,
        0.05296746366063021,
        0.046968285494623875,
        0.02153733710422978,
        0.06516201392789998,
        0.05540400874597016,
        0.052968474319731534,
        0.055420369267215656,
        0.007223452256007668,
        0.0159264888309562,
        0.006219067672603541,
        0.016911006550970265,
        0.05230409657950148,
        0.08250582803077353,
        0.0037980004868830575,
        0.08782077107396125,
        0.014814243304121434,
        0.07605483567126574,
        0.03450685437019235,
        0.06995525555403807,
        0.024886510752255498,
        0.07381901966185876,
        0.04456227949622447,
        0.08918681343771108,
        0.027776167605410542,
        0.0022528725934954585,
        0.07491667257096457,
        0.023672002860417197,
        0.06369760186650031
      ]
    },
    {
      "content": "#!/usr/bin/env node\n\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importDefault(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst commander_1 = require(\"commander\");\nconst dotenv = __importStar(require(\"dotenv\"));\nconst giga_agent_1 = require(\"./agent/giga-agent\");\nconst chat_interface_1 = __importDefault(require(\"./ui/components/chat-interface\"));\nconst confirmation_service_1 = require(\"./utils/confirmation-service\");\n// Load environment variables\ndotenv.config();\nconst api_keys_1 = require(\"./utils/api-keys\");\n// We'll set up the double Ctrl+C handler after Ink starts\n// Check if any API keys are available from environment variables, shell files, or settings\nfunction hasAnyApiKey() {\n    const apiKeys = (0, api_keys_1.loadApiKeys)();\n    const availableKeys = Object.values(apiKeys).filter(Boolean);\n    return availableKeys.length > 0;\n}\ncommander_1.program\n    .name(\"giga\")\n    .description(\"A conversational AI CLI tool powered by Grok-3 with text editor capabilities\")\n    .version(\"1.0.0\")\n    .option(\"-p, --prompt <prompt>\", \"run a single prompt in headless mode\")\n    .option(\"-d, --directory <dir>\", \"set working directory\", process.cwd())\n    .action(async (options) => {\n    if (options.directory) {\n        try {\n            process.chdir(options.directory);\n        }\n        catch (error) {\n            console.error(`❌ Error changing directory to ${options.directory}:`, error.message);\n            process.exit(1);\n        }\n    }\n    // If prompt is provided, run in headless mode\n    if (options.prompt) {\n        try {\n            // Enable headless mode in confirmation service\n            const confirmationService = confirmation_service_1.ConfirmationService.getInstance();\n            confirmationService.setHeadlessMode(true);\n            // Check if any API keys are available\n            const hasKeys = hasAnyApiKey();\n            if (!hasKeys) {\n                console.error(\"❌ Error: API key is required. Set environment variables or configure in settings\");\n                process.exit(1);\n            }\n            const agent = new giga_agent_1.GigaAgent('', '');\n            // Check if a model is configured\n            const currentModel = agent.getCurrentModel();\n            if (!currentModel) {\n                console.error(\"❌ No model configured. Please set up giga first:\");\n                console.error(\"1. Run 'giga' to enter interactive mode\");\n                console.error(\"2. Configure API keys: /providers\");\n                console.error(\"3. Add models: /add-model\");\n                console.error(\"4. Select a model: /models\");\n                process.exit(1);\n            }\n            console.log(`🤖 Processing prompt: ${options.prompt}`);\n            console.log(`📁 Working directory: ${process.cwd()}\\n`);\n            // Process the prompt and stream results\n            for await (const chunk of agent.processUserMessageStream(options.prompt)) {\n                if (chunk.type === 'content') {\n                    process.stdout.write(chunk.content || '');\n                }\n                else if (chunk.type === 'tool_calls') {\n                    console.log(`\\n🔧 Using tools: ${chunk.toolCalls?.map(tc => tc.function.name).join(', ')}`);\n                }\n                else if (chunk.type === 'tool_result') {\n                    if (!chunk.toolResult?.success) {\n                        console.log(`\\n❌ Tool error: ${chunk.toolResult?.error}`);\n                    }\n                }\n                else if (chunk.type === 'done') {\n                    console.log('\\n\\n✅ Done');\n                    break;\n                }\n            }\n        }\n        catch (error) {\n            console.error(\"❌ Error executing prompt:\", error.message);\n            process.exit(1);\n        }\n    }\n    else {\n        // Run in interactive mode\n        try {\n            // Check if any API keys are available\n            const hasKeys = hasAnyApiKey();\n            const agent = hasKeys ? new giga_agent_1.GigaAgent('', '') : undefined;\n            console.log(\"🤖 Starting GIGA Conversational Assistant...\\n\");\n            const app = (0, ink_1.render)(react_1.default.createElement(chat_interface_1.default, { agent }));\n            // Set up double Ctrl+C handler after Ink is running\n            let lastCtrlCTime = 0;\n            let ctrlCTimeout = null;\n            // Remove any existing SIGINT listeners first\n            process.removeAllListeners('SIGINT');\n            process.on('SIGINT', () => {\n                const now = Date.now();\n                const timeSinceLastCtrlC = now - lastCtrlCTime;\n                if (timeSinceLastCtrlC < 1000 && lastCtrlCTime > 0) {\n                    // Second Ctrl+C within 1 second - exit immediately\n                    if (ctrlCTimeout) {\n                        clearTimeout(ctrlCTimeout);\n                        ctrlCTimeout = null;\n                    }\n                    console.log('\\n👋 Goodbye!');\n                    app.unmount();\n                    process.exit(0);\n                }\n                else {\n                    // First Ctrl+C or too late - show message and start timer\n                    lastCtrlCTime = now;\n                    console.log('\\nPress Ctrl+C again within 1 second to exit');\n                    // Clear any existing timeout\n                    if (ctrlCTimeout) {\n                        clearTimeout(ctrlCTimeout);\n                    }\n                    // Reset the timer after 1 second\n                    ctrlCTimeout = setTimeout(() => {\n                        lastCtrlCTime = 0;\n                        ctrlCTimeout = null;\n                    }, 1000);\n                }\n            });\n        }\n        catch (error) {\n            console.error(\"❌ Error initializing GIGA:\", error.message);\n            process.exit(1);\n        }\n    }\n});\ncommander_1.program.parse();\n//# sourceMappingURL=index.js.map",
      "filePath": "../dist/index.js",
      "embedding": [
        6.93,
        0.9,
        0,
        0.7,
        0.1,
        0.09562529825011727,
        0.0048634810226516395,
        0.07950542211610408,
        0.060145465937141034,
        0.013848166960067333,
        0.059028770662214416,
        0.013303394167503424,
        0.07928966879417704,
        0.03878279383006923,
        0.08581424290834705,
        0.05197603990833514,
        0.07492018294433621,
        0.08866898067245756,
        0.08291551514812966,
        0.04900206680403906,
        0.048643384394521164,
        0.01718063550298691,
        0.050021288890404414,
        0.05319551396388561,
        0.009195829912157116,
        0.014425381798580507,
        0.06605445865974373,
        0.020298752095932515,
        0.07370475708756138,
        0.058864451661239416,
        0.027386396193044185,
        0.07839275710385367,
        0.042730151295733,
        0.0030164317439473343,
        0.09223148258308732,
        0.033917638540194764,
        0.07724174854627959,
        0.03255328835206477,
        0.06361531262257107,
        0.06976734712192433,
        0.041451817488541626,
        0.07342725263411219,
        0.056088904964156194,
        0.03567578118441239,
        0.06780607073289878,
        0.06251190112792514,
        0.07500467065577193,
        0.09643113123491401,
        0.045326009524948585,
        0.010378367838724445,
        0.06350205894737641,
        0.0959077275138825,
        0.04901199538399573,
        0.035843370260520424,
        0.032422154663608406,
        0.07818947736671243,
        0.015459152903609453,
        0.07166835482965696,
        0.04820502901205847,
        0.02266447498008304,
        0.07816911383962377,
        0.0011827700361778605,
        0.016891549534492425,
        0.026971083003986197,
        0.019037775627180533,
        0.060195934012409275,
        0.06564644587501936,
        0.03186347948032608,
        0.018290911210237727,
        0.05813066864240077,
        0.08379358558468761,
        0.023088210508514975,
        0.04686930898566563,
        0.033811224736919325,
        0.018305636182432528,
        0.07919159768670414,
        0.03745029846774489,
        0.025546286441775912,
        0.009188020659365392,
        0.08506727885231827,
        0.05829490864539888,
        0.01603383748791466,
        0.048162553062929214,
        0.0898362006866622,
        0.08753901117763511,
        0.03645497973516137,
        0.0378400309746633,
        0.041716019403049726,
        0.05095502773259787,
        0.049029178415610566,
        0.026560148412712183,
        0.04741442534653824,
        0.04813071795090177,
        0.03699696496498994,
        0.04018168763101102,
        0.015032888858834904,
        0.03566266428339221,
        0.07777290019022867,
        0.02072445942893071,
        0.008421264942860008
      ]
    },
    {
      "content": "import { AddedMcpServer } from '../utils/added-mcp-servers';\nexport interface McpTool {\n    name: string;\n    description?: string;\n    inputSchema: any;\n}\nexport interface McpResource {\n    uri: string;\n    name: string;\n    description?: string;\n    mimeType?: string;\n}\nexport interface McpServerInfo {\n    name: string;\n    version: string;\n    tools?: McpTool[];\n    resources?: McpResource[];\n}\nexport interface McpToolCall {\n    name: string;\n    arguments: any;\n}\nexport interface McpToolResult {\n    content?: Array<{\n        type: string;\n        text?: string;\n        data?: string;\n        mimeType?: string;\n    }>;\n    isError?: boolean;\n    _meta?: any;\n}\nexport declare class McpClient {\n    private process;\n    private server;\n    private messageId;\n    private pendingRequests;\n    private isConnected;\n    private serverInfo;\n    constructor(server: AddedMcpServer);\n    connect(): Promise<void>;\n    private initialize;\n    private handleMessage;\n    private sendRequest;\n    private sendNotification;\n    callTool(name: string, arguments_: any): Promise<McpToolResult>;\n    getServerInfo(): McpServerInfo | null;\n    getTools(): McpTool[];\n    getResources(): McpResource[];\n    disconnect(): Promise<void>;\n    isConnectedToServer(): boolean;\n}\n",
      "filePath": "../dist/mcp/mcp-client.d.ts",
      "embedding": [
        1.2,
        0,
        0.1,
        0.1,
        0.6,
        0.031126540115661794,
        0.002344374178510589,
        0.07909749168067017,
        0.06935837855343101,
        0.04012088911958647,
        0.04557271765406057,
        0.0358819995898564,
        0.023505223699132473,
        0.055100928757929483,
        0.02704445068249204,
        0.058612684822790966,
        0.047467192015711916,
        0.05901821221308037,
        0.09246920357306636,
        0.018828848545151933,
        0.05013599827989053,
        0.017561919829987716,
        0.03304408752516265,
        0.03842771175502893,
        0.07615207378897204,
        0.07308638224882141,
        0.025381913458221175,
        0.03773904570834544,
        0.002579976943550211,
        0.07136473435527779,
        0.07954162934538056,
        0.009050159632683985,
        0.0288955996486161,
        0.07849839432865598,
        0.0715974356178612,
        0.03157781583291021,
        0.041353899904252214,
        0.04729453623759338,
        0.07065797616617336,
        0.05404374933184611,
        0.00025751879742214046,
        0.08820519946688518,
        0.061310261374972336,
        0.07022793064585289,
        0.011747267152258234,
        0.03741049701914317,
        0.09345464328828836,
        0.06405654042163807,
        0.04140595371093203,
        0.08774652625225308,
        0.03675020668894805,
        0.05566998944681289,
        0.02395880137386567,
        0.021158975641565783,
        0.05048716712051121,
        0.006701846711393223,
        0.0937048375587357,
        0.03844182028610549,
        0.04798576791598134,
        0.022200836260764467,
        0.053719947278977435,
        0.013654608449106199,
        0.044449506454737324,
        0.025038195548384014,
        0.05936177550541412,
        0.02955127490141614,
        0.03975277811221306,
        0.06400980417378753,
        0.01877300693129671,
        0.00024235934487834012,
        0.01486049995785711,
        0.09216450217151206,
        0.00859187655236493,
        0.06669483579234417,
        0.01232295785016775,
        0.022117740552055256,
        0.058144756583579295,
        0.03604090139365297,
        0.0719084315263787,
        0.07376925165575848,
        0.028620008264426035,
        0.02525303015584911,
        0.00399171131898376,
        0.003761544974417064,
        0.019662072593306712,
        0.08434364703134122,
        0.06375986666081976,
        0.029692819380147308,
        0.05717789518434666,
        0.003588161957395775,
        0.057840586424156674,
        0.05344365937298301,
        0.038781696535676626,
        0.07759449692440468,
        0.06246859105459923,
        0.08121919141355925,
        0.05080513740234295,
        0.07612702320454139,
        0.08055657813466999,
        0.020924678132382846
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.McpClient = void 0;\nconst child_process_1 = require(\"child_process\");\nclass McpClient {\n    constructor(server) {\n        this.process = null;\n        this.messageId = 0;\n        this.pendingRequests = new Map();\n        this.isConnected = false;\n        this.serverInfo = null;\n        this.server = server;\n    }\n    async connect() {\n        return new Promise((resolve, reject) => {\n            try {\n                // Parse command and args\n                const commandParts = this.server.command.split(' ');\n                const command = commandParts[0];\n                const args = [...commandParts.slice(1), ...(this.server.args || [])];\n                // Spawn the MCP server process\n                this.process = (0, child_process_1.spawn)(command, args, {\n                    stdio: ['pipe', 'pipe', 'pipe'],\n                    env: { ...process.env, ...this.server.env },\n                });\n                this.process.on('error', (error) => {\n                    reject(new Error(`Failed to start MCP server: ${error.message}`));\n                });\n                // Set up message handling\n                let buffer = '';\n                this.process.stdout?.on('data', (data) => {\n                    buffer += data.toString();\n                    // Process complete JSON-RPC messages\n                    let newlineIndex;\n                    while ((newlineIndex = buffer.indexOf('\\n')) !== -1) {\n                        const line = buffer.slice(0, newlineIndex).trim();\n                        buffer = buffer.slice(newlineIndex + 1);\n                        if (line) {\n                            try {\n                                const message = JSON.parse(line);\n                                this.handleMessage(message);\n                            }\n                            catch (error) {\n                                console.error('Failed to parse MCP message:', error, 'Line:', line);\n                            }\n                        }\n                    }\n                });\n                this.process.stderr?.on('data', (data) => {\n                    console.error(`MCP server stderr: ${data}`);\n                });\n                this.process.on('close', (code) => {\n                    this.isConnected = false;\n                    if (code !== 0) {\n                        console.error(`MCP server exited with code ${code}`);\n                    }\n                });\n                // Initialize the connection\n                this.initialize().then(() => {\n                    this.isConnected = true;\n                    resolve();\n                }).catch(reject);\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    }\n    async initialize() {\n        // Send initialize request\n        const initResponse = await this.sendRequest('initialize', {\n            protocolVersion: '2024-11-05',\n            capabilities: {\n                tools: {},\n            },\n            clientInfo: {\n                name: 'giga-code',\n                version: '1.0.0',\n            },\n        });\n        this.serverInfo = {\n            name: initResponse.serverInfo?.name || this.server.name,\n            version: initResponse.serverInfo?.version || '1.0.0',\n        };\n        // Send initialized notification\n        this.sendNotification('initialized', {});\n        // Get available tools\n        try {\n            const toolsResponse = await this.sendRequest('tools/list', {});\n            if (toolsResponse.tools) {\n                this.serverInfo.tools = toolsResponse.tools;\n            }\n        }\n        catch (error) {\n            console.warn('Failed to get tools list:', error);\n            this.serverInfo.tools = [];\n        }\n        // Get available resources\n        try {\n            const resourcesResponse = await this.sendRequest('resources/list', {});\n            if (resourcesResponse.resources) {\n                this.serverInfo.resources = resourcesResponse.resources;\n            }\n        }\n        catch (error) {\n            console.warn('Failed to get resources list:', error);\n            this.serverInfo.resources = [];\n        }\n    }\n    handleMessage(message) {\n        if (message.id !== undefined && this.pendingRequests.has(message.id)) {\n            // This is a response to a request\n            const { resolve, reject } = this.pendingRequests.get(message.id);\n            this.pendingRequests.delete(message.id);\n            if (message.error) {\n                reject(new Error(message.error.message || 'MCP error'));\n            }\n            else {\n                resolve(message.result);\n            }\n        }\n        else {\n            // This is a notification or request from the server\n            console.log('Received MCP message:', message);\n        }\n    }\n    sendRequest(method, params) {\n        return new Promise((resolve, reject) => {\n            if (!this.process || !this.isConnected) {\n                reject(new Error('MCP client not connected'));\n                return;\n            }\n            const id = ++this.messageId;\n            const message = {\n                jsonrpc: '2.0',\n                id,\n                method,\n                params,\n            };\n            this.pendingRequests.set(id, { resolve, reject });\n            const messageStr = JSON.stringify(message) + '\\n';\n            this.process.stdin?.write(messageStr);\n            // Set timeout for requests\n            setTimeout(() => {\n                if (this.pendingRequests.has(id)) {\n                    this.pendingRequests.delete(id);\n                    reject(new Error('MCP request timeout'));\n                }\n            }, 30000); // 30 second timeout\n        });\n    }\n    sendNotification(method, params) {\n        if (!this.process || !this.isConnected) {\n            return;\n        }\n        const message = {\n            jsonrpc: '2.0',\n            method,\n            params,\n        };\n        const messageStr = JSON.stringify(message) + '\\n';\n        this.process.stdin?.write(messageStr);\n    }\n    async callTool(name, arguments_) {\n        try {\n            const response = await this.sendRequest('tools/call', {\n                name,\n                arguments: arguments_,\n            });\n            return {\n                content: response.content || [],\n                isError: response.isError || false,\n                _meta: response._meta,\n            };\n        }\n        catch (error) {\n            return {\n                content: [{\n                        type: 'text',\n                        text: `Error calling tool: ${error instanceof Error ? error.message : String(error)}`,\n                    }],\n                isError: true,\n            };\n        }\n    }\n    getServerInfo() {\n        return this.serverInfo;\n    }\n    getTools() {\n        return this.serverInfo?.tools || [];\n    }\n    getResources() {\n        return this.serverInfo?.resources || [];\n    }\n    async disconnect() {\n        if (this.process) {\n            this.process.kill();\n            this.process = null;\n        }\n        this.isConnected = false;\n        this.pendingRequests.clear();\n    }\n    isConnectedToServer() {\n        return this.isConnected;\n    }\n}\nexports.McpClient = McpClient;\n//# sourceMappingURL=mcp-client.js.map",
      "filePath": "../dist/mcp/mcp-client.js",
      "embedding": [
        5.93,
        0,
        0.1,
        0,
        0.3,
        0.06559901667173453,
        0.03883545329239285,
        0.04678654313387255,
        0.08171055044530055,
        0.03473905315714938,
        0.003947156847025834,
        0.09075749789529294,
        0.03751412044606071,
        0.019395670014083922,
        0.047575928661729695,
        0.05027667027189622,
        0.06952829698573297,
        0.04766323917134309,
        0.03781710053226675,
        0.024887786824446003,
        0.0606861205834856,
        0.07727157330333856,
        0.048414005594399935,
        0.027956533138399534,
        0.05646077007608224,
        0.04611212765300241,
        0.010545241668424932,
        0.005716507244606817,
        0.010275722205361893,
        0.00168609697086064,
        0.022970213220561298,
        0.04679292781928249,
        0.07684926435981462,
        0.021612411929965703,
        0.08905323818645582,
        0.025340993164914796,
        0.08126878082594574,
        0.0840046796886221,
        0.017354418869291188,
        0.005775773043821553,
        0.0033715744513477253,
        0.09843028772519023,
        0.07801008470961814,
        0.09665395967327305,
        0.005452874171547129,
        0.05622600863762293,
        0.08034196270918356,
        0.08498458395841935,
        0.04493002179784416,
        0.010850175530636186,
        0.08908042371187493,
        0.07706638847143937,
        0.03501784172346948,
        0.05388649800373799,
        0.09109739332411282,
        0.004878335294001235,
        0.02831320377074699,
        0.046940520227614906,
        0.04946490893797598,
        0.022285631276962016,
        0.04174280378228828,
        0.01124269138556946,
        0.05987359207691162,
        0.08405341294778668,
        0.04089197100932879,
        0.07428410060988654,
        0.09171976131788095,
        0.02853902717631487,
        0.07118467194848647,
        0.04738176495168507,
        0.05721136764657773,
        0.08951399392054077,
        0.029607036551636625,
        0.09676213680559137,
        0.019307035816039653,
        0.02993176628286979,
        0.023057869392880872,
        0.0301110056553783,
        0.02395637385899324,
        0.09440128216145624,
        0.05297919862765302,
        0.04763960912814772,
        0.08383731039000653,
        0.055398832087981756,
        0.07603133441561714,
        0.0674348102802446,
        0.09897987336784338,
        0.06944184154348249,
        0.07934859430094404,
        0.017107919658774885,
        0.055689924139505145,
        0.09664918567131787,
        0.0779863803811024,
        0.0988875127368076,
        0.061927934179180126,
        0.05815691907455033,
        0.03649293589490348,
        0.08956971376932883,
        0.08836642923268159,
        0.03393023394296348
      ]
    },
    {
      "content": "import { McpClient, McpTool, McpToolResult } from './mcp-client';\nimport { AddedMcpServer } from '../utils/added-mcp-servers';\nexport interface McpToolWithServer extends McpTool {\n    serverName: string;\n}\nexport declare class McpManager {\n    private clients;\n    private static instance;\n    static getInstance(): McpManager;\n    initializeAllServers(): Promise<void>;\n    connectToServer(server: AddedMcpServer): Promise<McpClient>;\n    disconnectFromServer(serverName: string): Promise<void>;\n    disconnectAll(): Promise<void>;\n    getAllTools(): McpToolWithServer[];\n    getToolsByServer(serverName: string): McpTool[];\n    callTool(serverName: string, toolName: string, arguments_: any): Promise<McpToolResult>;\n    findToolByName(toolName: string): McpToolWithServer | null;\n    getConnectedServers(): string[];\n    getServerInfo(serverName: string): import(\"./mcp-client\").McpServerInfo;\n    isServerConnected(serverName: string): boolean;\n    refreshConnections(): Promise<void>;\n}\n",
      "filePath": "../dist/mcp/mcp-manager.d.ts",
      "embedding": [
        0.75,
        0,
        0.1,
        0.3,
        0.2,
        0.09992308966585944,
        0.07442351689523624,
        0.0237799583781259,
        0.06351921712010385,
        0.02553719128988523,
        0.06525304638629777,
        0.047076244602727316,
        0.06426965571162284,
        0.08639466768069318,
        0.06606629865952393,
        0.029670825600534512,
        0.045141286466171604,
        0.05879554371330906,
        0.028341396782769493,
        0.05758754375366631,
        0.030716688431007267,
        0.038783833316095855,
        0.036003094248332236,
        0.08362271680694555,
        0.09770176932899444,
        0.009573462072359984,
        0.086003449498922,
        0.09246075340094972,
        0.08469555267550358,
        0.08739018346406789,
        0.09264533418574694,
        0.04742173310121124,
        0.011549944144519776,
        0.07281149470120331,
        0.06104635278241449,
        0.012090423368758641,
        0.08101413612347397,
        0.08980289941894914,
        0.08436014640428798,
        0.059007509290729766,
        0.03613488806733387,
        0.06248824989713458,
        0.054196075059827535,
        0.0916644811594873,
        0.055994080719526454,
        0.07511373337979968,
        0.027083635808845388,
        0.05069715999264288,
        0.07468000034337373,
        0.05537941097932217,
        0.07465626662407904,
        0.023612753689960478,
        0.08380349455255234,
        0.05929716216472108,
        0.07517912989438585,
        0.06654616584455932,
        0.09458833448798669,
        0.015147596538341336,
        0.08506120504527365,
        0.07377058583599864,
        0.00392913143535969,
        0.04575757700790796,
        0.051129722492113075,
        0.09703921152615012,
        0.020620039770153656,
        0.025734085462207026,
        0.013943199375615957,
        0.09465977624146099,
        0.06394868429359495,
        0.07762217034306516,
        0.01509110050414505,
        0.020143983677111555,
        0.03817123717244141,
        0.012215844420193534,
        0.09454094827893023,
        0.04891875462936798,
        0.0035586419575854957,
        0.059058581436659076,
        0.08772079342678368,
        0.013588194055956015,
        0.01997518471818336,
        0.038469570296119096,
        0.09671114267788496,
        0.020493145361591393,
        0.024219906231586232,
        0.025781801737135703,
        0.09886028175636773,
        0.08096800373498408,
        0.00906630928648773,
        0.033999378209997766,
        0.0845658850043708,
        0.0480936402648114,
        0.07205059654388127,
        0.09022286113279566,
        0.012064531464752904,
        0.0717327155042457,
        0.031132816101895857,
        0.08410389643974774,
        0.008880562255010294,
        0.015988289243948673
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.McpManager = void 0;\nconst mcp_client_1 = require(\"./mcp-client\");\nconst added_mcp_servers_1 = require(\"../utils/added-mcp-servers\");\nclass McpManager {\n    constructor() {\n        this.clients = new Map();\n    }\n    static getInstance() {\n        if (!McpManager.instance) {\n            McpManager.instance = new McpManager();\n        }\n        return McpManager.instance;\n    }\n    async initializeAllServers() {\n        const servers = (0, added_mcp_servers_1.loadAddedMcpServers)();\n        const connectionPromises = servers.map(server => this.connectToServer(server));\n        // Connect to all servers, but don't fail if some connections fail\n        const results = await Promise.allSettled(connectionPromises);\n        results.forEach((result, index) => {\n            if (result.status === 'rejected') {\n                console.error(`Failed to connect to MCP server ${servers[index].name}:`, result.reason);\n            }\n        });\n    }\n    async connectToServer(server) {\n        const existingClient = this.clients.get(server.name);\n        if (existingClient && existingClient.isConnectedToServer()) {\n            return existingClient;\n        }\n        const client = new mcp_client_1.McpClient(server);\n        try {\n            await client.connect();\n            this.clients.set(server.name, client);\n            console.log(`Connected to MCP server: ${server.name}`);\n            return client;\n        }\n        catch (error) {\n            console.error(`Failed to connect to MCP server ${server.name}:`, error);\n            throw error;\n        }\n    }\n    async disconnectFromServer(serverName) {\n        const client = this.clients.get(serverName);\n        if (client) {\n            await client.disconnect();\n            this.clients.delete(serverName);\n            console.log(`Disconnected from MCP server: ${serverName}`);\n        }\n    }\n    async disconnectAll() {\n        const disconnectPromises = Array.from(this.clients.keys()).map(serverName => this.disconnectFromServer(serverName));\n        await Promise.all(disconnectPromises);\n    }\n    getAllTools() {\n        const tools = [];\n        for (const [serverName, client] of this.clients) {\n            if (client.isConnectedToServer()) {\n                const serverTools = client.getTools();\n                serverTools.forEach(tool => {\n                    tools.push({\n                        ...tool,\n                        serverName,\n                    });\n                });\n            }\n        }\n        return tools;\n    }\n    getToolsByServer(serverName) {\n        const client = this.clients.get(serverName);\n        if (client && client.isConnectedToServer()) {\n            return client.getTools();\n        }\n        return [];\n    }\n    async callTool(serverName, toolName, arguments_) {\n        const client = this.clients.get(serverName);\n        if (!client) {\n            return {\n                content: [{\n                        type: 'text',\n                        text: `MCP server '${serverName}' not found or not connected`,\n                    }],\n                isError: true,\n            };\n        }\n        if (!client.isConnectedToServer()) {\n            return {\n                content: [{\n                        type: 'text',\n                        text: `MCP server '${serverName}' is not connected`,\n                    }],\n                isError: true,\n            };\n        }\n        return await client.callTool(toolName, arguments_);\n    }\n    findToolByName(toolName) {\n        const allTools = this.getAllTools();\n        return allTools.find(tool => tool.name === toolName) || null;\n    }\n    getConnectedServers() {\n        const connectedServers = [];\n        for (const [serverName, client] of this.clients) {\n            if (client.isConnectedToServer()) {\n                connectedServers.push(serverName);\n            }\n        }\n        return connectedServers;\n    }\n    getServerInfo(serverName) {\n        const client = this.clients.get(serverName);\n        if (client && client.isConnectedToServer()) {\n            return client.getServerInfo();\n        }\n        return null;\n    }\n    isServerConnected(serverName) {\n        const client = this.clients.get(serverName);\n        return client ? client.isConnectedToServer() : false;\n    }\n    async refreshConnections() {\n        // Reload servers from storage and connect to any new ones\n        const servers = (0, added_mcp_servers_1.loadAddedMcpServers)();\n        const currentServers = new Set(this.clients.keys());\n        const newServers = servers.filter(server => !currentServers.has(server.name));\n        // Connect to new servers\n        const connectionPromises = newServers.map(server => this.connectToServer(server));\n        const results = await Promise.allSettled(connectionPromises);\n        results.forEach((result, index) => {\n            if (result.status === 'rejected') {\n                console.error(`Failed to connect to new MCP server ${newServers[index].name}:`, result.reason);\n            }\n        });\n        // Disconnect from servers that are no longer in the configuration\n        const configuredServerNames = new Set(servers.map(s => s.name));\n        for (const serverName of currentServers) {\n            if (!configuredServerNames.has(serverName)) {\n                await this.disconnectFromServer(serverName);\n            }\n        }\n    }\n}\nexports.McpManager = McpManager;\nMcpManager.instance = null;\n//# sourceMappingURL=mcp-manager.js.map",
      "filePath": "../dist/mcp/mcp-manager.js",
      "embedding": [
        4.58,
        0,
        0.1,
        0,
        0.3,
        0.005580987786461511,
        0.003962924168931692,
        0.03813372133080916,
        0.0026392630061163993,
        0.02819061500300242,
        0.09008211681916314,
        0.07764252910650295,
        0.08039724740934437,
        0.01721308413001238,
        0.06165193897134139,
        0.022904569441396485,
        0.030629252322244963,
        0.09429207470546552,
        0.0008233992880705143,
        0.05274677818825292,
        0.07184917065278976,
        0.052798370437844994,
        0.03552355068792162,
        0.0007945880209413781,
        0.014868050765616592,
        0.01720229424808035,
        0.02312840452417896,
        0.02039188309733052,
        0.05922680611830529,
        0.06216976924572676,
        0.05594999229107475,
        0.06004288837599055,
        0.04137561914489077,
        0.01568385178555929,
        0.017890780233161842,
        0.09883618321895427,
        0.08400032556450973,
        0.00024807651892799765,
        0.04447663605474102,
        0.051672732327759485,
        0.09427640460427134,
        0.09373757368432534,
        0.05671258640941325,
        0.058071624228816676,
        0.026621380524088547,
        0.007726368460977906,
        0.08319236650600315,
        0.05939240898959894,
        0.09600619940122398,
        0.03890533513999872,
        0.030438624122250194,
        0.026993053193925455,
        0.051684576862031456,
        0.013423608387347874,
        0.057219567357688364,
        0.04220391345092489,
        0.023302051696907335,
        0.0784116461447488,
        0.01832889159861444,
        0.09093562432612978,
        0.07775424724294634,
        0.05551393785774405,
        0.018288581434379936,
        0.011104819021773404,
        0.008377828067451265,
        0.06334852777432254,
        0.03947567727026724,
        0.0702786142376635,
        0.0415227381823921,
        0.04187224742865129,
        0.06451161673092538,
        0.007841764111886617,
        0.06066284377468506,
        0.0793348940219409,
        0.04163750683715981,
        0.04693375647361049,
        0.08255166718227613,
        0.044377384842836445,
        0.06965481120251797,
        0.028589660440632714,
        0.013929067216042158,
        0.03910663195507737,
        0.01686264782317203,
        0.030878341208835515,
        0.03992391998396036,
        0.02821768161502878,
        0.0836859699433829,
        0.008287722394729758,
        0.00005099490119055972,
        0.09245378941861014,
        0.04183470642152899,
        0.042718671770501905,
        0.07701366857572679,
        0.09224385341495693,
        0.08503163981604468,
        0.07356264041020676,
        0.032392194451114374,
        0.06084546397857399,
        0.07693710391663883,
        0.08911394752062035
      ]
    },
    {
      "content": "import { ToolResult } from '../types';\nexport declare class BashTool {\n    private currentDirectory;\n    private confirmationService;\n    execute(command: string, timeout?: number): Promise<ToolResult>;\n    getCurrentDirectory(): string;\n    listFiles(directory?: string): Promise<ToolResult>;\n    findFiles(pattern: string, directory?: string): Promise<ToolResult>;\n    grep(pattern: string, files?: string): Promise<ToolResult>;\n}\n",
      "filePath": "../dist/tools/bash.d.ts",
      "embedding": [
        0.37,
        0,
        0.1,
        0.1,
        0.1,
        0.009918871228053162,
        0.025942596754631255,
        0.03897779252247553,
        0.09013972018731685,
        0.030845663510043288,
        0.09290566769778408,
        0.0629161835737667,
        0.0633386007924593,
        0.08068979744085279,
        0.014403131996052377,
        0.022848425069677714,
        0.028078846319660657,
        0.06248571734953148,
        0.039999219702971905,
        0.09189049092499765,
        0.011106378641547766,
        0.011020325655007558,
        0.012505413608487437,
        0.03466477862243472,
        0.04130715210946426,
        0.02381348674909305,
        0.05913642356952741,
        0.037656114061945724,
        0.06175845158860891,
        0.029665192475173685,
        0.05692475160198841,
        0.08532929421531953,
        0.05100465758461097,
        0.029321766828705544,
        0.02257025168619188,
        0.0951287568227369,
        0.016514204443760318,
        0.09264855631325748,
        0.06914097622080731,
        0.013404399086454256,
        0.035867664614303955,
        0.040121735595424125,
        0.008802308697458239,
        0.06825071417378141,
        0.06765518286315167,
        0.005925441376351426,
        0.0735996498937034,
        0.08407124748805428,
        0.006298059006418277,
        0.06880937176776689,
        0.034482073434615644,
        0.05714079710441936,
        0.038804085987636544,
        0.014481001591351095,
        0.0707026597652498,
        0.05867075956771672,
        0.0019467610032826155,
        0.010041994391390708,
        0.0014235391707499657,
        0.04544215715814416,
        0.04348962421744404,
        0.03672892176673769,
        0.03508229742808938,
        0.09411182362314198,
        0.05717637815939717,
        0.06300626713673081,
        0.0650028536788408,
        0.046993929121253976,
        0.093746020730895,
        0.009828836405667386,
        0.01094488998945008,
        0.06854536134421427,
        0.08964449567720843,
        0.06871250746257902,
        0.09193197049947575,
        0.017837946539930438,
        0.008869884175939013,
        0.05333189608522532,
        0.09742318872966763,
        0.030685487363171473,
        0.027210699871988233,
        0.002623963987825562,
        0.034070731147915256,
        0.06716352675564187,
        0.031168075791152428,
        0.016728828051613933,
        0.03947197199254368,
        0.0009839570782353758,
        0.07954253759968283,
        0.07021222685471826,
        0.013046483391496534,
        0.04234703773120775,
        0.0952860682679121,
        0.01337537456925021,
        0.09416926059669681,
        0.06582193950563521,
        0.07351791735987633,
        0.02874138789018015,
        0.031097373098012873,
        0.036210433893359394
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BashTool = void 0;\nconst child_process_1 = require(\"child_process\");\nconst util_1 = require(\"util\");\nconst confirmation_service_1 = require(\"../utils/confirmation-service\");\nconst execAsync = (0, util_1.promisify)(child_process_1.exec);\nclass BashTool {\n    constructor() {\n        this.currentDirectory = process.cwd();\n        this.confirmationService = confirmation_service_1.ConfirmationService.getInstance();\n    }\n    async execute(command, timeout = 30000) {\n        try {\n            // Check if user has already accepted bash commands for this session\n            const sessionFlags = this.confirmationService.getSessionFlags();\n            if (!sessionFlags.bashCommands && !sessionFlags.allOperations) {\n                // Request confirmation showing the command\n                const confirmationResult = await this.confirmationService.requestConfirmation({\n                    operation: 'Run bash command',\n                    filename: command,\n                    showVSCodeOpen: false,\n                    content: `Command: ${command}\\nWorking directory: ${this.currentDirectory}`\n                }, 'bash');\n                if (!confirmationResult.confirmed) {\n                    return {\n                        success: false,\n                        error: confirmationResult.feedback || 'Command execution cancelled by user'\n                    };\n                }\n            }\n            if (command.startsWith('cd ')) {\n                const newDir = command.substring(3).trim();\n                try {\n                    process.chdir(newDir);\n                    this.currentDirectory = process.cwd();\n                    return {\n                        success: true,\n                        output: `Changed directory to: ${this.currentDirectory}`\n                    };\n                }\n                catch (error) {\n                    return {\n                        success: false,\n                        error: `Cannot change directory: ${error.message}`\n                    };\n                }\n            }\n            const { stdout, stderr } = await execAsync(command, {\n                cwd: this.currentDirectory,\n                timeout,\n                maxBuffer: 1024 * 1024\n            });\n            const output = stdout + (stderr ? `\\nSTDERR: ${stderr}` : '');\n            return {\n                success: true,\n                output: output.trim() || 'Command executed successfully (no output)'\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Command failed: ${error.message}`\n            };\n        }\n    }\n    getCurrentDirectory() {\n        return this.currentDirectory;\n    }\n    async listFiles(directory = '.') {\n        return this.execute(`ls -la ${directory}`);\n    }\n    async findFiles(pattern, directory = '.') {\n        return this.execute(`find ${directory} -name \"${pattern}\" -type f`);\n    }\n    async grep(pattern, files = '.') {\n        return this.execute(`grep -r \"${pattern}\" ${files}`);\n    }\n}\nexports.BashTool = BashTool;\n//# sourceMappingURL=bash.js.map",
      "filePath": "../dist/tools/bash.js",
      "embedding": [
        2.57,
        0,
        0.1,
        0,
        0.3,
        0.08584319096610203,
        0.032873246974374874,
        0.09043088445422498,
        0.09519530833138967,
        0.021145381129854136,
        0.06861528652756364,
        0.0672246123486716,
        0.05899803138874402,
        0.07463827747893524,
        0.05602199618888712,
        0.036357825129207204,
        0.0945129649505425,
        0.09705632126750777,
        0.013881601861003123,
        0.013631355441381011,
        0.087475918168676,
        0.06115615822390352,
        0.04434993991508185,
        0.042658818942331284,
        0.08700195262287648,
        0.0476176475370393,
        0.09001854961642773,
        0.08452375270227208,
        0.050350138496760836,
        0.09385257553205886,
        0.09142878775759546,
        0.022700656965192835,
        0.07491503282724897,
        0.0638997572591166,
        0.064817043845592,
        0.048965507518946697,
        0.014715576037977641,
        0.08337966862644094,
        0.07372532246601234,
        0.05349253272870167,
        0.07685931849098519,
        0.03806603165586062,
        0.03161437461947725,
        0.009725226903106843,
        0.0360931286789477,
        0.02743659032212389,
        0.08446942280948704,
        0.03879995333601961,
        0.04485021576972077,
        0.08361493086250621,
        0.08314325139007839,
        0.09255028880304787,
        0.07151944111754176,
        0.08574416043599915,
        0.05930452324797214,
        0.046378233792133405,
        0.06101580249826371,
        0.014356670448907805,
        0.06432663334396635,
        0.015841086622105326,
        0.03957061662444988,
        0.09580262566459015,
        0.0340046736878883,
        0.003440173459720053,
        0.07856919275963327,
        0.08965479305077008,
        0.051200922564781814,
        0.0007554817697472682,
        0.06935872079097474,
        0.05223758471470807,
        0.004938724290738794,
        0.008691449433999066,
        0.05386785953350647,
        0.04530037550113249,
        0.08913148782222735,
        0.09479575629669128,
        0.053321964945906124,
        0.01875187503997774,
        0.012332292230420205,
        0.068729132431583,
        0.08406190161237148,
        0.08790953875518757,
        0.0332372473161599,
        0.03874127674918686,
        0.022233558391190258,
        0.040925946226809784,
        0.047011843294311274,
        0.052139748395202946,
        0.014890251832167179,
        0.0543509740511712,
        0.0523030657714209,
        0.006682206684017079,
        0.003934247741566677,
        0.042691987299538714,
        0.08298750758008638,
        0.09534627558574707,
        0.07701558942434035,
        0.018087066684415554,
        0.024399958042307823,
        0.002310491624205946
      ]
    },
    {
      "content": "import { ToolResult } from '../types';\nexport interface ConfirmationRequest {\n    operation: string;\n    filename: string;\n    description?: string;\n    showVSCodeOpen?: boolean;\n    autoAccept?: boolean;\n}\nexport declare class ConfirmationTool {\n    private confirmationService;\n    constructor();\n    requestConfirmation(request: ConfirmationRequest): Promise<ToolResult>;\n    checkSessionAcceptance(): Promise<ToolResult>;\n    resetSession(): void;\n    isPending(): boolean;\n}\n",
      "filePath": "../dist/tools/confirmation-tool.d.ts",
      "embedding": [
        0.4,
        0,
        0.1,
        0.1,
        0.2,
        0.06643273316107313,
        0.08995952949350702,
        0.0575319513246982,
        0.06746440947581521,
        0.025225657198216667,
        0.021275172862812733,
        0.04644089937332738,
        0.05003963413414452,
        0.06613584010424943,
        0.05454581542653683,
        0.07481724756758551,
        0.0727792090961098,
        0.08721285884302953,
        0.05192817309813608,
        0.07450659149635207,
        0.0693464582709553,
        0.034597412853966426,
        0.007274055272919223,
        0.0389671464362394,
        0.08332542944963446,
        0.01153046689385433,
        0.05894918880588364,
        0.04844877679921466,
        0.01820164641672455,
        0.05180166764245552,
        0.05632294687302948,
        0.03876643737576251,
        0.06887162045422567,
        0.057336178501637025,
        0.016776419080801085,
        0.003377874966949346,
        0.08724986301006199,
        0.025030321996402795,
        0.044783591382087255,
        0.003704240722622221,
        0.005872386174173028,
        0.05138338236020323,
        0.09224178048931382,
        0.0011940529875012263,
        0.07106266444439856,
        0.06553300698993003,
        0.09674422617578414,
        0.06794275033882975,
        0.05129313287541531,
        0.06296034527697723,
        0.023037410928210645,
        0.07385027589529367,
        0.06200198052949133,
        0.09358097073385502,
        0.0021646434735898778,
        0.03476345671344381,
        0.09318535520576508,
        0.015543598762016787,
        0.03219629056604768,
        0.05013928366787697,
        0.04491879496690433,
        0.08019607364759168,
        0.012746818320222465,
        0.09270446303966633,
        0.04300624895476568,
        0.030134568290466315,
        0.044165698540031384,
        0.08230513252928012,
        0.020219296979787582,
        0.08826780321666539,
        0.026946897376610348,
        0.0017056778686970865,
        0.026972472931572757,
        0.02395724635676191,
        0.038028134080027254,
        0.05055551367743293,
        0.04452170812580687,
        0.03854629482238743,
        0.09323346605406066,
        0.012033636253695868,
        0.06243821902696439,
        0.0776217732432399,
        0.06532535545302748,
        0.07051678695870166,
        0.07540224579750686,
        0.004480141353698741,
        0.08882416678173699,
        0.001128100369703089,
        0.08836523311765294,
        0.05240917685420449,
        0.0634335729522799,
        0.0036160847654109875,
        0.03826298466125864,
        0.0073091921403399375,
        0.06712871606494095,
        0.075203662827422,
        0.02440561452645117,
        0.060070877113228886,
        0.0026400641276444815,
        0.006624717265345537
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfirmationTool = void 0;\nconst confirmation_service_1 = require(\"../utils/confirmation-service\");\nclass ConfirmationTool {\n    constructor() {\n        this.confirmationService = confirmation_service_1.ConfirmationService.getInstance();\n    }\n    async requestConfirmation(request) {\n        try {\n            // If autoAccept is true, skip the confirmation dialog\n            if (request.autoAccept) {\n                return {\n                    success: true,\n                    output: `Auto-accepted: ${request.operation}(${request.filename})${request.description ? ` - ${request.description}` : ''}`\n                };\n            }\n            const options = {\n                operation: request.operation,\n                filename: request.filename,\n                showVSCodeOpen: request.showVSCodeOpen || false\n            };\n            // Determine operation type based on operation name\n            const operationType = request.operation.toLowerCase().includes('bash') ? 'bash' : 'file';\n            const result = await this.confirmationService.requestConfirmation(options, operationType);\n            if (result.confirmed) {\n                return {\n                    success: true,\n                    output: `User confirmed: ${request.operation}(${request.filename})${request.description ? ` - ${request.description}` : ''}${result.dontAskAgain ? ' (Don\\'t ask again enabled)' : ''}`\n                };\n            }\n            else {\n                return {\n                    success: false,\n                    error: result.feedback || `User rejected: ${request.operation}(${request.filename})`\n                };\n            }\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Confirmation error: ${error.message}`\n            };\n        }\n    }\n    async checkSessionAcceptance() {\n        try {\n            const sessionFlags = this.confirmationService.getSessionFlags();\n            // Return structured data without JSON output to avoid displaying raw JSON\n            return {\n                success: true,\n                data: {\n                    fileOperationsAccepted: sessionFlags.fileOperations,\n                    bashCommandsAccepted: sessionFlags.bashCommands,\n                    allOperationsAccepted: sessionFlags.allOperations,\n                    hasAnyAcceptance: sessionFlags.fileOperations || sessionFlags.bashCommands || sessionFlags.allOperations\n                }\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Error checking session acceptance: ${error.message}`\n            };\n        }\n    }\n    resetSession() {\n        this.confirmationService.resetSession();\n    }\n    isPending() {\n        return this.confirmationService.isPending();\n    }\n}\nexports.ConfirmationTool = ConfirmationTool;\n//# sourceMappingURL=confirmation-tool.js.map",
      "filePath": "../dist/tools/confirmation-tool.js",
      "embedding": [
        2.21,
        0,
        0.1,
        0,
        0.3,
        0.024749292872021347,
        0.09954776547268211,
        0.06089486304704489,
        0.02446843812067606,
        0.0486829978368612,
        0.023395007564845763,
        0.02091752825224662,
        0.016517414344793757,
        0.0015048993806143218,
        0.02594150807627246,
        0.04151506628626751,
        0.08198693961834884,
        0.011247583079750035,
        0.026215273803578888,
        0.07392477853722883,
        0.020948991715426104,
        0.05122349316950904,
        0.06279517515829185,
        0.090537426068872,
        0.0369372115857974,
        0.004701623469018146,
        0.09275884329984797,
        0.08623493005246845,
        0.001267065971292103,
        0.08380068584729083,
        0.058417919287843824,
        0.01721307556649231,
        0.030510425173103397,
        0.01855345133018086,
        0.09135629575376703,
        0.05435142878046724,
        0.05624945075306943,
        0.06163076875276818,
        0.04000876491588288,
        0.09870128664314144,
        0.09315422124800912,
        0.041157263309599484,
        0.073789694708067,
        0.0908662109236474,
        0.056678197038207756,
        0.0236601623283346,
        0.08981438020235072,
        0.03524552002923087,
        0.05115804956893588,
        0.0784723408607072,
        0.005935731770203678,
        0.05684371396579588,
        0.062253224938668944,
        0.04054813874372002,
        0.07325427844561291,
        0.0363418996921875,
        0.07721308633422735,
        0.055037618627535104,
        0.09949301145910817,
        0.07412873281063086,
        0.03138564914379121,
        0.005280493204383153,
        0.0688742867462031,
        0.04216080709506076,
        0.05138047152271028,
        0.08986213274371058,
        0.04100222650225924,
        0.014923401587157194,
        0.022237878580742745,
        0.08822687859750511,
        0.044748373876730974,
        0.08321730226072473,
        0.0028965905740032994,
        0.05262767471603974,
        0.06193878796187357,
        0.011133682945132273,
        0.09681803536555962,
        0.00047408241898426744,
        0.0327298479688956,
        0.05884172638721913,
        0.020235132735706242,
        0.029903732700437793,
        0.0018455801519433159,
        0.02543487591484931,
        0.05409145131088289,
        0.08588482219370253,
        0.08582275556705121,
        0.06217786815347213,
        0.016728319846014916,
        0.06524203921904047,
        0.08795298845481027,
        0.06309456711903744,
        0.07213044129498385,
        0.061186796683191984,
        0.008061005950509592,
        0.056532455641881085,
        0.06925136099217757,
        0.006006779454950229,
        0.08974090048956185,
        0.07127647831434204
      ]
    },
    {
      "content": "export { TextEditorTool } from './text-editor';\nexport { BashTool } from './bash';\nexport { TodoTool } from './todo-tool';\nexport { ConfirmationTool } from './confirmation-tool';\nexport { McpTool } from './mcp-tool';\nexport { PerplexityTool } from './perplexity-tool';\n",
      "filePath": "../dist/tools/index.d.ts",
      "embedding": [
        0.37,
        0,
        0,
        0,
        0.6,
        0.02251663703644984,
        0.0002516932538047301,
        0.016869200122716723,
        0.04732501891802224,
        0.07238463066830597,
        0.06281837675411997,
        0.03244508852119551,
        0.07781421192553052,
        0.061987364783116145,
        0.01214416355700797,
        0.05683183748548574,
        0.07903204281932064,
        0.08875730894959623,
        0.06714382779445632,
        0.09551821631947156,
        0.03910012522196064,
        0.08401859139710115,
        0.060749675731214196,
        0.07550885145898978,
        0.04716755312220211,
        0.024835735857553734,
        0.05525016534875197,
        0.047342882111500985,
        0.09517725742866374,
        0.08813485406384716,
        0.02779111066528748,
        0.05328616122368249,
        0.09518071696610736,
        0.05127651656595307,
        0.09516188518323564,
        0.001708512963944242,
        0.026056143150827462,
        0.0015853793777369952,
        0.012268285165713167,
        0.09814400525527862,
        0.08047553497954368,
        0.04817121394056844,
        0.05353787226408714,
        0.0676148101352022,
        0.05706243170477843,
        0.05981876431881775,
        0.0015160445515388311,
        0.06785726805499075,
        0.006139369396321282,
        0.06995818694523596,
        0.026537466017085534,
        0.0170934063954448,
        0.09686301498838035,
        0.028183490974387482,
        0.023680538090668026,
        0.017938975679377335,
        0.05691834095727161,
        0.003320586040939733,
        0.026864687765266793,
        0.04821439046277834,
        0.09008751926960247,
        0.02831257383962417,
        0.09823617141691288,
        0.000769110908494386,
        0.06191233866750726,
        0.05105135576879891,
        0.05211926222022322,
        0.0363760036770191,
        0.09494757854321705,
        0.006085880175600234,
        0.04982551946476428,
        0.05381871433334001,
        0.06556078575642298,
        0.08641685187639722,
        0.09942336699058035,
        0.06237563770597664,
        0.017500022700646656,
        0.07082012920552098,
        0.00990700129706672,
        0.07233394483275302,
        0.07779833559650054,
        0.0646150214333903,
        0.007319717900610501,
        0.03459743183458058,
        0.009300796589322513,
        0.08077524311782,
        0.02371810552140996,
        0.08010468778341641,
        0.08055028019363929,
        0.04220800917418578,
        0.061179187830961615,
        0.01990632724021231,
        0.04029844744400273,
        0.07513540487355341,
        0.05135371852779789,
        0.020486419991046192,
        0.019154435678410766,
        0.012792648644107696,
        0.047940712191600635,
        0.027339138089418027
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PerplexityTool = exports.McpTool = exports.ConfirmationTool = exports.TodoTool = exports.BashTool = exports.TextEditorTool = void 0;\nvar text_editor_1 = require(\"./text-editor\");\nObject.defineProperty(exports, \"TextEditorTool\", { enumerable: true, get: function () { return text_editor_1.TextEditorTool; } });\nvar bash_1 = require(\"./bash\");\nObject.defineProperty(exports, \"BashTool\", { enumerable: true, get: function () { return bash_1.BashTool; } });\nvar todo_tool_1 = require(\"./todo-tool\");\nObject.defineProperty(exports, \"TodoTool\", { enumerable: true, get: function () { return todo_tool_1.TodoTool; } });\nvar confirmation_tool_1 = require(\"./confirmation-tool\");\nObject.defineProperty(exports, \"ConfirmationTool\", { enumerable: true, get: function () { return confirmation_tool_1.ConfirmationTool; } });\nvar mcp_tool_1 = require(\"./mcp-tool\");\nObject.defineProperty(exports, \"McpTool\", { enumerable: true, get: function () { return mcp_tool_1.McpTool; } });\nvar perplexity_tool_1 = require(\"./perplexity-tool\");\nObject.defineProperty(exports, \"PerplexityTool\", { enumerable: true, get: function () { return perplexity_tool_1.PerplexityTool; } });\n//# sourceMappingURL=index.js.map",
      "filePath": "../dist/tools/index.js",
      "embedding": [
        1.26,
        0.6,
        0,
        0,
        1.3,
        0.020776474963096304,
        0.0056520997875798675,
        0.016993439979152515,
        0.07117608281789461,
        0.012561055906811114,
        0.050737167522062136,
        0.046647665958207254,
        0.04362887857587048,
        0.03415497912580922,
        0.010054232244585804,
        0.04648009800293931,
        0.026132502297346483,
        0.07698515584050358,
        0.029405186171874154,
        0.05986384260797836,
        0.04600379056133183,
        0.03383611115204295,
        0.000058771832354242995,
        0.023891525509309532,
        0.038128451843802674,
        0.0398680833513114,
        0.03599461614703764,
        0.06026252105565941,
        0.011860893305413024,
        0.05108665259629596,
        0.035125872747693423,
        0.062020305073017236,
        0.06917100503237376,
        0.0005978248230505191,
        0.0907483380645646,
        0.09623911527599915,
        0.023418583254537842,
        0.02831198600291859,
        0.04995561895989521,
        0.045892182127065174,
        0.04699149666508984,
        0.09528660768860327,
        0.023382052056095105,
        0.0399949154976382,
        0.014614694976162947,
        0.07104612546574728,
        0.0878960185471297,
        0.06991612790722039,
        0.058154830668311376,
        0.08397476602799724,
        0.09999452521544909,
        0.011321129929027264,
        0.06604535924635542,
        0.048724756079182675,
        0.01986493950061572,
        0.06583090903590735,
        0.0695942659144516,
        0.06225094226892333,
        0.013004851911547533,
        0.04492977620455572,
        0.0826865852757036,
        0.033337962158903924,
        0.02173304191520834,
        0.018258587097700296,
        0.055006904425381954,
        0.057152178144986555,
        0.028802625422038763,
        0.07260481576330582,
        0.049275655219286854,
        0.04488007673643986,
        0.09995318591255109,
        0.09919293452596266,
        0.02043870940632524,
        0.007278333376629509,
        0.050803788238691486,
        0.061409736313018874,
        0.012250435371200942,
        0.010519523570721457,
        0.04390680146546019,
        0.08238354588066127,
        0.027830039232278482,
        0.005252237276364336,
        0.08486743658108294,
        0.06971458672941179,
        0.026909830414122395,
        0.056503479473374085,
        0.031619042377144246,
        0.06168792684264393,
        0.0930193440630954,
        0.008053975148617044,
        0.0728122307162665,
        0.09901137566111184,
        0.03976477546716281,
        0.008650524102517388,
        0.06849115922803937,
        0.05781175096284868,
        0.08794984657125593,
        0.06590459171826456,
        0.06879814833198247,
        0.013706722657375027
      ]
    },
    {
      "content": "import { ToolResult } from '../types';\nexport declare class McpTool {\n    private mcpManager;\n    constructor();\n    listMcpServers(): Promise<ToolResult>;\n    listMcpTools(): Promise<ToolResult>;\n    callMcpTool(toolName: string, arguments_: any): Promise<ToolResult>;\n    refreshMcpConnections(): Promise<ToolResult>;\n}\n",
      "filePath": "../dist/tools/mcp-tool.d.ts",
      "embedding": [
        0.27,
        0,
        0.1,
        0.1,
        0.1,
        0.03693272832409318,
        0.03948953266027432,
        0.034593157613746484,
        0.07870008893693933,
        0.019356043659262412,
        0.0014690873779650505,
        0.043763378368606054,
        0.012494294914080451,
        0.00985888795870501,
        0.06791610322472935,
        0.005148145267930149,
        0.013434404254908362,
        0.05384424508646829,
        0.02263100828788721,
        0.06523640263933737,
        0.006583923762941368,
        0.03640428683323837,
        0.05372299870596153,
        0.03867587706572187,
        0.0031482086768338524,
        0.09368506096524111,
        0.011319029104242108,
        0.034222097914023766,
        0.03141696579051197,
        0.005749774412567277,
        0.036632883691860685,
        0.029409373933962646,
        0.007973408834277074,
        0.06367510539184618,
        0.0866190602460113,
        0.012436918980188606,
        0.0323330350536054,
        0.007391230760666012,
        0.04291012501191306,
        0.02947664504309916,
        0.002019454703110446,
        0.03916567760117099,
        0.012651756454512676,
        0.0085535445144035,
        0.09558034842652986,
        0.010171413201112712,
        0.024908957694836788,
        0.09214893347435771,
        0.019982157974487682,
        0.038203796420641326,
        0.0014456310007499253,
        0.04316543401191876,
        0.0956639599909842,
        0.06536799954218137,
        0.06225692987525031,
        0.06295116660486494,
        0.08218241837531684,
        0.004743152827903075,
        0.043716653514482146,
        0.08705362521041729,
        0.04316747594517997,
        0.048929224028566226,
        0.05265813567939253,
        0.011644839042078982,
        0.02968123932263236,
        0.015111070154570083,
        0.03277989918101526,
        0.002447932353594806,
        0.0020126022646230423,
        0.06330683983150658,
        0.09974353725001556,
        0.07732940431189829,
        0.05447595947556856,
        0.08234891427342464,
        0.05759476175664074,
        0.004255500960721859,
        0.07953719282679503,
        0.02083665077488869,
        0.039342649024383336,
        0.028220237506020863,
        0.06069297454493653,
        0.012394294741356272,
        0.0502981903100878,
        0.008527523776322066,
        0.04517919899646782,
        0.036664560233559164,
        0.06816794280717003,
        0.04949773018749675,
        0.025268859440260794,
        0.07591884119261949,
        0.052247500753348365,
        0.04624076122322299,
        0.03585342953013746,
        0.08313503235039406,
        0.08482026263230985,
        0.08948830258588761,
        0.04025688596195629,
        0.01997766127988361,
        0.05248161342173916,
        0.07134693878968106
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.McpTool = void 0;\nconst mcp_manager_1 = require(\"../mcp/mcp-manager\");\nclass McpTool {\n    constructor() {\n        this.mcpManager = mcp_manager_1.McpManager.getInstance();\n    }\n    async listMcpServers() {\n        try {\n            const connectedServers = this.mcpManager.getConnectedServers();\n            if (connectedServers.length === 0) {\n                return {\n                    success: true,\n                    output: 'No MCP servers are currently connected.',\n                };\n            }\n            let output = 'Connected MCP Servers:\\n\\n';\n            for (const serverName of connectedServers) {\n                const serverInfo = this.mcpManager.getServerInfo(serverName);\n                const tools = this.mcpManager.getToolsByServer(serverName);\n                output += `📡 ${serverName}\\n`;\n                if (serverInfo) {\n                    output += `   Version: ${serverInfo.version}\\n`;\n                }\n                output += `   Tools: ${tools.length}\\n`;\n                if (tools.length > 0) {\n                    output += `   Available tools:\\n`;\n                    tools.forEach(tool => {\n                        output += `     • ${tool.name}`;\n                        if (tool.description) {\n                            output += ` - ${tool.description}`;\n                        }\n                        output += '\\n';\n                    });\n                }\n                output += '\\n';\n            }\n            return {\n                success: true,\n                output,\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Failed to list MCP servers: ${error instanceof Error ? error.message : String(error)}`,\n            };\n        }\n    }\n    async listMcpTools() {\n        try {\n            const allTools = this.mcpManager.getAllTools();\n            if (allTools.length === 0) {\n                return {\n                    success: true,\n                    output: 'No MCP tools are currently available.',\n                };\n            }\n            let output = 'Available MCP Tools:\\n\\n';\n            const toolsByServer = new Map();\n            allTools.forEach(tool => {\n                if (!toolsByServer.has(tool.serverName)) {\n                    toolsByServer.set(tool.serverName, []);\n                }\n                toolsByServer.get(tool.serverName).push(tool);\n            });\n            for (const [serverName, tools] of toolsByServer) {\n                output += `📡 ${serverName}:\\n`;\n                tools.forEach(tool => {\n                    output += `   🔧 ${tool.name}`;\n                    if (tool.description) {\n                        output += ` - ${tool.description}`;\n                    }\n                    output += '\\n';\n                });\n                output += '\\n';\n            }\n            return {\n                success: true,\n                output,\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Failed to list MCP tools: ${error instanceof Error ? error.message : String(error)}`,\n            };\n        }\n    }\n    async callMcpTool(toolName, arguments_) {\n        try {\n            const tool = this.mcpManager.findToolByName(toolName);\n            if (!tool) {\n                const availableTools = this.mcpManager.getAllTools();\n                const toolNames = availableTools.map(t => t.name).join(', ');\n                return {\n                    success: false,\n                    error: `MCP tool '${toolName}' not found. Available tools: ${toolNames}`,\n                };\n            }\n            const result = await this.mcpManager.callTool(tool.serverName, toolName, arguments_);\n            if (result.isError) {\n                const errorMessage = result.content?.find(c => c.type === 'text')?.text || 'Unknown error';\n                return {\n                    success: false,\n                    error: `MCP tool error: ${errorMessage}`,\n                };\n            }\n            // Convert MCP result to tool result\n            let output = '';\n            if (result.content) {\n                for (const content of result.content) {\n                    if (content.type === 'text' && content.text) {\n                        output += content.text + '\\n';\n                    }\n                    else if (content.type === 'resource' && content.data) {\n                        output += `[Resource: ${content.mimeType || 'unknown'}]\\n${content.data}\\n`;\n                    }\n                }\n            }\n            return {\n                success: true,\n                output: output.trim() || 'Tool executed successfully (no output)',\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Failed to call MCP tool: ${error instanceof Error ? error.message : String(error)}`,\n            };\n        }\n    }\n    async refreshMcpConnections() {\n        try {\n            await this.mcpManager.refreshConnections();\n            return {\n                success: true,\n                output: 'MCP server connections refreshed successfully.',\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Failed to refresh MCP connections: ${error instanceof Error ? error.message : String(error)}`,\n            };\n        }\n    }\n}\nexports.McpTool = McpTool;\n//# sourceMappingURL=mcp-tool.js.map",
      "filePath": "../dist/tools/mcp-tool.js",
      "embedding": [
        4.77,
        0,
        0.1,
        0,
        0.3,
        0.00874624432115051,
        0.07726024859858349,
        0.07690577615469985,
        0.03559283438219222,
        0.04857932197089149,
        0.08333421880799191,
        0.08889518131528862,
        0.04719492560652775,
        0.04340774958764965,
        0.007069075379485312,
        0.052929424982099654,
        0.06894148760951363,
        0.0444002422810759,
        0.037478335115695705,
        0.007386401142002042,
        0.09524923259443958,
        0.03987978134130448,
        0.03141904797804997,
        0.01031731572306992,
        0.04533567717450258,
        0.0053638385546433635,
        0.03003411541414638,
        0.0417560240132021,
        0.02421357229340525,
        0.06653252525226945,
        0.05204256859516359,
        0.04452245675828725,
        0.005294215367261101,
        0.029328921036107472,
        0.04923966194420096,
        0.04000806004969502,
        0.042016356620615695,
        0.00717839149366496,
        0.07260372341590345,
        0.08250665033886459,
        0.0007871915080250425,
        0.06487538177183888,
        0.0924749885066181,
        0.01859342331037357,
        0.09102863269762167,
        0.08931057612409438,
        0.06697735371350554,
        0.04848793987002486,
        0.015865790834311166,
        0.005862752895131585,
        0.059406277516171696,
        0.07491815280452428,
        0.07296071784107443,
        0.0989009019049989,
        0.0053702508258379415,
        0.03993197189000313,
        0.08922991230704262,
        0.09289676470306601,
        0.03303970532315902,
        0.07591087199118231,
        0.04502923365326185,
        0.06903198965196655,
        0.09445619816836234,
        0.08373417366132813,
        0.005681540495732585,
        0.004649339020013121,
        0.0350697918174532,
        0.06256571943132769,
        0.030714365434832958,
        0.038951725384133884,
        0.07622285998494308,
        0.013800841745043414,
        0.0728408974618321,
        0.07215640701281763,
        0.06475175204738758,
        0.04230229189578088,
        0.0470480405713801,
        0.025950209346215426,
        0.03890840231993194,
        0.03779654806566021,
        0.09709284286211105,
        0.06493566326988334,
        0.012506264388282784,
        0.0871431511445331,
        0.052592390481860464,
        0.039156332497352335,
        0.0858212616840658,
        0.07875954462527451,
        0.049352376744277664,
        0.0686617385621929,
        0.04054830923495231,
        0.09041139108593592,
        0.0007805531816469924,
        0.09442579746223329,
        0.07149178121504354,
        0.07022089909258818,
        0.026800516264634422,
        0.061754255430278716,
        0.06265196180598008,
        0.05529483202749952
      ]
    },
    {
      "content": "import { ToolResult } from '../types';\nexport declare class PerplexityTool {\n    private openRouterApiKey;\n    constructor();\n    search(query: string, maxResults?: number, summarize?: boolean): Promise<ToolResult>;\n}\n",
      "filePath": "../dist/tools/perplexity-tool.d.ts",
      "embedding": [
        0.23,
        0,
        0.1,
        0.1,
        0.1,
        0.08886699446345209,
        0.03180643616311142,
        0.01243111704279133,
        0.047316184249839965,
        0.08125110524478263,
        0.07413553096861956,
        0.04029196551642229,
        0.0917861484028188,
        0.02114017884076548,
        0.0903386859053449,
        0.024934374473858358,
        0.08799463779812955,
        0.016568052255514377,
        0.09939165363886561,
        0.05576793378552411,
        0.04911254705204779,
        0.018857190162852457,
        0.08140075940731488,
        0.044873792807083916,
        0.029322742371381993,
        0.01002983005559227,
        0.03285911114134078,
        0.06528202195999408,
        0.07189971558145693,
        0.07703087154040372,
        0.008960395111847198,
        0.09761349158964722,
        0.06113572658835964,
        0.08261614693864294,
        0.014711718742892245,
        0.06350496207684163,
        0.09376057941650029,
        0.05830658412734716,
        0.026225365996310514,
        0.07128825635296616,
        0.03403768104015177,
        0.07575229558585866,
        0.05294277748457037,
        0.013113265109923401,
        0.004403348889338111,
        0.007843092025762033,
        0.08735538427444925,
        0.07287707855683219,
        0.02779772440412072,
        0.03717302840977167,
        0.03763284051514254,
        0.08909458943737836,
        0.0726565151596156,
        0.040494134730983414,
        0.07542928590904195,
        0.012176200449347842,
        0.0541553775113634,
        0.05506042360732625,
        0.02336328316459764,
        0.07487584392470395,
        0.017105933263376838,
        0.052834845693340904,
        0.06615732016552249,
        0.02547489922329286,
        0.017120310837417198,
        0.03883630081822545,
        0.044445815376834924,
        0.09017093127870536,
        0.009895450542392714,
        0.07221371267787315,
        0.09833957376966808,
        0.017634253868665017,
        0.03624467301747119,
        0.05205595440618023,
        0.06559835068852131,
        0.08459991189858984,
        0.08240934226380137,
        0.03508528860799561,
        0.009944243092466366,
        0.052957436778250405,
        0.00440000992475178,
        0.024102362309764425,
        0.03742667926704252,
        0.005447595545837392,
        0.02448219566456358,
        0.05665840666428812,
        0.021544821211281363,
        0.08292532499865042,
        0.03316825290807601,
        0.07444745591882884,
        0.08551178204756012,
        0.019692901805161058,
        0.09552083145973478,
        0.06059618432796823,
        0.008125680470733355,
        0.006583757662078327,
        0.024150672264822294,
        0.07406905370665619,
        0.05093594799612146,
        0.05428508170896121
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PerplexityTool = void 0;\nconst api_keys_1 = require(\"../utils/api-keys\");\nclass PerplexityTool {\n    constructor() {\n        const apiKeys = (0, api_keys_1.loadApiKeys)();\n        this.openRouterApiKey = apiKeys.openRouterApiKey || process.env.OPENROUTER_API_KEY || null;\n    }\n    async search(query, maxResults = 10, summarize = true) {\n        if (!this.openRouterApiKey) {\n            return {\n                success: false,\n                error: 'OpenRouter API key is required for Perplexity search. Please configure it in /providers.'\n            };\n        }\n        try {\n            const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${this.openRouterApiKey}`,\n                    'Content-Type': 'application/json',\n                    'HTTP-Referer': 'https://giga-code.dev',\n                    'X-Title': 'GIGA Code'\n                },\n                body: JSON.stringify({\n                    model: 'perplexity/sonar-pro',\n                    messages: [\n                        {\n                            role: 'system',\n                            content: `You are a helpful research assistant. Provide comprehensive, accurate, and up-to-date information based on web search results. Include relevant links and sources when possible. Structure your response clearly with headings and bullet points where appropriate.`\n                        },\n                        {\n                            role: 'user',\n                            content: query\n                        }\n                    ],\n                    max_tokens: 2000,\n                    temperature: 0.1,\n                    stream: false\n                })\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                return {\n                    success: false,\n                    error: `Perplexity search failed: ${response.status} ${response.statusText}\\n${errorText}`\n                };\n            }\n            const data = await response.json();\n            const searchResult = data.choices?.[0]?.message?.content;\n            if (!searchResult) {\n                return {\n                    success: false,\n                    error: 'No search results returned from Perplexity'\n                };\n            }\n            // Create summary for user display\n            let userSummary = '';\n            try {\n                const summaryResponse = await fetch('https://api.groq.com/openai/v1/chat/completions', {\n                    method: 'POST',\n                    headers: {\n                        'Authorization': `Bearer ${(0, api_keys_1.loadApiKeys)().groqApiKey || process.env.GROQ_API_KEY}`,\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        model: 'llama-3.3-70b-versatile',\n                        messages: [\n                            {\n                                role: 'system',\n                                content: 'Create a single concise sentence (max 100 chars) that captures the key finding from the search results. Be direct and actionable.'\n                            },\n                            {\n                                role: 'user',\n                                content: `Query: \"${query}\"\\n\\nSearch Results:\\n${searchResult}\\n\\nOne-line summary:`\n                            }\n                        ],\n                        max_tokens: 50,\n                        temperature: 0.1\n                    })\n                });\n                if (summaryResponse.ok) {\n                    const summaryData = await summaryResponse.json();\n                    userSummary = summaryData.choices?.[0]?.message?.content?.trim() || '';\n                }\n            }\n            catch (error) {\n                userSummary = 'Search completed successfully';\n            }\n            // Return structured result with both summary and full content\n            return {\n                success: true,\n                output: `🔍 **Search Results for: \"${query}\"**\\n\\n${searchResult}`,\n                data: {\n                    userSummary: userSummary || `Found information about: ${query}`,\n                    query: query\n                }\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Perplexity search error: ${error.message}`\n            };\n        }\n    }\n}\nexports.PerplexityTool = PerplexityTool;\n//# sourceMappingURL=perplexity-tool.js.map",
      "filePath": "../dist/tools/perplexity-tool.js",
      "embedding": [
        3.53,
        0,
        0.1,
        0,
        0.3,
        0.09629108896996356,
        0.03725820943229992,
        0.0023864351204707646,
        0.08527316466038473,
        0.08097418635665461,
        0.03351382318873353,
        0.04022084458116242,
        0.005112865481784823,
        0.06922337835856905,
        0.08808566766664633,
        0.07540955027900949,
        0.0067269825047773235,
        0.08556790404134013,
        0.06758418563818906,
        0.08939911810786101,
        0.042670478154424145,
        0.011094624806469734,
        0.09601141831668425,
        0.015956649252233945,
        0.05329784552495385,
        0.032496392149297094,
        0.079983104369652,
        0.04726911666574111,
        0.05222860800406827,
        0.006145977371021294,
        0.09504849173834518,
        0.07309511431836757,
        0.0872110914002255,
        0.053515194944829036,
        0.03352867376096288,
        0.004867372725745856,
        0.06487500666206396,
        0.010886951617260466,
        0.08176385669980324,
        0.09042660211917064,
        0.09250496453554298,
        0.0930669772405379,
        0.013972617747875872,
        0.07880623360312405,
        0.06783728934001501,
        0.0068013722773275,
        0.0863192722308531,
        0.029620105319345558,
        0.020522220601717614,
        0.05063216680515558,
        0.0673471462679573,
        0.03511313740550858,
        0.08362971710102322,
        0.08251755669677995,
        0.045499878438551446,
        0.06832196757374615,
        0.08854241632924832,
        0.02942339215052843,
        0.05135461290161968,
        0.06639577606045936,
        0.0721276589748192,
        0.022373356302368,
        0.04046971679080419,
        0.026242650949811843,
        0.01764249846428049,
        0.045658851922525716,
        0.03720537456502684,
        0.07071302676822526,
        0.0013154615369755708,
        0.01699033515305286,
        0.006268956892865063,
        0.032576506216706595,
        0.09714617411821995,
        0.0688390506400369,
        0.021225804037616904,
        0.01813672371254187,
        0.040413635936767826,
        0.08355447784943522,
        0.003973623772486535,
        0.048031111305977627,
        0.035859610656416484,
        0.007179381854140798,
        0.08331340089889767,
        0.015716361211330198,
        0.08321403453387718,
        0.012943683383902716,
        0.03130415249741299,
        0.010593514615732637,
        0.07624883093224574,
        0.03695612581050435,
        0.08686838465721419,
        0.0012898506459469883,
        0.0993826882572416,
        0.043211395466888396,
        0.016032897887735476,
        0.019968243383886777,
        0.029962019187012648,
        0.06912065517960687,
        0.03082909223982735,
        0.03919568780292537
      ]
    },
    {
      "content": "import { ToolResult, EditorCommand } from \"../types\";\nexport declare class TextEditorTool {\n    private editHistory;\n    private confirmationService;\n    view(filePath: string, viewRange?: [number, number]): Promise<ToolResult>;\n    strReplace(filePath: string, oldStr: string, newStr: string): Promise<ToolResult>;\n    create(filePath: string, content: string): Promise<ToolResult>;\n    insert(filePath: string, insertLine: number, content: string): Promise<ToolResult>;\n    undoEdit(): Promise<ToolResult>;\n    private generateDiff;\n    getEditHistory(): EditorCommand[];\n}\n",
      "filePath": "../dist/tools/text-editor.d.ts",
      "embedding": [
        0.49,
        0,
        0.1,
        0.1,
        0.1,
        0.08583788802021457,
        0.08009647665997473,
        0.04643255921195125,
        0.03770172425254429,
        0.00007966861267364456,
        0.0671667432067468,
        0.06333886431016565,
        0.0323621673071997,
        0.03120835717305801,
        0.045317165984201026,
        0.07164104639105869,
        0.08373662332167021,
        0.04520763244954206,
        0.030958937604652594,
        0.06193327468189469,
        0.039907452086571905,
        0.07979614980911268,
        0.022219700485443028,
        0.06863179630966104,
        0.04921861787675949,
        0.0011166550493328265,
        0.06885998022845177,
        0.06369950852851607,
        0.030633310843017014,
        0.026585026526198444,
        0.07876450735021003,
        0.000660735932725598,
        0.023776065782223188,
        0.019255185693315236,
        0.06248346056742809,
        0.07172533390757994,
        0.08725311715223034,
        0.06011303593991244,
        0.09654913775590052,
        0.06295451893824142,
        0.0756774138529117,
        0.03214923380279421,
        0.04108250117228303,
        0.07764223803042239,
        0.07074109441327607,
        0.05001318398060868,
        0.09405755725926279,
        0.0037942466077856454,
        0.011428557534004858,
        0.0001638302863493535,
        0.04668550988013864,
        0.017678872992601402,
        0.07577797897322415,
        0.09678454527076202,
        0.042988709742426016,
        0.04624693317701062,
        0.08748365378054557,
        0.020731051103794286,
        0.04174277187484761,
        0.020537572138238903,
        0.030934096197572716,
        0.025645270665273223,
        0.08250156480974391,
        0.011088798126896416,
        0.037709149618022464,
        0.07588414841619052,
        0.06256062998101251,
        0.06145473714970792,
        0.07398388982170331,
        0.05208068664203829,
        0.028649263893388312,
        0.08527158602664542,
        0.00803926622190152,
        0.09357646858864686,
        0.07341716591764287,
        0.06911736598922368,
        0.04274217367236173,
        0.08822709602676444,
        0.09401611667583451,
        0.0007937321197020175,
        0.048268443775126436,
        0.03451651492025124,
        0.01783480711267397,
        0.08820559476641245,
        0.052364364751650544,
        0.09999325984250568,
        0.08774066685792997,
        0.0959749927198632,
        0.0196175831877639,
        0.07871073554070045,
        0.06158172371233736,
        0.08815060506815936,
        0.09628813911459172,
        0.0059828173612754615,
        0.09409016417067849,
        0.08278372494447944,
        0.025931958915520525,
        0.0050444557051885774,
        0.00689434256297119,
        0.0730612474622464
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextEditorTool = void 0;\nconst fs = __importStar(require(\"fs-extra\"));\nconst path = __importStar(require(\"path\"));\nconst confirmation_service_1 = require(\"../utils/confirmation-service\");\nclass TextEditorTool {\n    constructor() {\n        this.editHistory = [];\n        this.confirmationService = confirmation_service_1.ConfirmationService.getInstance();\n    }\n    async view(filePath, viewRange) {\n        try {\n            const resolvedPath = path.resolve(filePath);\n            if (await fs.pathExists(resolvedPath)) {\n                const stats = await fs.stat(resolvedPath);\n                if (stats.isDirectory()) {\n                    const files = await fs.readdir(resolvedPath);\n                    return {\n                        success: true,\n                        output: `Directory contents of ${filePath}:\\n${files.join(\"\\n\")}`,\n                    };\n                }\n                const content = await fs.readFile(resolvedPath, \"utf-8\");\n                const lines = content.split(\"\\n\");\n                if (viewRange) {\n                    const [start, end] = viewRange;\n                    const selectedLines = lines.slice(start - 1, end);\n                    const numberedLines = selectedLines\n                        .map((line, idx) => `${start + idx}: ${line}`)\n                        .join(\"\\n\");\n                    return {\n                        success: true,\n                        output: `Lines ${start}-${end} of ${filePath}:\\n${numberedLines}`,\n                    };\n                }\n                const totalLines = lines.length;\n                const displayLines = totalLines > 10 ? lines.slice(0, 10) : lines;\n                const numberedLines = displayLines\n                    .map((line, idx) => `${idx + 1}: ${line}`)\n                    .join(\"\\n\");\n                const additionalLinesMessage = totalLines > 10 ? `\\n... +${totalLines - 10} lines` : \"\";\n                return {\n                    success: true,\n                    output: `Contents of ${filePath}:\\n${numberedLines}${additionalLinesMessage}`,\n                };\n            }\n            else {\n                return {\n                    success: false,\n                    error: `File or directory not found: ${filePath}`,\n                };\n            }\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Error viewing ${filePath}: ${error.message}`,\n            };\n        }\n    }\n    async strReplace(filePath, oldStr, newStr) {\n        try {\n            const resolvedPath = path.resolve(filePath);\n            if (!(await fs.pathExists(resolvedPath))) {\n                return {\n                    success: false,\n                    error: `File not found: ${filePath}`,\n                };\n            }\n            const content = await fs.readFile(resolvedPath, \"utf-8\");\n            if (!content.includes(oldStr)) {\n                return {\n                    success: false,\n                    error: `String not found in file: \"${oldStr}\"`,\n                };\n            }\n            // Check if user has already accepted file operations for this session\n            const sessionFlags = this.confirmationService.getSessionFlags();\n            if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\n                // Create a proper diff preview showing the change\n                const newContent = content.replace(oldStr, newStr);\n                const oldLines = content.split(\"\\n\");\n                const newLines = newContent.split(\"\\n\");\n                const diffContent = this.generateDiff(oldLines, newLines, filePath);\n                const confirmationResult = await this.confirmationService.requestConfirmation({\n                    operation: \"Edit file\",\n                    filename: filePath,\n                    showVSCodeOpen: false,\n                    content: diffContent,\n                }, \"file\");\n                if (!confirmationResult.confirmed) {\n                    return {\n                        success: false,\n                        error: confirmationResult.feedback || \"File edit cancelled by user\",\n                    };\n                }\n            }\n            const newContent = content.replace(oldStr, newStr);\n            await fs.writeFile(resolvedPath, newContent, \"utf-8\");\n            this.editHistory.push({\n                command: \"str_replace\",\n                path: filePath,\n                old_str: oldStr,\n                new_str: newStr,\n            });\n            // Generate diff output\n            const oldLines = content.split(\"\\n\");\n            const newLines = newContent.split(\"\\n\");\n            const diff = this.generateDiff(oldLines, newLines, filePath);\n            return {\n                success: true,\n                output: diff,\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Error replacing text in ${filePath}: ${error.message}`,\n            };\n        }\n    }\n    async create(filePath, content) {\n        try {\n            const resolvedPath = path.resolve(filePath);\n            // Check if user has already accepted file operations for this session\n            const sessionFlags = this.confirmationService.getSessionFlags();\n            if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\n                // Create a diff-style preview for file creation\n                const contentLines = content.split(\"\\n\");\n                const diffContent = [\n                    `Created ${filePath}`,\n                    `--- /dev/null`,\n                    `+++ b/${filePath}`,\n                    `@@ -0,0 +1,${contentLines.length} @@`,\n                    ...contentLines.map((line) => `+${line}`),\n                ].join(\"\\n\");\n                const confirmationResult = await this.confirmationService.requestConfirmation({\n                    operation: \"Write\",\n                    filename: filePath,\n                    showVSCodeOpen: false,\n                    content: diffContent,\n                }, \"file\");\n                if (!confirmationResult.confirmed) {\n                    return {\n                        success: false,\n                        error: confirmationResult.feedback || \"File creation cancelled by user\",\n                    };\n                }\n            }\n            const dir = path.dirname(resolvedPath);\n            await fs.ensureDir(dir);\n            await fs.writeFile(resolvedPath, content, \"utf-8\");\n            this.editHistory.push({\n                command: \"create\",\n                path: filePath,\n                content,\n            });\n            // Generate diff output using the same method as str_replace\n            const oldLines = []; // Empty for new files\n            const newLines = content.split(\"\\n\");\n            const diff = this.generateDiff(oldLines, newLines, filePath);\n            return {\n                success: true,\n                output: diff,\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Error creating ${filePath}: ${error.message}`,\n            };\n        }\n    }\n    async insert(filePath, insertLine, content) {\n        try {\n            const resolvedPath = path.resolve(filePath);\n            if (!(await fs.pathExists(resolvedPath))) {\n                return {\n                    success: false,\n                    error: `File not found: ${filePath}`,\n                };\n            }\n            const fileContent = await fs.readFile(resolvedPath, \"utf-8\");\n            const lines = fileContent.split(\"\\n\");\n            lines.splice(insertLine - 1, 0, content);\n            const newContent = lines.join(\"\\n\");\n            await fs.writeFile(resolvedPath, newContent, \"utf-8\");\n            this.editHistory.push({\n                command: \"insert\",\n                path: filePath,\n                insert_line: insertLine,\n                content,\n            });\n            return {\n                success: true,\n                output: `Successfully inserted content at line ${insertLine} in ${filePath}`,\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Error inserting content in ${filePath}: ${error.message}`,\n            };\n        }\n    }\n    async undoEdit() {\n        if (this.editHistory.length === 0) {\n            return {\n                success: false,\n                error: \"No edits to undo\",\n            };\n        }\n        const lastEdit = this.editHistory.pop();\n        try {\n            switch (lastEdit.command) {\n                case \"str_replace\":\n                    if (lastEdit.path && lastEdit.old_str && lastEdit.new_str) {\n                        const content = await fs.readFile(lastEdit.path, \"utf-8\");\n                        const revertedContent = content.replace(lastEdit.new_str, lastEdit.old_str);\n                        await fs.writeFile(lastEdit.path, revertedContent, \"utf-8\");\n                    }\n                    break;\n                case \"create\":\n                    if (lastEdit.path) {\n                        await fs.remove(lastEdit.path);\n                    }\n                    break;\n                case \"insert\":\n                    if (lastEdit.path && lastEdit.insert_line) {\n                        const content = await fs.readFile(lastEdit.path, \"utf-8\");\n                        const lines = content.split(\"\\n\");\n                        lines.splice(lastEdit.insert_line - 1, 1);\n                        await fs.writeFile(lastEdit.path, lines.join(\"\\n\"), \"utf-8\");\n                    }\n                    break;\n            }\n            return {\n                success: true,\n                output: `Successfully undid ${lastEdit.command} operation`,\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Error undoing edit: ${error.message}`,\n            };\n        }\n    }\n    generateDiff(oldLines, newLines, filePath) {\n        // Count actual changes\n        let addedLines = 0;\n        let removedLines = 0;\n        let i = 0, j = 0;\n        // Simple algorithm to detect changes\n        while (i < oldLines.length || j < newLines.length) {\n            if (i < oldLines.length &&\n                j < newLines.length &&\n                oldLines[i] === newLines[j]) {\n                i++;\n                j++;\n            }\n            else if (i < oldLines.length &&\n                (j >= newLines.length || oldLines[i] !== newLines[j])) {\n                removedLines++;\n                i++;\n            }\n            else if (j < newLines.length) {\n                addedLines++;\n                j++;\n            }\n        }\n        let summary = `Updated ${filePath}`;\n        if (addedLines > 0 && removedLines > 0) {\n            summary += ` with ${addedLines} addition${addedLines !== 1 ? \"s\" : \"\"} and ${removedLines} removal${removedLines !== 1 ? \"s\" : \"\"}`;\n        }\n        else if (addedLines > 0) {\n            summary += ` with ${addedLines} addition${addedLines !== 1 ? \"s\" : \"\"}`;\n        }\n        else if (removedLines > 0) {\n            summary += ` with ${removedLines} removal${removedLines !== 1 ? \"s\" : \"\"}`;\n        }\n        else {\n            summary += \" with changes\";\n        }\n        // Generate proper git-style diff format\n        let diff = summary + \"\\n\";\n        diff += `--- a/${filePath}\\n`;\n        diff += `+++ b/${filePath}\\n`;\n        diff += `@@ -1,${oldLines.length} +1,${newLines.length} @@\\n`;\n        // Generate unified diff\n        i = 0;\n        j = 0;\n        const CONTEXT_LINES = 3;\n        while (i < oldLines.length || j < newLines.length) {\n            const oldLine = i < oldLines.length ? oldLines[i] : null;\n            const newLine = j < newLines.length ? newLines[j] : null;\n            if (oldLine === newLine && oldLine !== null) {\n                // Context line\n                diff += ` ${oldLine}\\n`;\n                i++;\n                j++;\n            }\n            else {\n                // Show removed lines\n                if (oldLine !== null) {\n                    diff += `-${oldLine}\\n`;\n                    i++;\n                }\n                // Show added lines\n                if (newLine !== null) {\n                    diff += `+${newLine}\\n`;\n                    j++;\n                }\n            }\n        }\n        return diff.trim();\n    }\n    getEditHistory() {\n        return [...this.editHistory];\n    }\n}\nexports.TextEditorTool = TextEditorTool;\n//# sourceMappingURL=text-editor.js.map",
      "filePath": "../dist/tools/text-editor.js",
      "embedding": [
        12.1,
        0.6,
        0.1,
        0.4,
        0.3,
        0.010555561709550366,
        0.05457679236932938,
        0.016858336124787043,
        0.08843078925226983,
        0.04463778413190916,
        0.0073277176775853325,
        0.01745537874087736,
        0.06509545560860457,
        0.07341658109680003,
        0.007798517431439067,
        0.04021243820704391,
        0.02651056306686247,
        0.03886114686328168,
        0.07420341509061897,
        0.0003741367946811458,
        0.009741612055381167,
        0.018859400239816627,
        0.07988178603276774,
        0.07503758948882777,
        0.00737307213857118,
        0.06150445116422931,
        0.025985512746786434,
        0.01080120523994409,
        0.06338602283066552,
        0.05215072913048918,
        0.04300682888675657,
        0.07007335838757708,
        0.02758866655912261,
        0.061798830014264686,
        0.0020631535845600847,
        0.03431627511266603,
        0.011551658018254241,
        0.06826286188068588,
        0.06174785109497702,
        0.09501656014139737,
        0.05157132042385132,
        0.06851104313256283,
        0.07477740738698402,
        0.0780786614830185,
        0.07598105343303382,
        0.01714741208250531,
        0.02955812973887705,
        0.031109526004966484,
        0.09278334274690171,
        0.03228082584797908,
        0.08582741490435487,
        0.0417139755499607,
        0.015874071133489022,
        0.012201385076148652,
        0.0023202561977016534,
        0.09003247007339486,
        0.00610148813974385,
        0.07646718221457897,
        0.047036024379260494,
        0.0294188015584418,
        0.021454906733340096,
        0.015077678636981418,
        0.016469302510930796,
        0.0842034799628075,
        0.046047455457859744,
        0.09200767622756495,
        0.0672767424173322,
        0.04497186190287396,
        0.04415346002546752,
        0.0991160154146213,
        0.008323819655127773,
        0.021083961289391363,
        0.05677923792614745,
        0.03670307366822482,
        0.04824472326702231,
        0.011759665256036401,
        0.015330258135075292,
        0.08761457025231029,
        0.016683565720471038,
        0.032266898099011725,
        0.036512221644676844,
        0.09131522058280078,
        0.059621860651057346,
        0.006384114976802202,
        0.014691241710242576,
        0.08791280783579714,
        0.08901524727478916,
        0.08128986148906212,
        0.041342477229268995,
        0.04615010991266817,
        0.012018346842987738,
        0.004658357941006253,
        0.09768613498802207,
        0.023884270193912194,
        0.00775328674027127,
        0.07546781226109871,
        0.04794952051652275,
        0.057141024341732405,
        0.04305635126054232,
        0.07937745113343363
      ]
    },
    {
      "content": "import { ToolResult } from '../types';\ninterface TodoItem {\n    id: string;\n    content: string;\n    status: 'pending' | 'in_progress' | 'completed';\n    priority: 'high' | 'medium' | 'low';\n}\nexport declare class TodoTool {\n    private todos;\n    formatTodoList(): string;\n    createTodoList(todos: TodoItem[]): Promise<ToolResult>;\n    updateTodoList(updates: {\n        id: string;\n        status?: string;\n        content?: string;\n        priority?: string;\n    }[]): Promise<ToolResult>;\n    viewTodoList(): Promise<ToolResult>;\n}\nexport {};\n",
      "filePath": "../dist/tools/todo-tool.d.ts",
      "embedding": [
        0.56,
        0,
        0.1,
        0.1,
        0.2,
        0.008300300696710894,
        0.06027609427792734,
        0.08661985782934126,
        0.0752217355825969,
        0.011589980149792501,
        0.05991486629271571,
        0.036162982524880836,
        0.05188310449602038,
        0.09893394881017875,
        0.02555277612941488,
        0.0992982299116809,
        0.07182997505814474,
        0.00823699667825999,
        0.03586103884626805,
        0.006648294621652829,
        0.08727858763416309,
        0.08059487343874465,
        0.02946277085302227,
        0.0892812416745137,
        0.08716052103594718,
        0.0058864260440669065,
        0.015375220376173705,
        0.03500730329315138,
        0.020543435697124524,
        0.060982238551580616,
        0.03149094544782748,
        0.06473061336237904,
        0.030717727334454215,
        0.08063969786281608,
        0.002700203947273683,
        0.05505248626991879,
        0.061752117614959835,
        0.08011717646794685,
        0.006203238522944754,
        0.004968366690580617,
        0.0729723778361233,
        0.07803444199739794,
        0.048840415478431355,
        0.07585626211909856,
        0.00025623736993631854,
        0.039336975205018755,
        0.07420747102817526,
        0.09733157308659074,
        0.032779718526766664,
        0.09270680284057391,
        0.0695832019956497,
        0.0058231868603340516,
        0.09437194230804541,
        0.012177370503764329,
        0.000005840450594873925,
        0.048351435591902185,
        0.07558025991169304,
        0.09290774275496466,
        0.007510843855217642,
        0.05937276376002775,
        0.04620481666866926,
        0.0556829742727737,
        0.029976054489414185,
        0.006269154801989241,
        0.025639082355232757,
        0.000905103143521846,
        0.003088456036194509,
        0.08648111637983683,
        0.09035126258399394,
        0.0479880363188758,
        0.03304069978187964,
        0.011101617764396299,
        0.03635745150625073,
        0.08215629547656089,
        0.07889470191346538,
        0.054838998233544614,
        0.027164864543329725,
        0.0249418015679468,
        0.03128218847673069,
        0.07571953153737432,
        0.03472724897510793,
        0.05927075215344527,
        0.06288427634404374,
        0.09618756479996533,
        0.05381693686430377,
        0.011361388998556621,
        0.0015018652674727796,
        0.03577331627491703,
        0.04236786608712321,
        0.009157694903091795,
        0.04777243143393809,
        0.026109435405408457,
        0.09124320526862678,
        0.05576324637575295,
        0.05017588022880494,
        0.0011957294187417422,
        0.027829346259134892,
        0.05554184662730254,
        0.0878801842177544,
        0.025477149334310514
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TodoTool = void 0;\nclass TodoTool {\n    constructor() {\n        this.todos = [];\n    }\n    formatTodoList() {\n        if (this.todos.length === 0) {\n            return 'No todos created yet';\n        }\n        const getCheckbox = (status) => {\n            switch (status) {\n                case 'completed':\n                    return '●';\n                case 'in_progress':\n                    return '◐';\n                case 'pending':\n                    return '○';\n                default:\n                    return '○';\n            }\n        };\n        const getStatusColor = (status) => {\n            switch (status) {\n                case 'completed':\n                    return '\\x1b[32m'; // Green\n                case 'in_progress':\n                    return '\\x1b[36m'; // Cyan\n                case 'pending':\n                    return '\\x1b[37m'; // White/default\n                default:\n                    return '\\x1b[0m'; // Reset\n            }\n        };\n        const reset = '\\x1b[0m';\n        let output = '';\n        this.todos.forEach((todo, index) => {\n            const checkbox = getCheckbox(todo.status);\n            const statusColor = getStatusColor(todo.status);\n            const strikethrough = todo.status === 'completed' ? '\\x1b[9m' : '';\n            const indent = index === 0 ? '' : '  ';\n            output += `${indent}${statusColor}${strikethrough}${checkbox} ${todo.content}${reset}\\n`;\n        });\n        return output;\n    }\n    async createTodoList(todos) {\n        try {\n            // Validate todos\n            for (const todo of todos) {\n                if (!todo.id || !todo.content || !todo.status || !todo.priority) {\n                    return {\n                        success: false,\n                        error: 'Each todo must have id, content, status, and priority fields'\n                    };\n                }\n                if (!['pending', 'in_progress', 'completed'].includes(todo.status)) {\n                    return {\n                        success: false,\n                        error: `Invalid status: ${todo.status}. Must be pending, in_progress, or completed`\n                    };\n                }\n                if (!['high', 'medium', 'low'].includes(todo.priority)) {\n                    return {\n                        success: false,\n                        error: `Invalid priority: ${todo.priority}. Must be high, medium, or low`\n                    };\n                }\n            }\n            this.todos = todos;\n            return {\n                success: true,\n                output: this.formatTodoList()\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Error creating todo list: ${error instanceof Error ? error.message : String(error)}`\n            };\n        }\n    }\n    async updateTodoList(updates) {\n        try {\n            const updatedIds = [];\n            for (const update of updates) {\n                const todoIndex = this.todos.findIndex(t => t.id === update.id);\n                if (todoIndex === -1) {\n                    return {\n                        success: false,\n                        error: `Todo with id ${update.id} not found`\n                    };\n                }\n                const todo = this.todos[todoIndex];\n                if (update.status && !['pending', 'in_progress', 'completed'].includes(update.status)) {\n                    return {\n                        success: false,\n                        error: `Invalid status: ${update.status}. Must be pending, in_progress, or completed`\n                    };\n                }\n                if (update.priority && !['high', 'medium', 'low'].includes(update.priority)) {\n                    return {\n                        success: false,\n                        error: `Invalid priority: ${update.priority}. Must be high, medium, or low`\n                    };\n                }\n                if (update.status)\n                    todo.status = update.status;\n                if (update.content)\n                    todo.content = update.content;\n                if (update.priority)\n                    todo.priority = update.priority;\n                updatedIds.push(update.id);\n            }\n            return {\n                success: true,\n                output: this.formatTodoList()\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: `Error updating todo list: ${error instanceof Error ? error.message : String(error)}`\n            };\n        }\n    }\n    async viewTodoList() {\n        return {\n            success: true,\n            output: this.formatTodoList()\n        };\n    }\n}\nexports.TodoTool = TodoTool;\n//# sourceMappingURL=todo-tool.js.map",
      "filePath": "../dist/tools/todo-tool.js",
      "embedding": [
        4.14,
        0,
        0.1,
        0,
        0.3,
        0.00994529392127358,
        0.026726032614177487,
        0.07687657595732339,
        0.0744247107825253,
        0.07429346761125956,
        0.08278783351885874,
        0.011834614890717932,
        0.046585699678367745,
        0.062170719640845744,
        0.0978545197714657,
        0.0668176270389102,
        0.08982257491413623,
        0.026551008831274925,
        0.023460228462648527,
        0.04609413193373,
        0.023627787383558155,
        0.012692086864481023,
        0.07738065543116443,
        0.00572800528249906,
        0.04191771317248188,
        0.08246055501508427,
        0.0727286459167361,
        0.0654521799982165,
        0.036044946401611266,
        0.02931722033645169,
        0.09998912702793314,
        0.05325871988360586,
        0.028194025136049652,
        0.03849808736502313,
        0.09301494362453988,
        0.07577675157419805,
        0.03157470818688385,
        0.0030987928984089978,
        0.05810198502286126,
        0.03425795756636964,
        0.05464700800001413,
        0.0829840902308483,
        0.03970785412018148,
        0.024207097859199358,
        0.09271777519116153,
        0.027118701758299713,
        0.034894036566303764,
        0.014782097653223537,
        0.06808321265425725,
        0.07190934659635981,
        0.005439306595007277,
        0.021153181971135138,
        0.07741482248034766,
        0.08153218183160116,
        0.09469359987343967,
        0.048151044249037815,
        0.09232576365847736,
        0.06474964855529468,
        0.015940921071142023,
        0.08190356924338471,
        0.038455946513813746,
        0.09111626570220523,
        0.027993211737053315,
        0.008463355678129314,
        0.022229843350134528,
        0.09172061418868545,
        0.004776619286809447,
        0.08550088685402471,
        0.07819980526889383,
        0.07732343483412243,
        0.02200470220244537,
        0.06609862244544451,
        0.050579715524645845,
        0.07262720547758737,
        0.07580516313185837,
        0.02214483336205686,
        0.027204188662933407,
        0.026897182772375364,
        0.09994566434247387,
        0.0413767078388983,
        0.06886443078882755,
        0.020262657593665346,
        0.08555149252477813,
        0.06649208380338771,
        0.09138773199095147,
        0.08711944356566997,
        0.08571374330640866,
        0.011387552009036607,
        0.07757654193907995,
        0.053948990331637595,
        0.06031849193075759,
        0.08060453972696328,
        0.009573117489948846,
        0.04112147985072112,
        0.004168802285973006,
        0.07531870171544826,
        0.09441393892333763,
        0.04917489646479193,
        0.016223204919083134,
        0.050364593546492455
      ]
    },
    {
      "content": "export interface ToolResult {\n    success: boolean;\n    output?: string;\n    error?: string;\n    data?: any;\n    metadata?: {\n        userSummary?: string;\n        query?: string;\n        [key: string]: any;\n    };\n}\nexport interface Tool {\n    name: string;\n    description: string;\n    execute: (...args: any[]) => Promise<ToolResult>;\n}\nexport interface EditorCommand {\n    command: 'view' | 'str_replace' | 'create' | 'insert' | 'undo_edit';\n    path?: string;\n    old_str?: string;\n    new_str?: string;\n    content?: string;\n    insert_line?: number;\n    view_range?: [number, number];\n}\nexport interface AgentState {\n    currentDirectory: string;\n    editHistory: EditorCommand[];\n    tools: Tool[];\n}\nexport interface ConfirmationState {\n    skipThisSession: boolean;\n    pendingOperation: boolean;\n}\nexport declare enum AgentMode {\n    PLAN = \"plan\",\n    CHILL = \"chill\",\n    GIGA = \"giga\"\n}\nexport interface ModeConfig {\n    mode: AgentMode;\n    allowExpertModels: boolean;\n    requireConfirmation: boolean;\n    displayName: string;\n    description: string;\n}\n",
      "filePath": "../dist/types/index.d.ts",
      "embedding": [
        1.16,
        0,
        0,
        0,
        0.7,
        0.011723407702381984,
        0.03908764100593437,
        0.028789212723499647,
        0.02275209536855093,
        0.09879289341139143,
        0.01613713426522432,
        0.031696170778608534,
        0.08395493843260032,
        0.09463451456017355,
        0.07776753770789363,
        0.023508227312475784,
        0.030736740938343967,
        0.040288294369125316,
        0.09082646076729199,
        0.07740511044669406,
        0.07854610568608658,
        0.015245749439916257,
        0.09967699131096505,
        0.09546624628411138,
        0.0967141626806552,
        0.09939550149747561,
        0.0015389327930796838,
        0.08809236418584525,
        0.02033710285992818,
        0.019039260091416987,
        0.05232461101240435,
        0.07813974010188553,
        0.0457876947151073,
        0.06459381693906481,
        0.06875930281478916,
        0.08209686015922699,
        0.05261404386800851,
        0.01305039478234189,
        0.09539196882066135,
        0.029212458412149457,
        0.03191105049588654,
        0.039454013038094406,
        0.09820203556811932,
        0.007788557446698586,
        0.0933098557539955,
        0.026556023900864124,
        0.02297169677524441,
        0.040775657507761943,
        0.05115844981539644,
        0.017620858901133397,
        0.021463341689618345,
        0.09729999168643994,
        0.026307529804070473,
        0.0023705808619827184,
        0.07085616514907198,
        0.07444837158036186,
        0.03787130615699324,
        0.035946709028812675,
        0.05779575924394101,
        0.053653541517459075,
        0.026153950037252172,
        0.09868289488633024,
        0.0752965509234096,
        0.08851544703282967,
        0.0013617650211472767,
        0.03925682928422846,
        0.054263161770902735,
        0.008188352808424837,
        0.07384485019743739,
        0.04230233159463736,
        0.042043325066399184,
        0.07611291134737329,
        0.018508130596081775,
        0.08249359422321745,
        0.07261673536415424,
        0.04244924813440725,
        0.004726372348616459,
        0.05810348931926232,
        0.09760652042331154,
        0.08091387312203642,
        0.035753565164429846,
        0.008737534423325755,
        0.0772234026532318,
        0.01639686795363825,
        0.030622322958546666,
        0.09714089181271555,
        0.09456802927063966,
        0.02294808849858092,
        0.06579857323504006,
        0.05735840797872521,
        0.045038667783091416,
        0.026109786485515242,
        0.03273137073575313,
        0.07077309657766499,
        0.07026740708480365,
        0.026580479869950702,
        0.09878219417444702,
        0.04928587408531892,
        0.02818444720118084,
        0.03829564247362047
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AgentMode = void 0;\nvar AgentMode;\n(function (AgentMode) {\n    AgentMode[\"PLAN\"] = \"plan\";\n    AgentMode[\"CHILL\"] = \"chill\";\n    AgentMode[\"GIGA\"] = \"giga\";\n})(AgentMode = exports.AgentMode || (exports.AgentMode = {}));\n//# sourceMappingURL=index.js.map",
      "filePath": "../dist/types/index.js",
      "embedding": [
        0.35,
        0.1,
        0,
        0,
        0.4,
        0.08882788164950428,
        0.0225348916311111,
        0.008819005464778307,
        0.06585397160196212,
        0.026302587860918627,
        0.04498472925822782,
        0.03131156416290548,
        0.016648197622254526,
        0.08596453250634312,
        0.007293389930526851,
        0.06121178055361403,
        0.0011362618273589643,
        0.031167850716348644,
        0.09445423767595092,
        0.06756986468051861,
        0.009779456455396053,
        0.05117894667046005,
        0.0519875183285805,
        0.05316647952586521,
        0.017493189953886035,
        0.015931124058934744,
        0.056321794734644805,
        0.052923992257918044,
        0.09275580617380907,
        0.019600836566969815,
        0.00953392717958892,
        0.07040760063027501,
        0.044746194726575816,
        0.04777643368510009,
        0.07615660178560629,
        0.09831002070988434,
        0.04402408557936759,
        0.06838525008915346,
        0.0003963216500314837,
        0.09802743591723911,
        0.01734617760366283,
        0.08881087553741919,
        0.05817306469267495,
        0.002744179251206269,
        0.025425348569962137,
        0.0012533816112216046,
        0.02892935314097128,
        0.07910118714310888,
        0.001219743650285987,
        0.09698550930053701,
        0.002598690890656763,
        0.06627742458450872,
        0.04441770160215361,
        0.0583828485300981,
        0.09328297423449033,
        0.046193874533041024,
        0.08667315567984336,
        0.08491695461579636,
        0.03280415942348946,
        0.045490586707698046,
        0.020633638806675004,
        0.03912429979798432,
        0.059551570216974596,
        0.019200525315688055,
        0.06934242364093465,
        0.08183340215420533,
        0.09733991146977837,
        0.04520113896467794,
        0.0659566418440069,
        0.0955285929091923,
        0.09263802401031386,
        0.06629110202745402,
        0.014337258048177138,
        0.022947260352958854,
        0.08130305773382618,
        0.09230952294674319,
        0.06333490155194187,
        0.06306637446975567,
        0.059755570984529764,
        0.019547272264179662,
        0.0017834506178481258,
        0.05777229841331838,
        0.006092019049781583,
        0.09676346088735427,
        0.09915187386700508,
        0.07755627394245174,
        0.0021321564058115693,
        0.09074700082156134,
        0.047608847397027636,
        0.06751916694739733,
        0.02677000247606768,
        0.09684729723722779,
        0.018261022764994316,
        0.005288873093401526,
        0.08573353254757093,
        0.08906572102318466,
        0.024982416655287,
        0.0011195403137606696,
        0.04314343125364353,
        0.06684219575005047
      ]
    },
    {
      "content": "import React from 'react';\nimport { Agent } from '../agent';\ninterface Props {\n    agent: Agent;\n}\nexport default function App({ agent }: Props): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/app.d.ts",
      "embedding": [
        0.27,
        0.1,
        0,
        0.2,
        0.2,
        0.0904244125016711,
        0.005170474964298078,
        0.07325902366054837,
        0.028708052625334737,
        0.061800926027479566,
        0.014059102009638946,
        0.035607634807740894,
        0.0031524353100072736,
        0.03504611302665852,
        0.034540105321903616,
        0.08153683922139221,
        0.06744140556291828,
        0.047259783972105944,
        0.035981911806308185,
        0.06400631103788927,
        0.09127718314651075,
        0.01361682902416912,
        0.055334666690171556,
        0.007828733114223985,
        0.039703249745279,
        0.07204361901530221,
        0.04538789587030432,
        0.04047319496804508,
        0.05177365053232485,
        0.07983420116192375,
        0.094987281959172,
        0.0299886399675844,
        0.06589764465415325,
        0.03961629276698904,
        0.01580593463417306,
        0.009996453884216473,
        0.04510407757891604,
        0.06463069690294451,
        0.055957762583266304,
        0.015693044760092836,
        0.07142590366804538,
        0.03210472822054194,
        0.07587857427246518,
        0.020800848552548712,
        0.019350120749541035,
        0.08325748229014852,
        0.09059891715956943,
        0.018735684325645787,
        0.00747824736115742,
        0.030562239276915915,
        0.01767019555660253,
        0.008990400471305827,
        0.09479884843183761,
        0.035886236952996545,
        0.07261723357205652,
        0.050344590975450854,
        0.08610479707895533,
        0.05267045322584834,
        0.05026408257372503,
        0.004299033315762569,
        0.05592829010003331,
        0.02903991707055107,
        0.039200802199856694,
        0.023828316621994285,
        0.07423957471456365,
        0.01963219276219883,
        0.07673383095526282,
        0.08384058627194733,
        0.03161241124544676,
        0.07489286920279481,
        0.015062481853858223,
        0.027008460279214108,
        0.0401287915683308,
        0.09540656617086384,
        0.054125190900298686,
        0.08089766137635587,
        0.014388172387253496,
        0.05457480403022753,
        0.09778701463777624,
        0.04081376910182299,
        0.038008748897690084,
        0.05900249025963007,
        0.03928013531411592,
        0.00008437576221648202,
        0.02233537871296544,
        0.03276788494406662,
        0.09320346733267264,
        0.07660762636930774,
        0.07144743932360575,
        0.08139227194030657,
        0.0563410158504446,
        0.019521897361737473,
        0.05244778578744848,
        0.04219833443543372,
        0.09347785734842431,
        0.06130421309402018,
        0.016414241200430613,
        0.06951593193239627,
        0.012714871553969054,
        0.010661823032247386
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst types_1 = require(\"../types\");\nconst confirmation_service_1 = require(\"../utils/confirmation-service\");\nconst confirmation_dialog_1 = __importDefault(require(\"./components/confirmation-dialog\"));\nconst mode_manager_1 = require(\"../utils/mode-manager\");\nfunction App({ agent }) {\n    const [input, setInput] = (0, react_1.useState)('');\n    const [history, setHistory] = (0, react_1.useState)([]);\n    const [isProcessing, setIsProcessing] = (0, react_1.useState)(false);\n    const [confirmationOptions, setConfirmationOptions] = (0, react_1.useState)(null);\n    const [currentMode, setCurrentMode] = (0, react_1.useState)(mode_manager_1.modeManager.getCurrentMode());\n    const { exit } = (0, ink_1.useApp)();\n    const confirmationService = confirmation_service_1.ConfirmationService.getInstance();\n    (0, react_1.useEffect)(() => {\n        const handleConfirmationRequest = (options) => {\n            setConfirmationOptions(options);\n        };\n        confirmationService.on('confirmation-requested', handleConfirmationRequest);\n        return () => {\n            confirmationService.off('confirmation-requested', handleConfirmationRequest);\n        };\n    }, [confirmationService]);\n    // Reset confirmation service session on app start\n    (0, react_1.useEffect)(() => {\n        confirmationService.resetSession();\n    }, []);\n    (0, ink_1.useInput)(async (inputChar, key) => {\n        // If confirmation dialog is open, don't handle normal input\n        if (confirmationOptions) {\n            return;\n        }\n        // Handle Shift+Tab for mode cycling (Note: This is handled in ChatInterface now)\n        if (key.shift && key.tab) {\n            return;\n        }\n        if (key.ctrl && inputChar === 'c') {\n            exit();\n            return;\n        }\n        if (key.return) {\n            if (input.trim() === 'exit' || input.trim() === 'quit') {\n                exit();\n                return;\n            }\n            if (input.trim()) {\n                setIsProcessing(true);\n                const result = await agent.processCommand(input.trim());\n                setHistory(prev => [...prev, { command: input.trim(), result }]);\n                setInput('');\n                setIsProcessing(false);\n            }\n            return;\n        }\n        if (key.backspace || key.delete) {\n            setInput(prev => prev.slice(0, -1));\n            return;\n        }\n        if (inputChar && !key.ctrl && !key.meta) {\n            setInput(prev => prev + inputChar);\n        }\n    });\n    const renderResult = (result) => {\n        if (result.success) {\n            return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"green\" }, \"\\u2713 Success\"),\n                result.output && (react_1.default.createElement(ink_1.Box, { marginLeft: 2 },\n                    react_1.default.createElement(ink_1.Text, null, result.output)))));\n        }\n        else {\n            return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"red\" }, \"\\u2717 Error\"),\n                result.error && (react_1.default.createElement(ink_1.Box, { marginLeft: 2 },\n                    react_1.default.createElement(ink_1.Text, { color: \"red\" }, result.error)))));\n        }\n    };\n    const handleConfirmation = (dontAskAgain) => {\n        confirmationService.confirmOperation(true, dontAskAgain);\n        setConfirmationOptions(null);\n    };\n    const handleRejection = (feedback) => {\n        confirmationService.rejectOperation(feedback);\n        setConfirmationOptions(null);\n    };\n    if (confirmationOptions) {\n        return (react_1.default.createElement(confirmation_dialog_1.default, { operation: confirmationOptions.operation, filename: confirmationOptions.filename, showVSCodeOpen: confirmationOptions.showVSCodeOpen, onConfirm: handleConfirmation, onReject: handleRejection }));\n    }\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", padding: 1 },\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1, flexDirection: \"column\" },\n            react_1.default.createElement(ink_1.Text, { bold: true, color: \"cyan\" }, \"\\uD83D\\uDD27 Grok CLI - Text Editor Agent\"),\n            react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { bold: true, color: currentMode === types_1.AgentMode.GIGA ? 'yellow' : currentMode === types_1.AgentMode.CHILL ? 'green' : 'blue' }, mode_manager_1.modeManager.getModeDisplayName()),\n                react_1.default.createElement(ink_1.Text, { dimColor: true },\n                    \" - \",\n                    mode_manager_1.modeManager.getModeDescription()))),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { dimColor: true }, \"Available commands: view, str_replace, create, insert, undo_edit, bash, help\"),\n            react_1.default.createElement(ink_1.Text, { dimColor: true }, \"Type 'help' for detailed usage, 'exit' or Ctrl+C to quit, Shift+Tab to cycle modes\")),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 }, history.slice(-10).map((entry, index) => (react_1.default.createElement(ink_1.Box, { key: index, flexDirection: \"column\", marginBottom: 1 },\n            react_1.default.createElement(ink_1.Box, null,\n                react_1.default.createElement(ink_1.Text, { color: \"blue\" }, \"$ \"),\n                react_1.default.createElement(ink_1.Text, null, entry.command)),\n            renderResult(entry.result))))),\n        react_1.default.createElement(ink_1.Box, null,\n            react_1.default.createElement(ink_1.Text, { color: \"blue\" }, \"$ \"),\n            react_1.default.createElement(ink_1.Text, null,\n                input,\n                !isProcessing && react_1.default.createElement(ink_1.Text, { color: \"white\" }, \"\\u2588\")),\n            isProcessing && react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \" (processing...)\"))));\n}\nexports.default = App;\n//# sourceMappingURL=app.js.map",
      "filePath": "../dist/ui/app.js",
      "embedding": [
        6.71,
        0.8,
        0,
        0.6,
        0.2,
        0.02295950655846434,
        0.02703098527835911,
        0.08297913873551754,
        0.04808552164016136,
        0.07426838955520411,
        0.06300187578623419,
        0.06605152741538525,
        0.034542910018604545,
        0.06656897492126874,
        0.05956495303992988,
        0.0689623297479374,
        0.0508221109829782,
        0.051703652311238336,
        0.050152844476257175,
        0.010077167952207157,
        0.024871237856102835,
        0.07895938066166336,
        0.009287367868756492,
        0.08147631946203329,
        0.005323228749695253,
        0.0096900078458792,
        0.008606827417367425,
        0.02198434129846626,
        0.03406951993108698,
        0.08771254494697031,
        0.0641331562573343,
        0.0432887335519944,
        0.04353092487725857,
        0.0008548738234095854,
        0.07946168958080238,
        0.03505451161790131,
        0.04261949061365366,
        0.003957572510979124,
        0.009805920867598473,
        0.034268127828775106,
        0.01207219736026608,
        0.008539835946221342,
        0.06500545355137664,
        0.08958452152493716,
        0.06594954635574306,
        0.016391532330602376,
        0.0009790720249032603,
        0.020042587454547536,
        0.09136627727046717,
        0.050826100665989575,
        0.09115516555683588,
        0.013765243090724322,
        0.09197477256287878,
        0.04964028258646325,
        0.0776144423904012,
        0.02682708487993666,
        0.03144585874908464,
        0.06610898659857521,
        0.00020164219771305893,
        0.022046239012234604,
        0.006588198624675779,
        0.010179080936995367,
        0.03701250944647252,
        0.07056124137840482,
        0.017372939274802834,
        0.09581811938288981,
        0.003915033639252619,
        0.08620346951659927,
        0.04712881660338145,
        0.07966212555312913,
        0.08910880495514613,
        0.08207194795463287,
        0.06915869149656788,
        0.005313341996847177,
        0.04803253144040559,
        0.04842827378696546,
        0.016198863483347283,
        0.003083817166914327,
        0.006097389805472597,
        0.0011669521456928679,
        0.00009669127619175156,
        0.052064842336891376,
        0.0506979110067345,
        0.06355746566356556,
        0.07201267011229212,
        0.05412656741670077,
        0.04917453896073724,
        0.04994878213282237,
        0.011831201447940531,
        0.08353582268135011,
        0.05465933384809046,
        0.09042602448211429,
        0.053570316997492484,
        0.06789804415599306,
        0.028698711726895546,
        0.04675502269955716,
        0.05027751617369915,
        0.005303799854139902,
        0.008446855504330953,
        0.07201927454786948
      ]
    },
    {
      "content": "import React from \"react\";\ninterface AddMcpServerProps {\n    onClose: () => void;\n    onAddServer: (name: string, command: string, args?: string[], env?: Record<string, string>, description?: string) => void;\n}\nexport default function AddMcpServer({ onClose, onAddServer }: AddMcpServerProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/add-mcp-server.d.ts",
      "embedding": [
        0.38,
        0.1,
        0,
        0.1,
        0.2,
        0.062453880260118555,
        0.009371461731455167,
        0.0859585999945538,
        0.08072383058958303,
        0.07507128503717009,
        0.028283599341815492,
        0.046577215169569454,
        0.06491001366818376,
        0.0439482048892779,
        0.03870041024498527,
        0.02503786476073583,
        0.06568165473569486,
        0.0512883951628917,
        0.034809475506668755,
        0.08848355081065157,
        0.05689574676785526,
        0.07042314742777486,
        0.002279140065737728,
        0.021742350151977553,
        0.030934077375482982,
        0.0616525399173514,
        0.05050446184734252,
        0.020801176590303297,
        0.07219717562432414,
        0.09590190016049602,
        0.09154369416852802,
        0.07236738980771601,
        0.0728264440533184,
        0.036439387425675984,
        0.05705322572784297,
        0.06618379830194748,
        0.053349396025307416,
        0.04364477760503001,
        0.04817149175685053,
        0.09246723616342382,
        0.05896680360070761,
        0.0542405598142104,
        0.025686983667649644,
        0.08494932737106559,
        0.09320499254986465,
        0.06683938042141778,
        0.0516253203924867,
        0.0056979433467541085,
        0.09853311136866015,
        0.06260090260380294,
        0.013735979764650087,
        0.03099438902865507,
        0.060790538412016294,
        0.005117414606139548,
        0.0950497317050703,
        0.04434163047875578,
        0.024975296726915876,
        0.07586929259521204,
        0.04561427277872643,
        0.056857540060085754,
        0.03944043525192517,
        0.0023975843263045584,
        0.04646849726000372,
        0.09888764088716942,
        0.08541356704563319,
        0.03413342763344549,
        0.0027918999514395474,
        0.09653483216627919,
        0.08716237764572712,
        0.09884360828611743,
        0.06532364511259191,
        0.04684009341951241,
        0.02840379453216878,
        0.0503508180253196,
        0.00999126218974249,
        0.07461492002291278,
        0.03410153323146219,
        0.03550166723676893,
        0.09502813811036342,
        0.09912177717339636,
        0.057353146203811226,
        0.04541258939191837,
        0.059318070918685864,
        0.06560901722093583,
        0.04394375385342417,
        0.010215709250383244,
        0.04139651077014592,
        0.06283035068903459,
        0.0454506247062457,
        0.0007550219736679909,
        0.038706518273605287,
        0.07207794014770268,
        0.046119066211884635,
        0.031985802923412986,
        0.034764283851414356,
        0.0723568759929323,
        0.044038028338468704,
        0.02090047579372324,
        0.06096012411642844,
        0.08472630313661418
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nfunction AddMcpServer({ onClose, onAddServer }) {\n    const [currentField, setCurrentField] = (0, react_1.useState)('name');\n    const [formData, setFormData] = (0, react_1.useState)({\n        name: '',\n        command: '',\n        args: '',\n        env: '',\n        description: ''\n    });\n    const fields = [\n        { key: 'name', label: 'Server Name', placeholder: 'my-server', required: true },\n        { key: 'command', label: 'Command', placeholder: 'npx @modelcontextprotocol/server-filesystem', required: true },\n        { key: 'args', label: 'Arguments', placeholder: '/path/to/directory (space-separated)', required: false },\n        { key: 'env', label: 'Environment', placeholder: 'KEY1=value1 KEY2=value2', required: false },\n        { key: 'description', label: 'Description', placeholder: 'Optional description', required: false }\n    ];\n    const currentFieldIndex = fields.findIndex(f => f.key === currentField);\n    (0, ink_1.useInput)((inputChar, key) => {\n        if (key.ctrl && inputChar === \"c\") {\n            onClose();\n            return;\n        }\n        if (key.escape) {\n            onClose();\n            return;\n        }\n        if (key.upArrow) {\n            const newIndex = currentFieldIndex === 0 ? fields.length - 1 : currentFieldIndex - 1;\n            setCurrentField(fields[newIndex].key);\n            return;\n        }\n        if (key.downArrow) {\n            const newIndex = (currentFieldIndex + 1) % fields.length;\n            setCurrentField(fields[newIndex].key);\n            return;\n        }\n        if (key.tab) {\n            const newIndex = (currentFieldIndex + 1) % fields.length;\n            setCurrentField(fields[newIndex].key);\n            return;\n        }\n        if (key.return) {\n            // If we're on the last field or have required fields filled, submit\n            if (currentFieldIndex === fields.length - 1 ||\n                (formData.name.trim() && formData.command.trim())) {\n                handleSubmit();\n            }\n            else {\n                // Move to next field\n                const newIndex = (currentFieldIndex + 1) % fields.length;\n                setCurrentField(fields[newIndex].key);\n            }\n            return;\n        }\n        if (key.backspace || key.delete) {\n            setFormData(prev => ({\n                ...prev,\n                [currentField]: prev[currentField].slice(0, -1)\n            }));\n            return;\n        }\n        if (inputChar && !key.ctrl && !key.meta) {\n            setFormData(prev => ({\n                ...prev,\n                [currentField]: prev[currentField] + inputChar\n            }));\n            return;\n        }\n    });\n    const handleSubmit = () => {\n        if (!formData.name.trim() || !formData.command.trim()) {\n            return; // Don't submit if required fields are empty\n        }\n        const args = formData.args.trim() ? formData.args.trim().split(' ') : undefined;\n        const env = formData.env.trim() ? parseEnvString(formData.env.trim()) : undefined;\n        const description = formData.description.trim() || undefined;\n        onAddServer(formData.name.trim(), formData.command.trim(), args, env, description);\n    };\n    const parseEnvString = (envStr) => {\n        const env = {};\n        const pairs = envStr.split(' ');\n        for (const pair of pairs) {\n            const [key, ...valueParts] = pair.split('=');\n            if (key && valueParts.length > 0) {\n                env[key] = valueParts.join('=');\n            }\n        }\n        return env;\n    };\n    const canSubmit = formData.name.trim() && formData.command.trim();\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n        react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\u2795 Add MCP Server\"),\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Fill in the server configuration:\")),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 }, fields.map((field) => {\n            const isSelected = field.key === currentField;\n            const value = formData[field.key];\n            return (react_1.default.createElement(ink_1.Box, { key: field.key, borderStyle: \"round\", borderColor: isSelected ? \"blue\" : \"gray\", paddingX: 1, marginBottom: 1 },\n                react_1.default.createElement(ink_1.Box, { width: 15 },\n                    react_1.default.createElement(ink_1.Text, { color: isSelected ? \"blue\" : \"white\" },\n                        field.label,\n                        field.required ? \"*\" : \"\",\n                        \":\")),\n                react_1.default.createElement(ink_1.Box, { flexGrow: 1 },\n                    react_1.default.createElement(ink_1.Text, { color: value ? \"white\" : \"gray\" },\n                        value || field.placeholder,\n                        isSelected ? \"█\" : \"\"))));\n        })),\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: canSubmit ? \"green\" : \"red\" }, canSubmit ? \"✓ Ready to add server\" : \"❌ Name and command are required\")),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Use \\u2191/\\u2193 arrows or Tab to navigate fields\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Type to edit current field\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                \"\\u2022 Press Enter to \",\n                canSubmit ? \"add server\" : \"go to next field\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to cancel\"))));\n}\nexports.default = AddMcpServer;\n//# sourceMappingURL=add-mcp-server.js.map",
      "filePath": "../dist/ui/components/add-mcp-server.js",
      "embedding": [
        7.26,
        0.7,
        0,
        0.3,
        0.2,
        0.09030079412101226,
        0.01947960919124682,
        0.09948203751578752,
        0.06612798451594772,
        0.09000936381226847,
        0.07680693322422277,
        0.033025496745403726,
        0.0027902673492113395,
        0.036205661995450125,
        0.09427768787479757,
        0.011649151898081501,
        0.0639643586801703,
        0.014669699774911628,
        0.05605547473287989,
        0.043054709034444395,
        0.01131144749482519,
        0.011498265696535127,
        0.07149557725602343,
        0.03202282169713396,
        0.04657756768871111,
        0.03613513085419794,
        0.03780750387614129,
        0.035184113977151245,
        0.06773950567914686,
        0.012330411789868123,
        0.06512222384622084,
        0.03837952443398149,
        0.03644880772218556,
        0.04376865993314534,
        0.07006873628761538,
        0.09153363896750222,
        0.09795827437019436,
        0.01609138518819937,
        0.0522378484861693,
        0.0653710370801439,
        0.04498229300614566,
        0.08530888926584339,
        0.05607155742050778,
        0.07209583434734403,
        0.08334718804212993,
        0.004451422703947117,
        0.04585958325147264,
        0.08789696241871761,
        0.06057037186938209,
        0.054716944233263065,
        0.06945980371911778,
        0.024154245857745893,
        0.01486243801353885,
        0.06455049211622836,
        0.04883084288784857,
        0.0033490039722274823,
        0.05867931710875163,
        0.07817743227511594,
        0.03930559430831418,
        0.08588854630410228,
        0.008921213894517421,
        0.04189112960390449,
        0.025425007799259824,
        0.07746467499026147,
        0.037146876391744535,
        0.046041153955302894,
        0.03144791695607827,
        0.013919639913048055,
        0.0948933423406973,
        0.05940308912489415,
        0.012853447072974944,
        0.05355777972985584,
        0.0935560974519338,
        0.008536201121972542,
        0.045861513132163884,
        0.05721932588038808,
        0.04470006923408823,
        0.05462470556436333,
        0.07389914116766756,
        0.03832948603227752,
        0.07877308235506714,
        0.005843599385635046,
        0.07106198606604591,
        0.09075503737183416,
        0.009658113356216925,
        0.06858289686473916,
        0.05264857047812506,
        0.003757657147652138,
        0.07756227598695994,
        0.096952309791849,
        0.09967765517380664,
        0.09100122376850771,
        0.06077144799220844,
        0.09318297644676819,
        0.09824783274029979,
        0.04017402473103748,
        0.01940115303463165,
        0.08528316678162545,
        0.027063902406641794,
        0.04532344244013306
      ]
    },
    {
      "content": "import React from \"react\";\ninterface Provider {\n    name: string;\n    keyName: string;\n    description: string;\n}\ninterface AddModelProps {\n    providers: Provider[];\n    onClose: () => void;\n    onAddModel: (providerName: string, modelName: string) => void;\n}\nexport default function AddModel({ providers, onClose, onAddModel }: AddModelProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/add-model.d.ts",
      "embedding": [
        0.44,
        0.1,
        0,
        0.1,
        0.2,
        0.07874097790845963,
        0.02287414703061459,
        0.0377678820722539,
        0.07720120695957612,
        0.006403280918668819,
        0.047273934299352796,
        0.07835138598264829,
        0.09513731310658441,
        0.06998960414004173,
        0.06413699260767923,
        0.08312881904784389,
        0.02901360069990804,
        0.06983175484013557,
        0.06170357938187332,
        0.08810398349182456,
        0.0819655380053604,
        0.03057742706007227,
        0.06128492371356662,
        0.07933769345948018,
        0.02041504847483057,
        0.08839830295569118,
        0.02271555569772381,
        0.04279997004112253,
        0.09294770631343001,
        0.021260937585344288,
        0.07581964850085393,
        0.004400002919888846,
        0.08639224862870186,
        0.05374682396622774,
        0.056035636170085015,
        0.07420113957786127,
        0.017343236453961852,
        0.020516987381448894,
        0.034393766565395036,
        0.08338687093675141,
        0.0620070585880195,
        0.07852367771592667,
        0.07082737548788816,
        0.042454911069095325,
        0.06628274248529342,
        0.09711425591319772,
        0.09756748270996911,
        0.032781330621683306,
        0.017407125543465417,
        0.08129204136781659,
        0.08271914940975084,
        0.08356849952655059,
        0.09787118419216737,
        0.010041465928857253,
        0.01082377399090716,
        0.02666412919118818,
        0.06481593819808565,
        0.004957746580149348,
        0.06523205114698429,
        0.039733967928482154,
        0.07276201811678702,
        0.09845967460200525,
        0.0934268791882964,
        0.04279542559176282,
        0.062469400339232706,
        0.01807610821628629,
        0.0033980574980902903,
        0.06653396546153705,
        0.039521989589446166,
        0.03509772525418392,
        0.05205381781368582,
        0.06872436345857184,
        0.08985274791107219,
        0.006590598017265104,
        0.05052672281513143,
        0.02314163049310737,
        0.0004583565189182348,
        0.0941484545865526,
        0.09010465249953575,
        0.04929292693837689,
        0.06486792855829777,
        0.02201430650391341,
        0.05986750158883224,
        0.02464392921237557,
        0.0391956419690271,
        0.010564664019763016,
        0.018533102431146666,
        0.05906750724172079,
        0.02971700375576918,
        0.02990737667812056,
        0.04558616225550941,
        0.011174454014706826,
        0.018336299380603004,
        0.03040772079033546,
        0.0695603944935615,
        0.0008523701642825344,
        0.029334151518872666,
        0.02441819271560235,
        0.027200426916705368,
        0.09604194830146047
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst api_keys_1 = require(\"../../utils/api-keys\");\nconst dynamic_model_fetcher_1 = require(\"../../utils/dynamic-model-fetcher\");\nconst fuzzy_search_1 = require(\"../../utils/fuzzy-search\");\nfunction AddModel({ providers, onClose, onAddModel }) {\n    const [availableProviders, setAvailableProviders] = (0, react_1.useState)([]);\n    const [stage, setStage] = (0, react_1.useState)('provider');\n    const [selectedProviderIndex, setSelectedProviderIndex] = (0, react_1.useState)(0);\n    const [selectedModelIndex, setSelectedModelIndex] = (0, react_1.useState)(0);\n    const [currentSearchQuery, setCurrentSearchQuery] = (0, react_1.useState)(\"\");\n    const [filteredModels, setFilteredModels] = (0, react_1.useState)([]);\n    const [isLoadingModels, setIsLoadingModels] = (0, react_1.useState)(false);\n    const [allModels, setAllModels] = (0, react_1.useState)([]);\n    (0, react_1.useEffect)(() => {\n        initializeProviders();\n    }, []);\n    (0, react_1.useEffect)(() => {\n        if (stage === 'model' && availableProviders[selectedProviderIndex] && !isLoadingModels) {\n            updateFilteredModels();\n        }\n    }, [stage, selectedProviderIndex, currentSearchQuery, availableProviders, allModels]);\n    const initializeProviders = () => {\n        const apiKeys = (0, api_keys_1.loadApiKeys)();\n        const providersWithKeys = [];\n        for (const provider of providers) {\n            const keyValue = apiKeys[provider.keyName];\n            // Ollama always has a base URL (defaults to localhost), so it's always available\n            if (keyValue || provider.keyName === 'ollamaBaseUrl') {\n                providersWithKeys.push(provider);\n            }\n        }\n        setAvailableProviders(providersWithKeys);\n    };\n    const loadModelsForProvider = async (provider) => {\n        setIsLoadingModels(true);\n        setAllModels([]);\n        const apiKeys = (0, api_keys_1.loadApiKeys)();\n        const apiKey = apiKeys[provider.keyName];\n        const providerName = provider.name.toLowerCase();\n        try {\n            const models = await (0, dynamic_model_fetcher_1.fetchModelsWithFallback)(providerName, apiKey);\n            setAllModels(models);\n        }\n        catch (error) {\n            console.error(`Failed to load models for ${provider.name}:`, error);\n            setAllModels([]);\n        }\n        finally {\n            setIsLoadingModels(false);\n        }\n    };\n    const updateFilteredModels = () => {\n        if (!currentSearchQuery.trim()) {\n            setFilteredModels(allModels);\n            return;\n        }\n        const filtered = (0, fuzzy_search_1.fuzzySearch)(currentSearchQuery, allModels, (model) => model, 50 // Show up to 50 results\n        );\n        setFilteredModels(filtered);\n    };\n    (0, ink_1.useInput)((inputChar, key) => {\n        if (key.ctrl && inputChar === \"c\") {\n            onClose();\n            return;\n        }\n        if (key.escape) {\n            if (stage === 'model') {\n                // Go back to provider selection\n                setStage('provider');\n                setCurrentSearchQuery(\"\");\n                setSelectedModelIndex(0);\n            }\n            else {\n                onClose();\n            }\n            return;\n        }\n        if (stage === 'provider') {\n            if (key.upArrow) {\n                setSelectedProviderIndex(prev => prev === 0 ? availableProviders.length - 1 : prev - 1);\n                return;\n            }\n            if (key.downArrow) {\n                setSelectedProviderIndex(prev => (prev + 1) % availableProviders.length);\n                return;\n            }\n            if (key.return) {\n                if (availableProviders.length > 0) {\n                    const selectedProvider = availableProviders[selectedProviderIndex];\n                    // Move to model selection stage and load models\n                    setStage('model');\n                    setCurrentSearchQuery(\"\");\n                    setSelectedModelIndex(0);\n                    loadModelsForProvider(selectedProvider);\n                }\n                return;\n            }\n        }\n        else if (stage === 'model') {\n            if (key.upArrow) {\n                setSelectedModelIndex(prev => prev === 0 ? Math.max(0, filteredModels.length - 1) : prev - 1);\n                return;\n            }\n            if (key.downArrow) {\n                setSelectedModelIndex(prev => filteredModels.length === 0 ? 0 : (prev + 1) % Math.min(10, filteredModels.length));\n                return;\n            }\n            if (key.return) {\n                if (filteredModels.length > 0 && selectedModelIndex < filteredModels.length) {\n                    const selectedModel = filteredModels[selectedModelIndex];\n                    const selectedProvider = availableProviders[selectedProviderIndex];\n                    onAddModel(selectedProvider.name, selectedModel);\n                }\n                return;\n            }\n            if (key.backspace || key.delete) {\n                setCurrentSearchQuery(prev => prev.slice(0, -1));\n                setSelectedModelIndex(0);\n                return;\n            }\n            if (inputChar && !key.ctrl && !key.meta) {\n                setCurrentSearchQuery(prev => prev + inputChar);\n                setSelectedModelIndex(0);\n                return;\n            }\n        }\n    });\n    if (availableProviders.length === 0) {\n        return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"red\" }, \"\\u274C No API keys found\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Configure API keys in /providers first\"),\n            react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"Press Esc to close\"))));\n    }\n    if (stage === 'provider') {\n        return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83D\\uDD0D Select Provider\"),\n            react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Choose a provider to browse models from:\")),\n            react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 }, availableProviders.map((provider, index) => {\n                const isSelected = index === selectedProviderIndex;\n                return (react_1.default.createElement(ink_1.Box, { key: provider.keyName, borderStyle: \"round\", borderColor: isSelected ? \"blue\" : \"gray\", paddingX: 1, marginBottom: 1 },\n                    react_1.default.createElement(ink_1.Box, { width: 12 },\n                        react_1.default.createElement(ink_1.Text, { color: isSelected ? \"blue\" : \"white\" }, provider.name)),\n                    react_1.default.createElement(ink_1.Box, { flexGrow: 1 },\n                        react_1.default.createElement(ink_1.Text, { color: \"green\" }, \"\\u2713 API key configured\")),\n                    react_1.default.createElement(ink_1.Box, { width: 25 },\n                        react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, provider.description))));\n            })),\n            react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Use \\u2191/\\u2193 arrows to navigate\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Enter to select provider\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to cancel\"))));\n    }\n    // Model selection stage\n    const selectedProvider = availableProviders[selectedProviderIndex];\n    if (isLoadingModels) {\n        return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"yellow\" },\n                \"\\uD83D\\uDD0D Add Model from \",\n                selectedProvider.name),\n            react_1.default.createElement(ink_1.Box, { marginTop: 2 },\n                react_1.default.createElement(ink_1.Text, { color: \"blue\" },\n                    \"\\uD83D\\uDD04 Loading models from \",\n                    selectedProvider.name,\n                    \"...\")),\n            react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"Press Esc to go back\"))));\n    }\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n        react_1.default.createElement(ink_1.Text, { color: \"yellow\" },\n            \"\\uD83D\\uDD0D Add Model from \",\n            selectedProvider.name),\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Search: \"),\n            react_1.default.createElement(ink_1.Text, null,\n                currentSearchQuery || \"\",\n                \"\\u2588\")),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n            filteredModels.length === 0 ? (react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: \"gray\", paddingX: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, allModels.length === 0\n                    ? \"No models available\"\n                    : `No models found matching \"${currentSearchQuery}\"`))) : (filteredModels.slice(0, 10).map((model, index) => {\n                const isSelected = index === selectedModelIndex;\n                return (react_1.default.createElement(ink_1.Box, { key: model, borderStyle: \"round\", borderColor: isSelected ? \"blue\" : \"gray\", paddingX: 1, marginBottom: 1 },\n                    react_1.default.createElement(ink_1.Text, { color: isSelected ? \"blue\" : \"white\" }, model)));\n            })),\n            filteredModels.length > 10 && (react_1.default.createElement(ink_1.Box, { paddingX: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                    \"... and \",\n                    filteredModels.length - 10,\n                    \" more\")))),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                \"\\u2022 Type to search models (\",\n                allModels.length,\n                \" total)\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Use \\u2191/\\u2193 arrows to navigate\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Enter to add selected model\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to go back\"))));\n}\nexports.default = AddModel;\n//# sourceMappingURL=add-model.js.map",
      "filePath": "../dist/ui/components/add-model.js",
      "embedding": [
        10.85,
        0.7,
        0,
        0.3,
        0.2,
        0.08200797296830853,
        0.03475784644620533,
        0.08699124267887443,
        0.02615202389330079,
        0.04980693924032864,
        0.07529276599166726,
        0.012926085207759765,
        0.059952455424878016,
        0.08725098852044018,
        0.06876105024159711,
        0.04150078321803268,
        0.09353515157883303,
        0.03315388940122784,
        0.07009091418042039,
        0.021937440317182658,
        0.06952483927555765,
        0.09927383027815884,
        0.09521171731794326,
        0.05265989952438051,
        0.09153632666707934,
        0.05043041619940959,
        0.05674009295438977,
        0.0686596244398866,
        0.022979462348695214,
        0.026702199191788845,
        0.08908096079330348,
        0.007312484967323396,
        0.03727124528344942,
        0.0698802947631998,
        0.026624496730526262,
        0.03596721491178169,
        0.07719055254134283,
        0.09157567563955027,
        0.07535234610885429,
        0.09210158294559236,
        0.032600289226252965,
        0.038173626039217756,
        0.0556425460824064,
        0.03659446198311122,
        0.04139671000425215,
        0.02523532457654927,
        0.023757113036644087,
        0.0805264913678283,
        0.0007082098696584715,
        0.03705037316190409,
        0.06051536527848133,
        0.0589281478389752,
        0.09208843594231757,
        0.05152695172232037,
        0.004763595964740075,
        0.018967184393750103,
        0.05097324544372455,
        0.09888502731165955,
        0.040133668198295606,
        0.09318568059628488,
        0.09906520199350557,
        0.044856493256585465,
        0.09619496432358927,
        0.006744546714466127,
        0.06341653193204937,
        0.010737236234157399,
        0.01165009313102986,
        0.016285219002643514,
        0.026213377316986277,
        0.043602514509429105,
        0.026659100164251315,
        0.07510557081062416,
        0.08581673352945934,
        0.08405132055598247,
        0.08222724041469497,
        0.004833639131614709,
        0.06265798205137134,
        0.04207480883019154,
        0.041532142530793514,
        0.08409505890088947,
        0.09886468947181642,
        0.027106230670185652,
        0.017602486418771945,
        0.03782147209735445,
        0.06632829774491002,
        0.05110710020156824,
        0.01086848009357806,
        0.020592661839440862,
        0.06662321714311016,
        0.06971261707644291,
        0.04394222984649035,
        0.0829994092901371,
        0.04678083452265541,
        0.013239830842347046,
        0.01633557677106926,
        0.03966382060887468,
        0.02107110590053827,
        0.013028185867224075,
        0.07827428415381658,
        0.03077566213662857
      ]
    },
    {
      "content": "import React from \"react\";\ninterface AddPromptProps {\n    onClose: () => void;\n    onAddPrompt: (name: string, content: string) => void;\n}\nexport default function AddPrompt({ onClose, onAddPrompt }: AddPromptProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/add-prompt.d.ts",
      "embedding": [
        0.31,
        0.1,
        0,
        0.1,
        0.2,
        0.09952703082867434,
        0.015500707536916049,
        0.06809942085261407,
        0.036635456429579515,
        0.03503981429076062,
        0.015559949152433151,
        0.08278083521773355,
        0.06352393310975626,
        0.008480899257488262,
        0.06241626929849704,
        0.014806505273913374,
        0.056001844510993576,
        0.03236604893499313,
        0.07002205172466316,
        0.09045172958081889,
        0.09254513644366397,
        0.08248933368743343,
        0.033183603510678776,
        0.02895984416761409,
        0.04945168943532746,
        0.09340467283727966,
        0.03398298954022607,
        0.033634828774676606,
        0.09092290290405451,
        0.09550203432549566,
        0.00007926358611108908,
        0.05448557730780156,
        0.002334768264336418,
        0.02963151658673209,
        0.04593090096972494,
        0.06635896673816853,
        0.0268878888631807,
        0.024165020180319064,
        0.015753189537969604,
        0.07361026601756224,
        0.04115918863015239,
        0.03230944311237007,
        0.053092035465349185,
        0.025626415981760298,
        0.08899332460171877,
        0.05324900346335551,
        0.08011989177184993,
        0.08159073095693305,
        0.060077530333448495,
        0.053512474984551556,
        0.05495475072505871,
        0.035100965087085025,
        0.004132269317156956,
        0.051819620649521204,
        0.014266808830368283,
        0.061410894855187775,
        0.09890405258670779,
        0.024885992691727976,
        0.012393365672135382,
        0.05434945426771969,
        0.05861440909023409,
        0.002639199603858222,
        0.07475201112994799,
        0.06085740487742783,
        0.059932872559046085,
        0.01951797247481023,
        0.08649039817698545,
        0.025383158605559453,
        0.08848776217025402,
        0.05339353283996001,
        0.04229352504151192,
        0.04347431117814802,
        0.07608513542382483,
        0.0722487817272539,
        0.014437918307865606,
        0.08569365477247096,
        0.00519434044457574,
        0.06844678488946263,
        0.011257216271172266,
        0.0010207497260830034,
        0.09705387233848695,
        0.09145512659046756,
        0.07822911562707538,
        0.013997232992750653,
        0.049334461514559794,
        0.007295206896786078,
        0.0030196001458442923,
        0.07809597044158878,
        0.09022274197451818,
        0.07638991934262308,
        0.03653404083750469,
        0.09054989189728448,
        0.02378929288513807,
        0.08954708865307033,
        0.09732699547663365,
        0.02837577260542803,
        0.006797094685807881,
        0.021742468253770977,
        0.06262939603101499,
        0.07097673575898558
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nfunction AddPrompt({ onClose, onAddPrompt }) {\n    const [stage, setStage] = (0, react_1.useState)('name');\n    const [promptName, setPromptName] = (0, react_1.useState)(\"\");\n    const [promptContent, setPromptContent] = (0, react_1.useState)(\"\");\n    const [currentLine, setCurrentLine] = (0, react_1.useState)(\"\");\n    (0, ink_1.useInput)((inputChar, key) => {\n        if (key.ctrl && inputChar === \"c\") {\n            onClose();\n            return;\n        }\n        if (key.escape) {\n            if (stage === 'content') {\n                setStage('name');\n                setPromptContent(\"\");\n                setCurrentLine(\"\");\n            }\n            else {\n                onClose();\n            }\n            return;\n        }\n        if (stage === 'name') {\n            if (key.return) {\n                if (promptName.trim()) {\n                    setStage('content');\n                }\n                return;\n            }\n            if (key.backspace || key.delete) {\n                setPromptName(prev => prev.slice(0, -1));\n                return;\n            }\n            if (inputChar && !key.ctrl && !key.meta) {\n                setPromptName(prev => prev + inputChar);\n                return;\n            }\n        }\n        else if (stage === 'content') {\n            if (key.ctrl && inputChar === \"s\") {\n                // Save the prompt\n                if (promptName.trim() && (promptContent.trim() || currentLine.trim())) {\n                    const finalContent = promptContent + (currentLine ? (promptContent ? '\\n' : '') + currentLine : '');\n                    onAddPrompt(promptName.trim(), finalContent.trim());\n                }\n                return;\n            }\n            if (key.return) {\n                setPromptContent(prev => prev + (prev ? '\\n' : '') + currentLine);\n                setCurrentLine(\"\");\n                return;\n            }\n            if (key.backspace || key.delete) {\n                if (currentLine) {\n                    setCurrentLine(prev => prev.slice(0, -1));\n                }\n                else if (promptContent) {\n                    const lines = promptContent.split('\\n');\n                    const lastLine = lines.pop() || '';\n                    setPromptContent(lines.join('\\n'));\n                    setCurrentLine(lastLine);\n                }\n                return;\n            }\n            if (inputChar && !key.ctrl && !key.meta) {\n                setCurrentLine(prev => prev + inputChar);\n                return;\n            }\n        }\n    });\n    if (stage === 'name') {\n        return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\u2795 Add Custom Prompt\"),\n            react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Enter prompt name:\")),\n            react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: \"blue\", paddingX: 1, marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, null,\n                    promptName,\n                    \"\\u2588\")),\n            react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Type the name for your custom prompt\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Enter to continue to content\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to cancel\"))));\n    }\n    // Content stage\n    const displayContent = promptContent + (promptContent && currentLine ? '\\n' : '') + currentLine;\n    const lines = displayContent.split('\\n');\n    const displayLines = lines.slice(-8); // Show last 8 lines\n    const hasMoreLines = lines.length > 8;\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n        react_1.default.createElement(ink_1.Text, { color: \"yellow\" },\n            \"\\u2795 Add Custom Prompt: \",\n            promptName),\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Enter prompt content (markdown supported):\")),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", borderStyle: \"round\", borderColor: \"blue\", paddingX: 1, marginBottom: 1, minHeight: 10 },\n            hasMoreLines && (react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                \"... (\",\n                lines.length - 8,\n                \" more lines above)\")),\n            displayLines.map((line, index) => (react_1.default.createElement(ink_1.Text, { key: index },\n                line,\n                index === displayLines.length - 1 ? '█' : ''))),\n            displayLines.length === 0 && react_1.default.createElement(ink_1.Text, null, \"\\u2588\")),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Type your prompt content (multi-line supported)\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Enter for new line\"),\n            react_1.default.createElement(ink_1.Text, { color: \"green\", dimColor: true }, \"\\u2022 Press Ctrl+S to save prompt\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to go back\"))));\n}\nexports.default = AddPrompt;\n//# sourceMappingURL=add-prompt.js.map",
      "filePath": "../dist/ui/components/add-prompt.js",
      "embedding": [
        6.73,
        0.7,
        0,
        0.3,
        0.2,
        0.09041612085721656,
        0.0763614722396851,
        0.09976970978938998,
        0.00015677495174688528,
        0.07849692366952193,
        0.058051435464940106,
        0.051737187435626775,
        0.01145163838484057,
        0.056257236429970575,
        0.09863253166765446,
        0.09188918505226978,
        0.09079596992590917,
        0.06639999946193187,
        0.03613412515461539,
        0.028344592356854104,
        0.07568235200307143,
        0.04833413299870956,
        0.06112134635828789,
        0.0810635943085062,
        0.03913437388011526,
        0.034993409470165264,
        0.01427343008990607,
        0.0716468309265471,
        0.03999729107683661,
        0.08220903889632958,
        0.05587652004823954,
        0.08331939616248718,
        0.04241504924466576,
        0.07610844946741614,
        0.039337668333482234,
        0.008758720013148858,
        0.04786746540669182,
        0.08428977407427454,
        0.06886725561030842,
        0.013337472343134605,
        0.057264518781569185,
        0.011297984994666633,
        0.08651838689259589,
        0.08024452985225786,
        0.014725352440477124,
        0.09011884308574854,
        0.05402157648019706,
        0.01590730269798022,
        0.07102165329889037,
        0.05798599762351286,
        0.053923984415265816,
        0.025485627319067485,
        0.002270827391031094,
        0.059934125724289036,
        0.007794911381358283,
        0.06990119481490895,
        0.019754273611115203,
        0.0440427177061441,
        0.0276762487811011,
        0.016584504957965106,
        0.0346199775139212,
        0.08647695405924086,
        0.07904377354341782,
        0.02984879442121187,
        0.08888297554686908,
        0.09881594568064363,
        0.07174964737488006,
        0.013276546199826557,
        0.08878262588294511,
        0.08776800791306066,
        0.09073836708802979,
        0.0987206811253587,
        0.007347083382257192,
        0.01238919430188561,
        0.05191376850119572,
        0.09080858766852318,
        0.027264203565856217,
        0.08616710236049174,
        0.051400007064586445,
        0.03632764834845079,
        0.0682750874029121,
        0.06486184989277567,
        0.0634127219478979,
        0.011845637581222802,
        0.025113391704338007,
        0.04023434188688002,
        0.07420659788434704,
        0.09369273431910195,
        0.09316103143434806,
        0.010084105676790345,
        0.04460092212601237,
        0.05174797696611863,
        0.041266019639493036,
        0.0035912262705848686,
        0.0786332328732342,
        0.043331762336515416,
        0.05490687094559488,
        0.06615724913981648,
        0.08658293450534696,
        0.011374252005076347
      ]
    },
    {
      "content": "import React from \"react\";\nimport { GigaAgent } from \"../../agent/giga-agent\";\ninterface ApiKeyInputProps {\n    onApiKeySet: (agent: GigaAgent) => void;\n}\nexport default function ApiKeyInput({ onApiKeySet }: ApiKeyInputProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/api-key-input.d.ts",
      "embedding": [
        0.3,
        0.1,
        0,
        0.2,
        0.2,
        0.08183045470010437,
        0.07736381340929688,
        0.07302295777500865,
        0.023551192913107578,
        0.031865308767314915,
        0.08248365814542258,
        0.0068294117112107314,
        0.005284521720914559,
        0.09444679831215948,
        0.013510925396582385,
        0.03719300685488972,
        0.0038080150319573236,
        0.03024374376508412,
        0.03491146702083555,
        0.02187569347213436,
        0.046019245151726486,
        0.08886969901193129,
        0.018523856678263752,
        0.020833539671639034,
        0.058683091961617986,
        0.049965904491191364,
        0.046202178279839794,
        0.05797464390142257,
        0.06293987347989663,
        0.07382707044986328,
        0.02140283785221797,
        0.0443921802364014,
        0.08939232396484109,
        0.04176093337969731,
        0.03158298576784661,
        0.011605348043664067,
        0.07754368241525522,
        0.02320798488204985,
        0.0615199253238408,
        0.09276012533286088,
        0.023442951405262803,
        0.09434478436331871,
        0.08073371663551693,
        0.07756171196936212,
        0.014128722810724205,
        0.015128144813867173,
        0.0031385188270821487,
        0.07261502255393133,
        0.024881476832920402,
        0.03991104217619951,
        0.05403286012817693,
        0.06279293656142278,
        0.0015182633444199125,
        0.09784722743234073,
        0.07101384756787506,
        0.0745595686796081,
        0.046669596267314366,
        0.06245334550170687,
        0.03753313462035321,
        0.04460139935133417,
        0.045222728047052234,
        0.041181628802605896,
        0.052504868654155525,
        0.004561864056543285,
        0.09141340738875163,
        0.06684998620979136,
        0.04017114825270388,
        0.008974538513158981,
        0.07090428796017277,
        0.049383722110010866,
        0.08753621782963247,
        0.08989395463632384,
        0.08007238855559824,
        0.08929278619073504,
        0.08820132956050031,
        0.05409180592485933,
        0.07189779075504164,
        0.0719229459259968,
        0.0589713561002782,
        0.045663337132628934,
        0.0671047841131674,
        0.02539988300602022,
        0.07054006300651025,
        0.050618177094731855,
        0.018605638790447722,
        0.021963651015183584,
        0.06479371424143475,
        0.027804814036661542,
        0.08970154557967171,
        0.09068559755887713,
        0.08057968336175769,
        0.008275272848617333,
        0.031246526008578347,
        0.0941838702096983,
        0.010278435270017261,
        0.02588647199022839,
        0.04636832692908141,
        0.0822246897285088,
        0.01695163918921655,
        0.05661008851314514
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst giga_agent_1 = require(\"../../agent/giga-agent\");\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst os = __importStar(require(\"os\"));\nfunction ApiKeyInput({ onApiKeySet }) {\n    const [input, setInput] = (0, react_1.useState)(\"\");\n    const [groqInput, setGroqInput] = (0, react_1.useState)(\"\");\n    const [anthropicInput, setAnthropicInput] = (0, react_1.useState)(\"\");\n    const [openRouterInput, setOpenRouterInput] = (0, react_1.useState)(\"\");\n    const [currentField, setCurrentField] = (0, react_1.useState)(\"grok\");\n    const [error, setError] = (0, react_1.useState)(\"\");\n    const [isSubmitting, setIsSubmitting] = (0, react_1.useState)(false);\n    const { exit } = (0, ink_1.useApp)();\n    (0, ink_1.useInput)((inputChar, key) => {\n        if (isSubmitting)\n            return;\n        if (key.ctrl && inputChar === \"c\") {\n            exit();\n            return;\n        }\n        if (key.return) {\n            if (currentField === \"grok\") {\n                setCurrentField(\"groq\");\n            }\n            else if (currentField === \"groq\") {\n                setCurrentField(\"anthropic\");\n            }\n            else if (currentField === \"anthropic\") {\n                setCurrentField(\"openrouter\");\n            }\n            else {\n                handleSubmit();\n            }\n            return;\n        }\n        if (key.backspace || key.delete) {\n            if (currentField === \"grok\") {\n                setInput((prev) => prev.slice(0, -1));\n            }\n            else if (currentField === \"groq\") {\n                setGroqInput((prev) => prev.slice(0, -1));\n            }\n            else if (currentField === \"anthropic\") {\n                setAnthropicInput((prev) => prev.slice(0, -1));\n            }\n            else if (currentField === \"openrouter\") {\n                setOpenRouterInput((prev) => prev.slice(0, -1));\n            }\n            setError(\"\");\n            return;\n        }\n        if (inputChar && !key.ctrl && !key.meta) {\n            if (currentField === \"grok\") {\n                setInput((prev) => prev + inputChar);\n            }\n            else if (currentField === \"groq\") {\n                setGroqInput((prev) => prev + inputChar);\n            }\n            else if (currentField === \"anthropic\") {\n                setAnthropicInput((prev) => prev + inputChar);\n            }\n            else if (currentField === \"openrouter\") {\n                setOpenRouterInput((prev) => prev + inputChar);\n            }\n            setError(\"\");\n        }\n    });\n    const handleSubmit = async () => {\n        // Check for API keys in input fields or environment variables\n        const xaiKey = input.trim() || process.env.XAI_API_KEY;\n        const groqKey = groqInput.trim() || process.env.GROQ_API_KEY;\n        const anthropicKey = anthropicInput.trim() || process.env.ANTHROPIC_API_KEY || process.env.CLAUDE_API_KEY;\n        const openRouterKey = openRouterInput.trim() || process.env.OPENROUTER_API_KEY;\n        if (!xaiKey && !groqKey && !anthropicKey && !openRouterKey) {\n            setError(\"At least one API key is required (via input or environment variable)\");\n            return;\n        }\n        setIsSubmitting(true);\n        try {\n            const apiKey = xaiKey;\n            const groqApiKey = groqKey;\n            const agent = new giga_agent_1.GigaAgent(apiKey, groqApiKey);\n            // Set environment variable for current process\n            process.env.XAI_API_KEY = apiKey;\n            // Save to .grok/user-settings.json\n            try {\n                const homeDir = os.homedir();\n                const gigaDir = path.join(homeDir, '.giga');\n                const settingsFile = path.join(gigaDir, 'user-settings.json');\n                // Create .giga directory if it doesn't exist\n                if (!fs.existsSync(gigaDir)) {\n                    fs.mkdirSync(gigaDir, { mode: 0o700 });\n                }\n                // Load existing settings or create new\n                let settings = {};\n                if (fs.existsSync(settingsFile)) {\n                    try {\n                        settings = JSON.parse(fs.readFileSync(settingsFile, 'utf8'));\n                    }\n                    catch {\n                        settings = {};\n                    }\n                }\n                // Update API key\n                settings.apiKey = apiKey;\n                // Save settings\n                fs.writeFileSync(settingsFile, JSON.stringify(settings, null, 2), { mode: 0o600 });\n                console.log(`\\n✅ API key saved to ~/.giga/user-settings.json`);\n            }\n            catch (error) {\n                console.log('\\n⚠️ Could not save API key to settings file');\n                console.log('API key set for current session only');\n            }\n            onApiKeySet(agent);\n        }\n        catch (error) {\n            setError(\"Invalid API key format\");\n            setIsSubmitting(false);\n        }\n    };\n    const displayText = input.length > 0 ?\n        (isSubmitting ? \"*\".repeat(input.length) : \"*\".repeat(input.length) + \"█\") :\n        (isSubmitting ? \" \" : \"█\");\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n        react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83D\\uDD11 API Keys Required\"),\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Please enter your API keys to continue:\")),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n            react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: currentField === \"grok\" ? \"blue\" : \"gray\", paddingX: 1, marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"xAI API Key \\u276F \"),\n                react_1.default.createElement(ink_1.Text, null, input.length > 0 ? (isSubmitting ? \"*\".repeat(input.length) : \"*\".repeat(input.length) + \"█\") : (isSubmitting ? \"...\" : \"█\"))),\n            react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: currentField === \"groq\" ? \"blue\" : \"gray\", paddingX: 1, marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Groq API Key \\u276F \"),\n                react_1.default.createElement(ink_1.Text, null, groqInput.length > 0 ? (isSubmitting ? \"*\".repeat(groqInput.length) : \"*\".repeat(groqInput.length) + \"█\") : (isSubmitting ? \"...\" : \"█\"))),\n            react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: currentField === \"anthropic\" ? \"blue\" : \"gray\", paddingX: 1, marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Anthropic API Key \\u276F \"),\n                react_1.default.createElement(ink_1.Text, null, anthropicInput.length > 0 ? (isSubmitting ? \"*\".repeat(anthropicInput.length) : \"*\".repeat(anthropicInput.length) + \"█\") : (isSubmitting ? \"...\" : \"█\"))),\n            react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: currentField === \"openrouter\" ? \"blue\" : \"gray\", paddingX: 1, marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"OpenRouter API Key \\u276F \"),\n                react_1.default.createElement(ink_1.Text, null, openRouterInput.length > 0 ? (isSubmitting ? \"*\".repeat(openRouterInput.length) : \"*\".repeat(openRouterInput.length) + \"█\") : (isSubmitting ? \"...\" : \"█\")))),\n        error ? (react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"red\" },\n                \"\\u274C \",\n                error))) : null,\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Enter to move to next field or submit\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Ctrl+C to exit\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"Note: API keys will be saved to ~/.giga/user-settings.json\")),\n        isSubmitting ? (react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83D\\uDD04 Validating API keys...\"))) : null));\n}\nexports.default = ApiKeyInput;\n//# sourceMappingURL=api-key-input.js.map",
      "filePath": "../dist/ui/components/api-key-input.js",
      "embedding": [
        9.46,
        0.7,
        0,
        0.6,
        0.2,
        0.06915831614848303,
        0.06308744551507253,
        0.09353705644591381,
        0.058773229667204455,
        0.07615806739616006,
        0.006134991125126988,
        0.08422964936517824,
        0.025622029300545215,
        0.018234225763201186,
        0.08684252134616394,
        0.06639397558963858,
        0.02416645635301559,
        0.060558307877632084,
        0.07992188233239196,
        0.016231578498861966,
        0.06863737453866053,
        0.021071549681532686,
        0.0272755607766622,
        0.03247392340564986,
        0.08099999249343394,
        0.0941801598949703,
        0.042851368522453595,
        0.020320161091457137,
        0.03144016311464042,
        0.07311813679246258,
        0.0431217494053521,
        0.021988021442767416,
        0.09978657557410216,
        0.0921425721078531,
        0.09286447731666139,
        0.07190427474161805,
        0.0685719725741361,
        0.03676787958107041,
        0.057080154285919615,
        0.04352544115036864,
        0.058567302331003594,
        0.024639770647975092,
        0.01566852940624356,
        0.06538818704060133,
        0.012040812599864248,
        0.02609207609133606,
        0.060430937408131095,
        0.09246545194673617,
        0.041402460634631294,
        0.07706177532906694,
        0.0016242821036225763,
        0.08679922965158607,
        0.07115841415776356,
        0.04091156724119058,
        0.06402693379085451,
        0.09776424398112134,
        0.012298503836365871,
        0.08561067870261214,
        0.0010353061814835308,
        0.08733696965990363,
        0.007108328445197776,
        0.022241770724861477,
        0.0031271712279074106,
        0.03170818546158151,
        0.055429504289942366,
        0.08812829541596823,
        0.042815506546709396,
        0.061389065587700214,
        0.005110871682961449,
        0.07192551084223707,
        0.04187761386872113,
        0.04149677423679993,
        0.0659569819381737,
        0.024702346225659613,
        0.054179538662388484,
        0.09927237386228405,
        0.04425383833480994,
        0.00245459718316009,
        0.02150399983191853,
        0.08036223635978158,
        0.07331115310583028,
        0.055142569320198946,
        0.05620833306523096,
        0.05725715832568801,
        0.0728632289900073,
        0.09239585123054309,
        0.04864889581323245,
        0.06410150770604564,
        0.025908691936811157,
        0.08834975978361426,
        0.057218661253478846,
        0.057504175761257874,
        0.014049209781017702,
        0.07801129182180874,
        0.030229492910701983,
        0.02071369587518015,
        0.07730357337282599,
        0.05178748911426728,
        0.024543482048132115,
        0.09712685658067936
      ]
    },
    {
      "content": "import React from \"react\";\nimport { ChatEntry } from \"../../agent/giga-agent\";\ninterface ChatHistoryProps {\n    entries: ChatEntry[];\n}\nexport declare function ChatHistory({ entries }: ChatHistoryProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/chat-history.d.ts",
      "embedding": [
        0.27,
        0.1,
        0,
        0.2,
        0.2,
        0.02293183788518044,
        0.06190251542313572,
        0.099237577372868,
        0.06799533136170594,
        0.09679170436365628,
        0.04666230895903877,
        0.08643949469356607,
        0.06405583665611507,
        0.05522040072507667,
        0.07955592745262074,
        0.04528155316698321,
        0.09933348104196671,
        0.09689562868684712,
        0.09681453637875331,
        0.05181282215959426,
        0.09654470106395535,
        0.056132554830533435,
        0.03591182397133171,
        0.04703160134283796,
        0.08684811582158662,
        0.028055511502361907,
        0.03371287359785772,
        0.016009714891024596,
        0.017044870046180504,
        0.0049761541136002846,
        0.08895541153149843,
        0.05506415832538985,
        0.09167240289413298,
        0.00912397434076,
        0.05645664247895454,
        0.0079002091612273,
        0.05338778552003144,
        0.09212166626272714,
        0.04434384196028797,
        0.0036385127811064733,
        0.09571512405860179,
        0.001007354201834565,
        0.05183299123942773,
        0.08627815670232239,
        0.06363936637146256,
        0.05691218299402413,
        0.08849931740364099,
        0.06260645182244708,
        0.09806053311403405,
        0.030535579724313346,
        0.03520548264553299,
        0.06065866422191488,
        0.0984355715379679,
        0.06000176636390434,
        0.024957100932020748,
        0.05941611818916642,
        0.07035478446104351,
        0.02448815194399878,
        0.04006130602900733,
        0.051386163928394735,
        0.08060074054302405,
        0.035533178931984155,
        0.0971578767568068,
        0.04074709164528263,
        0.015487250280523524,
        0.04617127449152141,
        0.06821856495024023,
        0.018384003243629366,
        0.06722220394975309,
        0.06255617305324417,
        0.09727497050561722,
        0.054507611070761644,
        0.05842473391040165,
        0.03200668468867453,
        0.08233615265806786,
        0.018377204804683547,
        0.032841726107134254,
        0.08242308684138973,
        0.022888967280446173,
        0.006666812400310385,
        0.010945195067775049,
        0.08570524260647804,
        0.005588958094522478,
        0.027098257116172086,
        0.09586912088511094,
        0.08965113562049454,
        0.08590377322486806,
        0.09024528085412524,
        0.08605820986590917,
        0.046809235802497164,
        0.08906911982339671,
        0.028733430540572424,
        0.014470190205897583,
        0.040767169224370216,
        0.04177580064353342,
        0.047815733811803776,
        0.05281960478412753,
        0.09177923312733006,
        0.07020466171576231,
        0.03557431708849429
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatHistory = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst diff_renderer_1 = require(\"./diff-renderer\");\nconst markdown_renderer_1 = require(\"../utils/markdown-renderer\");\nfunction ChatHistory({ entries }) {\n    const renderDiff = (diffContent, filename) => {\n        return (react_1.default.createElement(diff_renderer_1.DiffRenderer, { diffContent: diffContent, filename: filename, terminalWidth: 80 }));\n    };\n    const renderFileContent = (content) => {\n        const lines = content.split(\"\\n\");\n        // Calculate minimum indentation like DiffRenderer does\n        let baseIndentation = Infinity;\n        for (const line of lines) {\n            if (line.trim() === \"\")\n                continue;\n            const firstCharIndex = line.search(/\\S/);\n            const currentIndent = firstCharIndex === -1 ? 0 : firstCharIndex;\n            baseIndentation = Math.min(baseIndentation, currentIndent);\n        }\n        if (!isFinite(baseIndentation)) {\n            baseIndentation = 0;\n        }\n        return lines.map((line, index) => {\n            const displayContent = line.substring(baseIndentation);\n            return (react_1.default.createElement(ink_1.Text, { key: index, color: \"gray\" }, displayContent));\n        });\n    };\n    const renderChatEntry = (entry, index) => {\n        switch (entry.type) {\n            case \"user\":\n                return (react_1.default.createElement(ink_1.Box, { key: index, flexDirection: \"column\", marginTop: 1 },\n                    react_1.default.createElement(ink_1.Box, null,\n                        react_1.default.createElement(ink_1.Text, { color: \"gray\" },\n                            \">\",\n                            \" \",\n                            entry.content))));\n            case \"assistant\":\n                return (react_1.default.createElement(ink_1.Box, { key: index, flexDirection: \"column\", marginTop: 1 },\n                    react_1.default.createElement(ink_1.Box, { flexDirection: \"row\", alignItems: \"flex-start\" },\n                        react_1.default.createElement(ink_1.Text, { color: \"white\" }, \"\\u23FA \"),\n                        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", flexGrow: 1 },\n                            entry.toolCalls ? (\n                            // If there are tool calls, just show plain text\n                            react_1.default.createElement(ink_1.Text, { color: \"white\" }, entry.content.trim())) : (\n                            // If no tool calls, render as markdown\n                            react_1.default.createElement(markdown_renderer_1.MarkdownRenderer, { content: entry.content.trim() })),\n                            entry.isStreaming && react_1.default.createElement(ink_1.Text, { color: \"cyan\" }, \"\\u2588\"),\n                            entry.metrics && !entry.isStreaming && (react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n                                react_1.default.createElement(ink_1.Text, { color: \"blue\" },\n                                    \"prefill - \",\n                                    entry.metrics.prefillTimeMs,\n                                    \"ms\"),\n                                react_1.default.createElement(ink_1.Text, { color: \"white\" }, \" | \"),\n                                react_1.default.createElement(ink_1.Text, { color: \"yellow\" },\n                                    \"decode - \",\n                                    entry.metrics.tokensPerSecond,\n                                    \" toks/sec (\",\n                                    entry.metrics.outputTokens,\n                                    \" out / \",\n                                    entry.metrics.decodeTimeMs,\n                                    \"ms)\")))))));\n            case \"tool_result\":\n                const getToolActionName = (toolName) => {\n                    switch (toolName) {\n                        case \"view_file\":\n                            return \"Read\";\n                        case \"str_replace_editor\":\n                            return \"Update\";\n                        case \"create_file\":\n                            return \"Create\";\n                        case \"bash\":\n                            return \"Bash\";\n                        case \"create_todo_list\":\n                            return \"Created Todo\";\n                        case \"update_todo_list\":\n                            return \"Updated Todo\";\n                        case \"perplexity_search\":\n                            return \"Search\";\n                        default:\n                            return \"Tool\";\n                    }\n                };\n                const getToolFilePath = (toolCall) => {\n                    if (toolCall?.function?.arguments) {\n                        try {\n                            const args = JSON.parse(toolCall.function.arguments);\n                            // Handle todo tools and search tools specially - they don't have file paths\n                            if (toolCall.function.name === \"create_todo_list\" ||\n                                toolCall.function.name === \"update_todo_list\" ||\n                                toolCall.function.name === \"perplexity_search\") {\n                                if (toolCall.function.name === \"perplexity_search\") {\n                                    return `\"${args.query || 'unknown query'}\"`;\n                                }\n                                return \"\";\n                            }\n                            return args.path || args.file_path || args.command || \"unknown\";\n                        }\n                        catch {\n                            return \"unknown\";\n                        }\n                    }\n                    return \"unknown\";\n                };\n                const toolName = entry.toolCall?.function?.name || \"unknown\";\n                const actionName = getToolActionName(toolName);\n                const filePath = getToolFilePath(entry.toolCall);\n                const shouldShowDiff = toolName === \"str_replace_editor\" || toolName === \"create_file\";\n                const shouldShowFileContent = toolName === \"view_file\";\n                const shouldShowSearchResult = toolName === \"perplexity_search\";\n                return (react_1.default.createElement(ink_1.Box, { key: index, flexDirection: \"column\", marginTop: 1 },\n                    react_1.default.createElement(ink_1.Box, null,\n                        react_1.default.createElement(ink_1.Text, { color: \"magenta\" }, \"\\u23FA\"),\n                        react_1.default.createElement(ink_1.Text, { color: \"white\" },\n                            \" \",\n                            filePath ? `${actionName}(${filePath})` : actionName)),\n                    react_1.default.createElement(ink_1.Box, { marginLeft: 2, flexDirection: \"column\" }, shouldShowFileContent ? (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\" },\n                        react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"\\u23BF File contents:\"),\n                        react_1.default.createElement(ink_1.Box, { marginLeft: 2, flexDirection: \"column\" }, renderFileContent(entry.content)))) : shouldShowSearchResult ? (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\" },\n                        react_1.default.createElement(ink_1.Text, { color: \"gray\" },\n                            \"\\u23BF \",\n                            entry.toolResult?.metadata?.userSummary || 'Search completed'))) : shouldShowDiff ? (\n                    // For diff results, show only the summary line, not the raw content\n                    react_1.default.createElement(ink_1.Text, { color: \"gray\" },\n                        \"\\u23BF \",\n                        entry.content.split('\\n')[0])) : (react_1.default.createElement(ink_1.Text, { color: \"gray\" },\n                        \"\\u23BF \",\n                        entry.content))),\n                    shouldShowDiff && (react_1.default.createElement(ink_1.Box, { marginLeft: 4, flexDirection: \"column\" }, renderDiff(entry.content, filePath)))));\n            default:\n                return null;\n        }\n    };\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\" }, entries.slice(-20).map(renderChatEntry)));\n}\nexports.ChatHistory = ChatHistory;\n//# sourceMappingURL=chat-history.js.map",
      "filePath": "../dist/ui/components/chat-history.js",
      "embedding": [
        6.03,
        0.9,
        0,
        0.3,
        0.3,
        0.020437858858164938,
        0.052700256261289095,
        0.01042766161445049,
        0.0754294319662876,
        0.07901752078327048,
        0.02091783577874472,
        0.07814845106540522,
        0.0027657506330975527,
        0.05426636067999668,
        0.057167519611817576,
        0.02985291876123766,
        0.055033198876440696,
        0.07452831856287971,
        0.005653872914471303,
        0.0966307911985711,
        0.00034948558383380847,
        0.08801003801432085,
        0.07417741251698795,
        0.07922433123366215,
        0.055600011040703945,
        0.05765867042891633,
        0.008769941876810017,
        0.04621626081504692,
        0.05641856120445689,
        0.0770140068186574,
        0.04852918579521015,
        0.03223501348950699,
        0.04810182254833137,
        0.0007692117406832288,
        0.0045941167101655744,
        0.09792563843263785,
        0.05139693556725531,
        0.03828060742750773,
        0.04054610159379375,
        0.03037847634241947,
        0.03589236074674489,
        0.03180436227957698,
        0.0029477840760571473,
        0.06779823281986386,
        0.08790850988881287,
        0.07612893052727972,
        0.03350362135908869,
        0.08593345046286269,
        0.08011712765555348,
        0.0029166352273323317,
        0.025465053849324883,
        0.04366644814411435,
        0.03854974863754188,
        0.014801551797897751,
        0.059276685908137075,
        0.0717572572599742,
        0.07041925882379066,
        0.06200602787055644,
        0.02571864627232089,
        0.03916076101208378,
        0.0812530035894217,
        0.043239758673066744,
        0.09634235240862349,
        0.07479962294157003,
        0.0038429170861665864,
        0.030142116337700333,
        0.024443369844180954,
        0.07106449335518715,
        0.07666390311166428,
        0.07796790256244648,
        0.011573542583875041,
        0.07353709221223746,
        0.030706011479696784,
        0.01966323557066966,
        0.017461005621227755,
        0.04118348916732423,
        0.025114047787724792,
        0.021468032888130286,
        0.07813223296460742,
        0.00549553562305356,
        0.05960150205085253,
        0.09000025321204735,
        0.05000314707591605,
        0.029974128812219437,
        0.007057712909754588,
        0.03676179650766949,
        0.01592957250738706,
        0.0015541369621269508,
        0.011800732698010442,
        0.07927397299787188,
        0.02510287261216514,
        0.07172206925026053,
        0.0031247727643968215,
        0.06323516450457556,
        0.09132653846564016,
        0.06581073851913524,
        0.00947237431783713,
        0.08883937984573431,
        0.06904801482180933,
        0.04252076444477787
      ]
    },
    {
      "content": "import React from \"react\";\ninterface ChatInputProps {\n    input: string;\n    isProcessing: boolean;\n    isStreaming: boolean;\n    currentModel?: string;\n}\nexport declare function ChatInput({ input, isProcessing, isStreaming, currentModel }: ChatInputProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/chat-input.d.ts",
      "embedding": [
        0.3,
        0.1,
        0,
        0.1,
        0.2,
        0.07353948803422429,
        0.07017620071973887,
        0.02452389230666634,
        0.058600355470346824,
        0.021163125286430197,
        0.06181154540202231,
        0.09105470483344784,
        0.05542429661284887,
        0.06375336385355343,
        0.09120017027878241,
        0.03611585005297768,
        0.05596630844708931,
        0.0734637054744471,
        0.020100235881774644,
        0.004551607592197915,
        0.049900892722691076,
        0.009012560688233374,
        0.024063805733604716,
        0.08750661362651946,
        0.04179963723863739,
        0.07789794562539638,
        0.09929368879451725,
        0.017623330106939162,
        0.05715103453882589,
        0.026140797032143483,
        0.0501102008357418,
        0.05880066548204646,
        0.09137284751735898,
        0.08838440911752476,
        0.055539578456942795,
        0.06581273992029514,
        0.07820368923255527,
        0.09468520368323922,
        0.09532606370622321,
        0.006363595563464919,
        0.02814629880287413,
        0.06508392090232655,
        0.09611035699963819,
        0.032344949354997064,
        0.05783419836245551,
        0.015222392987181532,
        0.05361177007603618,
        0.03253805621267499,
        0.03740761902594845,
        0.03562009742612137,
        0.041929345565287046,
        0.03228614790681985,
        0.06046714350713933,
        0.002416250773845297,
        0.002394504601614933,
        0.03186554096712801,
        0.06336843918746644,
        0.09937895600501369,
        0.0247771905378678,
        0.056409863449085364,
        0.06737923638297742,
        0.08299641499433316,
        0.05418214736016297,
        0.0578469013262157,
        0.07946269315705243,
        0.01497914163095775,
        0.012084340483841183,
        0.043408707882808456,
        0.05680700394494981,
        0.003774356464542095,
        0.04151377615103063,
        0.005172245894646621,
        0.02580931360890787,
        0.04700134058896416,
        0.08922580323045441,
        0.02446600955946443,
        0.0885642674024168,
        0.03041671001246451,
        0.016910809473191058,
        0.08448054486986371,
        0.08241400876816096,
        0.05820468211986876,
        0.07061660401413215,
        0.08700706956345394,
        0.09357565073118496,
        0.09751039485295207,
        0.008143174786057517,
        0.05892621854460163,
        0.05097731354206575,
        0.07891697727001291,
        0.00590622758498487,
        0.07697877884074966,
        0.02717722130998698,
        0.05880103213814136,
        0.04765201410779538,
        0.012474869963819813,
        0.09562582461509991,
        0.08811548998091573,
        0.013201334540943178,
        0.07416518319013976
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChatInput = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst neon_text_1 = require(\"./neon-text\");\nfunction ChatInput({ input, isProcessing, isStreaming, currentModel }) {\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\" },\n        react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: \"gray\", paddingX: 1, marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"\\u276F \"),\n            react_1.default.createElement(ink_1.Text, null,\n                input,\n                !isProcessing && !isStreaming && react_1.default.createElement(ink_1.Text, { color: \"white\" }, \"\\u2588\"))),\n        currentModel && (react_1.default.createElement(ink_1.Box, { justifyContent: \"flex-end\", marginTop: 1 },\n            react_1.default.createElement(neon_text_1.NeonText, { text: currentModel })))));\n}\nexports.ChatInput = ChatInput;\n//# sourceMappingURL=chat-input.js.map",
      "filePath": "../dist/ui/components/chat-input.js",
      "embedding": [
        1.11,
        0.2,
        0,
        0.3,
        0.3,
        0.08906652294493275,
        0.07825943909237054,
        0.015971410494542062,
        0.06149069656710787,
        0.012118609741420462,
        0.060331131150879486,
        0.04608383106782135,
        0.048758787817697546,
        0.09178467857781636,
        0.09019103575435365,
        0.006899262857427257,
        0.024901292145145894,
        0.06250367826227268,
        0.04417443194748688,
        0.09081540375062655,
        0.08396541250862252,
        0.09148187435908584,
        0.0048054836951117235,
        0.051250665137021825,
        0.013512154571415936,
        0.043334112283594683,
        0.014896624272411575,
        0.04254052807422072,
        0.04677009868876184,
        0.05507226696358364,
        0.022974035217947154,
        0.01881291298287431,
        0.025207475316441765,
        0.004113751377922736,
        0.03429148335879215,
        0.07119867704065375,
        0.09821833497802089,
        0.06724985694098004,
        0.04830227107736971,
        0.09916384417225721,
        0.06756819684566817,
        0.02832121968491104,
        0.0747448367592959,
        0.08618576729105674,
        0.007595997328530602,
        0.06658185001649285,
        0.05798312637171452,
        0.024278736125331848,
        0.05467366137276684,
        0.044386169521214214,
        0.09119797844221635,
        0.07183821337630429,
        0.07441599220347349,
        0.006554247142372083,
        0.0020243128486693964,
        0.0769102670736403,
        0.09973399930686523,
        0.09221192410374895,
        0.09861324947315324,
        0.0027706991628138502,
        0.07326596085532255,
        0.037660823620059215,
        0.03696660423974254,
        0.03165013118654025,
        0.06527489017441841,
        0.044190258124635055,
        0.07062293751825137,
        0.007093654189420373,
        0.05068091337415859,
        0.02799472605039286,
        0.007366714850487688,
        0.03381603974280745,
        0.02735079537647749,
        0.02692063248242458,
        0.03184590728062874,
        0.05534574504769524,
        0.03445658106883418,
        0.012294862181432687,
        0.02746566538757892,
        0.02390624750505014,
        0.09741570363379601,
        0.0066413144263552494,
        0.09010161230301217,
        0.011231075758510334,
        0.03703482917767622,
        0.023582786243121802,
        0.028185536466400152,
        0.09159534713313472,
        0.04941512182642908,
        0.019460042061521445,
        0.04201182298659,
        0.0029211922155415572,
        0.01533429975242634,
        0.05707217092309759,
        0.0959085137054771,
        0.026225377840347876,
        0.09759762657272765,
        0.005918713931938402,
        0.031541903608059675,
        0.007453421342720923
      ]
    },
    {
      "content": "import React from \"react\";\nimport { GigaAgent } from \"../../agent/giga-agent\";\ninterface ChatInterfaceProps {\n    agent?: GigaAgent;\n}\nexport default function ChatInterface({ agent }: ChatInterfaceProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/chat-interface.d.ts",
      "embedding": [
        0.27,
        0.1,
        0,
        0.2,
        0.2,
        0.03055834833384673,
        0.0710956206165092,
        0.08599223066560435,
        0.0881727641263223,
        0.07955365135337635,
        0.048728708488929885,
        0.04240860769171162,
        0.016769602650327453,
        0.08241754269762244,
        0.07065021157289378,
        0.06691157582306678,
        0.0955763807161199,
        0.024163703724485164,
        0.0211912989282683,
        0.09752994277252758,
        0.008662752063663615,
        0.006009195786164091,
        0.07020802101844521,
        0.06657251225351571,
        0.06546069077506671,
        0.030109635038393645,
        0.0994714150272703,
        0.0399511079287911,
        0.05966008903221216,
        0.00039321184108519485,
        0.02164879659265643,
        0.0005880143455612719,
        0.09845486632000858,
        0.04449576793176398,
        0.07461059330441061,
        0.07977931512654673,
        0.09035264944856955,
        0.0640697665260587,
        0.04528610932899671,
        0.014424538008347155,
        0.07869489930865342,
        0.06205797732220102,
        0.07495231518036716,
        0.03184533644104547,
        0.09783638809184242,
        0.06117444296455359,
        0.016091612720033434,
        0.08359860645904356,
        0.08638770739008926,
        0.020577517130284197,
        0.04232868579389473,
        0.008763173903217259,
        0.0834715686557273,
        0.08435276840790085,
        0.06239205142042247,
        0.04358796066913254,
        0.05686125018335256,
        0.04493557871571503,
        0.06535737839449211,
        0.0018785931444953996,
        0.024670584347035077,
        0.017694283587303006,
        0.08837096618353812,
        0.0813506975405193,
        0.05560137909738477,
        0.09631505797264256,
        0.04915288710381595,
        0.09215890619249772,
        0.08027513454303754,
        0.052578218325996455,
        0.01580021844315852,
        0.08734578422477463,
        0.034346230329064045,
        0.08689484996810332,
        0.08512288706627637,
        0.035600261238088605,
        0.08839228602598415,
        0.028044795926151545,
        0.04556693812578935,
        0.0034602073818685852,
        0.0726383301213775,
        0.02537941866741039,
        0.026497360824184236,
        0.05313117825919598,
        0.0362221055520519,
        0.024884556748058596,
        0.08207740416125792,
        0.05730383987988337,
        0.06179001175369785,
        0.05348014256245373,
        0.07438437532010528,
        0.08612338206694324,
        0.06299522832594437,
        0.006130331128395028,
        0.07972246868951265,
        0.09175590468844318,
        0.055299492710546266,
        0.018883423094568877,
        0.05829189014549546,
        0.03835367892215365
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst use_input_handler_1 = require(\"../../hooks/use-input-handler\");\nconst loading_spinner_1 = require(\"./loading-spinner\");\nconst command_suggestions_1 = require(\"./command-suggestions\");\nconst model_selection_1 = require(\"./model-selection\");\nconst route_selection_1 = require(\"./route-selection\");\nconst temperature_selector_1 = require(\"./temperature-selector\");\nconst expert_models_1 = require(\"./expert-models\");\nconst provider_settings_1 = __importDefault(require(\"./provider-settings\"));\nconst add_model_1 = __importDefault(require(\"./add-model\"));\nconst delete_model_1 = __importDefault(require(\"./delete-model\"));\nconst add_prompt_1 = __importDefault(require(\"./add-prompt\"));\nconst delete_prompt_1 = __importDefault(require(\"./delete-prompt\"));\nconst prompts_list_1 = __importDefault(require(\"./prompts-list\"));\nconst add_mcp_server_1 = __importDefault(require(\"./add-mcp-server\"));\nconst delete_mcp_server_1 = __importDefault(require(\"./delete-mcp-server\"));\nconst mcp_server_selection_1 = require(\"./mcp-server-selection\");\nconst chat_history_1 = require(\"./chat-history\");\nconst conversation_history_1 = require(\"./conversation-history\");\nconst chat_input_1 = require(\"./chat-input\");\nconst file_finder_1 = require(\"./file-finder\");\nconst confirmation_dialog_1 = __importDefault(require(\"./confirmation-dialog\"));\nconst confirmation_service_1 = require(\"../../utils/confirmation-service\");\nconst api_key_input_1 = __importDefault(require(\"./api-key-input\"));\nconst added_models_1 = require(\"../../utils/added-models\");\nconst prompts_1 = require(\"../../utils/prompts\");\nconst added_mcp_servers_1 = require(\"../../utils/added-mcp-servers\");\nconst conversation_manager_1 = require(\"../../utils/conversation-manager\");\nconst api_keys_1 = require(\"../../utils/api-keys\");\nconst session_manager_1 = require(\"../../utils/session-manager\");\nconst mode_manager_1 = require(\"../../utils/mode-manager\");\nconst types_1 = require(\"../../types\");\nconst cfonts_1 = __importDefault(require(\"cfonts\"));\n// Memoized ChatHistory component to prevent unnecessary re-renders\nconst ChatHistoryMemo = react_1.default.memo(chat_history_1.ChatHistory);\n// Component showing session info and API key status\nfunction SessionStatus({ currentModel, currentMode }) {\n    const apiKeys = (0, api_keys_1.loadApiKeys)();\n    const sessionInfo = session_manager_1.sessionManager.getSessionInfo();\n    const displayModel = currentModel || sessionInfo?.currentModel || '';\n    const noModelConfigured = !displayModel || displayModel.trim() === '';\n    const providers = [\n        { name: \"xAI\", key: apiKeys.xaiApiKey },\n        { name: \"Groq\", key: apiKeys.groqApiKey },\n        { name: \"Anthropic\", key: apiKeys.anthropicApiKey },\n        { name: \"OpenRouter\", key: apiKeys.openRouterApiKey },\n        { name: \"Google\", key: apiKeys.googleApiKey },\n        { name: \"Cerebras\", key: apiKeys.cerebrasApiKey },\n        { name: \"Perplexity\", key: apiKeys.perplexityApiKey },\n        { name: \"OpenAI\", key: apiKeys.openaiApiKey },\n    ];\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"row\", marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { bold: true, color: \"green\" }, \"Session: \"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, (sessionInfo?.instanceId?.slice(0, 8)) || 'unknown'),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \" | Model: \"),\n            noModelConfigured ? (react_1.default.createElement(ink_1.Text, { bold: true, color: \"red\" }, \"Not configured\")) : (react_1.default.createElement(ink_1.Text, { bold: true, color: \"cyan\" }, displayModel || 'Unknown'))),\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { bold: true, color: currentMode === types_1.AgentMode.GIGA ? 'yellow' : currentMode === types_1.AgentMode.CHILL ? 'green' : 'blue' }, mode_manager_1.modeManager.getModeDisplayName()),\n            react_1.default.createElement(ink_1.Text, { dimColor: true },\n                \" - \",\n                mode_manager_1.modeManager.getModeDescription())),\n        noModelConfigured && (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { bold: true, color: \"yellow\" }, \"\\u26A0\\uFE0F  First-time setup required:\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"1. Configure API keys: /providers\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"2. Add models: /add-model\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"3. Select a model: /models\"))),\n        react_1.default.createElement(ink_1.Text, { bold: true, color: \"cyan\" }, \"API Key Status:\"),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"row\" }, providers.map((provider, index) => (react_1.default.createElement(ink_1.Box, { key: index, marginRight: 2 },\n            react_1.default.createElement(ink_1.Text, null,\n                provider.key ? \"✓\" : \"✗\",\n                \" \",\n                provider.name)))))));\n}\n// Main chat component that handles input when agent is available\nfunction ChatInterfaceWithAgent({ agent }) {\n    const [chatHistory, setChatHistory] = (0, react_1.useState)([]);\n    const [isProcessing, setIsProcessing] = (0, react_1.useState)(false);\n    const [processingTime, setProcessingTime] = (0, react_1.useState)(0);\n    const [tokenCount, setTokenCount] = (0, react_1.useState)(0);\n    const [isStreaming, setIsStreaming] = (0, react_1.useState)(false);\n    const [confirmationOptions, setConfirmationOptions] = (0, react_1.useState)(null);\n    const [currentConversationId, setCurrentConversationId] = (0, react_1.useState)(null);\n    const [currentMode, setCurrentMode] = (0, react_1.useState)(mode_manager_1.modeManager.getCurrentMode());\n    const scrollRef = (0, react_1.useRef)();\n    const processingStartTime = (0, react_1.useRef)(0);\n    const confirmationService = confirmation_service_1.ConfirmationService.getInstance();\n    const conversationManager = conversation_manager_1.ConversationManager.getInstance();\n    const { input, showCommandSuggestions, selectedCommandIndex, showModelSelection, selectedModelIndex, showProviderSettings, selectedProviderIndex, showAddModel, showDeleteModel, showPromptsList, showAddPrompt, showDeletePrompt, showMcpServers, showAddMcpServer, showDeleteMcpServer, selectedMcpServerIndex, showConversationHistory, showTemperatureSelector, currentTemperature, showExpertModels, showRouteSelection, routeViewMode, selectedRouteModelIndex, selectedRouteProviderIndex, currentSelectedModel, routeProviders, isLoadingProviders, showFileFinder, selectedFileIndex, filteredFiles, fileQuery, commandSuggestions, availableModels, mcpServers, providerList, closeProviderSettings, closeAddModel, closeDeleteModel, closePromptsList, closeAddPrompt, closeDeletePrompt, closeMcpServers, closeAddMcpServer, closeDeleteMcpServer, closeConversationHistory, closeTemperatureSelector, closeExpertModels, closeRouteSelection, closeFileFinder, refreshModels, refreshMcpServers, openRouterModels, } = (0, use_input_handler_1.useInputHandler)({\n        agent,\n        chatHistory,\n        setChatHistory,\n        setIsProcessing,\n        setIsStreaming,\n        setTokenCount,\n        setProcessingTime,\n        processingStartTime,\n        isProcessing,\n        isStreaming,\n        isConfirmationActive: !!confirmationOptions,\n        onModeChange: setCurrentMode,\n    });\n    (0, react_1.useEffect)(() => {\n        console.clear();\n        cfonts_1.default.say(\"GIGA\", {\n            font: \"3d\",\n            align: \"left\",\n            colors: [\"magenta\", \"gray\"],\n            space: true,\n            maxLength: \"0\",\n            gradient: [\"magenta\", \"cyan\"],\n            independentGradient: false,\n            transitionGradient: true,\n            env: \"node\",\n        });\n        console.log(\"Getting started:\");\n        console.log(\"1. First time? Configure API keys: /providers\");\n        console.log(\"2. Add models from your providers: /add-model\");\n        console.log(\"3. Select your preferred model: /models\");\n        console.log(\"4. Ask questions, edit files, or run commands!\");\n        console.log(\"\");\n        console.log(\"Need help? Type /help for more information.\");\n        console.log(\"\");\n        setChatHistory([]);\n    }, []);\n    (0, react_1.useEffect)(() => {\n        const handleConfirmationRequest = (options) => {\n            setConfirmationOptions(options);\n        };\n        confirmationService.on('confirmation-requested', handleConfirmationRequest);\n        return () => {\n            confirmationService.off('confirmation-requested', handleConfirmationRequest);\n        };\n    }, [confirmationService]);\n    (0, react_1.useEffect)(() => {\n        if (!isProcessing && !isStreaming) {\n            setProcessingTime(0);\n            return;\n        }\n        if (processingStartTime.current === 0) {\n            processingStartTime.current = Date.now();\n        }\n        const interval = setInterval(() => {\n            setProcessingTime(Math.floor((Date.now() - processingStartTime.current) / 1000));\n        }, 1000);\n        return () => clearInterval(interval);\n    }, [isProcessing, isStreaming]);\n    const handleConfirmation = (dontAskAgain) => {\n        confirmationService.confirmOperation(true, dontAskAgain);\n        setConfirmationOptions(null);\n    };\n    const handleRejection = (feedback) => {\n        confirmationService.rejectOperation(feedback);\n        setConfirmationOptions(null);\n        // Reset processing states when operation is cancelled\n        setIsProcessing(false);\n        setIsStreaming(false);\n        setTokenCount(0);\n        setProcessingTime(0);\n        processingStartTime.current = 0;\n    };\n    const handleAddModel = (providerName, modelName) => {\n        // Save the model to storage\n        (0, added_models_1.addModel)(modelName, providerName);\n        const confirmEntry = {\n            type: \"assistant\",\n            content: `✓ Added model: ${modelName} from ${providerName}`,\n            timestamp: new Date(),\n        };\n        setChatHistory((prev) => [...prev, confirmEntry]);\n        refreshModels(); // Refresh the available models list\n        closeAddModel();\n    };\n    const handleDeleteModel = (modelName, providerName) => {\n        // Delete the model from storage\n        const success = (0, added_models_1.deleteModel)(modelName, providerName);\n        if (success) {\n            const confirmEntry = {\n                type: \"assistant\",\n                content: `✓ Deleted model: ${modelName} from ${providerName}`,\n                timestamp: new Date(),\n            };\n            setChatHistory((prev) => [...prev, confirmEntry]);\n            refreshModels(); // Refresh the available models list\n        }\n        else {\n            const errorEntry = {\n                type: \"assistant\",\n                content: `❌ Failed to delete model: ${modelName}`,\n                timestamp: new Date(),\n            };\n            setChatHistory((prev) => [...prev, errorEntry]);\n        }\n        closeDeleteModel();\n    };\n    const handleAddPrompt = (name, content) => {\n        // Add the prompt\n        (0, prompts_1.addPrompt)(name, content);\n        const confirmEntry = {\n            type: \"assistant\",\n            content: `✓ Added custom prompt: ${name}`,\n            timestamp: new Date(),\n        };\n        setChatHistory((prev) => [...prev, confirmEntry]);\n        closeAddPrompt();\n    };\n    const handleDeletePrompt = (name) => {\n        // Delete the prompt\n        const success = (0, prompts_1.deletePrompt)(name);\n        if (success) {\n            const confirmEntry = {\n                type: \"assistant\",\n                content: `✓ Deleted custom prompt: ${name}`,\n                timestamp: new Date(),\n            };\n            setChatHistory((prev) => [...prev, confirmEntry]);\n        }\n        else {\n            const errorEntry = {\n                type: \"assistant\",\n                content: `❌ Failed to delete prompt: ${name}`,\n                timestamp: new Date(),\n            };\n            setChatHistory((prev) => [...prev, errorEntry]);\n        }\n        closeDeletePrompt();\n    };\n    const handleAddMcpServer = (name, command, args, env, description) => {\n        // Save the MCP server to storage\n        (0, added_mcp_servers_1.addMcpServer)(name, command, args, env, description);\n        const confirmEntry = {\n            type: \"assistant\",\n            content: `✓ Added MCP server: ${name}`,\n            timestamp: new Date(),\n        };\n        setChatHistory((prev) => [...prev, confirmEntry]);\n        refreshMcpServers(); // Refresh the available servers list\n        // Refresh MCP connections in the agent\n        agent.refreshMcpConnections();\n        closeAddMcpServer();\n    };\n    const handleDeleteMcpServer = (name) => {\n        // Delete the MCP server from storage\n        const success = (0, added_mcp_servers_1.deleteMcpServer)(name);\n        if (success) {\n            const confirmEntry = {\n                type: \"assistant\",\n                content: `✓ Deleted MCP server: ${name}`,\n                timestamp: new Date(),\n            };\n            setChatHistory((prev) => [...prev, confirmEntry]);\n            refreshMcpServers(); // Refresh the available servers list\n            // Refresh MCP connections in the agent\n            agent.refreshMcpConnections();\n        }\n        else {\n            const errorEntry = {\n                type: \"assistant\",\n                content: `❌ Failed to delete MCP server: ${name}`,\n                timestamp: new Date(),\n            };\n            setChatHistory((prev) => [...prev, errorEntry]);\n        }\n        closeDeleteMcpServer();\n    };\n    const handleSelectConversation = async (conversationId) => {\n        try {\n            // Save current conversation if there are messages\n            if (chatHistory.length > 0 && currentConversationId) {\n                await conversationManager.saveConversation(chatHistory, agent.getCurrentModel(), currentConversationId);\n            }\n            // Load the selected conversation\n            const conversation = await conversationManager.loadConversation(conversationId);\n            if (conversation) {\n                // Update the model if it's different\n                if (conversation.model !== agent.getCurrentModel()) {\n                    agent.setModel(conversation.model);\n                }\n                // Restore conversation state in the agent (this restores AI context)\n                agent.restoreConversation(conversation.messages);\n                // Update UI state\n                setChatHistory(conversation.messages);\n                setCurrentConversationId(conversationId);\n                const switchEntry = {\n                    type: \"assistant\",\n                    content: `📚 Switched to conversation: **${conversation.title}**`,\n                    timestamp: new Date(),\n                };\n                setChatHistory((prev) => [...prev, switchEntry]);\n            }\n        }\n        catch (error) {\n            console.error('Failed to switch conversation:', error);\n            const errorEntry = {\n                type: \"assistant\",\n                content: `❌ Failed to load conversation: ${error instanceof Error ? error.message : 'Unknown error'}`,\n                timestamp: new Date(),\n            };\n            setChatHistory((prev) => [...prev, errorEntry]);\n        }\n    };\n    // Auto-save current conversation when chat history changes\n    (0, react_1.useEffect)(() => {\n        if (chatHistory.length > 0) {\n            const saveConversation = async () => {\n                try {\n                    const conversationId = await conversationManager.saveConversation(chatHistory, agent.getCurrentModel(), currentConversationId || undefined);\n                    if (!currentConversationId) {\n                        setCurrentConversationId(conversationId);\n                    }\n                }\n                catch (error) {\n                    console.error('Failed to auto-save conversation:', error);\n                }\n            };\n            // Debounce the save operation\n            const timeoutId = setTimeout(saveConversation, 1000);\n            return () => clearTimeout(timeoutId);\n        }\n    }, [chatHistory, agent, conversationManager, currentConversationId]);\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", padding: 1 },\n        react_1.default.createElement(SessionStatus, { currentModel: agent.getCurrentModel(), currentMode: currentMode }),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { dimColor: true }, \"Type your request in natural language. Type 'exit' or Ctrl+C to quit. Shift+Tab to cycle modes.\")),\n        react_1.default.createElement(ink_1.Box, { key: \"chat-main\", flexDirection: \"column\", ref: scrollRef },\n            react_1.default.createElement(ChatHistoryMemo, { key: `chat-history-${chatHistory.length}`, entries: chatHistory })),\n        !confirmationOptions && (react_1.default.createElement(react_1.default.Fragment, null,\n            react_1.default.createElement(loading_spinner_1.LoadingSpinner, { isActive: isProcessing || isStreaming, processingTime: processingTime, tokenCount: tokenCount }),\n            !showAddPrompt && !showDeletePrompt && !showPromptsList && (react_1.default.createElement(chat_input_1.ChatInput, { input: input, isProcessing: isProcessing, isStreaming: isStreaming, currentModel: agent.getCurrentModel() })),\n            !showAddPrompt && !showDeletePrompt && !showPromptsList && (react_1.default.createElement(command_suggestions_1.CommandSuggestions, { suggestions: commandSuggestions, input: input, selectedIndex: selectedCommandIndex, isVisible: showCommandSuggestions })),\n            !showAddPrompt && !showDeletePrompt && !showPromptsList && (react_1.default.createElement(file_finder_1.FileFinder, { files: filteredFiles, selectedIndex: selectedFileIndex, query: fileQuery, isVisible: showFileFinder })),\n            !showAddPrompt && !showDeletePrompt && !showPromptsList && (react_1.default.createElement(model_selection_1.ModelSelection, { models: availableModels, selectedIndex: selectedModelIndex, isVisible: showModelSelection, currentModel: agent.getCurrentModel() })),\n            !showAddPrompt && !showDeletePrompt && !showPromptsList && (react_1.default.createElement(route_selection_1.RouteSelection, { models: openRouterModels, selectedModelIndex: selectedRouteModelIndex, selectedProviderIndex: selectedRouteProviderIndex, isVisible: showRouteSelection, currentModel: agent.getCurrentModel(), viewMode: routeViewMode, currentSelectedModel: currentSelectedModel, providers: routeProviders, isLoadingProviders: isLoadingProviders, onModelSelect: () => { }, onProviderSelect: () => { }, onBack: () => { } })),\n            react_1.default.createElement(temperature_selector_1.TemperatureSelector, { temperature: currentTemperature, isVisible: showTemperatureSelector }),\n            showExpertModels && (react_1.default.createElement(expert_models_1.ExpertModels, { onExit: closeExpertModels })),\n            showProviderSettings && (react_1.default.createElement(provider_settings_1.default, { providers: providerList, selectedIndex: selectedProviderIndex, onClose: closeProviderSettings })),\n            showAddModel && (react_1.default.createElement(add_model_1.default, { providers: providerList, onClose: closeAddModel, onAddModel: handleAddModel })),\n            showDeleteModel && (react_1.default.createElement(delete_model_1.default, { onClose: closeDeleteModel, onDeleteModel: handleDeleteModel })),\n            showPromptsList && (react_1.default.createElement(prompts_list_1.default, { onClose: closePromptsList, onSelectPrompt: (promptName) => {\n                    if (agent) {\n                        agent.setSelectedCustomPrompt(promptName);\n                        // Add a system message to chat history showing the change\n                        const promptDisplayName = promptName || \"GIGA (Default)\";\n                        const systemMessage = {\n                            type: \"assistant\",\n                            content: `🎯 System prompt changed to: **${promptDisplayName}**`,\n                            timestamp: new Date(),\n                        };\n                        // Add to chat history\n                        setChatHistory(prev => [...prev, systemMessage]);\n                    }\n                }, selectedPrompt: agent?.getSelectedCustomPrompt() || null })),\n            showAddPrompt && (react_1.default.createElement(add_prompt_1.default, { onClose: closeAddPrompt, onAddPrompt: handleAddPrompt })),\n            showDeletePrompt && (react_1.default.createElement(delete_prompt_1.default, { onClose: closeDeletePrompt, onDeletePrompt: handleDeletePrompt })),\n            showConversationHistory && (react_1.default.createElement(conversation_history_1.ConversationHistory, { isVisible: showConversationHistory, onClose: closeConversationHistory, onSelectConversation: handleSelectConversation })),\n            react_1.default.createElement(mcp_server_selection_1.McpServerSelection, { servers: mcpServers, selectedIndex: selectedMcpServerIndex, isVisible: showMcpServers }),\n            showAddMcpServer && (react_1.default.createElement(add_mcp_server_1.default, { onClose: closeAddMcpServer, onAddServer: handleAddMcpServer })),\n            showDeleteMcpServer && (react_1.default.createElement(delete_mcp_server_1.default, { onClose: closeDeleteMcpServer, onDeleteServer: handleDeleteMcpServer })))),\n        confirmationOptions && (react_1.default.createElement(confirmation_dialog_1.default, { operation: confirmationOptions.operation, filename: confirmationOptions.filename, showVSCodeOpen: confirmationOptions.showVSCodeOpen, content: confirmationOptions.content, onConfirm: handleConfirmation, onReject: handleRejection }))));\n}\n// Main component that handles API key input or chat interface\nfunction ChatInterface({ agent }) {\n    const [currentAgent, setCurrentAgent] = (0, react_1.useState)(agent || null);\n    const handleApiKeySet = (newAgent) => {\n        setCurrentAgent(newAgent);\n    };\n    if (!currentAgent) {\n        return react_1.default.createElement(api_key_input_1.default, { onApiKeySet: handleApiKeySet });\n    }\n    return react_1.default.createElement(ChatInterfaceWithAgent, { agent: currentAgent });\n}\nexports.default = ChatInterface;\n//# sourceMappingURL=chat-interface.js.map",
      "filePath": "../dist/ui/components/chat-interface.js",
      "embedding": [
        19.18,
        1,
        0,
        1.6,
        0.2,
        0.03434212957496715,
        0.0044719009994283465,
        0.02576081889755193,
        0.04852450148774315,
        0.060150094525387415,
        0.04143256618767665,
        0.0317332701215541,
        0.06991012738250844,
        0.09776226400898741,
        0.09284289651852051,
        0.005704582922495061,
        0.017413709295810154,
        0.029813676251081125,
        0.001220612407143984,
        0.09645791918225001,
        0.048766965100145665,
        0.05434401040691013,
        0.057254736374854155,
        0.06112477211102396,
        0.017932309350150055,
        0.05851619413002834,
        0.07769051188482676,
        0.013194029913680051,
        0.05412809167547106,
        0.09663956594637643,
        0.08561728777618634,
        0.013909352562068001,
        0.03150887080052791,
        0.08998871545431791,
        0.08947326335979797,
        0.0697862707989909,
        0.06054315331124915,
        0.0564526763217895,
        0.06462078909766594,
        0.05200954306889227,
        0.04830694626497842,
        0.07684623274090326,
        0.04528161049677015,
        0.05171793937765176,
        0.027302094661507317,
        0.08413246976561196,
        0.09074525212840484,
        0.027146357033323555,
        0.04291045371973115,
        0.09885029595643188,
        0.08235473940203873,
        0.07481777147950469,
        0.02954690716936097,
        0.0966143725537772,
        0.06417738314448362,
        0.03764889480076337,
        0.0014486763451457053,
        0.061367344800500226,
        0.025342987398537343,
        0.09022944248388204,
        0.00515588126993809,
        0.08896532096224863,
        0.06589227050389648,
        0.028424966506243987,
        0.05929378828168996,
        0.09104417814460898,
        0.08877514142584668,
        0.09535838357679703,
        0.05268600665694582,
        0.0671783071490809,
        0.03939012632746756,
        0.03603685588717947,
        0.07249154453233538,
        0.08322460878906988,
        0.09335044037434849,
        0.09272078083182651,
        0.08739547562366211,
        0.06601042273005958,
        0.04526659271909427,
        0.047534485285930766,
        0.01354464483397504,
        0.03703244951631646,
        0.08329858376523104,
        0.031498764237104473,
        0.024054380880543604,
        0.028315331288429557,
        0.041907347674833687,
        0.06712545793918487,
        0.06777393133943659,
        0.05920658790394662,
        0.09210402750625624,
        0.008766715701777806,
        0.08283732131388603,
        0.08082915602959531,
        0.04467522393135953,
        0.07953407127229495,
        0.08253939647846681,
        0.08701052397542378,
        0.0724503243595329,
        0.08659681950049984
      ]
    },
    {
      "content": "import React from \"react\";\ninterface CommandSuggestion {\n    command: string;\n    description: string;\n}\ninterface CommandSuggestionsProps {\n    suggestions: CommandSuggestion[];\n    input: string;\n    selectedIndex: number;\n    isVisible: boolean;\n}\nexport declare function CommandSuggestions({ suggestions, input, selectedIndex, isVisible, }: CommandSuggestionsProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/command-suggestions.d.ts",
      "embedding": [
        0.38,
        0.1,
        0,
        0.1,
        0.2,
        0.06470123238026972,
        0.05087201568126796,
        0.04873012728752938,
        0.04652559206001644,
        0.027036360584734322,
        0.0442400486871961,
        0.03132309188810677,
        0.09024734228853602,
        0.022494596927172907,
        0.05889057257965735,
        0.08686005403438123,
        0.046791771023581286,
        0.0952485007357076,
        0.04930992099189599,
        0.04065071223252401,
        0.06447689175347358,
        0.06482349844480217,
        0.08472383966698652,
        0.04316265673424861,
        0.04926206807280199,
        0.07860590039496612,
        0.005361100780716977,
        0.03785402348334785,
        0.01735532587567409,
        0.08097195046941474,
        0.02752475316280355,
        0.05505516556148165,
        0.041242440187974266,
        0.017920002737843145,
        0.06467661717451643,
        0.01655189554099722,
        0.04214749206594535,
        0.07400126442296631,
        0.008396193567452892,
        0.07785618823262484,
        0.061011031922142626,
        0.0835495180735583,
        0.047797586934705705,
        0.03900177238534122,
        0.007511711620917927,
        0.05214759063048438,
        0.08484295976658443,
        0.057518122319540746,
        0.04363920864325082,
        0.04818626082620804,
        0.09044682920922241,
        0.029273186164270073,
        0.011521884055025224,
        0.06525926518350426,
        0.08086060832395636,
        0.08670407188598428,
        0.0321303040120798,
        0.05785217414027959,
        0.09836715746413331,
        0.075821562754887,
        0.030172281943331648,
        0.04107321379745343,
        0.039842417924816464,
        0.07549161676301185,
        0.06816221525725111,
        0.03534912118970248,
        0.000658249374775366,
        0.061324879861234576,
        0.029268179449675292,
        0.048190458738574464,
        0.047788432794471196,
        0.019645240309555723,
        0.0769863551966352,
        0.0818076270724267,
        0.09454352736660537,
        0.03157027306525386,
        0.058152284753862374,
        0.014817117242207734,
        0.09139147218196339,
        0.06023393078545916,
        0.0017594512212917857,
        0.008670944371466783,
        0.08297848435455192,
        0.023662388268951753,
        0.02529776879763923,
        0.06873929080764046,
        0.03750638318854599,
        0.05537281344833414,
        0.03154030728532705,
        0.031064183403434555,
        0.06753279808221799,
        0.07053713016052075,
        0.07708612518151227,
        0.0359392068241914,
        0.05625637813106245,
        0.05133269203000945,
        0.028273860879708703,
        0.050902453497088496,
        0.050883487259401866,
        0.08236982612025763
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommandSuggestions = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst fuzzy_search_1 = require(\"../../utils/fuzzy-search\");\nfunction CommandSuggestions({ suggestions, input, selectedIndex, isVisible, }) {\n    if (!isVisible)\n        return null;\n    const filteredSuggestions = input.startsWith(\"/\")\n        ? (0, fuzzy_search_1.fuzzySearch)(input.substring(1), // Remove the \"/\" for fuzzy matching\n        suggestions.filter(s => s.command.startsWith(\"/\")), (suggestion) => suggestion.command.substring(1), // Remove \"/\" for matching\n        8)\n        : (0, fuzzy_search_1.fuzzySearch)(input, suggestions, (suggestion) => suggestion.command, 8);\n    return (react_1.default.createElement(ink_1.Box, { marginTop: 1, flexDirection: \"column\" },\n        filteredSuggestions.map((suggestion, index) => (react_1.default.createElement(ink_1.Box, { key: index, paddingLeft: 1 },\n            react_1.default.createElement(ink_1.Text, { color: index === selectedIndex ? \"black\" : \"white\", backgroundColor: index === selectedIndex ? \"cyan\" : undefined }, suggestion.command),\n            react_1.default.createElement(ink_1.Box, { marginLeft: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, suggestion.description))))),\n        react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2191\\u2193 navigate \\u2022 Enter/Tab select \\u2022 Esc cancel\"))));\n}\nexports.CommandSuggestions = CommandSuggestions;\n//# sourceMappingURL=command-suggestions.js.map",
      "filePath": "../dist/ui/components/command-suggestions.js",
      "embedding": [
        1.67,
        0.2,
        0,
        0.3,
        0.3,
        0.010031775068028893,
        0.03873166629723943,
        0.008220856614002693,
        0.0548129794418297,
        0.0890428004166092,
        0.03269126694969384,
        0.07688305920780061,
        0.010447055746821855,
        0.054425982628972074,
        0.011925119880014613,
        0.0620187049308678,
        0.004087406872226107,
        0.024730738065760285,
        0.0846539727208388,
        0.01881974748477895,
        0.09978377930408307,
        0.04418383530643227,
        0.009906191713938972,
        0.017428103315948098,
        0.01690309189802366,
        0.08925660716613819,
        0.05372474522805733,
        0.01491706724155152,
        0.057580402347721604,
        0.07391532698794978,
        0.019009090911840568,
        0.05064908322998388,
        0.06918361187506045,
        0.016167618047400623,
        0.09467105167648443,
        0.023005138424339946,
        0.07512160581262417,
        0.05875372201039428,
        0.05752026761896648,
        0.022184088727635467,
        0.004588563750001717,
        0.08970192479149346,
        0.0638534462739111,
        0.00443278912221311,
        0.07663031127372677,
        0.01446792979199224,
        0.05747699076340314,
        0.07169750936561173,
        0.06127589607829686,
        0.0005981822902815682,
        0.0389361500261177,
        0.0016888427766008518,
        0.02461444553857496,
        0.07181440054151463,
        0.04524667765758553,
        0.03558298878739772,
        0.052909370497545974,
        0.03703811777307255,
        0.007665130972763046,
        0.0385347507850628,
        0.07133732771741333,
        0.03246511850261337,
        0.015873656288284934,
        0.024853316141753925,
        0.08254172524678655,
        0.002944659225054047,
        0.04497508592429642,
        0.006408457681563173,
        0.03145107271974458,
        0.0408366579763485,
        0.012002994432103543,
        0.02621784457858596,
        0.007918516261495123,
        0.09968120644123389,
        0.09867164008090754,
        0.023508670907316467,
        0.026819664431831605,
        0.01687575968492432,
        0.020754603796138485,
        0.023095895591928695,
        0.006292642564660722,
        0.02542769211059779,
        0.05172827045593338,
        0.07564520858328758,
        0.06487769949533706,
        0.08310533403696166,
        0.09964557354075428,
        0.03772733561867839,
        0.0023199987807667635,
        0.009683161865784419,
        0.008565986567620077,
        0.021529891818119064,
        0.028144495700835936,
        0.004003709050985416,
        0.06347573847966494,
        0.07316192477221152,
        0.04068862726520428,
        0.09991286008814286,
        0.028631840582821724,
        0.09149448111188863
      ]
    },
    {
      "content": "import React from \"react\";\ninterface ConfirmationDialogProps {\n    operation: string;\n    filename: string;\n    onConfirm: (dontAskAgain?: boolean) => void;\n    onReject: (feedback?: string) => void;\n    showVSCodeOpen?: boolean;\n    content?: string;\n}\nexport default function ConfirmationDialog({ operation, filename, onConfirm, onReject, showVSCodeOpen, content, }: ConfirmationDialogProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/confirmation-dialog.d.ts",
      "embedding": [
        0.42,
        0.1,
        0,
        0.1,
        0.2,
        0.015517431720976693,
        0.051204232060446414,
        0.04062626122835444,
        0.07500205240590585,
        0.049026427674137334,
        0.04811271162104069,
        0.017153646669432875,
        0.08120516087515206,
        0.006331610132159483,
        0.08730418685156936,
        0.05266872987236504,
        0.09029781513434693,
        0.006468599356978033,
        0.052850549710735106,
        0.05307700709157066,
        0.09811400154273092,
        0.06882691145750079,
        0.07268521716091823,
        0.0667670707898556,
        0.09863395557968405,
        0.09879433710688673,
        0.04509966909497542,
        0.09701848587775469,
        0.09579935660983194,
        0.04071017975635153,
        0.047422848848422475,
        0.02725233233445942,
        0.08473555912774694,
        0.02916244080114895,
        0.02234413230191025,
        0.03277843149790235,
        0.08283054525113093,
        0.08264314329485267,
        0.001406085678112945,
        0.08500595137403814,
        0.08948297794395565,
        0.06604413490797556,
        0.08051558146829085,
        0.028573348287677738,
        0.050538206396526314,
        0.06578624696351523,
        0.07422384727003027,
        0.040418367882810516,
        0.05352070706303194,
        0.029772694515919865,
        0.04290558886177126,
        0.016358042136055618,
        0.011991159362577187,
        0.01557277518135376,
        0.037553088055135644,
        0.004920664960788113,
        0.028368391289711914,
        0.005456522569979228,
        0.007204977753558772,
        0.029693559721239184,
        0.09278591517252172,
        0.06873854466029679,
        0.024412518556083687,
        0.057506811744201636,
        0.07932513236801575,
        0.011068800298936577,
        0.06309404926172636,
        0.07774389362116262,
        0.07336854773194604,
        0.018841127163515783,
        0.06976331739881847,
        0.04948745947694308,
        0.08556151497795218,
        0.08132157873319261,
        0.03255573922957624,
        0.06306064287609822,
        0.09880448648622026,
        0.019378142618444685,
        0.013990234524669366,
        0.08241707983976998,
        0.0901013504489717,
        0.07992619242440803,
        0.023930300374624982,
        0.0678147358947083,
        0.039862966110599446,
        0.02551247528030669,
        0.03493456235990614,
        0.01387239260782004,
        0.06894299170133066,
        0.09939789089989753,
        0.09023452592284831,
        0.02230365427342298,
        0.06536330549513769,
        0.07685932342689841,
        0.059891569370711495,
        0.043735887967137746,
        0.028775009468847403,
        0.019187868724446867,
        0.06521987757901736,
        0.09112862938251048
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nfunction ConfirmationDialog({ operation, filename, onConfirm, onReject, showVSCodeOpen = false, content, }) {\n    const [selectedOption, setSelectedOption] = (0, react_1.useState)(0);\n    const [feedbackMode, setFeedbackMode] = (0, react_1.useState)(false);\n    const [feedback, setFeedback] = (0, react_1.useState)(\"\");\n    const options = [\n        \"Yes\",\n        \"Yes, and don't ask again this session\",\n        \"No\",\n        \"No, with feedback\",\n    ];\n    (0, ink_1.useInput)((input, key) => {\n        if (feedbackMode) {\n            if (key.return) {\n                onReject(feedback.trim());\n                return;\n            }\n            if (key.backspace || key.delete) {\n                setFeedback((prev) => prev.slice(0, -1));\n                return;\n            }\n            if (input && !key.ctrl && !key.meta) {\n                setFeedback((prev) => prev + input);\n            }\n            return;\n        }\n        if (key.upArrow || (key.shift && key.tab)) {\n            setSelectedOption((prev) => (prev > 0 ? prev - 1 : options.length - 1));\n            return;\n        }\n        if (key.downArrow || key.tab) {\n            setSelectedOption((prev) => (prev + 1) % options.length);\n            return;\n        }\n        if (key.return) {\n            if (selectedOption === 0) {\n                onConfirm(false);\n            }\n            else if (selectedOption === 1) {\n                onConfirm(true);\n            }\n            else if (selectedOption === 2) {\n                onReject(\"Operation cancelled by user\");\n            }\n            else {\n                setFeedbackMode(true);\n            }\n            return;\n        }\n        if (key.escape) {\n            if (feedbackMode) {\n                setFeedbackMode(false);\n                setFeedback(\"\");\n            }\n            else {\n                // Cancel the confirmation when escape is pressed from main confirmation\n                onReject(\"Operation cancelled by user (pressed Escape)\");\n            }\n            return;\n        }\n    });\n    if (feedbackMode) {\n        return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", padding: 1 },\n            react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Type your feedback and press Enter, or press Escape to go back.\")),\n            react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: \"yellow\", paddingX: 1, marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"\\u276F \"),\n                react_1.default.createElement(ink_1.Text, null,\n                    feedback,\n                    react_1.default.createElement(ink_1.Text, { color: \"white\" }, \"\\u2588\")))));\n    }\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", borderStyle: \"round\", borderColor: \"yellow\", padding: 1 },\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"yellow\", bold: true }, \"\\u26A0\\uFE0F  Confirm: \"),\n            react_1.default.createElement(ink_1.Text, { color: \"white\" },\n                operation,\n                \"(\",\n                filename,\n                \")\")),\n        showVSCodeOpen && (react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"\\uD83D\\uDCDD Opened in VS Code\"))),\n        content && (react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", wrap: \"truncate\" },\n                \"\\uD83D\\uDCC4 \",\n                content.split('\\n').slice(0, 2).join(' ').substring(0, 60),\n                \"...\"))),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 }, options.map((option, index) => (react_1.default.createElement(ink_1.Box, { key: index },\n            react_1.default.createElement(ink_1.Text, { color: selectedOption === index ? \"black\" : \"gray\", backgroundColor: selectedOption === index ? \"cyan\" : undefined },\n                \"[\",\n                index + 1,\n                \"] \",\n                option))))),\n        react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2191\\u2193/Tab select \\u2022 Enter confirm \\u2022 Esc cancel\")));\n}\nexports.default = ConfirmationDialog;\n//# sourceMappingURL=confirmation-dialog.js.map",
      "filePath": "../dist/ui/components/confirmation-dialog.js",
      "embedding": [
        5.51,
        0.7,
        0,
        0.3,
        0.2,
        0.025688517768762666,
        0.09743315362805595,
        0.09107154987469418,
        0.050161499536025105,
        0.05065274131020689,
        0.054826480783416655,
        0.06055367695892161,
        0.03925236999694259,
        0.0768800167207602,
        0.08517742728031977,
        0.07360883516624925,
        0.08353845717617345,
        0.07717494574515171,
        0.07364395469446197,
        0.019284573583075972,
        0.09277875872105733,
        0.025366134764538542,
        0.054304351210930024,
        0.05650299020612414,
        0.004221905089793532,
        0.036927661527390514,
        0.04642014664495225,
        0.03125851714730817,
        0.0828012222964305,
        0.08300760199828296,
        0.0779441207673139,
        0.01656964093521408,
        0.09177466663884745,
        0.047446033075582844,
        0.030938671375945928,
        0.09485262355725187,
        0.01388266824270783,
        0.048989172847606205,
        0.043523361605361834,
        0.06811446828606148,
        0.07277659752775872,
        0.017461624398502695,
        0.00419854653350511,
        0.08308092293515562,
        0.0112589092347963,
        0.008626304492733461,
        0.0858793236835801,
        0.006684802324184214,
        0.01462552471597478,
        0.04860948660000644,
        0.08836720861585594,
        0.08187680616145229,
        0.026464550947510847,
        0.023804136311270076,
        0.07833019158748547,
        0.07075158662219587,
        0.042793494374098955,
        0.020188164434783974,
        0.0240555928886542,
        0.01834387932000139,
        0.095847152464308,
        0.021476637447127966,
        0.04965722247647242,
        0.05221847054935426,
        0.08808304200881145,
        0.08238696708482576,
        0.05718477526452396,
        0.07029906453000455,
        0.024934913137784412,
        0.05825997707569141,
        0.05959393021170542,
        0.012609674685131002,
        0.010443146641184654,
        0.014234138957457065,
        0.05435015810336202,
        0.028607009649774584,
        0.016747795454054717,
        0.08028885938367461,
        0.017921230695610645,
        0.07987086978148218,
        0.09073059604810618,
        0.045621255830214695,
        0.054504693626780044,
        0.08697711387272257,
        0.05394176092050845,
        0.08390310418117261,
        0.02494615777420687,
        0.07012534563312438,
        0.07141509328706662,
        0.05898489441453121,
        0.05533423034740449,
        0.06545129703183965,
        0.061746248054975056,
        0.039640073333922214,
        0.0027994750188252595,
        0.023047940121738608,
        0.01719472483650395,
        0.09483110782467095,
        0.05062267032194685,
        0.01623201793144652
      ]
    },
    {
      "content": "import React from 'react';\ninterface ConversationHistoryProps {\n    isVisible: boolean;\n    onClose: () => void;\n    onSelectConversation: (conversationId: string) => void;\n}\nexport declare function ConversationHistory({ isVisible, onClose, onSelectConversation }: ConversationHistoryProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/conversation-history.d.ts",
      "embedding": [
        0.32,
        0.1,
        0,
        0.1,
        0.2,
        0.09471486035868305,
        0.09126229520557105,
        0.03005680251735019,
        0.09593099731840399,
        0.0032540999912440863,
        0.04017651803363129,
        0.00853734590740628,
        0.05168192346162048,
        0.0037782739951827795,
        0.05567120329479434,
        0.048721039088762165,
        0.020182940437747335,
        0.09998275865333608,
        0.017670320039116793,
        0.08568451449146286,
        0.017995808667842107,
        0.0140573243944222,
        0.03494031823344861,
        0.026396110333040314,
        0.07608490996781543,
        0.09000921151551661,
        0.09348074239421361,
        0.07614000792545779,
        0.09333284810602215,
        0.0887267089984517,
        0.09068010923973095,
        0.09441852544876504,
        0.044699471256933604,
        0.026225730822474216,
        0.08148560383543364,
        0.08570615392255208,
        0.035380021546852616,
        0.008239788789526825,
        0.062329778825181786,
        0.01605217026658513,
        0.013595933666853821,
        0.008612884480186045,
        0.029010027578381094,
        0.010264137669232188,
        0.0004229464145629636,
        0.056779009571100804,
        0.0782748859459254,
        0.09856859023808387,
        0.013759804845615476,
        0.017070030647873,
        0.05636087175263265,
        0.03414846568202765,
        0.027974468504199324,
        0.0850990031461401,
        0.061772501486910526,
        0.06462423664220406,
        0.050114866862761565,
        0.0857923507042258,
        0.040158977971648246,
        0.00876048407577804,
        0.02316463347211192,
        0.03950438834761471,
        0.028153623197858493,
        0.06030449528814994,
        0.0016442160249439564,
        0.08082011121780489,
        0.0027432537562147256,
        0.01607688520086017,
        0.08859424353013087,
        0.08440656754863746,
        0.037651912622502205,
        0.08688533781574853,
        0.09570041051788811,
        0.028367273605141397,
        0.05109390312214121,
        0.0610850612725593,
        0.0047555216822342435,
        0.026390323963142517,
        0.07748360084228617,
        0.011789126506996685,
        0.005919645322623313,
        0.03380275105620325,
        0.07889399008570078,
        0.05963512695547747,
        0.06614516936410861,
        0.05760752719491821,
        0.07365443141379198,
        0.07174206489570926,
        0.0641399226654264,
        0.03217957949126606,
        0.05167266366326049,
        0.09309729600742193,
        0.07888482380327304,
        0.054027255527504925,
        0.06605349679708199,
        0.05266462143149814,
        0.04722154546354031,
        0.08904937644370879,
        0.01025665408632942,
        0.024454316830945122
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConversationHistory = void 0;\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst conversation_manager_1 = require(\"../../utils/conversation-manager\");\nconst fuzzy_search_1 = require(\"../../utils/fuzzy-search\");\nfunction ConversationHistory({ isVisible, onClose, onSelectConversation }) {\n    const [conversations, setConversations] = (0, react_1.useState)([]);\n    const [filteredConversations, setFilteredConversations] = (0, react_1.useState)([]);\n    const [selectedIndex, setSelectedIndex] = (0, react_1.useState)(0);\n    const [searchQuery, setSearchQuery] = (0, react_1.useState)('');\n    const [isLoading, setIsLoading] = (0, react_1.useState)(true);\n    const conversationManager = conversation_manager_1.ConversationManager.getInstance();\n    // Load conversations on mount\n    (0, react_1.useEffect)(() => {\n        if (isVisible) {\n            loadConversations();\n        }\n    }, [isVisible]);\n    // Filter conversations when search query changes\n    (0, react_1.useEffect)(() => {\n        if (!searchQuery.trim()) {\n            setFilteredConversations(conversations);\n        }\n        else {\n            const filtered = (0, fuzzy_search_1.fuzzySearch)(searchQuery, conversations, (conv) => `${conv.title} ${conv.preview}`, 10);\n            setFilteredConversations(filtered);\n        }\n        setSelectedIndex(0);\n    }, [conversations, searchQuery]);\n    const loadConversations = async () => {\n        setIsLoading(true);\n        try {\n            const convList = await conversationManager.listConversations();\n            setConversations(convList);\n        }\n        catch (error) {\n            console.error('Failed to load conversations:', error);\n        }\n        finally {\n            setIsLoading(false);\n        }\n    };\n    const formatDate = (date) => {\n        const now = new Date();\n        const diffMs = now.getTime() - date.getTime();\n        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n        if (diffDays === 0) {\n            return 'Today';\n        }\n        else if (diffDays === 1) {\n            return 'Yesterday';\n        }\n        else if (diffDays < 7) {\n            return `${diffDays}d ago`;\n        }\n        else if (diffDays < 30) {\n            return `${Math.floor(diffDays / 7)}w ago`;\n        }\n        else {\n            return date.toLocaleDateString();\n        }\n    };\n    const handleDeleteConversation = async (conversationId) => {\n        try {\n            await conversationManager.deleteConversation(conversationId);\n            await loadConversations();\n        }\n        catch (error) {\n            console.error('Failed to delete conversation:', error);\n        }\n    };\n    (0, ink_1.useInput)((input, key) => {\n        if (!isVisible)\n            return;\n        if (key.escape) {\n            onClose();\n            return;\n        }\n        if (key.return) {\n            if (filteredConversations.length > 0 && selectedIndex < filteredConversations.length) {\n                onSelectConversation(filteredConversations[selectedIndex].id);\n                onClose();\n            }\n            return;\n        }\n        if (key.upArrow) {\n            setSelectedIndex(prev => prev > 0 ? prev - 1 : Math.max(0, filteredConversations.length - 1));\n            return;\n        }\n        if (key.downArrow) {\n            setSelectedIndex(prev => prev < filteredConversations.length - 1 ? prev + 1 : 0);\n            return;\n        }\n        if (key.delete || key.backspace) {\n            if (searchQuery.length > 0) {\n                setSearchQuery(prev => prev.slice(0, -1));\n            }\n            return;\n        }\n        // Handle delete key (d) to delete conversation\n        if (input === 'd' && filteredConversations.length > 0) {\n            const conversation = filteredConversations[selectedIndex];\n            if (conversation) {\n                handleDeleteConversation(conversation.id);\n            }\n            return;\n        }\n        // Handle regular character input for search\n        if (input && input.length === 1 && !key.ctrl && !key.meta) {\n            setSearchQuery(prev => prev + input);\n        }\n    });\n    if (!isVisible) {\n        return null;\n    }\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", width: \"100%\", height: 20, borderStyle: \"round\", borderColor: \"cyan\", padding: 1 },\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { bold: true, color: \"cyan\" }, \"\\uD83D\\uDCDA Conversation History\")),\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" },\n                \"Search: \",\n                searchQuery,\n                searchQuery && react_1.default.createElement(ink_1.Text, { color: \"cyan\" }, \"\\u2588\"))),\n        isLoading ? (react_1.default.createElement(ink_1.Box, { justifyContent: \"center\", alignItems: \"center\", height: 10 },\n            react_1.default.createElement(ink_1.Text, { color: \"cyan\" }, \"Loading conversations...\"))) : filteredConversations.length === 0 ? (react_1.default.createElement(ink_1.Box, { justifyContent: \"center\", alignItems: \"center\", height: 10 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, searchQuery ? 'No matching conversations found' : 'No conversations yet'))) : (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\" }, filteredConversations.slice(0, 12).map((conversation, index) => {\n            const isSelected = index === selectedIndex;\n            return (react_1.default.createElement(ink_1.Box, { key: conversation.id, flexDirection: \"column\", width: \"100%\" },\n                react_1.default.createElement(ink_1.Box, { flexDirection: \"row\", justifyContent: \"space-between\" },\n                    react_1.default.createElement(ink_1.Text, { color: isSelected ? 'cyan' : 'white', bold: isSelected },\n                        isSelected ? '> ' : '  ',\n                        conversation.title),\n                    react_1.default.createElement(ink_1.Text, { color: isSelected ? 'cyan' : 'gray', dimColor: !isSelected }, formatDate(conversation.updatedAt))),\n                react_1.default.createElement(ink_1.Box, { flexDirection: \"row\", justifyContent: \"space-between\" },\n                    react_1.default.createElement(ink_1.Text, { color: isSelected ? 'cyan' : 'gray', dimColor: !isSelected },\n                        isSelected ? '  ' : '  ',\n                        conversation.preview.slice(0, 50),\n                        \"...\"),\n                    react_1.default.createElement(ink_1.Text, { color: isSelected ? 'cyan' : 'gray', dimColor: !isSelected },\n                        conversation.messageCount,\n                        \" msgs | \",\n                        conversation.model))));\n        }))),\n        react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2191\\u2193 Navigate \\u2022 Enter Select \\u2022 d Delete \\u2022 Esc Close \\u2022 Type to search\"))));\n}\nexports.ConversationHistory = ConversationHistory;\n//# sourceMappingURL=conversation-history.js.map",
      "filePath": "../dist/ui/components/conversation-history.js",
      "embedding": [
        7.82,
        0.7,
        0,
        0.3,
        0.3,
        0.0740700077857098,
        0.07474859041969453,
        0.048261624261980496,
        0.03670401094163211,
        0.08996311129099113,
        0.018588001475636762,
        0.09553989457464113,
        0.009889683235442282,
        0.03514432554294618,
        0.0676617494608873,
        0.024064848261647443,
        0.066323771765079,
        0.0682986405930319,
        0.05979166766643587,
        0.06213495325536929,
        0.039439694721457065,
        0.008920179921984784,
        0.08362633754581826,
        0.05975008421610714,
        0.02706950957306924,
        0.07392811034669554,
        0.002456903377534303,
        0.0430838803412478,
        0.08504682414807774,
        0.047484300215034095,
        0.07139896261493336,
        0.04404544530092469,
        0.05976444925013379,
        0.007518350845549582,
        0.08683416049678103,
        0.007974539376809543,
        0.049006434871476316,
        0.0926986159902592,
        0.08701962600449269,
        0.07692317922621864,
        0.06998285842392635,
        0.02694418668719938,
        0.06774770443781399,
        0.019342659044393074,
        0.020239683204872086,
        0.03356057814060264,
        0.07480878651705984,
        0.0938716304559749,
        0.003465894193930419,
        0.04756247407388652,
        0.03598128766778449,
        0.06130383876993535,
        0.07541625508966623,
        0.06344332692874581,
        0.05644053160323747,
        0.03452445764396677,
        0.0051809879656748775,
        0.0007115165210033969,
        0.06989802983698927,
        0.054679024057989814,
        0.06303209775769937,
        0.04143548313113228,
        0.07705022163870018,
        0.08404887281478308,
        0.0139134549324337,
        0.07115356040073825,
        0.06632181687482473,
        0.019651534297966202,
        0.015293988428517891,
        0.08734156838361573,
        0.08158247658987167,
        0.019669571384189167,
        0.07177077928654527,
        0.09790962335088903,
        0.09881016844476813,
        0.012853481187923966,
        0.050083903788801065,
        0.015936142583619296,
        0.03414063451839846,
        0.08170927383494903,
        0.07542839382405847,
        0.04890751154165623,
        0.026891934544890486,
        0.06373023515439015,
        0.0733956737482456,
        0.04784694177767294,
        0.07124534211968002,
        0.09805853623409064,
        0.06996895067750582,
        0.05658502396014882,
        0.05972367204408825,
        0.08142007404539932,
        0.0451811460374719,
        0.09489283939660041,
        0.02620517920304465,
        0.05899512949372331,
        0.049262352756004685,
        0.09396745085640086,
        0.040539633173167826,
        0.0227460941991275
      ]
    },
    {
      "content": "import React from \"react\";\ninterface DeleteMcpServerProps {\n    onClose: () => void;\n    onDeleteServer: (name: string) => void;\n}\nexport default function DeleteMcpServer({ onClose, onDeleteServer }: DeleteMcpServerProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/delete-mcp-server.d.ts",
      "embedding": [
        0.29,
        0.1,
        0,
        0.1,
        0.2,
        0.08881530457569867,
        0.08762244252562601,
        0.041580360080088766,
        0.07966631957397052,
        0.07992913039016576,
        0.04961630666672162,
        0.027866970971157957,
        0.036097376245508815,
        0.08877490723928882,
        0.028411626423038763,
        0.0011674959687572263,
        0.0637531150808956,
        0.06788625773074013,
        0.06991005819373576,
        0.021132971772756914,
        0.02275174552908237,
        0.07911463709019041,
        0.07577951183932397,
        0.031054857604309608,
        0.03340493272894949,
        0.04433327221669358,
        0.08928039970139601,
        0.09481248260998995,
        0.045038885288872066,
        0.0927933981863505,
        0.022676356360325545,
        0.01831101148275115,
        0.03490727309576752,
        0.06343909305793648,
        0.07379490471537482,
        0.06294003425521537,
        0.07342730342407182,
        0.0237078326943612,
        0.06278364844363075,
        0.07815549765282165,
        0.07937328385164603,
        0.008652854944979816,
        0.03918039469745236,
        0.05525648589812529,
        0.014455244514232147,
        0.009068295325263277,
        0.0401256123818238,
        0.039027763269998544,
        0.03546839205611612,
        0.009917737556316098,
        0.04520594105509538,
        0.09992955424977089,
        0.09019853372651282,
        0.01817262432246537,
        0.09429753092330129,
        0.05157452057551907,
        0.008687298156337819,
        0.0007512280642375636,
        0.045126597785426804,
        0.013445261866079073,
        0.03217575567319569,
        0.02424847251505341,
        0.05183789622851931,
        0.03319028533602042,
        0.08937521225588392,
        0.05230403197324873,
        0.05076805208198142,
        0.047703248171535144,
        0.06322714510413503,
        0.011071154828411556,
        0.019514185772199877,
        0.018208635004411843,
        0.026274601936661736,
        0.04620163569214132,
        0.02837364066636987,
        0.0026493337085624516,
        0.06902946228468938,
        0.06398592096282606,
        0.013147785646006683,
        0.045008158002305676,
        0.0648390408337514,
        0.08642971569326884,
        0.09492555315303586,
        0.07584928182995992,
        0.09486424643343976,
        0.05416578922243035,
        0.0017239986034426114,
        0.06396923274758613,
        0.06877488008379617,
        0.0806462271908288,
        0.077151593374981,
        0.041053919359806956,
        0.09084987984973886,
        0.0066821880902395055,
        0.012338529812050126,
        0.018278791023141085,
        0.023165905944738965,
        0.004945744256115359,
        0.0175177825264341,
        0.016600871554480624
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst added_mcp_servers_1 = require(\"../../utils/added-mcp-servers\");\nfunction DeleteMcpServer({ onClose, onDeleteServer }) {\n    const [servers, setServers] = (0, react_1.useState)([]);\n    const [filteredServers, setFilteredServers] = (0, react_1.useState)([]);\n    const [selectedIndex, setSelectedIndex] = (0, react_1.useState)(0);\n    const [searchQuery, setSearchQuery] = (0, react_1.useState)(\"\");\n    const [isMounted, setIsMounted] = (0, react_1.useState)(true);\n    (0, react_1.useEffect)(() => {\n        loadServers();\n        return () => {\n            setIsMounted(false);\n        };\n    }, []);\n    (0, react_1.useEffect)(() => {\n        updateFilteredServers();\n    }, [searchQuery, servers]);\n    const loadServers = () => {\n        const loadedServers = (0, added_mcp_servers_1.loadAddedMcpServers)();\n        if (isMounted) {\n            setServers(loadedServers);\n        }\n    };\n    const updateFilteredServers = () => {\n        if (!searchQuery.trim()) {\n            setFilteredServers(servers);\n            return;\n        }\n        const query = searchQuery.toLowerCase();\n        const filtered = servers.filter(server => server.name.toLowerCase().includes(query) ||\n            server.command.toLowerCase().includes(query) ||\n            (server.description && server.description.toLowerCase().includes(query))).sort((a, b) => a.name.localeCompare(b.name));\n        setFilteredServers(filtered);\n        // Reset selection if current index is out of bounds\n        if (selectedIndex >= filtered.length) {\n            setSelectedIndex(0);\n        }\n    };\n    (0, ink_1.useInput)((inputChar, key) => {\n        if (key.ctrl && inputChar === \"c\") {\n            onClose();\n            return;\n        }\n        if (key.escape) {\n            onClose();\n            return;\n        }\n        if (key.upArrow) {\n            setSelectedIndex(prev => prev === 0 ? Math.max(0, filteredServers.length - 1) : prev - 1);\n            return;\n        }\n        if (key.downArrow) {\n            setSelectedIndex(prev => filteredServers.length === 0 ? 0 : (prev + 1) % Math.min(10, filteredServers.length));\n            return;\n        }\n        if (key.return) {\n            if (filteredServers.length > 0 && selectedIndex < filteredServers.length) {\n                const selectedServer = filteredServers[selectedIndex];\n                onDeleteServer(selectedServer.name);\n                // Refresh servers after deletion\n                setTimeout(() => {\n                    if (isMounted) {\n                        loadServers();\n                    }\n                }, 100);\n            }\n            return;\n        }\n        if (key.backspace || key.delete) {\n            setSearchQuery(prev => prev.slice(0, -1));\n            setSelectedIndex(0);\n            return;\n        }\n        if (inputChar && !key.ctrl && !key.meta) {\n            setSearchQuery(prev => prev + inputChar);\n            setSelectedIndex(0);\n            return;\n        }\n    });\n    if (servers.length === 0) {\n        return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83D\\uDDD1\\uFE0F  Delete MCP Server\"),\n            react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"No MCP servers have been added yet.\")),\n            react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"Use /add-mcp to add servers first\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"Press Esc to close\"))));\n    }\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n        react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83D\\uDDD1\\uFE0F  Delete MCP Server\"),\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Search: \"),\n            react_1.default.createElement(ink_1.Text, null,\n                searchQuery || \"\",\n                \"\\u2588\")),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n            filteredServers.length === 0 ? (react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: \"gray\", paddingX: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" },\n                    \"No servers found matching \\\"\",\n                    searchQuery,\n                    \"\\\"\"))) : (filteredServers.slice(0, 10).map((server, index) => {\n                const isSelected = index === selectedIndex;\n                const dateAdded = new Date(server.dateAdded).toLocaleDateString();\n                return (react_1.default.createElement(ink_1.Box, { key: server.name, borderStyle: \"round\", borderColor: isSelected ? \"red\" : \"gray\", paddingX: 1, marginBottom: 1 },\n                    react_1.default.createElement(ink_1.Box, { flexDirection: \"column\" },\n                        react_1.default.createElement(ink_1.Box, null,\n                            react_1.default.createElement(ink_1.Box, { width: 20 },\n                                react_1.default.createElement(ink_1.Text, { color: isSelected ? \"red\" : \"white\" }, server.name)),\n                            react_1.default.createElement(ink_1.Box, { width: 40 },\n                                react_1.default.createElement(ink_1.Text, { color: \"cyan\" }, server.command)),\n                            react_1.default.createElement(ink_1.Box, { flexGrow: 1 },\n                                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                                    \"Added \",\n                                    dateAdded))),\n                        server.description && (react_1.default.createElement(ink_1.Box, { paddingLeft: 2 },\n                            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, server.description))))));\n            })),\n            filteredServers.length > 10 && (react_1.default.createElement(ink_1.Box, { paddingX: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                    \"... and \",\n                    filteredServers.length - 10,\n                    \" more\")))),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Type to search servers\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Use \\u2191/\\u2193 arrows to navigate\"),\n            react_1.default.createElement(ink_1.Text, { color: \"red\", dimColor: true }, \"\\u2022 Press Enter to DELETE selected server\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to cancel\"))));\n}\nexports.default = DeleteMcpServer;\n//# sourceMappingURL=delete-mcp-server.js.map",
      "filePath": "../dist/ui/components/delete-mcp-server.js",
      "embedding": [
        7.41,
        0.7,
        0,
        0.3,
        0.2,
        0.09834071385692661,
        0.09212012563014971,
        0.011249268654333122,
        0.09926717323256608,
        0.01035100187514123,
        0.0008062231558498168,
        0.0764125211139385,
        0.06660258076392604,
        0.042565012253592584,
        0.08387271243872467,
        0.09357263249296863,
        0.08063150603987151,
        0.058264252021300623,
        0.0864003840102328,
        0.05915973034963992,
        0.09751346949487417,
        0.0013339809015728067,
        0.05892510917347238,
        0.014172824564425646,
        0.0612859509167497,
        0.052754059416596416,
        0.05413797579229455,
        0.06431414677060081,
        0.01486749687404747,
        0.05936493972882474,
        0.04898428677424213,
        0.01619127709060947,
        0.030143190605989058,
        0.0011820722078747293,
        0.06303884905301957,
        0.031264221036427335,
        0.0030880327598079684,
        0.03362461337720076,
        0.0398114824713143,
        0.06274800986801712,
        0.000705227466480296,
        0.019895715429844953,
        0.09774825317374836,
        0.05887726985005938,
        0.043713796298463094,
        0.02056494718208737,
        0.08974576885572338,
        0.025934095098451918,
        0.007195218917471491,
        0.01667550181719173,
        0.059280654000979385,
        0.0416602950464015,
        0.018902943143635123,
        0.09461377453780957,
        0.03324942101246005,
        0.0570091392309362,
        0.0790131098899558,
        0.0429091240481824,
        0.04836878610299217,
        0.003572787306511982,
        0.06743453537693983,
        0.017341589382442214,
        0.06947795381280193,
        0.08360267038160596,
        0.023882262175086735,
        0.04401461610318374,
        0.08768722628965692,
        0.010211474213361639,
        0.020155749180363326,
        0.019554175236116845,
        0.09449982570897966,
        0.09918084433359724,
        0.06174970353458811,
        0.0015202567023154256,
        0.08977906071337283,
        0.017585012838613436,
        0.04883095872658488,
        0.0891322100609383,
        0.03366374741343008,
        0.062102236458210114,
        0.004438385532253653,
        0.09290103281168455,
        0.05684251147524641,
        0.022687188082574472,
        0.06659551867857633,
        0.08667735222495171,
        0.050246631690480506,
        0.0025692744105279886,
        0.0650597825995149,
        0.01355271947975455,
        0.002270585388068236,
        0.006212284067942087,
        0.012639560290738039,
        0.014780009277833817,
        0.09544191294580844,
        0.059379318798944494,
        0.03327541618951745,
        0.09785634538546906,
        0.03217688789361833,
        0.051713218388387154
      ]
    },
    {
      "content": "import React from \"react\";\ninterface DeleteModelProps {\n    onClose: () => void;\n    onDeleteModel: (modelName: string, providerName: string) => void;\n}\nexport default function DeleteModel({ onClose, onDeleteModel }: DeleteModelProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/delete-model.d.ts",
      "embedding": [
        0.31,
        0.1,
        0,
        0.1,
        0.2,
        0.054862634572619244,
        0.006584871969871353,
        0.025855718487801063,
        0.0055613560993395435,
        0.04864251839645091,
        0.07490786078729457,
        0.0286457126059541,
        0.028102608835607657,
        0.09175858368452267,
        0.05939101228097772,
        0.0964542211965849,
        0.09792934154766969,
        0.0834621530941174,
        0.057000455210981016,
        0.07101902894450317,
        0.054965253573530465,
        0.052134522612321155,
        0.022745480573684453,
        0.030958961697893507,
        0.00161971381721584,
        0.053051576608408736,
        0.032341847621378185,
        0.09982675512045558,
        0.07950760604866762,
        0.008313195709192157,
        0.005758198152613182,
        0.07632745320741763,
        0.04138464500028181,
        0.04867931408990531,
        0.05167962988551226,
        0.08451808842637584,
        0.08488141919274905,
        0.049834328820959,
        0.0015236931500665187,
        0.038080538671367285,
        0.05173936965461501,
        0.08587311798949257,
        0.025905944312342246,
        0.041943716392416834,
        0.018893755666727987,
        0.05937285184640463,
        0.04530850445691212,
        0.049051327703957606,
        0.0741544091948447,
        0.026766449434645748,
        0.022864434302106898,
        0.05333653644326575,
        0.06849349873763333,
        0.060306581750013355,
        0.018440569657889073,
        0.05988565888715393,
        0.04032289764177565,
        0.023218009109576568,
        0.05473820941609917,
        0.054360630943949564,
        0.03141389300064419,
        0.005335519784855192,
        0.041057958679510544,
        0.008118825428371246,
        0.054747711958081535,
        0.08779843413147834,
        0.0635439611172819,
        0.002621594297222152,
        0.04099597693010573,
        0.06514806489036695,
        0.03584683639646902,
        0.08403557735183148,
        0.08484331769135989,
        0.06996109173829888,
        0.06406559712075609,
        0.04837277442241799,
        0.06458341453737708,
        0.004835233971295505,
        0.012867886282946618,
        0.0034633057330955342,
        0.02117695948585623,
        0.029645400729948715,
        0.009671227869873811,
        0.050887296413404275,
        0.038558756941857536,
        0.06095803365999955,
        0.03067865000072705,
        0.06342877675274121,
        0.07600069262089698,
        0.054852210568196204,
        0.09513085770539909,
        0.004878538270356736,
        0.04553220921557499,
        0.07081196412638176,
        0.07297351927353998,
        0.0549837650401217,
        0.03785752462710014,
        0.01221651972412463,
        0.005799584903541067,
        0.09746470340116396
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst added_models_1 = require(\"../../utils/added-models\");\nfunction DeleteModel({ onClose, onDeleteModel }) {\n    const [addedModels, setAddedModels] = (0, react_1.useState)([]);\n    const [filteredModels, setFilteredModels] = (0, react_1.useState)([]);\n    const [selectedIndex, setSelectedIndex] = (0, react_1.useState)(0);\n    const [searchQuery, setSearchQuery] = (0, react_1.useState)(\"\");\n    const [isMounted, setIsMounted] = (0, react_1.useState)(true);\n    (0, react_1.useEffect)(() => {\n        loadModels();\n        return () => {\n            setIsMounted(false);\n        };\n    }, []);\n    (0, react_1.useEffect)(() => {\n        updateFilteredModels();\n    }, [searchQuery, addedModels]);\n    const loadModels = () => {\n        const models = (0, added_models_1.loadAddedModels)();\n        if (isMounted) {\n            setAddedModels(models);\n        }\n    };\n    const updateFilteredModels = () => {\n        if (!searchQuery.trim()) {\n            setFilteredModels(addedModels);\n            return;\n        }\n        const query = searchQuery.toLowerCase();\n        const filtered = addedModels.filter(model => model.modelName.toLowerCase().includes(query) ||\n            model.providerName.toLowerCase().includes(query)).sort((a, b) => a.modelName.localeCompare(b.modelName));\n        setFilteredModels(filtered);\n        // Reset selection if current index is out of bounds\n        if (selectedIndex >= filtered.length) {\n            setSelectedIndex(0);\n        }\n    };\n    (0, ink_1.useInput)((inputChar, key) => {\n        if (key.ctrl && inputChar === \"c\") {\n            onClose();\n            return;\n        }\n        if (key.escape) {\n            onClose();\n            return;\n        }\n        if (key.upArrow) {\n            setSelectedIndex(prev => prev === 0 ? Math.max(0, filteredModels.length - 1) : prev - 1);\n            return;\n        }\n        if (key.downArrow) {\n            setSelectedIndex(prev => filteredModels.length === 0 ? 0 : (prev + 1) % Math.min(10, filteredModels.length));\n            return;\n        }\n        if (key.return) {\n            if (filteredModels.length > 0 && selectedIndex < filteredModels.length) {\n                const selectedModel = filteredModels[selectedIndex];\n                onDeleteModel(selectedModel.modelName, selectedModel.providerName);\n                // Refresh models after deletion\n                setTimeout(() => {\n                    if (isMounted) {\n                        loadModels();\n                    }\n                }, 100);\n            }\n            return;\n        }\n        if (key.backspace || key.delete) {\n            setSearchQuery(prev => prev.slice(0, -1));\n            setSelectedIndex(0);\n            return;\n        }\n        if (inputChar && !key.ctrl && !key.meta) {\n            setSearchQuery(prev => prev + inputChar);\n            setSelectedIndex(0);\n            return;\n        }\n    });\n    if (addedModels.length === 0) {\n        return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83D\\uDDD1\\uFE0F  Delete Model\"),\n            react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"No models have been added yet.\")),\n            react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"Use /add-model to add models first\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"Press Esc to close\"))));\n    }\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n        react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83D\\uDDD1\\uFE0F  Delete Model\"),\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Search: \"),\n            react_1.default.createElement(ink_1.Text, null,\n                searchQuery || \"\",\n                \"\\u2588\")),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n            filteredModels.length === 0 ? (react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: \"gray\", paddingX: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" },\n                    \"No models found matching \\\"\",\n                    searchQuery,\n                    \"\\\"\"))) : (filteredModels.slice(0, 10).map((model, index) => {\n                const isSelected = index === selectedIndex;\n                const dateAdded = new Date(model.dateAdded).toLocaleDateString();\n                return (react_1.default.createElement(ink_1.Box, { key: `${model.modelName}-${model.providerName}`, borderStyle: \"round\", borderColor: isSelected ? \"red\" : \"gray\", paddingX: 1, marginBottom: 1 },\n                    react_1.default.createElement(ink_1.Box, { width: 30 },\n                        react_1.default.createElement(ink_1.Text, { color: isSelected ? \"red\" : \"white\" }, model.modelName)),\n                    react_1.default.createElement(ink_1.Box, { width: 15 },\n                        react_1.default.createElement(ink_1.Text, { color: \"cyan\" },\n                            \"(\",\n                            model.providerName,\n                            \")\")),\n                    react_1.default.createElement(ink_1.Box, { flexGrow: 1 },\n                        react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                            \"Added \",\n                            dateAdded))));\n            })),\n            filteredModels.length > 10 && (react_1.default.createElement(ink_1.Box, { paddingX: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                    \"... and \",\n                    filteredModels.length - 10,\n                    \" more\")))),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Type to search models\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Use \\u2191/\\u2193 arrows to navigate\"),\n            react_1.default.createElement(ink_1.Text, { color: \"red\", dimColor: true }, \"\\u2022 Press Enter to DELETE selected model\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to cancel\"))));\n}\nexports.default = DeleteModel;\n//# sourceMappingURL=delete-model.js.map",
      "filePath": "../dist/ui/components/delete-model.js",
      "embedding": [
        7.15,
        0.7,
        0,
        0.3,
        0.2,
        0.08166306197316042,
        0.021460021961841713,
        0.029532774369787407,
        0.09884876610725168,
        0.07521858765249317,
        0.05408531091952713,
        0.0878542264025054,
        0.08079418708949648,
        0.020232428515546297,
        0.09809197215421506,
        0.012893341940011061,
        0.08205556907120466,
        0.045181006223650004,
        0.0460235098594271,
        0.014062322933709305,
        0.03371655943306208,
        0.034488000622817205,
        0.03714301963563704,
        0.09672052789369633,
        0.06740449685652065,
        0.08116743065715709,
        0.008693521703848961,
        0.06301763620500789,
        0.01748444567503963,
        0.07246434931073326,
        0.047376429104849675,
        0.016507803394105815,
        0.008332756458330726,
        0.04267700101894039,
        0.021887901430534897,
        0.0894403778830053,
        0.02768843891651227,
        0.03435070467640077,
        0.029476098455150857,
        0.008551860292554003,
        0.09247142906165533,
        0.06803088595449601,
        0.04501176111669081,
        0.07233398427469138,
        0.014432024159107694,
        0.0763851686536109,
        0.024014053959451578,
        0.05378286202272631,
        0.05285036804173548,
        0.043590538271450256,
        0.017593667181996397,
        0.004659322343826921,
        0.04551090385752076,
        0.040791488765294794,
        0.09745875473918572,
        0.02219569281477192,
        0.08650763169161911,
        0.05588070650883832,
        0.09537666618461653,
        0.06472241722943972,
        0.07635783641080791,
        0.068864343618674,
        0.0285872831926689,
        0.09007712009272885,
        0.03329399798783268,
        0.09638921345513703,
        0.04667587077838184,
        0.08376357964367664,
        0.08527443983459143,
        0.06840596959167955,
        0.011722152462242187,
        0.08565350074078126,
        0.04569029443376846,
        0.051357903182322785,
        0.046416717831323145,
        0.014895711258614741,
        0.05382559118928568,
        0.066202485867518,
        0.0278764296287342,
        0.09387984417590046,
        0.0557925608875715,
        0.03822736886170408,
        0.019088171414738342,
        0.015125614019370827,
        0.00915174489066175,
        0.0700599969625877,
        0.08372985657448867,
        0.022909490747852534,
        0.08810253205998762,
        0.09921000184644929,
        0.07738663975263897,
        0.07121735279056561,
        0.07811828515090993,
        0.08088845902706221,
        0.04553024156014138,
        0.08240459456161242,
        0.06202619339804963,
        0.04483453328634034,
        0.08845224448011212,
        0.07386238787456588
      ]
    },
    {
      "content": "import React from \"react\";\ninterface DeletePromptProps {\n    onClose: () => void;\n    onDeletePrompt: (name: string) => void;\n}\nexport default function DeletePrompt({ onClose, onDeletePrompt }: DeletePromptProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/delete-prompt.d.ts",
      "embedding": [
        0.29,
        0.1,
        0,
        0.1,
        0.2,
        0.06472057079828217,
        0.0958103409967393,
        0.07363519577350085,
        0.0949492779949862,
        0.05171209331353225,
        0.07468806245603254,
        0.09884122341628658,
        0.016678612331699528,
        0.07795471028273843,
        0.02170531576023641,
        0.021757373572151607,
        0.06784200284433659,
        0.014180919450121045,
        0.043623982663184124,
        0.0758158032764998,
        0.006046541163450637,
        0.07799533655769221,
        0.08034242417142892,
        0.09025427014771378,
        0.021819139899763584,
        0.06621586649366652,
        0.09190896102543686,
        0.04146086168068811,
        0.07185021892750887,
        0.08338962833920284,
        0.04620999194919986,
        0.03812464729168296,
        0.085311692507469,
        0.07955164240450732,
        0.007606804497858977,
        0.0873742345462663,
        0.028687340283847618,
        0.09961612717474584,
        0.026053952648005353,
        0.0807626539590452,
        0.04290342189620075,
        0.04108382213040836,
        0.07548651424136475,
        0.0357860201763371,
        0.07500952904303916,
        0.09322119305138178,
        0.0943315371809636,
        0.033072081741281116,
        0.006622501701951034,
        0.0998152224275633,
        0.019282530163479906,
        0.09509963084383473,
        0.03615821146964167,
        0.07725937860890927,
        0.019652815679721505,
        0.08911445232323019,
        0.08674171009965934,
        0.0632966112416484,
        0.06137647484912121,
        0.09002764045383382,
        0.09406061822892364,
        0.08759075359128032,
        0.09592972869948074,
        0.04130983932102638,
        0.09901394104487747,
        0.00010839202410966031,
        0.00635911140001374,
        0.04477639657564523,
        0.054000531549321544,
        0.005818962607121548,
        0.033890364417024414,
        0.014898151066957644,
        0.001904683746714242,
        0.06984589770686564,
        0.014351911217731462,
        0.07532755539968974,
        0.007581328927162456,
        0.05215782328607063,
        0.03690799216603261,
        0.07986101021742298,
        0.044402323833215934,
        0.08425767917241686,
        0.04853845659434314,
        0.06332944677832769,
        0.02902237866397537,
        0.02743153192177371,
        0.029038670944887324,
        0.055376058894768904,
        0.01445885759715937,
        0.06339018393913472,
        0.024902006656908185,
        0.002306563785405047,
        0.07840877710286985,
        0.047638114758981324,
        0.01841213248829876,
        0.09560278667258874,
        0.07937884722119308,
        0.05275735522238148,
        0.09590124756710351,
        0.09172108882352481
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst prompts_1 = require(\"../../utils/prompts\");\nfunction DeletePrompt({ onClose, onDeletePrompt }) {\n    const [prompts, setPrompts] = (0, react_1.useState)([]);\n    const [filteredPrompts, setFilteredPrompts] = (0, react_1.useState)([]);\n    const [selectedIndex, setSelectedIndex] = (0, react_1.useState)(0);\n    const [searchQuery, setSearchQuery] = (0, react_1.useState)(\"\");\n    const [isMounted, setIsMounted] = (0, react_1.useState)(true);\n    (0, react_1.useEffect)(() => {\n        loadPromptsData();\n        return () => {\n            setIsMounted(false);\n        };\n    }, []);\n    (0, react_1.useEffect)(() => {\n        updateFilteredPrompts();\n    }, [searchQuery, prompts]);\n    const loadPromptsData = () => {\n        const promptsData = (0, prompts_1.loadPrompts)();\n        if (isMounted) {\n            setPrompts(promptsData);\n        }\n    };\n    const updateFilteredPrompts = () => {\n        if (!searchQuery.trim()) {\n            setFilteredPrompts(prompts);\n            return;\n        }\n        const query = searchQuery.toLowerCase();\n        const filtered = prompts.filter(prompt => prompt.name.toLowerCase().includes(query) ||\n            prompt.content.toLowerCase().includes(query)).sort((a, b) => a.name.localeCompare(b.name));\n        setFilteredPrompts(filtered);\n        // Reset selection if current index is out of bounds\n        if (selectedIndex >= filtered.length) {\n            setSelectedIndex(0);\n        }\n    };\n    (0, ink_1.useInput)((inputChar, key) => {\n        if (key.ctrl && inputChar === \"c\") {\n            onClose();\n            return;\n        }\n        if (key.escape) {\n            onClose();\n            return;\n        }\n        if (key.upArrow) {\n            setSelectedIndex(prev => prev === 0 ? Math.max(0, filteredPrompts.length - 1) : prev - 1);\n            return;\n        }\n        if (key.downArrow) {\n            setSelectedIndex(prev => filteredPrompts.length === 0 ? 0 : (prev + 1) % Math.min(10, filteredPrompts.length));\n            return;\n        }\n        if (key.return) {\n            if (filteredPrompts.length > 0 && selectedIndex < filteredPrompts.length) {\n                const selectedPrompt = filteredPrompts[selectedIndex];\n                onDeletePrompt(selectedPrompt.name);\n                // Refresh prompts after deletion\n                setTimeout(() => {\n                    if (isMounted) {\n                        loadPromptsData();\n                    }\n                }, 100);\n            }\n            return;\n        }\n        if (key.backspace || key.delete) {\n            setSearchQuery(prev => prev.slice(0, -1));\n            setSelectedIndex(0);\n            return;\n        }\n        if (inputChar && !key.ctrl && !key.meta) {\n            setSearchQuery(prev => prev + inputChar);\n            setSelectedIndex(0);\n            return;\n        }\n    });\n    if (prompts.length === 0) {\n        return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83D\\uDDD1\\uFE0F  Delete Custom Prompt\"),\n            react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"No custom prompts have been added yet.\")),\n            react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"Use /add-prompt to add prompts first\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"Press Esc to close\"))));\n    }\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n        react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83D\\uDDD1\\uFE0F  Delete Custom Prompt\"),\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Search: \"),\n            react_1.default.createElement(ink_1.Text, null,\n                searchQuery || \"\",\n                \"\\u2588\")),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n            filteredPrompts.length === 0 ? (react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: \"gray\", paddingX: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" },\n                    \"No prompts found matching \\\"\",\n                    searchQuery,\n                    \"\\\"\"))) : (filteredPrompts.slice(0, 10).map((prompt, index) => {\n                const isSelected = index === selectedIndex;\n                const dateAdded = new Date(prompt.dateAdded).toLocaleDateString();\n                const preview = prompt.content.length > 60\n                    ? prompt.content.substring(0, 60) + \"...\"\n                    : prompt.content;\n                return (react_1.default.createElement(ink_1.Box, { key: prompt.name, borderStyle: \"round\", borderColor: isSelected ? \"red\" : \"gray\", paddingX: 1, marginBottom: 1 },\n                    react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", width: \"100%\" },\n                        react_1.default.createElement(ink_1.Box, null,\n                            react_1.default.createElement(ink_1.Box, { width: 25 },\n                                react_1.default.createElement(ink_1.Text, { color: isSelected ? \"red\" : \"white\" }, prompt.name)),\n                            react_1.default.createElement(ink_1.Box, { flexGrow: 1 },\n                                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                                    \"Added \",\n                                    dateAdded))),\n                        react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n                            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, preview.replace(/\\n/g, ' '))))));\n            })),\n            filteredPrompts.length > 10 && (react_1.default.createElement(ink_1.Box, { paddingX: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                    \"... and \",\n                    filteredPrompts.length - 10,\n                    \" more\")))),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Type to search prompts\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Use \\u2191/\\u2193 arrows to navigate\"),\n            react_1.default.createElement(ink_1.Text, { color: \"red\", dimColor: true }, \"\\u2022 Press Enter to DELETE selected prompt\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to cancel\"))));\n}\nexports.default = DeletePrompt;\n//# sourceMappingURL=delete-prompt.js.map",
      "filePath": "../dist/ui/components/delete-prompt.js",
      "embedding": [
        7.41,
        0.7,
        0,
        0.3,
        0.2,
        0.011064922954403644,
        0.0805125739660213,
        0.04262928662043643,
        0.08595617409761364,
        0.09496294568362604,
        0.023597646667296537,
        0.07144259780596364,
        0.044941723044245166,
        0.09761685412665,
        0.09749814809529778,
        0.030440882480604628,
        0.07879886020893613,
        0.01174873832056228,
        0.09246137417379602,
        0.054229253178900795,
        0.05946819774652739,
        0.09783553968223625,
        0.006824153065119143,
        0.026931341736955907,
        0.08836302420754834,
        0.08429815103479509,
        0.09293761067451169,
        0.05353910565196082,
        0.018489030547833397,
        0.013386672927094778,
        0.09454754586827568,
        0.028945775066351476,
        0.005098625510886534,
        0.06074638201791091,
        0.009848863618588178,
        0.05427225867091317,
        0.05615068806363366,
        0.012111462387912709,
        0.08935028854819417,
        0.07182375548360627,
        0.003273932403547053,
        0.09390898122649065,
        0.0785984539076924,
        0.008241965448371658,
        0.06714053711883336,
        0.05128282595845064,
        0.05535733276617638,
        0.021131959227068443,
        0.05134213235000443,
        0.05273843046532888,
        0.09464073135359423,
        0.03718902070270307,
        0.05297244987157033,
        0.010084959933215,
        0.02382636827894067,
        0.03166509215944068,
        0.00128769197708718,
        0.012978702196141957,
        0.02631457304520082,
        0.049624301373436625,
        0.0057549857970603975,
        0.017198495460128693,
        0.060342225095759955,
        0.0803020892628923,
        0.09586052939141781,
        0.06984115722852834,
        0.024603110241871798,
        0.039210544913975534,
        0.08968540127442924,
        0.070974602749736,
        0.001677600498548426,
        0.0009483182612948893,
        0.03715932783792114,
        0.023991279311124204,
        0.08842890859425862,
        0.09834121637006789,
        0.048612015220431765,
        0.09351988327030908,
        0.07490663737298174,
        0.036781418999245065,
        0.07602360413682652,
        0.08380223858387882,
        0.09070377331916225,
        0.041304556607514545,
        0.035736606779905054,
        0.05209111830253832,
        0.03409314795301197,
        0.08606888122364287,
        0.05440741779046099,
        0.04403696244741297,
        0.07140045525686615,
        0.005836007395893939,
        0.09921665516582409,
        0.008069645224704958,
        0.03825013082201492,
        0.07791170711699565,
        0.0811044861212152,
        0.028661635589947866,
        0.08457539521551034,
        0.017441341163606416
      ]
    },
    {
      "content": "/**\n * Professional diff renderer component\n */\nimport React from 'react';\ninterface DiffRendererProps {\n    diffContent: string;\n    filename?: string;\n    tabWidth?: number;\n    availableTerminalHeight?: number;\n    terminalWidth?: number;\n}\nexport declare const DiffRenderer: React.MemoExoticComponent<({ diffContent, filename, tabWidth, availableTerminalHeight, terminalWidth, }: DiffRendererProps) => React.ReactElement>;\nexport {};\n",
      "filePath": "../dist/ui/components/diff-renderer.d.ts",
      "embedding": [
        0.42,
        0,
        0,
        0.1,
        0.2,
        0.031676836553889545,
        0.07035779700025943,
        0.09719610353205772,
        0.00043399696361732246,
        0.04369620783597797,
        0.04769865371548498,
        0.05983701408435343,
        0.06425638530825069,
        0.009431387738222953,
        0.08333138716692776,
        0.015461157769462198,
        0.005751561954411655,
        0.018250871057757013,
        0.06036877308704656,
        0.08226640702521702,
        0.03037660149036835,
        0.0799280444051731,
        0.09901166540333917,
        0.01875764140294689,
        0.0775342469572851,
        0.055353921456321536,
        0.020876258552236383,
        0.03132711541677346,
        0.017862430632816763,
        0.017662135546546533,
        0.04167837399273442,
        0.061690114178100046,
        0.041992194804896465,
        0.023753369745855124,
        0.07978532785391668,
        0.00873932721151599,
        0.06581723030593374,
        0.05158665451109982,
        0.047183004987142944,
        0.013037250826601433,
        0.054064307539093484,
        0.013620907526875692,
        0.017436272096951134,
        0.040005319196727375,
        0.06355438122849467,
        0.04040139483805234,
        0.017298351674854252,
        0.09906485931693423,
        0.025965947828606274,
        0.024291282976259265,
        0.011268369879402051,
        0.09049898112901304,
        0.09103059854752682,
        0.028735736348061126,
        0.0011518077188339415,
        0.04583186200886901,
        0.09016562185503135,
        0.06969527164139386,
        0.055722973967066484,
        0.016258061925163925,
        0.0008057790415884725,
        0.07578115362867624,
        0.06676333439638252,
        0.08691542994151562,
        0.06326491635401231,
        0.08364414765175497,
        0.03641791543608366,
        0.028009603018248452,
        0.0816277359832434,
        0.054906917912800904,
        0.06186816404106439,
        0.045481460099213805,
        0.007522916481880504,
        0.017028549906429335,
        0.025305932393077036,
        0.03704766284355524,
        0.0461074758362893,
        0.09682975854907273,
        0.00023341781672928664,
        0.020567175925723203,
        0.09692973848975374,
        0.06426560170953387,
        0.09818322248751236,
        0.028182805700916715,
        0.046745416747571704,
        0.020238757704148038,
        0.019097822370428664,
        0.0478482660520126,
        0.06610994206927114,
        0.003392611254651734,
        0.03601515282063961,
        0.09267576605240421,
        0.0822330282785479,
        0.07039395028527855,
        0.031185426255388615,
        0.03606577700495841,
        0.06274779677111417,
        0.07146291321647492,
        0.08521613021097929,
        0.043797291665414
      ]
    },
    {
      "content": "\"use strict\";\n/**\n * Professional diff renderer component\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiffRenderer = void 0;\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst colors_1 = require(\"../utils/colors\");\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst max_sized_box_1 = require(\"../shared/max-sized-box\");\n// Parsing function for expensive diff computation\nfunction parseDiffWithLineNumbers(diffContent) {\n    const lines = diffContent.split('\\n');\n    const result = [];\n    let currentOldLine = 0;\n    let currentNewLine = 0;\n    let inHunk = false;\n    const hunkHeaderRegex = /^@@ -(\\d+),?\\d* \\+(\\d+),?\\d* @@/;\n    for (const line of lines) {\n        const hunkMatch = line.match(hunkHeaderRegex);\n        if (hunkMatch) {\n            currentOldLine = parseInt(hunkMatch[1], 10);\n            currentNewLine = parseInt(hunkMatch[2], 10);\n            inHunk = true;\n            result.push({ type: 'hunk', content: line });\n            // We need to adjust the starting point because the first line number applies to the *first* actual line change/context,\n            // but we increment *before* pushing that line. So decrement here.\n            currentOldLine--;\n            currentNewLine--;\n            continue;\n        }\n        if (!inHunk) {\n            // Skip standard Git header lines more robustly\n            if (line.startsWith('--- ') ||\n                line.startsWith('+++ ') ||\n                line.startsWith('diff --git') ||\n                line.startsWith('index ') ||\n                line.startsWith('similarity index') ||\n                line.startsWith('rename from') ||\n                line.startsWith('rename to') ||\n                line.startsWith('new file mode') ||\n                line.startsWith('deleted file mode'))\n                continue;\n            // If it's not a hunk or header, skip (or handle as 'other' if needed)\n            continue;\n        }\n        if (line.startsWith('+')) {\n            currentNewLine++; // Increment before pushing\n            result.push({\n                type: 'add',\n                newLine: currentNewLine,\n                content: line.substring(1),\n            });\n        }\n        else if (line.startsWith('-')) {\n            currentOldLine++; // Increment before pushing\n            result.push({\n                type: 'del',\n                oldLine: currentOldLine,\n                content: line.substring(1),\n            });\n        }\n        else if (line.startsWith(' ')) {\n            currentOldLine++; // Increment before pushing\n            currentNewLine++;\n            result.push({\n                type: 'context',\n                oldLine: currentOldLine,\n                newLine: currentNewLine,\n                content: line.substring(1),\n            });\n        }\n        else if (line.startsWith('\\\\')) {\n            // Handle \"\\ No newline at end of file\"\n            result.push({ type: 'other', content: line });\n        }\n    }\n    return result;\n}\nconst DEFAULT_TAB_WIDTH = 4; // Spaces per tab for normalization\n// Memoized DiffRenderer component with shallow prop comparison\nexports.DiffRenderer = react_1.default.memo(({ diffContent, filename, tabWidth = DEFAULT_TAB_WIDTH, availableTerminalHeight, terminalWidth = 80, }) => {\n    if (!diffContent || typeof diffContent !== 'string') {\n        return react_1.default.createElement(ink_1.Text, { color: colors_1.Colors.AccentYellow }, \"No diff content.\");\n    }\n    // Strip the first summary line (e.g. \"Updated file.txt with 1 addition and 2 removals\")\n    const lines = diffContent.split('\\n');\n    const firstLine = lines[0];\n    let actualDiffContent = diffContent;\n    if (firstLine && (firstLine.startsWith('Updated ') || firstLine.startsWith('Created '))) {\n        actualDiffContent = lines.slice(1).join('\\n');\n    }\n    // Use memoized parsing with content hash for caching\n    const contentHash = (0, react_1.useMemo)(() => crypto_1.default.createHash('sha1').update(actualDiffContent).digest('hex'), [actualDiffContent]);\n    const parsedLines = (0, react_1.useMemo)(() => parseDiffWithLineNumbers(actualDiffContent), [actualDiffContent]);\n    if (parsedLines.length === 0) {\n        return react_1.default.createElement(ink_1.Text, { dimColor: true }, \"No changes detected.\");\n    }\n    // Memoize expensive render computation\n    const renderedOutput = (0, react_1.useMemo)(() => renderDiffContent(parsedLines, filename, tabWidth, availableTerminalHeight, terminalWidth), [parsedLines, filename, tabWidth, availableTerminalHeight, terminalWidth]);\n    return react_1.default.createElement(react_1.default.Fragment, null, renderedOutput);\n});\n// Add display name for better debugging\nexports.DiffRenderer.displayName = 'DiffRenderer';\nconst renderDiffContent = (parsedLines, filename, tabWidth = DEFAULT_TAB_WIDTH, availableTerminalHeight, terminalWidth) => {\n    // 1. Normalize whitespace (replace tabs with spaces) *before* further processing\n    const normalizedLines = parsedLines.map((line) => ({\n        ...line,\n        content: line.content.replace(/\\t/g, ' '.repeat(tabWidth)),\n    }));\n    // Filter out non-displayable lines (hunks, potentially 'other') using the normalized list\n    const displayableLines = normalizedLines.filter((l) => l.type !== 'hunk' && l.type !== 'other');\n    if (displayableLines.length === 0) {\n        return react_1.default.createElement(ink_1.Text, { dimColor: true }, \"No changes detected.\");\n    }\n    // Calculate the minimum indentation across all displayable lines\n    let baseIndentation = Infinity; // Start high to find the minimum\n    for (const line of displayableLines) {\n        // Only consider lines with actual content for indentation calculation\n        if (line.content.trim() === '')\n            continue;\n        const firstCharIndex = line.content.search(/\\S/); // Find index of first non-whitespace char\n        const currentIndent = firstCharIndex === -1 ? 0 : firstCharIndex; // Indent is 0 if no non-whitespace found\n        baseIndentation = Math.min(baseIndentation, currentIndent);\n    }\n    // If baseIndentation remained Infinity (e.g., no displayable lines with content), default to 0\n    if (!isFinite(baseIndentation)) {\n        baseIndentation = 0;\n    }\n    const key = filename\n        ? `diff-box-${filename}-${crypto_1.default.createHash('sha1').update(JSON.stringify(parsedLines)).digest('hex')}`\n        : `diff-box-${crypto_1.default.createHash('sha1').update(JSON.stringify(parsedLines)).digest('hex')}`;\n    let lastLineNumber = null;\n    const MAX_CONTEXT_LINES_WITHOUT_GAP = 5;\n    return (react_1.default.createElement(max_sized_box_1.MaxSizedBox, { maxHeight: availableTerminalHeight, maxWidth: terminalWidth, key: key }, displayableLines.reduce((acc, line, index) => {\n        // Determine the relevant line number for gap calculation based on type\n        let relevantLineNumberForGapCalc = null;\n        if (line.type === 'add' || line.type === 'context') {\n            relevantLineNumberForGapCalc = line.newLine ?? null;\n        }\n        else if (line.type === 'del') {\n            // For deletions, the gap is typically in relation to the original file's line numbering\n            relevantLineNumberForGapCalc = line.oldLine ?? null;\n        }\n        if (lastLineNumber !== null &&\n            relevantLineNumberForGapCalc !== null &&\n            relevantLineNumberForGapCalc >\n                lastLineNumber + MAX_CONTEXT_LINES_WITHOUT_GAP + 1) {\n            acc.push(react_1.default.createElement(ink_1.Box, { key: `gap-${index}` },\n                react_1.default.createElement(ink_1.Text, { wrap: \"truncate\" }, '═'.repeat(terminalWidth))));\n        }\n        const lineKey = `diff-line-${index}`;\n        let gutterNumStr = '';\n        let backgroundColor = undefined;\n        let prefixSymbol = ' ';\n        let dim = false;\n        switch (line.type) {\n            case 'add':\n                gutterNumStr = (line.newLine ?? '').toString();\n                backgroundColor = '#86efac'; // Light green for additions\n                prefixSymbol = '+';\n                lastLineNumber = line.newLine ?? null;\n                break;\n            case 'del':\n                gutterNumStr = (line.oldLine ?? '').toString();\n                backgroundColor = 'redBright'; // Light red for deletions\n                prefixSymbol = '-';\n                // For deletions, update lastLineNumber based on oldLine if it's advancing.\n                // This helps manage gaps correctly if there are multiple consecutive deletions\n                // or if a deletion is followed by a context line far away in the original file.\n                if (line.oldLine !== undefined) {\n                    lastLineNumber = line.oldLine;\n                }\n                break;\n            case 'context':\n                gutterNumStr = (line.newLine ?? '').toString();\n                dim = true;\n                prefixSymbol = ' ';\n                lastLineNumber = line.newLine ?? null;\n                break;\n            default:\n                return acc;\n        }\n        const displayContent = line.content.substring(baseIndentation);\n        acc.push(react_1.default.createElement(ink_1.Box, { key: lineKey, flexDirection: \"row\" },\n            react_1.default.createElement(ink_1.Text, { color: colors_1.Colors.Gray, dimColor: dim }, gutterNumStr.padEnd(4)),\n            react_1.default.createElement(ink_1.Text, { color: backgroundColor ? '#000000' : undefined, backgroundColor: backgroundColor, dimColor: !backgroundColor && dim },\n                prefixSymbol,\n                \" \"),\n            react_1.default.createElement(ink_1.Text, { color: backgroundColor ? '#000000' : undefined, backgroundColor: backgroundColor, dimColor: !backgroundColor && dim, wrap: \"wrap\" }, displayContent)));\n        return acc;\n    }, [])));\n};\nconst getLanguageFromExtension = (extension) => {\n    const languageMap = {\n        js: 'javascript',\n        ts: 'typescript',\n        py: 'python',\n        json: 'json',\n        css: 'css',\n        html: 'html',\n        sh: 'bash',\n        md: 'markdown',\n        yaml: 'yaml',\n        yml: 'yaml',\n        txt: 'plaintext',\n        java: 'java',\n        c: 'c',\n        cpp: 'cpp',\n        rb: 'ruby',\n    };\n    return languageMap[extension] || null; // Return null if extension not found\n};\n//# sourceMappingURL=diff-renderer.js.map",
      "filePath": "../dist/ui/components/diff-renderer.js",
      "embedding": [
        11.58,
        0.9,
        0,
        0.6,
        0.4,
        0.007993563930947179,
        0.048040057652529305,
        0.02961301977086799,
        0.015281976301698431,
        0.09234833124670773,
        0.06390222799396277,
        0.04291227022864224,
        0.08460018741315702,
        0.0001717413415005087,
        0.0320563261839383,
        0.07236436508255689,
        0.09670531883610031,
        0.041280676773370543,
        0.08360455372497021,
        0.017254419042936387,
        0.06435225450283474,
        0.024284430907107846,
        0.07163009856760909,
        0.03530200511073219,
        0.00451537252215718,
        0.038276781895103,
        0.0686422082499668,
        0.06972655636415091,
        0.015535202343663302,
        0.0182418671917611,
        0.02454041501715797,
        0.07596066976360483,
        0.08160401789048702,
        0.002017916353344629,
        0.06505200207655296,
        0.0841866666521695,
        0.049671590986706794,
        0.05718678509764372,
        0.021483431556088818,
        0.09385109342849572,
        0.026962989742461807,
        0.08345001195077789,
        0.08536485779027686,
        0.009593881277771632,
        0.05846547296610756,
        0.09786824545266544,
        0.03340825115580628,
        0.030595336918147198,
        0.0051507960530602585,
        0.04208526801093342,
        0.024256865332865807,
        0.05701464136669593,
        0.045775304490778525,
        0.07618508524365808,
        0.08430353859268117,
        0.04428295369813079,
        0.020586545125052036,
        0.080465144295043,
        0.06293851548419131,
        0.05272884267008648,
        0.0033214829578205544,
        0.0147181233306525,
        0.00036347125484169633,
        0.010601201577827492,
        0.07277676619184527,
        0.05845608957042273,
        0.004410095690436245,
        0.0927139838441585,
        0.019092391009902024,
        0.013299334035194356,
        0.02994225464304319,
        0.08123111284194612,
        0.07763902272939228,
        0.03760583891840219,
        0.021757955160823975,
        0.0881089653108883,
        0.06779119352424176,
        0.05874856535263434,
        0.080828022445662,
        0.05054446281482938,
        0.01964294304029243,
        0.08489439983274993,
        0.023182890576572537,
        0.04694301607699265,
        0.033802665303934346,
        0.05482670827756601,
        0.09000585361964139,
        0.06975502784545545,
        0.0008702676166473134,
        0.01939126854066038,
        0.00782443469395142,
        0.07658603050165905,
        0.06725028139225434,
        0.030643095370801135,
        0.035580357597591906,
        0.044403068944716975,
        0.03872715577492756,
        0.008551669466329083,
        0.09371127603352732,
        0.018137452957308876
      ]
    },
    {
      "content": "import React from 'react';\ninterface ExpertModelsProps {\n    onExit: () => void;\n}\nexport declare const ExpertModels: React.FC<ExpertModelsProps>;\nexport {};\n",
      "filePath": "../dist/ui/components/expert-models.d.ts",
      "embedding": [
        0.2,
        0,
        0,
        0.1,
        0.2,
        0.0020958396064030605,
        0.05118172952014171,
        0.022104772869559964,
        0.028400575515868845,
        0.09251938597221115,
        0.030092810531792937,
        0.006004484675821187,
        0.07836408069306962,
        0.042216833486040745,
        0.08590927717200776,
        0.0515588903805565,
        0.057308301825400434,
        0.05957456276718348,
        0.05556034464595619,
        0.03389275374305633,
        0.06002799576752791,
        0.04277481599283905,
        0.05451876519837612,
        0.0906172991692149,
        0.059302937785728475,
        0.05517239557080859,
        0.028107468648805336,
        0.07326049140008226,
        0.058876400197595026,
        0.09761229552421265,
        0.020408992254856418,
        0.08088502896948453,
        0.02930328474242462,
        0.03757191767135787,
        0.04430470886883282,
        0.06656621940433345,
        0.0007006599965718508,
        0.0729512580384797,
        0.06650488457135038,
        0.022092141586418437,
        0.08244490929677938,
        0.08466114044324886,
        0.0716102092015578,
        0.019602875308048686,
        0.01461733133025418,
        0.07676381858883158,
        0.07235244926139654,
        0.09103469349052545,
        0.0294944537668567,
        0.06749216384686771,
        0.0032593600042051807,
        0.0265354621896579,
        0.0650814762887677,
        0.07788725057940749,
        0.06419136252583886,
        0.0640015930360107,
        0.07171059474788175,
        0.056243796447178245,
        0.016064895005542024,
        0.06717172922478512,
        0.05240620397913705,
        0.07467600791550948,
        0.025176590375647435,
        0.027301558607035127,
        0.06608568042175308,
        0.056872349854912296,
        0.0013011364234669087,
        0.011584538939343459,
        0.006168366279998017,
        0.0711441712576809,
        0.0247423234739406,
        0.024258097607463194,
        0.003330910661335085,
        0.07011918449396662,
        0.021248347190465946,
        0.025539133163158135,
        0.060636793647214554,
        0.024696372700202973,
        0.015336030873211183,
        0.035357752581989026,
        0.029836740421775032,
        0.04328067862255086,
        0.0988541588064865,
        0.045008800965636454,
        0.0008107965919197269,
        0.05013402632835641,
        0.08748155076593865,
        0.04394973736033654,
        0.05602150112883422,
        0.08413552234630373,
        0.09085086214425307,
        0.030351024226874357,
        0.06907194955064226,
        0.07681149513290829,
        0.0041658222144112305,
        0.05219490880101682,
        0.07891351306769633,
        0.08945196473026493,
        0.02984223825014877,
        0.003899265093489235
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExpertModels = void 0;\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst fuzzy_search_1 = require(\"../../utils/fuzzy-search\");\nconst expert_models_manager_1 = require(\"../../utils/expert-models-manager\");\nconst instance_models_1 = require(\"../../utils/instance-models\");\nconst ExpertModels = ({ onExit }) => {\n    const { exit } = (0, ink_1.useApp)();\n    const [config, setConfig] = (0, react_1.useState)({\n        enabled: false,\n        fastModel: null,\n        codeModel: null,\n        reasoningModel: null,\n        toolsModel: null,\n    });\n    const [availableModels, setAvailableModels] = (0, react_1.useState)([]);\n    const [currentField, setCurrentField] = (0, react_1.useState)('enabled');\n    const [searchQuery, setSearchQuery] = (0, react_1.useState)('');\n    const [filteredModels, setFilteredModels] = (0, react_1.useState)([]);\n    const [selectedIndex, setSelectedIndex] = (0, react_1.useState)(0);\n    const [showModelPicker, setShowModelPicker] = (0, react_1.useState)(false);\n    (0, react_1.useEffect)(() => {\n        // Load current expert models configuration\n        const expertConfig = expert_models_manager_1.expertModelsManager.getExpertModelsConfig();\n        setConfig(expertConfig);\n        // Load available models\n        const instanceModels = (0, instance_models_1.getInstanceAvailableModels)();\n        const models = instanceModels.map(m => ({\n            name: m.model,\n            provider: m.description.split('(')[1]?.split(')')[0] || 'Unknown'\n        }));\n        setAvailableModels(models);\n        setFilteredModels(models);\n    }, []);\n    (0, react_1.useEffect)(() => {\n        if (searchQuery) {\n            const filtered = (0, fuzzy_search_1.fuzzySearch)(searchQuery, availableModels, (model) => model.name);\n            setFilteredModels(filtered);\n        }\n        else {\n            setFilteredModels(availableModels);\n        }\n        setSelectedIndex(0);\n    }, [searchQuery, availableModels]);\n    (0, ink_1.useInput)((input, key) => {\n        if (key.escape) {\n            if (showModelPicker) {\n                setShowModelPicker(false);\n                setSearchQuery('');\n            }\n            else {\n                onExit();\n            }\n            return;\n        }\n        if (showModelPicker) {\n            if (key.upArrow) {\n                setSelectedIndex(Math.max(0, selectedIndex - 1));\n            }\n            else if (key.downArrow) {\n                setSelectedIndex(Math.min(filteredModels.length - 1, selectedIndex + 1));\n            }\n            else if (key.return) {\n                const selectedModel = filteredModels[selectedIndex];\n                if (selectedModel) {\n                    const newConfig = { ...config };\n                    switch (currentField) {\n                        case 'fast':\n                            newConfig.fastModel = selectedModel.name;\n                            break;\n                        case 'code':\n                            newConfig.codeModel = selectedModel.name;\n                            break;\n                        case 'reasoning':\n                            newConfig.reasoningModel = selectedModel.name;\n                            break;\n                        case 'tools':\n                            newConfig.toolsModel = selectedModel.name;\n                            break;\n                    }\n                    setConfig(newConfig);\n                    expert_models_manager_1.expertModelsManager.setExpertModelsConfig(newConfig);\n                }\n                setShowModelPicker(false);\n                setSearchQuery('');\n            }\n            else if (key.backspace || key.delete) {\n                setSearchQuery(searchQuery.slice(0, -1));\n            }\n            else if (input && !key.ctrl && !key.meta) {\n                setSearchQuery(searchQuery + input);\n            }\n        }\n        else {\n            if (key.upArrow) {\n                const fields = ['enabled', 'fast', 'code', 'reasoning', 'tools'];\n                const currentIndex = fields.indexOf(currentField);\n                setCurrentField(fields[Math.max(0, currentIndex - 1)]);\n            }\n            else if (key.downArrow) {\n                const fields = ['enabled', 'fast', 'code', 'reasoning', 'tools'];\n                const currentIndex = fields.indexOf(currentField);\n                setCurrentField(fields[Math.min(fields.length - 1, currentIndex + 1)]);\n            }\n            else if (key.return) {\n                if (currentField === 'enabled') {\n                    const newConfig = { ...config, enabled: !config.enabled };\n                    setConfig(newConfig);\n                    expert_models_manager_1.expertModelsManager.setExpertModelsConfig(newConfig);\n                }\n                else {\n                    setShowModelPicker(true);\n                }\n            }\n            else if (key.backspace || key.delete) {\n                if (currentField !== 'enabled') {\n                    const newConfig = { ...config };\n                    switch (currentField) {\n                        case 'fast':\n                            newConfig.fastModel = null;\n                            break;\n                        case 'code':\n                            newConfig.codeModel = null;\n                            break;\n                        case 'reasoning':\n                            newConfig.reasoningModel = null;\n                            break;\n                        case 'tools':\n                            newConfig.toolsModel = null;\n                            break;\n                    }\n                    setConfig(newConfig);\n                    expert_models_manager_1.expertModelsManager.setExpertModelsConfig(newConfig);\n                }\n            }\n        }\n    });\n    if (showModelPicker) {\n        return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\" },\n            react_1.default.createElement(ink_1.Text, { bold: true, color: \"cyan\" },\n                \"Select Model for \",\n                currentField === 'fast' ? 'Fast Operations' :\n                    currentField === 'code' ? 'Code Tasks' :\n                        currentField === 'reasoning' ? 'Complex Reasoning' : 'Tool Operations'),\n            react_1.default.createElement(ink_1.Text, { dimColor: true }, \"Type to search, \\u2191\\u2193 to navigate, Enter to select, Esc to cancel\"),\n            react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, null,\n                    \"Search: \",\n                    searchQuery)),\n            react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n                filteredModels.slice(0, 10).map((model, index) => (react_1.default.createElement(ink_1.Box, { key: model.name },\n                    react_1.default.createElement(ink_1.Text, { color: index === selectedIndex ? 'cyan' : 'white' },\n                        index === selectedIndex ? '► ' : '  ',\n                        model.name,\n                        \" \",\n                        react_1.default.createElement(ink_1.Text, { dimColor: true },\n                            \"(\",\n                            model.provider,\n                            \")\"))))),\n                filteredModels.length > 10 && (react_1.default.createElement(ink_1.Text, { dimColor: true },\n                    \"... and \",\n                    filteredModels.length - 10,\n                    \" more\")))));\n    }\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\" },\n        react_1.default.createElement(ink_1.Text, { bold: true, color: \"cyan\" }, \"Expert Models Configuration\"),\n        react_1.default.createElement(ink_1.Text, { dimColor: true }, \"Use different models for different types of tasks\"),\n        react_1.default.createElement(ink_1.Text, { dimColor: true }, \"\\u2191\\u2193 to navigate, Enter to toggle/select, Backspace to clear, Esc to exit\"),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 2 },\n            react_1.default.createElement(ink_1.Box, null,\n                react_1.default.createElement(ink_1.Text, { color: currentField === 'enabled' ? 'cyan' : 'white' },\n                    currentField === 'enabled' ? '► ' : '  ',\n                    \"Expert Mode: \",\n                    config.enabled ?\n                        react_1.default.createElement(ink_1.Text, { color: \"green\" }, \"Enabled\") :\n                        react_1.default.createElement(ink_1.Text, { color: \"red\" }, \"Disabled\"))),\n            react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { color: currentField === 'fast' ? 'cyan' : config.enabled ? 'white' : 'gray' },\n                    currentField === 'fast' ? '► ' : '  ',\n                    \"Fast Operations: \",\n                    config.fastModel ?\n                        react_1.default.createElement(ink_1.Text, { color: \"green\" }, config.fastModel) :\n                        react_1.default.createElement(ink_1.Text, { dimColor: true }, \"Not set\"))),\n            react_1.default.createElement(ink_1.Box, null,\n                react_1.default.createElement(ink_1.Text, { color: currentField === 'code' ? 'cyan' : config.enabled ? 'white' : 'gray' },\n                    currentField === 'code' ? '► ' : '  ',\n                    \"Code Tasks: \",\n                    config.codeModel ?\n                        react_1.default.createElement(ink_1.Text, { color: \"green\" }, config.codeModel) :\n                        react_1.default.createElement(ink_1.Text, { dimColor: true }, \"Not set\"))),\n            react_1.default.createElement(ink_1.Box, null,\n                react_1.default.createElement(ink_1.Text, { color: currentField === 'reasoning' ? 'cyan' : config.enabled ? 'white' : 'gray' },\n                    currentField === 'reasoning' ? '► ' : '  ',\n                    \"Complex Reasoning: \",\n                    config.reasoningModel ?\n                        react_1.default.createElement(ink_1.Text, { color: \"green\" }, config.reasoningModel) :\n                        react_1.default.createElement(ink_1.Text, { dimColor: true }, \"Not set\"))),\n            react_1.default.createElement(ink_1.Box, null,\n                react_1.default.createElement(ink_1.Text, { color: currentField === 'tools' ? 'cyan' : config.enabled ? 'white' : 'gray' },\n                    currentField === 'tools' ? '► ' : '  ',\n                    \"Tool Operations: \",\n                    config.toolsModel ?\n                        react_1.default.createElement(ink_1.Text, { color: \"green\" }, config.toolsModel) :\n                        react_1.default.createElement(ink_1.Text, { dimColor: true }, \"Not set\")))),\n        react_1.default.createElement(ink_1.Box, { marginTop: 2 },\n            react_1.default.createElement(ink_1.Text, { dimColor: true },\n                \"\\u2022 Fast: File navigation, simple commands\",\n                '\\n',\n                \"\\u2022 Code: Code editing, refactoring, syntax fixes\",\n                '\\n',\n                \"\\u2022 Reasoning: Complex problem solving, architecture decisions\",\n                '\\n',\n                \"\\u2022 Tools: Multi-tool workflows, complex orchestration\"))));\n};\nexports.ExpertModels = ExpertModels;\n//# sourceMappingURL=expert-models.js.map",
      "filePath": "../dist/ui/components/expert-models.js",
      "embedding": [
        10.05,
        0.6,
        0,
        0.3,
        0.3,
        0.06047475688954462,
        0.09403450952703292,
        0.05885915741220247,
        0.02270917129736081,
        0.08570340238102567,
        0.0005434855877687995,
        0.07161368640780306,
        0.035968553002125224,
        0.0595387274013535,
        0.0227720021366031,
        0.07596368046202484,
        0.08637461835211394,
        0.09822682012383321,
        0.03700922098175459,
        0.06654408050557652,
        0.09881091155417226,
        0.021475534156516318,
        0.06391392245719277,
        0.06706325108139947,
        0.009248007815938753,
        0.012221522782684957,
        0.024784972872050573,
        0.06311690219121162,
        0.04194267940340372,
        0.07849518071038344,
        0.0321830027646157,
        0.06885667046668469,
        0.05421722423873685,
        0.04048511223707816,
        0.059374421581826334,
        0.03867651910272754,
        0.05643946400391932,
        0.09197689406767201,
        0.00016730406283165246,
        0.06310867418484198,
        0.0887926371150046,
        0.0328497778088699,
        0.07474919595055313,
        0.033727452022895066,
        0.020926771900639275,
        0.02163482106546405,
        0.09294546763425567,
        0.07197120649166547,
        0.06176490540704284,
        0.007361784064004018,
        0.0690353898560601,
        0.08029168173237894,
        0.06676695159924409,
        0.019273761948150725,
        0.029831646005386493,
        0.08386935795380648,
        0.03954939841454622,
        0.07304540916608986,
        0.05280982670101406,
        0.0378620787122009,
        0.013747701278403536,
        0.0764214456313012,
        0.06460254518090272,
        0.04592539162039976,
        0.03733778667622106,
        0.0021035574097541866,
        0.06713458230558149,
        0.020887823206177804,
        0.08022012746093672,
        0.005584792429051544,
        0.029342490809466527,
        0.008033946983218044,
        0.072664462287784,
        0.021183164076966843,
        0.017018624007856177,
        0.007822633240244193,
        0.08868917062004383,
        0.0902030476323391,
        0.07948624857748769,
        0.07243328788219147,
        0.0715961190568067,
        0.0861960509118349,
        0.05102081193990687,
        0.07137795577580207,
        0.07796251716557084,
        0.06568399486301582,
        0.052194725450914664,
        0.09936655554196765,
        0.07273329206742019,
        0.04657398701678536,
        0.045780333514670736,
        0.028534618533069957,
        0.07615152591831424,
        0.055463683884989234,
        0.03908927641453772,
        0.056666701705444404,
        0.07744931221346746,
        0.07293889438390752,
        0.08276186804923405,
        0.012275832427764699
      ]
    },
    {
      "content": "import React from \"react\";\ninterface FileFinderProps {\n    files: string[];\n    selectedIndex: number;\n    query: string;\n    isVisible: boolean;\n    maxItems?: number;\n}\nexport declare function FileFinder({ files, selectedIndex, query, isVisible, maxItems }: FileFinderProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/file-finder.d.ts",
      "embedding": [
        0.33,
        0.1,
        0,
        0.1,
        0.2,
        0.09442640827199653,
        0.022769651776703204,
        0.06111286094011528,
        0.06633007600739385,
        0.06226478418561432,
        0.01700879471049177,
        0.07652201014754495,
        0.048247678015555066,
        0.03222670456864605,
        0.04157274083382197,
        0.09027954190688554,
        0.09109625091152043,
        0.052388948584273926,
        0.005865602203524157,
        0.047695779195084304,
        0.011398856723749441,
        0.017809799808374462,
        0.055271729723511534,
        0.08943134863381999,
        0.08009597829165804,
        0.08077838305343246,
        0.08486440007143506,
        0.0480926206611239,
        0.04595715813255477,
        0.018868341993590068,
        0.05919046189753242,
        0.0018163995549396073,
        0.08813608225937031,
        0.08485049289617264,
        0.07663536056513827,
        0.07569639518920647,
        0.08455409843345565,
        0.07001303252657856,
        0.07322991376551406,
        0.04662677641338145,
        0.05018262026668383,
        0.01059451011054764,
        0.05200090550197615,
        0.015334364457828332,
        0.025797317937396015,
        0.09503143532438058,
        0.07671132633342567,
        0.08692600622917845,
        0.0245191829342177,
        0.011594068907480659,
        0.07063375225847407,
        0.03240537622654904,
        0.03723913102637416,
        0.045082801523920135,
        0.024658859665947587,
        0.026532161964337976,
        0.09264102661499538,
        0.03826194774413379,
        0.013971909094567237,
        0.08792204424449791,
        0.056988326609196296,
        0.0019182378481355955,
        0.07697865143892131,
        0.0007100194766572199,
        0.08200391629645723,
        0.04750287130670246,
        0.0820732769757709,
        0.09707092433250392,
        0.03683860846021345,
        0.05218706295562006,
        0.05104350268310315,
        0.06677152728042166,
        0.021895957751455166,
        0.020885248835439033,
        0.08824638037836224,
        0.044060524009834734,
        0.07713591253071195,
        0.0987371002077066,
        0.08739832518891935,
        0.03865824050990649,
        0.07246376298349587,
        0.0835519201388145,
        0.008655291530373355,
        0.07176964825309247,
        0.005407961285318397,
        0.0024794308574968005,
        0.026268104126182436,
        0.0911366781293595,
        0.02730457706316193,
        0.015064460515342992,
        0.08618428408362605,
        0.05586975166655725,
        0.08056038159908452,
        0.0632004008137093,
        0.0064397990491413485,
        0.0953528675100283,
        0.05038892499151664,
        0.07363395431968023,
        0.07787373043339638,
        0.03197759585582952
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileFinder = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst ink_1 = require(\"ink\");\nfunction FileFinder({ files, selectedIndex, query, isVisible, maxItems = 8 }) {\n    if (!isVisible || files.length === 0) {\n        return null;\n    }\n    const displayFiles = files.slice(0, maxItems);\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n        react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: \"cyan\", paddingX: 1 },\n            react_1.default.createElement(ink_1.Box, { flexDirection: \"column\" },\n                react_1.default.createElement(ink_1.Text, { color: \"cyan\", bold: true },\n                    query.endsWith('/') ? '📁 Directories matching' : '📄 Files matching',\n                    \" \\\"@\",\n                    query,\n                    \"\\\"\"),\n                displayFiles.map((file, index) => {\n                    const isDirectory = file.endsWith('/');\n                    const icon = isDirectory ? '📁' : '📄';\n                    return (react_1.default.createElement(ink_1.Box, { key: index, paddingLeft: 1 },\n                        react_1.default.createElement(ink_1.Text, { color: index === selectedIndex ? \"black\" : \"white\", backgroundColor: index === selectedIndex ? \"cyan\" : undefined },\n                            index === selectedIndex ? \"▶ \" : \"  \",\n                            icon,\n                            \" \",\n                            file)));\n                }),\n                react_1.default.createElement(ink_1.Box, { marginTop: 1, paddingX: 1 },\n                    react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2191\\u2193 navigate \\u2022 Enter select \\u2022 Esc cancel\"))))));\n}\nexports.FileFinder = FileFinder;\n//# sourceMappingURL=file-finder.js.map",
      "filePath": "../dist/ui/components/file-finder.js",
      "embedding": [
        1.95,
        0.2,
        0,
        0.3,
        0.3,
        0.060597980658111034,
        0.032647168503072435,
        0.0616812148361696,
        0.05114057420866576,
        0.06151630293884879,
        0.04060483539413476,
        0.004449056923179229,
        0.0715478045736439,
        0.08194823775046169,
        0.07845570660292756,
        0.044259040447052145,
        0.06942660846654099,
        0.08809200681087989,
        0.08197727808221733,
        0.00141631606956113,
        0.06602862456138515,
        0.024336666841853663,
        0.06529869066720129,
        0.008549255715839466,
        0.07356281348521067,
        0.034930288086486926,
        0.0043824783529335725,
        0.07903856746951174,
        0.0999005227728049,
        0.07773278891519793,
        0.06096447283953968,
        0.08990080043624184,
        0.07485356058840907,
        0.08743160396523214,
        0.006072311847053646,
        0.08520081091082682,
        0.05084659269705341,
        0.06008575865526425,
        0.06098299659329596,
        0.09351379772000257,
        0.045971703845293144,
        0.004546947100352516,
        0.07487704463941586,
        0.03733858967223495,
        0.016072342223929892,
        0.0839990929574031,
        0.07568624317305929,
        0.007717800375009443,
        0.07214913865092118,
        0.041646990270198206,
        0.04521665135092341,
        0.04290731495918479,
        0.007128453820979975,
        0.05939781553584339,
        0.0842762633019961,
        0.08467729796966787,
        0.08044261646419926,
        0.0399614149424145,
        0.09987376127661635,
        0.07568871193276308,
        0.09022780473272908,
        0.07038169592081082,
        0.057495209663248885,
        0.02578111173983029,
        0.07372187890392816,
        0.03201652377384915,
        0.05405802015139327,
        0.046440728635598665,
        0.0015664335578536416,
        0.04365722076672532,
        0.044596042397069914,
        0.09569451760909563,
        0.05938005590928616,
        0.042598903270234384,
        0.06514312419067637,
        0.07075682277408758,
        0.052876586687165654,
        0.07114724537188248,
        0.02709315364006695,
        0.09069202073503567,
        0.0793955492875885,
        0.09495215194629116,
        0.0893681628911855,
        0.025947217164373194,
        0.0012099462437995313,
        0.0738310096999986,
        0.06088804182488292,
        0.08419651916872305,
        0.035553754461618035,
        0.05220203442384243,
        0.07418086990962929,
        0.06799050077285212,
        0.05069971765114265,
        0.09475023584878134,
        0.03941103330021262,
        0.08767169071855274,
        0.003237480524168501,
        0.09581178564084342,
        0.026435980137451687,
        0.015410287007615153
      ]
    },
    {
      "content": "import React from \"react\";\ninterface LoadingSpinnerProps {\n    isActive: boolean;\n    processingTime: number;\n    tokenCount: number;\n}\nexport declare function LoadingSpinner({ isActive, processingTime, tokenCount }: LoadingSpinnerProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/loading-spinner.d.ts",
      "embedding": [
        0.27,
        0.1,
        0,
        0.1,
        0.2,
        0.0046231440755469255,
        0.07116709475351157,
        0.051577296570064324,
        0.06361447055312179,
        0.03550222498333604,
        0.04349692572768972,
        0.07598187882612777,
        0.05579812689954078,
        0.022637170071538495,
        0.038804159520492904,
        0.061193093937324874,
        0.09739023477903143,
        0.0864352908305834,
        0.07686207149305382,
        0.027864913588548024,
        0.05261992240073189,
        0.08871972723833191,
        0.08813703675021832,
        0.031882707175195826,
        0.014760334322425128,
        0.009118418535230011,
        0.09397011706875356,
        0.017895898692889767,
        0.08859018383265661,
        0.07080456588158389,
        0.013433473832973797,
        0.004435570374169184,
        0.09169625954368484,
        0.09826152447644053,
        0.05684881809772412,
        0.018298426496931055,
        0.040907047312242296,
        0.019816129880616196,
        0.060953066033923003,
        0.05736421342939601,
        0.08911396691476287,
        0.01854302107893683,
        0.008103440697446807,
        0.09620744947104601,
        0.0692765274865975,
        0.0386075156636045,
        0.06396669672351281,
        0.012133215279592735,
        0.04070824184318168,
        0.0624145377890871,
        0.0491694633933951,
        0.060109430364070085,
        0.06128517952116337,
        0.09748764022150976,
        0.05722489315311377,
        0.08970188565084161,
        0.04088196900951509,
        0.05316973948328873,
        0.023680089235803305,
        0.026574098342901288,
        0.05550074533342262,
        0.012325475626599703,
        0.02081459336044259,
        0.017937827444844956,
        0.08063981341304519,
        0.03743152303082492,
        0.07887270861706996,
        0.07151208078348123,
        0.028819742391236358,
        0.06094704134508899,
        0.03001892087492547,
        0.014178573553188568,
        0.07098111943982498,
        0.09275112732049598,
        0.0005091112825124756,
        0.077077116511272,
        0.05089444249582038,
        0.03293922037269349,
        0.02494611636609987,
        0.07114549715452051,
        0.07787404426608913,
        0.06282458089680036,
        0.03380133141891313,
        0.013448057518979307,
        0.030560245871055092,
        0.006649154300071636,
        0.03445115122297515,
        0.08924423070916641,
        0.028436636391157778,
        0.017798775489052322,
        0.057600652713469196,
        0.08433906329112191,
        0.005812088143372174,
        0.09685120801322328,
        0.042088765775836624,
        0.08145482897695179,
        0.07086927957530949,
        0.025812901928716814,
        0.009825634135531038,
        0.08953523328638045
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LoadingSpinner = void 0;\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst loadingTexts = [\n    \"Thinking...\",\n    \"Computing...\",\n    \"Analyzing...\",\n    \"Processing...\",\n    \"Calculating...\",\n    \"Interfacing...\",\n    \"Optimizing...\",\n    \"Synthesizing...\",\n    \"Decrypting...\",\n    \"Calibrating...\",\n    \"Bootstrapping...\",\n    \"Synchronizing...\",\n    \"Compiling...\",\n    \"Downloading...\",\n];\nfunction LoadingSpinner({ isActive, processingTime, tokenCount }) {\n    const [spinnerFrame, setSpinnerFrame] = (0, react_1.useState)(0);\n    const [loadingTextIndex, setLoadingTextIndex] = (0, react_1.useState)(0);\n    (0, react_1.useEffect)(() => {\n        if (!isActive)\n            return;\n        const spinnerFrames = [\"/\", \"-\", \"\\\\\", \"|\"];\n        const interval = setInterval(() => {\n            setSpinnerFrame((prev) => (prev + 1) % spinnerFrames.length);\n        }, 250);\n        return () => clearInterval(interval);\n    }, [isActive]);\n    (0, react_1.useEffect)(() => {\n        if (!isActive)\n            return;\n        setLoadingTextIndex(Math.floor(Math.random() * loadingTexts.length));\n        const interval = setInterval(() => {\n            setLoadingTextIndex(Math.floor(Math.random() * loadingTexts.length));\n        }, 2000);\n        return () => clearInterval(interval);\n    }, [isActive]);\n    if (!isActive)\n        return null;\n    const spinnerFrames = [\"/\", \"-\", \"\\\\\", \"|\"];\n    return (react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n        react_1.default.createElement(ink_1.Text, { color: \"cyan\" },\n            spinnerFrames[spinnerFrame],\n            \" \",\n            loadingTexts[loadingTextIndex],\n            \" \"),\n        react_1.default.createElement(ink_1.Text, { color: \"gray\" },\n            \"(\",\n            processingTime,\n            \"s \\u00B7 \\u2191 \",\n            tokenCount,\n            \" tokens \\u00B7 esc to interrupt)\")));\n}\nexports.LoadingSpinner = LoadingSpinner;\n//# sourceMappingURL=loading-spinner.js.map",
      "filePath": "../dist/ui/components/loading-spinner.js",
      "embedding": [
        3.18,
        0.7,
        0,
        0.3,
        0.3,
        0.09824296271297088,
        0.018523743090732448,
        0.04506870096291306,
        0.048971312147715655,
        0.018465192563577905,
        0.0656831500234582,
        0.04817510825651586,
        0.023768841459854043,
        0.03256038524410326,
        0.0740475871622092,
        0.061124258613385635,
        0.0898377271386679,
        0.05831392914092838,
        0.02752849118800942,
        0.025343663423131414,
        0.0944647784949268,
        0.09393387144910927,
        0.05510458409511942,
        0.022609654280062952,
        0.040482781237131074,
        0.0998937682237648,
        0.07045076099502307,
        0.07568427967501906,
        0.0038515506441308967,
        0.00552266567235934,
        0.056996435955511265,
        0.012441176179577252,
        0.07306194553275087,
        0.021370763443208343,
        0.097643345049374,
        0.058186237314391244,
        0.03709162715659645,
        0.009846375286768972,
        0.037771512914587226,
        0.06521614638353025,
        0.048664745447140625,
        0.09776601941111782,
        0.09872164104188569,
        0.06255747856783865,
        0.07743639473974676,
        0.014054885780602289,
        0.027631159288941422,
        0.03950890304475187,
        0.037172370995094475,
        0.0857416257936124,
        0.09170437374083062,
        0.029370087132544888,
        0.05236767716185434,
        0.05215608219826933,
        0.09219946784678179,
        0.04594152104670965,
        0.052911437998350436,
        0.07230326290898985,
        0.042272655030581835,
        0.09513862312906195,
        0.009275037424220112,
        0.0955973513676649,
        0.021377239643592207,
        0.09437079669839853,
        0.03793567000884022,
        0.02899943416523794,
        0.0005207916004672852,
        0.08097808976412421,
        0.046262344367023235,
        0.06644888013690663,
        0.025205667174880722,
        0.017748949301812755,
        0.016263954017530658,
        0.005537690245780724,
        0.034948831748547904,
        0.08731315773049464,
        0.025329289127344026,
        0.0817813194382749,
        0.03466133816111099,
        0.059197927937955676,
        0.024678777908650276,
        0.07969089023042904,
        0.08501769502364087,
        0.09463398344311408,
        0.014128971835796934,
        0.09956144283209961,
        0.0867708566091644,
        0.033097963988567534,
        0.09494554370593654,
        0.0060337741289108295,
        0.05076619971288593,
        0.02479135626698341,
        0.0448682522572009,
        0.08498860095744412,
        0.02380157223091576,
        0.041975576339217224,
        0.0176667508963384,
        0.05275186008154781,
        0.017277032418423665,
        0.036495744733171125
      ]
    },
    {
      "content": "import React from \"react\";\nimport { AddedMcpServer } from \"../../utils/added-mcp-servers\";\ninterface McpServerSelectionProps {\n    servers: AddedMcpServer[];\n    selectedIndex: number;\n    isVisible: boolean;\n}\nexport declare function McpServerSelection({ servers, selectedIndex, isVisible }: McpServerSelectionProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/mcp-server-selection.d.ts",
      "embedding": [
        0.33,
        0.1,
        0,
        0.2,
        0.2,
        0.057166181647177156,
        0.0967987921547077,
        0.023428706751370487,
        0.03440869544324552,
        0.06238543970265734,
        0.012144444543155386,
        0.037183938900589644,
        0.03334725003086456,
        0.01625585723447567,
        0.08058392640819063,
        0.06816361293491327,
        0.07335389684845554,
        0.05355624690056751,
        0.07823610280674714,
        0.006684235497758773,
        0.0451942642639016,
        0.09443250387292863,
        0.002805966378105218,
        0.06921626662957288,
        0.07594425028472664,
        0.013740769795253516,
        0.006705044974969355,
        0.07344161933392239,
        0.03909433825102712,
        0.05271269524960767,
        0.010255479469993778,
        0.09627732535751489,
        0.011546110441830772,
        0.09911937817378266,
        0.00018049330792717645,
        0.05608729656624542,
        0.021738895414021554,
        0.06171742853710909,
        0.0648763781553215,
        0.08478951318647482,
        0.07999146822218038,
        0.06534262052174193,
        0.07367109611035466,
        0.07015320846265986,
        0.025180415039487893,
        0.08086827084844851,
        0.07051879446746419,
        0.02759753750370464,
        0.05080721900742299,
        0.09010195890988132,
        0.010482460187226816,
        0.04887674457337674,
        0.08868032120220665,
        0.0019212318091391236,
        0.032892032892229875,
        0.09688278030848173,
        0.08050611476231555,
        0.03871117034081948,
        0.04786222984677646,
        0.0013308656851250156,
        0.00946156242103603,
        0.023901452421076698,
        0.006538989660795681,
        0.0012605688868210898,
        0.016761651329516892,
        0.09830863263802414,
        0.05636534993692648,
        0.059009826040809114,
        0.07063983322836093,
        0.05328753793960176,
        0.004904665807097908,
        0.08693694297297437,
        0.028730042071447904,
        0.02878885114064337,
        0.09948991530368366,
        0.0657671466178341,
        0.022809617804924378,
        0.024557801191952444,
        0.09196876211973834,
        0.05715325213405499,
        0.08704142160351769,
        0.09817499778279372,
        0.08674366453501617,
        0.024431110722180606,
        0.022013197501949966,
        0.0452820832487632,
        0.06163321539958502,
        0.08422173530272518,
        0.08655676356457741,
        0.018717815256369008,
        0.0722346698204893,
        0.02394711572213605,
        0.044711172200168604,
        0.0314045801463145,
        0.09651709594868933,
        0.06723591142505685,
        0.009099224780517922,
        0.012148232958466855,
        0.016655065256264635,
        0.040765158733421014
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.McpServerSelection = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst ink_1 = require(\"ink\");\nfunction McpServerSelection({ servers, selectedIndex, isVisible }) {\n    if (!isVisible || servers.length === 0) {\n        return null;\n    }\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n        react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83D\\uDD17 MCP Servers\"),\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Available MCP servers:\")),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n            servers.slice(0, 10).map((server, index) => {\n                const isSelected = index === selectedIndex;\n                const dateAdded = new Date(server.dateAdded).toLocaleDateString();\n                return (react_1.default.createElement(ink_1.Box, { key: server.name, borderStyle: \"round\", borderColor: isSelected ? \"blue\" : \"gray\", paddingX: 1, marginBottom: 1 },\n                    react_1.default.createElement(ink_1.Box, { flexDirection: \"column\" },\n                        react_1.default.createElement(ink_1.Box, null,\n                            react_1.default.createElement(ink_1.Box, { width: 20 },\n                                react_1.default.createElement(ink_1.Text, { color: isSelected ? \"blue\" : \"white\" }, server.name)),\n                            react_1.default.createElement(ink_1.Box, { width: 40 },\n                                react_1.default.createElement(ink_1.Text, { color: \"cyan\" }, server.command)),\n                            react_1.default.createElement(ink_1.Box, { flexGrow: 1 },\n                                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                                    \"Added \",\n                                    dateAdded))),\n                        server.description && (react_1.default.createElement(ink_1.Box, { paddingLeft: 2 },\n                            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, server.description))))));\n            }),\n            servers.length > 10 && (react_1.default.createElement(ink_1.Box, { paddingX: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                    \"... and \",\n                    servers.length - 10,\n                    \" more\")))),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Use \\u2191/\\u2193 arrows to navigate\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Enter to view server details\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to close\"))));\n}\nexports.McpServerSelection = McpServerSelection;\n//# sourceMappingURL=mcp-server-selection.js.map",
      "filePath": "../dist/ui/components/mcp-server-selection.js",
      "embedding": [
        2.71,
        0.2,
        0,
        0.3,
        0.3,
        0.02506021274595981,
        0.04820447355085677,
        0.025931363978136748,
        0.04673954614591931,
        0.0027569675257033688,
        0.03313791780145022,
        0.030602646603162566,
        0.05859257650985396,
        0.013887047401946262,
        0.014596671758852842,
        0.07913490292972525,
        0.061327975392552185,
        0.02684689847819064,
        0.038713010930062464,
        0.0662793583259056,
        0.02961934215365012,
        0.062143069385257224,
        0.00192711130582105,
        0.08958074444290698,
        0.04078585551256613,
        0.07708164790796415,
        0.0679751636098808,
        0.04298132682888899,
        0.010976980444267537,
        0.013446406297933401,
        0.04296551139707144,
        0.04177175934863841,
        0.03491923056840545,
        0.06180700872554218,
        0.05413104658042368,
        0.02500826514731579,
        0.011246130911626129,
        0.0578093386813485,
        0.02100183642254121,
        0.03299291070002689,
        0.03208916427397257,
        0.08390793579713653,
        0.037078259606603714,
        0.06181134088448505,
        0.030427033323937848,
        0.04865629297401994,
        0.012121894135616663,
        0.008171814280669421,
        0.06068963486445994,
        0.002470535500769078,
        0.06101641660742324,
        0.004406160915002844,
        0.09768130096563699,
        0.08823070603128635,
        0.05666804960337557,
        0.0046746311346748115,
        0.025286470091232006,
        0.014706676402808339,
        0.03866634405599561,
        0.08904625944254731,
        0.04558159065075107,
        0.017189916748040737,
        0.05815791843119721,
        0.08492136455707174,
        0.09757877235703118,
        0.0029719847808348356,
        0.033372279033964496,
        0.029534388772823852,
        0.05414169525887555,
        0.045236500483534926,
        0.00952490424792616,
        0.00020548604271910522,
        0.05009418245629315,
        0.042813419417029944,
        0.06362534158888933,
        0.04171166475499839,
        0.038070913095711284,
        0.004062020864532556,
        0.05611042849277728,
        0.07497996362800272,
        0.00242687716967952,
        0.03594932433975884,
        0.058729991894620914,
        0.0805836321825789,
        0.032301831740821095,
        0.005350524991960504,
        0.05458477534108618,
        0.040667842983833996,
        0.03192716474205131,
        0.021587932803248847,
        0.0843975275272722,
        0.022460852106925246,
        0.01966758757627911,
        0.06714307818407322,
        0.020312853797040932,
        0.07518336026018727,
        0.0685713095566025,
        0.05133572726510352,
        0.08467659895035584,
        0.06258320787900128
      ]
    },
    {
      "content": "import React from \"react\";\ninterface ModelOption {\n    model: string;\n    description: string;\n}\ninterface ModelSelectionProps {\n    models: ModelOption[];\n    selectedIndex: number;\n    isVisible: boolean;\n    currentModel: string;\n}\nexport declare function ModelSelection({ models, selectedIndex, isVisible, currentModel, }: ModelSelectionProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/model-selection.d.ts",
      "embedding": [
        0.38,
        0.1,
        0,
        0.1,
        0.2,
        0.05287213323924483,
        0.06543280486636761,
        0.019743252653765787,
        0.09419241417949806,
        0.006773684312851903,
        0.07700435097051546,
        0.044312210615084294,
        0.02696782282293585,
        0.09658355429877973,
        0.0672369613503955,
        0.09680962174709257,
        0.02360286002972204,
        0.021304941047034544,
        0.0767588115483902,
        0.029690703658093422,
        0.09329785585092942,
        0.016078371367798605,
        0.017089604411925984,
        0.03985088339875721,
        0.050925622130626125,
        0.0491838645981946,
        0.043486589979987604,
        0.08216355745330534,
        0.04215045975907808,
        0.016715724183360536,
        0.05232560359169413,
        0.06047024978094376,
        0.07760423242933279,
        0.09786996426616709,
        0.049716785707414834,
        0.005619365519780317,
        0.05873548870295821,
        0.07740464648703832,
        0.09663310829098051,
        0.07165043978791089,
        0.01397673356300876,
        0.028096506897058893,
        0.008268504636444273,
        0.03767045190822502,
        0.09760422269747546,
        0.03658843953608598,
        0.021682448124718524,
        0.08078739219266778,
        0.05317204526212726,
        0.07680283199654661,
        0.0741805546636019,
        0.0391794695154902,
        0.03469088680089249,
        0.011985184353613332,
        0.009659080154158629,
        0.04682723814403366,
        0.05212795632691767,
        0.055963748592738685,
        0.07964857527123115,
        0.09537775146472603,
        0.03728981468500619,
        0.03155024031149617,
        0.012769450946156724,
        0.009459869948468681,
        0.015540625122890329,
        0.012974871638291419,
        0.0652772501990684,
        0.09944556321712006,
        0.0853973807342458,
        0.03655642837387575,
        0.008161217902547868,
        0.048550441359696356,
        0.019375781398529815,
        0.03058872239755475,
        0.05595931935058379,
        0.05871259380407844,
        0.09213747916867734,
        0.022271111820273283,
        0.03319837479505523,
        0.0051027104693856075,
        0.02838007292229541,
        0.09598743543270366,
        0.046015832238805655,
        0.044212126049415594,
        0.0841545441911334,
        0.0049465020610455325,
        0.00024055071916154747,
        0.03223813021096068,
        0.018547946092721836,
        0.04438346682056296,
        0.036701667451475496,
        0.08085234028123833,
        0.026928875967860113,
        0.03154108350681695,
        0.053306968334359134,
        0.024073945237790186,
        0.09499397608328948,
        0.054619100939648536,
        0.09753333932369752,
        0.09739510468948369
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ModelSelection = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst ink_1 = require(\"ink\");\nfunction ModelSelection({ models, selectedIndex, isVisible, currentModel, }) {\n    if (!isVisible)\n        return null;\n    return (react_1.default.createElement(ink_1.Box, { marginTop: 1, flexDirection: \"column\" },\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"cyan\" },\n                \"Select Model (current: \",\n                currentModel,\n                \"):\")),\n        models.map((modelOption, index) => (react_1.default.createElement(ink_1.Box, { key: index, paddingLeft: 1 },\n            react_1.default.createElement(ink_1.Text, { color: index === selectedIndex ? \"black\" : \"white\", backgroundColor: index === selectedIndex ? \"cyan\" : undefined }, modelOption.model),\n            react_1.default.createElement(ink_1.Box, { marginLeft: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, modelOption.description))))),\n        react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2191\\u2193 navigate \\u2022 Enter/Tab select \\u2022 Esc cancel\"))));\n}\nexports.ModelSelection = ModelSelection;\n//# sourceMappingURL=model-selection.js.map",
      "filePath": "../dist/ui/components/model-selection.js",
      "embedding": [
        1.45,
        0.2,
        0,
        0.3,
        0.3,
        0.009159041547139047,
        0.04633749242519308,
        0.036171761036612474,
        0.08739521455672566,
        0.03646048151206965,
        0.012401397401627923,
        0.07647330170374783,
        0.046644756826096305,
        0.04081470843851648,
        0.08137885105119719,
        0.00907510142188468,
        0.07925934854575829,
        0.0528873247429709,
        0.02628005811813261,
        0.03756840992981401,
        0.07633514255300983,
        0.07539417009177915,
        0.03066264745279923,
        0.07915200320349632,
        0.04695603833156789,
        0.06892191185122991,
        0.0025304771144038954,
        0.05317334225783332,
        0.027812132674309976,
        0.03499180780364047,
        0.009942222006337398,
        0.06002692996054925,
        0.09342725798282968,
        0.09672635202767671,
        0.0633774486628559,
        0.0653548592205435,
        0.07099541056931101,
        0.010895944064706776,
        0.05422184637678389,
        0.08485530950431332,
        0.017875212347742253,
        0.048082787540538886,
        0.002260653074445562,
        0.08308089573144564,
        0.04740966149700096,
        0.012462004371411352,
        0.04623924572480668,
        0.0891859478274573,
        0.05899150395040923,
        0.04517941479511664,
        0.01777304158671016,
        0.005313495700302673,
        0.08681529755024878,
        0.04033103830192163,
        0.020270473272140845,
        0.08604249398336566,
        0.05839205360300431,
        0.017713181879612405,
        0.019600600472492992,
        0.011333167667669687,
        0.020820511616105864,
        0.09980065632606717,
        0.011189649560571314,
        0.0699085750237581,
        0.034001505065153,
        0.06078996054771812,
        0.061981514944663564,
        0.0658450088295181,
        0.0975921966095522,
        0.04222644853280438,
        0.0954391405738021,
        0.09745054697596373,
        0.08285898981662221,
        0.07690979137638021,
        0.08170381494938943,
        0.023287870657630706,
        0.007263324110723313,
        0.0864754345188492,
        0.0646672536831253,
        0.08928637041214377,
        0.029038191367132028,
        0.06183690058714308,
        0.006474754425329243,
        0.08771120823585674,
        0.005472874553364171,
        0.041691988902298804,
        0.07181321174980658,
        0.026342387404852043,
        0.06519140388619636,
        0.041030485021046864,
        0.03996407583560355,
        0.097524976308084,
        0.07478523406100748,
        0.04313613365941843,
        0.08864979985793503,
        0.001019532140405033,
        0.07304573480843286,
        0.09780609915051258,
        0.04364825706580157,
        0.09644247755562028
      ]
    },
    {
      "content": "import React from \"react\";\ninterface NeonTextProps {\n    text: string;\n}\nexport declare function NeonText({ text }: NeonTextProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/neon-text.d.ts",
      "embedding": [
        0.21,
        0.1,
        0,
        0.1,
        0.2,
        0.03852066974021965,
        0.02647464087900511,
        0.08838934614837753,
        0.04137347677795536,
        0.04894688086965587,
        0.0706486180648621,
        0.014678894542525401,
        0.041577672737126474,
        0.03704732736602231,
        0.053476974193780016,
        0.08332362191275593,
        0.071661161391903,
        0.07296463069343084,
        0.05673188699912236,
        0.052184959426480784,
        0.04254372679958954,
        0.03370657857578753,
        0.0397027298347982,
        0.09077658483459715,
        0.0507095104113388,
        0.0978302428385351,
        0.07158787012469169,
        0.05012020829584967,
        0.02713450726511244,
        0.0842158803104694,
        0.000848645754198174,
        0.0017781116633532213,
        0.008642626577316959,
        0.020695688125565406,
        0.07142772171680899,
        0.0220252600621785,
        0.07779929980505189,
        0.00730236684778991,
        0.09107525631486622,
        0.07863584993611866,
        0.013995361502348737,
        0.0503734042136855,
        0.0960551183100121,
        0.02527315866339467,
        0.09791126623509916,
        0.043385550985961696,
        0.07793589131347876,
        0.006610962398176135,
        0.02735522470601466,
        0.08816491027116652,
        0.007730230153176454,
        0.07256700153160385,
        0.061344399630144666,
        0.038991585705432076,
        0.07110988240779152,
        0.09955162010180099,
        0.06595026105746436,
        0.0058483999673470295,
        0.025947807927255206,
        0.006619040499951434,
        0.0734846583804397,
        0.08678874311785155,
        0.02854376040076563,
        0.005975205844887943,
        0.08829632570566091,
        0.01886051730436076,
        0.0004701116802511285,
        0.08576494357303904,
        0.034672075625009395,
        0.06998213755057847,
        0.059529870166582816,
        0.09517417964076223,
        0.05242893611862294,
        0.065488670123903,
        0.09555436172811739,
        0.04919399241185399,
        0.01829073017615891,
        0.02168753616165894,
        0.09585542586681084,
        0.06686292187328217,
        0.02736610287212088,
        0.0913072111366094,
        0.05339766922467929,
        0.06891698620183125,
        0.05973535330047705,
        0.06844355499897115,
        0.08468713681642608,
        0.07449669583251686,
        0.008335726855965021,
        0.015211755645891568,
        0.014528621294931578,
        0.07948322038760786,
        0.05042473596354885,
        0.038076378921297796,
        0.06684549206116386,
        0.08181704408882234,
        0.09459374585504371,
        0.04597716736186761,
        0.08584775162708015,
        0.0701761259610529
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NeonText = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst ink_1 = require(\"ink\");\nfunction NeonText({ text }) {\n    const rainbowColors = ['red', 'magenta', 'yellow', 'green', 'cyan', 'blue'];\n    return (react_1.default.createElement(react_1.default.Fragment, null, text.split('').map((char, index) => (react_1.default.createElement(ink_1.Text, { key: index, color: rainbowColors[index % rainbowColors.length], bold: true }, char)))));\n}\nexports.NeonText = NeonText;\n//# sourceMappingURL=neon-text.js.map",
      "filePath": "../dist/ui/components/neon-text.js",
      "embedding": [
        0.8,
        0.2,
        0,
        0.3,
        0.3,
        0.010511451333049471,
        0.03393865822221578,
        0.09832594058171111,
        0.09737863932362861,
        0.07605472506544048,
        0.05883072229962191,
        0.08238219650477412,
        0.01372204308253271,
        0.09694309280781058,
        0.06074638868371168,
        0.04923103925016892,
        0.023907015878839713,
        0.009558622318543087,
        0.05428019388326033,
        0.06689396173218184,
        0.06451781414812452,
        0.03499137570728476,
        0.0648332160550022,
        0.058119909867652676,
        0.017847038642556535,
        0.07292469757794062,
        0.01178503675417385,
        0.04469589995845452,
        0.00026664049039364367,
        0.008017389767910887,
        0.07300226310220619,
        0.06441038895994537,
        0.003172350959762793,
        0.07922519921224203,
        0.06657943021256287,
        0.07306409905049933,
        0.058002060885704754,
        0.09034414031494485,
        0.09780283613872326,
        0.06357049642147054,
        0.04776235979956626,
        0.03591352119258343,
        0.053431137348061146,
        0.013249575478354848,
        0.08165385090603854,
        0.059213547755984745,
        0.07534880072238248,
        0.055173097285423,
        0.06980711219044163,
        0.02252224712333776,
        0.00839840911273292,
        0.052914758568286424,
        0.01912191673076793,
        0.0002199019810722458,
        0.09530874209562058,
        0.01835628587579439,
        0.029094178577946363,
        0.07030423690966317,
        0.043227441197138644,
        0.00851431827041127,
        0.09421607900061851,
        0.09903160452371008,
        0.012133837660831683,
        0.010100900908328948,
        0.04171536471715627,
        0.05866864794516108,
        0.08017182581945062,
        0.04121577975156219,
        0.05783734548283386,
        0.023069832036720608,
        0.015375715879001096,
        0.09098775334389254,
        0.05311454871122943,
        0.02827071134449043,
        0.08075881009429446,
        0.06978162770486974,
        0.03882134107330192,
        0.07556786614907378,
        0.06184212644941583,
        0.05707194423105192,
        0.061072177443240144,
        0.03931438228610038,
        0.017996428484740246,
        0.06738153578630622,
        0.0952369862068349,
        0.04596721130011944,
        0.056809664845988345,
        0.01015350805784846,
        0.003966325648048475,
        0.08889456914195432,
        0.005173979910622817,
        0.04971740925277172,
        0.06724147639970003,
        0.04236479695278666,
        0.09133722975489791,
        0.0807191764475031,
        0.016053355412159444,
        0.02109879039919277,
        0.09664645085318847,
        0.006717250512734085
      ]
    },
    {
      "content": "import React from \"react\";\ninterface PromptsListProps {\n    onClose: () => void;\n    onSelectPrompt?: (promptName: string | null) => void;\n    selectedPrompt?: string | null;\n}\nexport default function PromptsList({ onClose, onSelectPrompt, selectedPrompt }: PromptsListProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/prompts-list.d.ts",
      "embedding": [
        0.36,
        0.1,
        0,
        0.1,
        0.2,
        0.043357855484545585,
        0.08487952530989276,
        0.0011163319196205947,
        0.018195461715687613,
        0.0706752848176376,
        0.09979635947449098,
        0.02945282463649196,
        0.09431281413057802,
        0.026097702647133972,
        0.03577622064216214,
        0.043715577884053725,
        0.007821954808802434,
        0.05090013712808078,
        0.04587061270837256,
        0.09623070962144575,
        0.05886745553127659,
        0.05175945630389953,
        0.07781419553906904,
        0.01595136427215448,
        0.03299930969291718,
        0.04195315948634132,
        0.004433884670621524,
        0.012184435085264511,
        0.0926632758868872,
        0.03559977603803147,
        0.03196958190577024,
        0.02572852723101945,
        0.05567962669317442,
        0.004469666078167944,
        0.08277129335905535,
        0.044657226408730856,
        0.047550855206791136,
        0.09323667163406724,
        0.049738394108452225,
        0.0319373339518531,
        0.08686100173723682,
        0.01591872756242966,
        0.060871761165952304,
        0.08984409966887381,
        0.024491313258168747,
        0.09377558420568602,
        0.00006376274610185862,
        0.04337789771085471,
        0.011769201897823612,
        0.01512661388049692,
        0.008020844127331983,
        0.06990788582609675,
        0.0544090530470442,
        0.00019146472954491013,
        0.03840680017146694,
        0.0349588660206172,
        0.07321428657765604,
        0.0429018087581904,
        0.03083518260570515,
        0.08805752705256123,
        0.04291879843264096,
        0.06624140912346947,
        0.062249915072018394,
        0.04564634869260773,
        0.011819409848125429,
        0.018431273368348877,
        0.09134884889728058,
        0.08685345764630788,
        0.029324549276509904,
        0.007359689828649207,
        0.08447626240220818,
        0.003066847347671531,
        0.05050840819437916,
        0.055946159813254584,
        0.0959380624779671,
        0.03756393317758916,
        0.03296973415841684,
        0.0793654203127719,
        0.09022639364437389,
        0.08611241512200553,
        0.090225265754725,
        0.09069074181091885,
        0.07309525859575398,
        0.0626280778741422,
        0.03324687845615387,
        0.031220265973339236,
        0.07348796906029648,
        0.0646499435557568,
        0.0012044799842877098,
        0.09290813558285953,
        0.05411502589808862,
        0.0017196820684411752,
        0.004005342940108703,
        0.004331004861463462,
        0.02029420373195151,
        0.07705423820880519,
        0.016052828714301828,
        0.0973927984496273,
        0.07612236824731984,
        0.0911641576759595
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst prompts_1 = require(\"../../utils/prompts\");\nfunction PromptsList({ onClose, onSelectPrompt, selectedPrompt }) {\n    const [prompts, setPrompts] = (0, react_1.useState)([]);\n    const [allOptions, setAllOptions] = (0, react_1.useState)([]);\n    const [selectedIndex, setSelectedIndex] = (0, react_1.useState)(0);\n    const [showContent, setShowContent] = (0, react_1.useState)(false);\n    const [justSelected, setJustSelected] = (0, react_1.useState)(null);\n    const [showSuccessMessage, setShowSuccessMessage] = (0, react_1.useState)(false);\n    (0, react_1.useEffect)(() => {\n        const promptsData = (0, prompts_1.loadPrompts)();\n        setPrompts(promptsData);\n        // Create options list with \"None\" option first, then all prompts\n        const noneOption = {\n            name: \"GIGA (Default)\",\n            content: \"Use default GIGA assistant prompt with file editing and coding tools\",\n            dateAdded: new Date().toISOString(),\n            isNone: true\n        };\n        const options = [noneOption, ...promptsData];\n        setAllOptions(options);\n        // Set initial selected index based on current selected prompt\n        if (selectedPrompt) {\n            const promptIndex = promptsData.findIndex(p => p.name === selectedPrompt);\n            if (promptIndex !== -1) {\n                setSelectedIndex(promptIndex + 1); // +1 because None is first\n            }\n        }\n        else {\n            setSelectedIndex(0); // None is selected\n        }\n    }, [selectedPrompt]);\n    (0, ink_1.useInput)((inputChar, key) => {\n        if (key.ctrl && inputChar === \"c\") {\n            onClose();\n            return;\n        }\n        if (key.escape) {\n            if (showContent) {\n                setShowContent(false);\n            }\n            else {\n                onClose();\n            }\n            return;\n        }\n        if (!showContent) {\n            if (key.upArrow) {\n                setSelectedIndex(prev => prev === 0 ? Math.max(0, allOptions.length - 1) : prev - 1);\n                return;\n            }\n            if (key.downArrow) {\n                setSelectedIndex(prev => allOptions.length === 0 ? 0 : (prev + 1) % allOptions.length);\n                return;\n            }\n            if (key.return) {\n                if (allOptions.length > 0 && selectedIndex < allOptions.length) {\n                    // Select this prompt\n                    const selected = allOptions[selectedIndex];\n                    const promptName = 'isNone' in selected && selected.isNone ? null : selected.name;\n                    setJustSelected(promptName);\n                    setShowSuccessMessage(true);\n                    if (onSelectPrompt) {\n                        onSelectPrompt(promptName);\n                    }\n                    // Show success message briefly then close\n                    setTimeout(() => {\n                        onClose();\n                    }, 1000);\n                }\n                return;\n            }\n            if (inputChar === ' ') {\n                // Space to select\n                if (allOptions.length > 0 && selectedIndex < allOptions.length) {\n                    const selected = allOptions[selectedIndex];\n                    const promptName = 'isNone' in selected && selected.isNone ? null : selected.name;\n                    setJustSelected(promptName);\n                    setShowSuccessMessage(true);\n                    if (onSelectPrompt) {\n                        onSelectPrompt(promptName);\n                    }\n                    // Show success message briefly then close\n                    setTimeout(() => {\n                        onClose();\n                    }, 1000);\n                }\n                return;\n            }\n            if (inputChar === 'v' || inputChar === 'V') {\n                // 'v' to view content\n                if (allOptions.length > 0 && selectedIndex < allOptions.length) {\n                    setShowContent(true);\n                }\n                return;\n            }\n        }\n    });\n    if (showSuccessMessage) {\n        const selectedName = justSelected || \"GIGA (Default)\";\n        return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"green\" }, \"\\u2705 System Prompt Changed!\"),\n            react_1.default.createElement(ink_1.Box, { marginBottom: 1, borderStyle: \"round\", borderColor: \"green\", paddingX: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"green\" },\n                    \"Now using: \",\n                    selectedName)),\n            react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"Closing...\"))));\n    }\n    if (allOptions.length <= 1) { // Only \"GIGA\" option exists\n        return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83C\\uDFAF Select System Prompt\"),\n            react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"No custom prompts added. Using default GIGA assistant.\")),\n            react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 },\n                react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: \"green\", paddingX: 1 },\n                    react_1.default.createElement(ink_1.Text, { color: \"green\" }, \"\\u25CF GIGA (Default)\"))),\n            react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Space or Enter to confirm\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Use /add-prompt to add custom system prompts\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Custom prompts completely replace GIGA\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to close\"))));\n    }\n    if (showContent) {\n        const selectedOption = allOptions[selectedIndex];\n        const contentLines = selectedOption.content.split('\\n');\n        return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"yellow\" },\n                \"\\uD83D\\uDCDD Prompt: \",\n                selectedOption.name),\n            react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, 'isNone' in selectedOption && selectedOption.isNone\n                    ? \"Default system prompt\"\n                    : `Added: ${new Date(selectedOption.dateAdded).toLocaleDateString()}`)),\n            react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", borderStyle: \"round\", borderColor: \"blue\", paddingX: 1, marginBottom: 1, minHeight: 15 }, contentLines.map((line, index) => (react_1.default.createElement(ink_1.Text, { key: index }, line)))),\n            react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Space or Enter to select this prompt\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to go back to prompt list\"))));\n    }\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n        react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83C\\uDFAF Select System Prompt\"),\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" },\n                \"Current: \",\n                selectedPrompt || \"GIGA (Default)\")),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 }, allOptions.map((option, index) => {\n            const isSelected = index === selectedIndex;\n            const isCurrentlyActive = selectedPrompt === option.name || (!selectedPrompt && 'isNone' in option && option.isNone);\n            const dateAdded = 'isNone' in option && option.isNone\n                ? \"Default\"\n                : new Date(option.dateAdded).toLocaleDateString();\n            const preview = option.content.length > 80\n                ? option.content.substring(0, 80) + \"...\"\n                : option.content;\n            // Color coding: green for currently active, blue for selected, gray for others\n            let borderColor = \"gray\";\n            let textColor = \"white\";\n            if (isCurrentlyActive) {\n                borderColor = \"green\";\n                textColor = \"green\";\n            }\n            else if (isSelected) {\n                borderColor = \"blue\";\n                textColor = \"blue\";\n            }\n            return (react_1.default.createElement(ink_1.Box, { key: option.name, borderStyle: \"round\", borderColor: borderColor, paddingX: 1, marginBottom: 1 },\n                react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", width: \"100%\" },\n                    react_1.default.createElement(ink_1.Box, null,\n                        react_1.default.createElement(ink_1.Box, { width: 25 },\n                            react_1.default.createElement(ink_1.Text, { color: textColor },\n                                isCurrentlyActive ? \"● \" : isSelected ? \"▶ \" : \"○ \",\n                                option.name)),\n                        react_1.default.createElement(ink_1.Box, { flexGrow: 1 },\n                            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, dateAdded))),\n                    react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n                        react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, preview.replace(/\\n/g, ' '))))));\n        })),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Use \\u2191/\\u2193 arrows to navigate\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Space or Enter to select prompt\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press V to view full content\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Custom prompts completely replace GIGA\"),\n            react_1.default.createElement(ink_1.Text, { color: \"green\", dimColor: true }, \"\\u2022 Green = Currently active prompt\"),\n            react_1.default.createElement(ink_1.Text, { color: \"blue\", dimColor: true }, \"\\u2022 Blue = Currently selected option\"),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to close\"))));\n}\nexports.default = PromptsList;\n//# sourceMappingURL=prompts-list.js.map",
      "filePath": "../dist/ui/components/prompts-list.js",
      "embedding": [
        11.47,
        0.7,
        0,
        0.3,
        0.2,
        0.013009620222726738,
        0.0036200971067445464,
        0.05144346559980219,
        0.009409386799102505,
        0.0038347550882665616,
        0.021303381366083354,
        0.009116150813864432,
        0.011003270649999697,
        0.01421807031596799,
        0.06835335002742735,
        0.06318273745251606,
        0.03533080963847292,
        0.03486190703471425,
        0.029834011903854485,
        0.07466189463111449,
        0.0858261842726464,
        0.02459838811439127,
        0.030630465371047744,
        0.02626275064731222,
        0.0314032121194225,
        0.052855880002663225,
        0.06308333232698884,
        0.021073783364240352,
        0.04951618808809665,
        0.09720797184456065,
        0.020840724709470418,
        0.0002646184142742869,
        0.07356922075288073,
        0.07146722125174051,
        0.05571590084644913,
        0.03439648600091504,
        0.06369510244708065,
        0.011003659999194539,
        0.02969026505706106,
        0.09867739289612378,
        0.04723289946381141,
        0.07153389692967703,
        0.06421050334654475,
        0.027964393274713163,
        0.09984530342857147,
        0.001764818864634643,
        0.01862727201985691,
        0.005946327935804885,
        0.014970791654968452,
        0.010058858276811545,
        0.08319419526548334,
        0.05966109435559141,
        0.05777860729298593,
        0.03520284077607856,
        0.08731159076335464,
        0.07251677793662172,
        0.08750850586907177,
        0.0025598093483034214,
        0.027003808490064563,
        0.06303229196643796,
        0.0445834825920725,
        0.0718709992484758,
        0.07354746431067968,
        0.022210361968380467,
        0.007899112285549804,
        0.0793440688397716,
        0.0792517076137581,
        0.01672111950807781,
        0.03434434792864426,
        0.08374278150807223,
        0.05653117975203153,
        0.0748141047253553,
        0.019667090354684794,
        0.08581481382442713,
        0.08375168142691375,
        0.05633959313611941,
        0.03288966503160282,
        0.004087791521805118,
        0.08918307693879934,
        0.027900167244147137,
        0.05313249164002464,
        0.02425846692904239,
        0.08871460356798777,
        0.09623872243563136,
        0.05762280853244265,
        0.02886277643249129,
        0.03852896358623001,
        0.02704070128832278,
        0.07590544101736024,
        0.045308184092106865,
        0.0071619229379760955,
        0.07593316602491827,
        0.0004905440595845301,
        0.009070108276997403,
        0.0659291475425649,
        0.03601684438997151,
        0.08430450126272332,
        0.08976951158496049,
        0.0910705191660697,
        0.05092970796648347
      ]
    },
    {
      "content": "import React from \"react\";\ninterface Provider {\n    name: string;\n    keyName: string;\n    description: string;\n}\ninterface ProviderSettingsProps {\n    providers: Provider[];\n    selectedIndex: number;\n    onClose: () => void;\n}\nexport default function ProviderSettings({ providers, selectedIndex: initialSelectedIndex, onClose }: ProviderSettingsProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/provider-settings.d.ts",
      "embedding": [
        0.4,
        0.1,
        0,
        0.1,
        0.2,
        0.003197460036241695,
        0.004949885927913966,
        0.08171946805507568,
        0.04978555007460635,
        0.06700624254476668,
        0.04305183565235952,
        0.07111989798395751,
        0.013783156659303832,
        0.06296482330238139,
        0.0291111920491425,
        0.04452777627359625,
        0.0725353063454051,
        0.07419441294576701,
        0.04171667613768707,
        0.08748661320645229,
        0.07806015549750818,
        0.04397210370283916,
        0.05425442744171671,
        0.04411615778702373,
        0.09078039016720987,
        0.09972246176338438,
        0.09947482242861311,
        0.07708189211438023,
        0.09386096949366875,
        0.03444293053767385,
        0.030348120901289112,
        0.008759010021493752,
        0.09373852853403357,
        0.004713785160390994,
        0.07567682426063356,
        0.060519770871351776,
        0.05090188798977723,
        0.03590884522055256,
        0.034435325931885745,
        0.09920812836857745,
        0.04990169826801434,
        0.056010127679490596,
        0.07590303656524464,
        0.049951305370846015,
        0.020226592496359663,
        0.07101581068334936,
        0.052041936069360695,
        0.0994109011508344,
        0.0733377308107219,
        0.04350799924727077,
        0.08601120093418961,
        0.05960205997211875,
        0.014628081109191327,
        0.08723069888833,
        0.09354304174285703,
        0.0620419464488887,
        0.06608993823667376,
        0.06420734616650213,
        0.0780366395906296,
        0.05479946061124435,
        0.017635290635027,
        0.007673951368140863,
        0.016410196782599064,
        0.0184410582562476,
        0.09979623529605518,
        0.02129127861970094,
        0.001969823843969687,
        0.032128267069503606,
        0.08928616883492545,
        0.050380602028636645,
        0.025164105184425502,
        0.048463615612785574,
        0.01392127423787114,
        0.07987809869494647,
        0.07858975114931506,
        0.08924944257432532,
        0.07177134281774908,
        0.09664246610502719,
        0.03645764726957742,
        0.009303709766103207,
        0.02949186572701167,
        0.0328795675430848,
        0.06304889610974614,
        0.0033056734701518266,
        0.017917806134044423,
        0.09390482706032766,
        0.07351562238922504,
        0.07618326616085686,
        0.06479632681376994,
        0.07873465639570773,
        0.08053651611612599,
        0.09097715538321732,
        0.019659114843216176,
        0.06194981653862197,
        0.025778352340226175,
        0.04156845458843862,
        0.0021345637219676197,
        0.09870126935135176,
        0.07339076112168014,
        0.051950225406421906
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst os = __importStar(require(\"os\"));\nconst api_key_validator_1 = require(\"../../utils/api-key-validator\");\nconst api_keys_1 = require(\"../../utils/api-keys\");\nfunction ProviderSettings({ providers, selectedIndex: initialSelectedIndex, onClose }) {\n    const [apiKeys, setApiKeys] = (0, react_1.useState)({});\n    const [currentInput, setCurrentInput] = (0, react_1.useState)(\"\");\n    const [editingIndex, setEditingIndex] = (0, react_1.useState)(null);\n    const [selectedIndex, setSelectedIndex] = (0, react_1.useState)(initialSelectedIndex);\n    const [error, setError] = (0, react_1.useState)(\"\");\n    const [validationErrors, setValidationErrors] = (0, react_1.useState)({});\n    const [validationStatus, setValidationStatus] = (0, react_1.useState)({});\n    const [isValidating, setIsValidating] = (0, react_1.useState)(false);\n    const [isMounted, setIsMounted] = (0, react_1.useState)(true);\n    (0, react_1.useEffect)(() => {\n        loadExistingKeys();\n        return () => {\n            setIsMounted(false);\n        };\n    }, []);\n    const loadExistingKeys = () => {\n        try {\n            const homeDir = os.homedir();\n            const settingsFile = path.join(homeDir, '.giga', 'user-settings.json');\n            if (fs.existsSync(settingsFile)) {\n                const settings = JSON.parse(fs.readFileSync(settingsFile, 'utf8'));\n                const keys = {};\n                providers.forEach(provider => {\n                    const key = settings[provider.keyName];\n                    if (key) {\n                        keys[provider.keyName] = key;\n                    }\n                });\n                setApiKeys(keys);\n            }\n        }\n        catch (error) {\n            setError(\"Could not load existing API keys\");\n        }\n    };\n    const validateCurrentKey = async (providerName, key) => {\n        if (!key.trim()) {\n            if (isMounted) {\n                setValidationErrors(prev => {\n                    const newErrors = { ...prev };\n                    delete newErrors[providerName]; // Remove error instead of setting empty string\n                    return newErrors;\n                });\n                setValidationStatus(prev => ({ ...prev, [providerName]: false }));\n            }\n            return;\n        }\n        if (isMounted) {\n            setIsValidating(true);\n        }\n        try {\n            const result = await (0, api_key_validator_1.validateApiKey)(providerName.toLowerCase(), key);\n            if (!isMounted)\n                return; // Component unmounted, don't update state\n            if (result.isValid) {\n                setValidationErrors(prev => {\n                    const newErrors = { ...prev };\n                    delete newErrors[providerName]; // Remove error instead of setting empty string\n                    return newErrors;\n                });\n                setValidationStatus(prev => ({ ...prev, [providerName]: true }));\n            }\n            else {\n                const errorMessage = result.error?.trim() || \"Invalid API key\";\n                // Never set empty string as error message\n                if (errorMessage) {\n                    setValidationErrors(prev => ({ ...prev, [providerName]: errorMessage }));\n                }\n                setValidationStatus(prev => ({ ...prev, [providerName]: false }));\n            }\n        }\n        catch (error) {\n            if (!isMounted)\n                return; // Component unmounted, don't update state\n            setValidationErrors(prev => ({ ...prev, [providerName]: \"Validation failed\" }));\n            setValidationStatus(prev => ({ ...prev, [providerName]: false }));\n        }\n        if (isMounted) {\n            setIsValidating(false);\n        }\n    };\n    const saveApiKeys = async () => {\n        try {\n            const homeDir = os.homedir();\n            const gigaDir = path.join(homeDir, '.giga');\n            const settingsFile = path.join(gigaDir, 'user-settings.json');\n            if (!fs.existsSync(gigaDir)) {\n                fs.mkdirSync(gigaDir, { mode: 0o700 });\n            }\n            let settings = {};\n            if (fs.existsSync(settingsFile)) {\n                try {\n                    settings = JSON.parse(fs.readFileSync(settingsFile, 'utf8'));\n                }\n                catch {\n                    settings = {};\n                }\n            }\n            Object.entries(apiKeys).forEach(([keyName, value]) => {\n                if (value.trim()) {\n                    settings[keyName] = value.trim();\n                }\n            });\n            fs.writeFileSync(settingsFile, JSON.stringify(settings, null, 2), { mode: 0o600 });\n            // Refresh global shared info after API key changes\n            (0, api_keys_1.refreshGlobalSharedInfo)();\n            onClose();\n        }\n        catch (error) {\n            setError(\"Could not save API keys\");\n        }\n    };\n    (0, ink_1.useInput)((inputChar, key) => {\n        if (key.ctrl && inputChar === \"c\") {\n            onClose();\n            return;\n        }\n        if (key.escape) {\n            if (editingIndex !== null) {\n                setEditingIndex(null);\n                setCurrentInput(\"\");\n            }\n            else {\n                // Validate all keys before saving\n                const validationPromises = providers.map(async (provider) => {\n                    const key = apiKeys[provider.keyName];\n                    if (key) {\n                        await validateCurrentKey(provider.name, key);\n                    }\n                });\n                Promise.all(validationPromises).then(() => {\n                    saveApiKeys();\n                });\n            }\n            return;\n        }\n        if (editingIndex !== null) {\n            if (key.return) {\n                const provider = providers[editingIndex];\n                setApiKeys(prev => ({\n                    ...prev,\n                    [provider.keyName]: currentInput\n                }));\n                setCurrentInput(\"\");\n                setEditingIndex(null);\n                setError(\"\");\n                return;\n            }\n            if (key.backspace || key.delete) {\n                setCurrentInput(prev => prev.slice(0, -1));\n                return;\n            }\n            if (inputChar && !key.ctrl && !key.meta) {\n                setCurrentInput(prev => prev + inputChar);\n                setError(\"\");\n            }\n        }\n        else {\n            if (key.upArrow) {\n                // Validate current provider's key before moving\n                const currentProvider = providers[selectedIndex];\n                const currentKey = apiKeys[currentProvider.keyName];\n                if (currentKey && currentKey.trim()) {\n                    validateCurrentKey(currentProvider.name, currentKey);\n                }\n                const newIndex = selectedIndex === 0 ? providers.length - 1 : selectedIndex - 1;\n                setSelectedIndex(newIndex);\n                return;\n            }\n            if (key.downArrow) {\n                // Validate current provider's key before moving\n                const currentProvider = providers[selectedIndex];\n                const currentKey = apiKeys[currentProvider.keyName];\n                if (currentKey && currentKey.trim()) {\n                    validateCurrentKey(currentProvider.name, currentKey);\n                }\n                const newIndex = (selectedIndex + 1) % providers.length;\n                setSelectedIndex(newIndex);\n                return;\n            }\n            if (key.return) {\n                setEditingIndex(selectedIndex);\n                const provider = providers[selectedIndex];\n                setCurrentInput(apiKeys[provider.keyName] || \"\");\n                return;\n            }\n        }\n    });\n    const maskApiKey = (key) => {\n        if (!key)\n            return \"\";\n        if (key.length <= 8)\n            return \"*\".repeat(key.length);\n        return key.substring(0, 4) + \"*\".repeat(key.length - 8) + key.substring(key.length - 4);\n    };\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", paddingX: 2, paddingY: 1 },\n        react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83D\\uDD11 Provider API Keys Configuration\"),\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"Configure API keys for different AI providers:\")),\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginBottom: 1 }, providers.map((provider, index) => {\n            const isSelected = index === selectedIndex && editingIndex === null;\n            const isEditing = index === editingIndex;\n            const currentKey = apiKeys[provider.keyName] || \"\";\n            const hasValidationError = validationErrors[provider.name];\n            const isValid = validationStatus[provider.name];\n            let borderColor = \"gray\";\n            if (isSelected)\n                borderColor = \"blue\";\n            else if (isEditing)\n                borderColor = \"green\";\n            else if (hasValidationError)\n                borderColor = \"red\";\n            else if (isValid)\n                borderColor = \"green\";\n            return (react_1.default.createElement(ink_1.Box, { key: provider.keyName, flexDirection: \"column\", marginBottom: 1 },\n                react_1.default.createElement(ink_1.Box, { borderStyle: \"round\", borderColor: borderColor, paddingX: 1 },\n                    react_1.default.createElement(ink_1.Box, { width: 12 },\n                        react_1.default.createElement(ink_1.Text, { color: isSelected ? \"blue\" : \"white\" },\n                            provider.name,\n                            \":\")),\n                    react_1.default.createElement(ink_1.Box, { flexGrow: 1 }, isEditing ? (react_1.default.createElement(ink_1.Text, null, (currentInput || \"\") + \"█\")) : (react_1.default.createElement(ink_1.Box, null,\n                        react_1.default.createElement(ink_1.Text, { color: \"gray\" }, currentKey ? (provider.keyName === 'ollamaBaseUrl' ? currentKey : maskApiKey(currentKey)) : \"Not configured\"),\n                        isValid && !hasValidationError && (react_1.default.createElement(ink_1.Text, { color: \"green\" }, \" \\u2713\"))))),\n                    react_1.default.createElement(ink_1.Box, { width: 25 },\n                        react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, provider.description))),\n                hasValidationError && String(hasValidationError).trim() && (react_1.default.createElement(ink_1.Box, { paddingLeft: 2 },\n                    react_1.default.createElement(ink_1.Text, { color: \"red\" },\n                        \"\\u274C \",\n                        String(hasValidationError).trim())))));\n        })),\n        error && error.trim() ? (react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"red\" },\n                \"\\u274C \",\n                error))) : null,\n        react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", marginTop: 1 },\n            editingIndex !== null ? (react_1.default.createElement(react_1.default.Fragment, null,\n                react_1.default.createElement(ink_1.Text, { color: \"yellow\" },\n                    \"Editing \",\n                    providers[editingIndex].name,\n                    \" \",\n                    providers[editingIndex].keyName === 'ollamaBaseUrl' ? 'Base URL' : 'API Key',\n                    \":\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                    \"\\u2022 Type your \",\n                    providers[editingIndex].keyName === 'ollamaBaseUrl' ? 'Ollama base URL (e.g., http://localhost:11434)' : 'API key'),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Enter to save\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to cancel\"))) : (react_1.default.createElement(react_1.default.Fragment, null,\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Use \\u2191/\\u2193 arrows to navigate\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Enter to edit selected provider\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Esc to save and exit\"),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2022 Press Ctrl+C to exit without saving\"))),\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"Keys saved to ~/.giga/user-settings.json\"),\n            isValidating && (react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"\\uD83D\\uDD04 Validating API keys...\")))));\n}\nexports.default = ProviderSettings;\n//# sourceMappingURL=provider-settings.js.map",
      "filePath": "../dist/ui/components/provider-settings.js",
      "embedding": [
        12.23,
        0.7,
        0,
        0.6,
        0.2,
        0.000676146086384799,
        0.04252214327535351,
        0.056775688949145565,
        0.027480312988846636,
        0.08681310458273477,
        0.008416051321443142,
        0.031828041132561595,
        0.08076012778611764,
        0.049730967010650454,
        0.07347670858301865,
        0.011720917995097502,
        0.09889245476563252,
        0.0017824876928169255,
        0.043346404323674974,
        0.08340799589080986,
        0.008116384582222169,
        0.08081588817922541,
        0.07457752697226472,
        0.08186634339426017,
        0.04031348267074156,
        0.0656006105856095,
        0.09066301774497998,
        0.05760273768652128,
        0.027055016074989183,
        0.007559356346282631,
        0.08339069501418661,
        0.07398344852360692,
        0.0434812191555081,
        0.0070234985935843765,
        0.052225100762589086,
        0.02835907772277707,
        0.06499468587750677,
        0.08645556213605116,
        0.03314979299545886,
        0.09248155827198881,
        0.014356978091583695,
        0.047667595093526395,
        0.06487467255574218,
        0.01866546812741157,
        0.08531582745273052,
        0.01264132065642375,
        0.08316917637670561,
        0.015519950681118812,
        0.09769568486577092,
        0.06350209113191713,
        0.03729450739630987,
        0.04492425391947496,
        0.08363260004584332,
        0.01820176297335171,
        0.016406474379181937,
        0.05971440804550937,
        0.036679553204223246,
        0.035135944038293114,
        0.07264363457857677,
        0.08459226156321059,
        0.028622211899383257,
        0.03778623274709304,
        0.01105638992515966,
        0.05759671849752135,
        0.07293250810074908,
        0.03526889623869892,
        0.08456081415159289,
        0.07216675554216309,
        0.051600264239548825,
        0.0797732226841107,
        0.024541407402241255,
        0.023622760855194193,
        0.032248214638852725,
        0.06968360974364594,
        0.004950963531371567,
        0.07316167380269224,
        0.04264684742279863,
        0.05153359573074584,
        0.012591276270474162,
        0.06054449347593521,
        0.015177579043526325,
        0.0784483010398686,
        0.08105960548922933,
        0.09490768157829949,
        0.033905785331793906,
        0.03326893975349741,
        0.022621693930344577,
        0.05346090663777985,
        0.08296746487334289,
        0.05728631979412381,
        0.014423565668065541,
        0.0023919426058050977,
        0.04032060232923863,
        0.04563568932733893,
        0.07764645615482442,
        0.049602661138930505,
        0.05208101558645544,
        0.054470925817830786,
        0.06310042960844339,
        0.08015015012720791
      ]
    },
    {
      "content": "import React from \"react\";\nimport { OpenRouterProvider } from \"../../utils/openrouter-providers\";\ninterface ModelOption {\n    model: string;\n    description: string;\n}\ninterface RouteSelectionProps {\n    models: ModelOption[];\n    selectedModelIndex: number;\n    selectedProviderIndex: number;\n    isVisible: boolean;\n    currentModel: string;\n    viewMode: 'models' | 'providers';\n    currentSelectedModel?: string;\n    providers: OpenRouterProvider[];\n    isLoadingProviders: boolean;\n    onModelSelect: (model: string) => void;\n    onProviderSelect: (model: string, provider: OpenRouterProvider) => void;\n    onBack: () => void;\n}\nexport declare function RouteSelection({ models, selectedModelIndex, selectedProviderIndex, isVisible, currentModel, viewMode, currentSelectedModel, providers, isLoadingProviders, onModelSelect, onProviderSelect, onBack, }: RouteSelectionProps): React.JSX.Element;\nexport declare function useRouteSelection(): {\n    viewMode: \"providers\" | \"models\";\n    currentSelectedModel: string;\n    providers: OpenRouterProvider[];\n    isLoadingProviders: boolean;\n    handleModelSelect: (model: string) => Promise<void>;\n    handleBack: () => void;\n    reset: () => void;\n};\nexport {};\n",
      "filePath": "../dist/ui/components/route-selection.d.ts",
      "embedding": [
        1.09,
        0.2,
        0,
        0.2,
        0.3,
        0.08153620642222814,
        0.02715062313177652,
        0.08818722315933604,
        0.012599700875952125,
        0.036728532589994305,
        0.06347118449547844,
        0.013309882507142257,
        0.0029086652729824916,
        0.08187257000116255,
        0.06413164673267834,
        0.016013841205085033,
        0.026093933643853706,
        0.033315339660385,
        0.09675407261635624,
        0.00433212117904821,
        0.04673826149696356,
        0.03880623727623788,
        0.03886111339131988,
        0.06774686189794431,
        0.021321475158000702,
        0.0889511164417667,
        0.038671800115415614,
        0.09084971444025879,
        0.00569899701405896,
        0.06175017915980601,
        0.09386384937836949,
        0.08710867989024695,
        0.08025333749971185,
        0.027240685661881505,
        0.05312936309714979,
        0.028033608686170386,
        0.0847567569108952,
        0.03866999138857026,
        0.0816310097923833,
        0.006602688267602275,
        0.09605696452655788,
        0.03685714878848138,
        0.09622298916395979,
        0.07748342074153042,
        0.009718193529948849,
        0.08611631406497354,
        0.003760347385441554,
        0.06557626063972007,
        0.05899777679168211,
        0.09599601949288207,
        0.042016685435195135,
        0.054929347123053376,
        0.07628576052552388,
        0.050720474778212316,
        0.058377526322308554,
        0.09256859982045547,
        0.010854999826250655,
        0.09783353867322027,
        0.036427852371154236,
        0.029568826245486835,
        0.013773205396320255,
        0.008376079681554826,
        0.06495685058056656,
        0.025630664203766806,
        0.08627071655596644,
        0.05105132013406946,
        0.06700309468098219,
        0.06432567302176045,
        0.08168548188227685,
        0.023968604622716928,
        0.023961696824433876,
        0.008720172492260104,
        0.03860906706314651,
        0.012460367911660476,
        0.045373487895829206,
        0.016985490952055017,
        0.02538559584081599,
        0.046242476901970045,
        0.080594586991288,
        0.07610760307410593,
        0.051686305219245124,
        0.042598940969268154,
        0.04923523177098933,
        0.0016402851422034682,
        0.03926080608398204,
        0.017104247746883607,
        0.0074058457157432644,
        0.08279459377669225,
        0.01577595367047027,
        0.07033785951904103,
        0.029660831001223867,
        0.06390146447376026,
        0.013417265290926095,
        0.03189158218072121,
        0.033472170229151436,
        0.0280918868255721,
        0.06253962154803543,
        0.01570845617779474,
        0.06783936198411786,
        0.09711438999532176
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useRouteSelection = exports.RouteSelection = void 0;\nconst react_1 = __importStar(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst openrouter_providers_1 = require(\"../../utils/openrouter-providers\");\nconst added_models_1 = require(\"../../utils/added-models\");\nconst api_keys_1 = require(\"../../utils/api-keys\");\nfunction RouteSelection({ models, selectedModelIndex, selectedProviderIndex, isVisible, currentModel, viewMode, currentSelectedModel, providers, isLoadingProviders, onModelSelect, onProviderSelect, onBack, }) {\n    if (!isVisible)\n        return null;\n    if (viewMode === 'models') {\n        return (react_1.default.createElement(ink_1.Box, { marginTop: 1, flexDirection: \"column\" },\n            react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"cyan\" },\n                    \"Select Model to Configure Provider (current: \",\n                    currentModel,\n                    \"):\")),\n            models.length === 0 ? (react_1.default.createElement(ink_1.Box, { paddingLeft: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"No OpenRouter models found. Add models with format \\\"author/model\\\" using /add-model.\"))) : (models.map((modelOption, index) => {\n                const openRouterProvider = (0, added_models_1.getOpenRouterProvider)(modelOption.model);\n                const hasProviderSet = openRouterProvider !== null;\n                return (react_1.default.createElement(ink_1.Box, { key: index, paddingLeft: 1 },\n                    react_1.default.createElement(ink_1.Text, { color: index === selectedModelIndex ? \"black\" : \"white\", backgroundColor: index === selectedModelIndex ? \"cyan\" : undefined },\n                        modelOption.model,\n                        hasProviderSet && (react_1.default.createElement(ink_1.Text, { color: index === selectedModelIndex ? \"black\" : \"green\" },\n                            \" \",\n                            \"\\u2192 \",\n                            openRouterProvider))),\n                    react_1.default.createElement(ink_1.Box, { marginLeft: 1 },\n                        react_1.default.createElement(ink_1.Text, { color: \"gray\" }, modelOption.description))));\n            })),\n            react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2191\\u2193 navigate \\u2022 Enter configure provider \\u2022 Esc cancel\"))));\n    }\n    // Provider selection view\n    return (react_1.default.createElement(ink_1.Box, { marginTop: 1, flexDirection: \"column\" },\n        react_1.default.createElement(ink_1.Box, { marginBottom: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"cyan\" },\n                \"Select Provider for \",\n                currentSelectedModel,\n                \":\")),\n        isLoadingProviders ? (react_1.default.createElement(ink_1.Box, { paddingLeft: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"yellow\" }, \"Loading available providers...\"))) : providers.length === 0 ? (react_1.default.createElement(ink_1.Box, { paddingLeft: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"red\" }, \"No providers available for this model\"))) : (providers.map((provider, index) => {\n            const currentProvider = (0, added_models_1.getOpenRouterProvider)(currentSelectedModel || '');\n            const isCurrentlySelected = currentProvider === provider.id;\n            return (react_1.default.createElement(ink_1.Box, { key: index, paddingLeft: 1 },\n                react_1.default.createElement(ink_1.Text, { color: index === selectedProviderIndex ? \"black\" : \"white\", backgroundColor: index === selectedProviderIndex ? \"cyan\" : undefined },\n                    provider.name,\n                    isCurrentlySelected && (react_1.default.createElement(ink_1.Text, { color: index === selectedProviderIndex ? \"black\" : \"green\" },\n                        \" \",\n                        \"(current)\"))),\n                react_1.default.createElement(ink_1.Box, { marginLeft: 1, flexDirection: \"column\" },\n                    provider.pricing && (react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                        \"$\",\n                        provider.pricing.prompt,\n                        \"/1k prompt \\u2022 $\",\n                        provider.pricing.completion,\n                        \"/1k completion\")),\n                    (provider.quantization || provider.uptime || provider.context_length) && (react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true },\n                        provider.quantization ? `${provider.quantization}` : '',\n                        provider.quantization && provider.uptime ? ' • ' : '',\n                        provider.uptime ? `${provider.uptime}% uptime` : '',\n                        (provider.quantization || provider.uptime) && provider.context_length ? ' • ' : '',\n                        provider.context_length ? `${provider.context_length.toLocaleString()} context` : '')))));\n        })),\n        react_1.default.createElement(ink_1.Box, { marginTop: 1 },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2191\\u2193 navigate \\u2022 Enter select provider \\u2022 Esc back to models\"))));\n}\nexports.RouteSelection = RouteSelection;\n// Hook for managing route selection state\nfunction useRouteSelection() {\n    const [viewMode, setViewMode] = (0, react_1.useState)('models');\n    const [currentSelectedModel, setCurrentSelectedModel] = (0, react_1.useState)('');\n    const [providers, setProviders] = (0, react_1.useState)([]);\n    const [isLoadingProviders, setIsLoadingProviders] = (0, react_1.useState)(false);\n    const handleModelSelect = async (model) => {\n        setCurrentSelectedModel(model);\n        setViewMode('providers');\n        setIsLoadingProviders(true);\n        setProviders([]);\n        try {\n            const apiKeys = (0, api_keys_1.loadApiKeys)();\n            const openRouterKey = apiKeys.openRouterApiKey;\n            if (openRouterKey) {\n                const modelProviders = await (0, openrouter_providers_1.getModelProvidersWithFallback)(model, openRouterKey);\n                setProviders(modelProviders);\n            }\n            else {\n                // If no OpenRouter key, show message\n                setProviders([]);\n            }\n        }\n        catch (error) {\n            console.error('Error fetching providers:', error);\n            setProviders([]);\n        }\n        finally {\n            setIsLoadingProviders(false);\n        }\n    };\n    const handleBack = () => {\n        setViewMode('models');\n        setCurrentSelectedModel('');\n        setProviders([]);\n        setIsLoadingProviders(false);\n    };\n    const reset = () => {\n        setViewMode('models');\n        setCurrentSelectedModel('');\n        setProviders([]);\n        setIsLoadingProviders(false);\n    };\n    return {\n        viewMode,\n        currentSelectedModel,\n        providers,\n        isLoadingProviders,\n        handleModelSelect,\n        handleBack,\n        reset,\n    };\n}\nexports.useRouteSelection = useRouteSelection;\n//# sourceMappingURL=route-selection.js.map",
      "filePath": "../dist/ui/components/route-selection.js",
      "embedding": [
        7.14,
        0.8,
        0,
        0.3,
        0.5,
        0.03510278523518341,
        0.07234325522779585,
        0.0900105002574822,
        0.04422463394740387,
        0.03292038157173806,
        0.05456211189093392,
        0.08435242213785948,
        0.09374922158380357,
        0.0662607618460146,
        0.05379941239480307,
        0.07526764723991969,
        0.02331431446254726,
        0.007262109666605077,
        0.01304082909381047,
        0.039018050585579944,
        0.005259764180491899,
        0.09570435721549952,
        0.07148918283430551,
        0.08865382228830349,
        0.012857979029239143,
        0.04572634357353405,
        0.09981861908102463,
        0.0015814251517812352,
        0.021558806892059624,
        0.009653355718698187,
        0.01529823582084624,
        0.09738503428268931,
        0.06850218108054551,
        0.0618810150993652,
        0.06500650157057697,
        0.05461965444618211,
        0.05241194570363055,
        0.07065314916544709,
        0.04441515520456815,
        0.016183291934673973,
        0.009809103690049682,
        0.03350123640609132,
        0.09381924555389623,
        0.02967206156382406,
        0.05801561099319842,
        0.02257573486925382,
        0.07177457934890373,
        0.04374366856911051,
        0.029078824175778742,
        0.03596299260869298,
        0.014180316877275757,
        0.047565853670218906,
        0.0555046180085548,
        0.08006012715178208,
        0.07409917113003915,
        0.09869480793950922,
        0.010395960300997499,
        0.0346205800111845,
        0.09976828979959984,
        0.06546727420357418,
        0.06576841998273067,
        0.040009873065269354,
        0.026937503124013874,
        0.08594257825068283,
        0.031000946074001258,
        0.08877980038985744,
        0.09136256305381917,
        0.04577232001042403,
        0.07632549254538268,
        0.09692184097786892,
        0.03823435728468715,
        0.011166352285773774,
        0.04568705603050565,
        0.05606754906054545,
        0.07607397110018482,
        0.01389660158399393,
        0.039029890428037964,
        0.028941667565767593,
        0.04784266145573593,
        0.09657287333775108,
        0.023790475057604135,
        0.01771218658124294,
        0.019203127948360245,
        0.015181293833681608,
        0.07326060572406663,
        0.03823652054890206,
        0.035757333128865976,
        0.07023839399411186,
        0.04414034600943578,
        0.0073522307856393465,
        0.058723759114315335,
        0.023770591261087305,
        0.04466053065181397,
        0.08467493757093841,
        0.028070878111789613,
        0.041574370370372905,
        0.06274115504579066,
        0.003563556258298306,
        0.007194241691450398,
        0.08981620066775
      ]
    },
    {
      "content": "import React from \"react\";\ninterface TemperatureSelectorProps {\n    temperature: number;\n    isVisible: boolean;\n}\nexport declare function TemperatureSelector({ temperature, isVisible, }: TemperatureSelectorProps): React.JSX.Element;\nexport {};\n",
      "filePath": "../dist/ui/components/temperature-selector.d.ts",
      "embedding": [
        0.24,
        0.1,
        0,
        0.1,
        0.2,
        0.06075188424456546,
        0.052494191752523824,
        0.08326214294692023,
        0.049153270505671046,
        0.07361991501027454,
        0.010629366085951542,
        0.03735471930724101,
        0.06400809172968411,
        0.06285101606534522,
        0.023474433977827926,
        0.04975105391980139,
        0.06758246339270205,
        0.05121312519867142,
        0.09810339013288426,
        0.04381747283369267,
        0.014943309746794475,
        0.006247095464497055,
        0.03634797878079458,
        0.09692856868790073,
        0.09742615652639847,
        0.08582727736755712,
        0.010138848198856555,
        0.08065797147559763,
        0.042197522314086855,
        0.07216240292302166,
        0.06092204224833017,
        0.05753175839810629,
        0.06079951017605412,
        0.06500014879491778,
        0.0053401135097848945,
        0.013090056661016404,
        0.019628442734873866,
        0.03360833254201228,
        0.04800368691025804,
        0.07134447816324319,
        0.0007565117281591038,
        0.035902499250878475,
        0.08459071528845095,
        0.05660336108476648,
        0.043187906169134385,
        0.09438421800585911,
        0.0949922969678349,
        0.09982708679730078,
        0.04486623399334753,
        0.02477315302207247,
        0.09182501615187705,
        0.03401445762337485,
        0.06478239418180637,
        0.024734210268822245,
        0.011283197763520337,
        0.024788464455569995,
        0.07486673129013233,
        0.07920964109278247,
        0.013248995901923522,
        0.07085069857071966,
        0.02075382031818637,
        0.06326073565055705,
        0.06940710719160921,
        0.03787258195953805,
        0.023520218461059818,
        0.0558933237487572,
        0.09010426204384415,
        0.05801848160232059,
        0.04104898102698537,
        0.043062669955328814,
        0.048972254733625965,
        0.0906270382639644,
        0.0010523270784323691,
        0.0998363147089987,
        0.010249995025523895,
        0.06266435709586754,
        0.07565764766049675,
        0.05461792843836937,
        0.01397301450959313,
        0.08102719073550857,
        0.0660102995265937,
        0.06003183118286753,
        0.07469094462714658,
        0.07159724914580083,
        0.018950345786246006,
        0.0012788715097327152,
        0.017092908547653465,
        0.0013064643303075775,
        0.0939523439910272,
        0.07102935640306976,
        0.09871483714754617,
        0.0763750260181115,
        0.04266484165712641,
        0.05685675438435605,
        0.0545921262099798,
        0.08629175157493457,
        0.05110249323697318,
        0.047314562234273674,
        0.06206437819935984,
        0.0997075688331687
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TemperatureSelector = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst ink_1 = require(\"ink\");\nfunction TemperatureSelector({ temperature, isVisible, }) {\n    if (!isVisible)\n        return null;\n    const formatTemperature = (temp) => {\n        return temp.toFixed(1);\n    };\n    const createTemperatureBar = (temp) => {\n        const position = Math.round(temp * 10);\n        const bar = Array(11).fill('─');\n        bar[position] = '●';\n        return bar.join('');\n    };\n    return (react_1.default.createElement(ink_1.Box, { marginTop: 1, flexDirection: \"column\", borderStyle: \"round\", borderColor: \"cyan\", padding: 1 },\n        react_1.default.createElement(ink_1.Box, { justifyContent: \"center\" },\n            react_1.default.createElement(ink_1.Text, { color: \"cyan\", bold: true }, \"\\uD83C\\uDF21\\uFE0F  Temperature Settings\")),\n        react_1.default.createElement(ink_1.Box, { marginTop: 1, flexDirection: \"column\" },\n            react_1.default.createElement(ink_1.Box, { justifyContent: \"center\" },\n                react_1.default.createElement(ink_1.Text, null,\n                    \"Current: \",\n                    react_1.default.createElement(ink_1.Text, { color: \"yellow\", bold: true }, formatTemperature(temperature)))),\n            react_1.default.createElement(ink_1.Box, { marginTop: 1, justifyContent: \"center\" },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \"0.0 \"),\n                react_1.default.createElement(ink_1.Text, { color: \"cyan\" }, createTemperatureBar(temperature)),\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, \" 1.0\")),\n            react_1.default.createElement(ink_1.Box, { marginTop: 1, justifyContent: \"center\" },\n                react_1.default.createElement(ink_1.Text, { color: \"gray\" }, temperature <= 0.3 ? 'Conservative' : temperature <= 0.7 ? 'Balanced' : 'Creative'))),\n        react_1.default.createElement(ink_1.Box, { marginTop: 1, justifyContent: \"center\" },\n            react_1.default.createElement(ink_1.Text, { color: \"gray\", dimColor: true }, \"\\u2190\\u2192 adjust \\u2022 Enter confirm \\u2022 Esc cancel\"))));\n}\nexports.TemperatureSelector = TemperatureSelector;\n//# sourceMappingURL=temperature-selector.js.map",
      "filePath": "../dist/ui/components/temperature-selector.js",
      "embedding": [
        2.16,
        0.2,
        0,
        0.3,
        0.3,
        0.06475671252194219,
        0.03869521885823035,
        0.013463221711318807,
        0.09416744338409333,
        0.01898292172665981,
        0.010087547840464495,
        0.07659504326859054,
        0.07853920556530097,
        0.06634211115594299,
        0.016345802369108996,
        0.04768588515557762,
        0.07992175367301516,
        0.04056845685995833,
        0.044439457100991266,
        0.025628499291412976,
        0.07339039499511997,
        0.0032058113397037125,
        0.037795733319519624,
        0.07242152123744977,
        0.018562221067878536,
        0.06922197527453579,
        0.008805984641895581,
        0.020057577868098288,
        0.01236017022596816,
        0.0409067781765882,
        0.09230458267565379,
        0.08246461562381549,
        0.01755485626061253,
        0.02502183615632847,
        0.0937044681567501,
        0.04842755590021434,
        0.07928048814325878,
        0.041940222416008116,
        0.06586593432385103,
        0.09300081943319058,
        0.06792008780918968,
        0.015863816971566202,
        0.08063774458462031,
        0.09383018122875708,
        0.04793938719155699,
        0.008790071124882648,
        0.07767732939165412,
        0.0037489992454863954,
        0.030139762275654115,
        0.01381153352180049,
        0.0005436233753358555,
        0.016407728579209725,
        0.03615198693737056,
        0.021888688882730767,
        0.04749045507469562,
        0.09519900913257905,
        0.09580565092141069,
        0.022864630655064846,
        0.0771770482113478,
        0.09970545769407964,
        0.09539788731414155,
        0.027513841418556763,
        0.028399789097012587,
        0.09398440114509293,
        0.008500822537244424,
        0.08402545686114593,
        0.04543881074265743,
        0.01655849857120133,
        0.03934270416039929,
        0.07037699199245387,
        0.002060637895917439,
        0.04314408149194359,
        0.08654009954740116,
        0.037122034138905316,
        0.059245694669087204,
        0.031577451176045705,
        0.07257891291245094,
        0.09072122579176312,
        0.036368179922311686,
        0.05785083925514617,
        0.017096124718791274,
        0.0843090701865838,
        0.0023754832342794854,
        0.005794976609037739,
        0.08395953020930419,
        0.009866699644804312,
        0.019651615055348327,
        0.030776196400801162,
        0.07672086622922777,
        0.09966147493338728,
        0.05871893973525982,
        0.04648093132084701,
        0.03710236243580476,
        0.0722853847332306,
        0.03856090927740788,
        0.06133396954829591,
        0.01343711455461527,
        0.037929616797944155,
        0.01707150232040493,
        0.05424185695331096
      ]
    },
    {
      "content": "import React from 'react';\ninterface MaxSizedBoxProps {\n    maxHeight?: number;\n    maxWidth?: number;\n    children: React.ReactNode;\n}\nexport declare const MaxSizedBox: React.FC<MaxSizedBoxProps>;\nexport {};\n",
      "filePath": "../dist/ui/shared/max-sized-box.d.ts",
      "embedding": [
        0.22,
        0,
        0,
        0.1,
        0.2,
        0.07773592948967621,
        0.05270983926988607,
        0.020612281056441896,
        0.07621585657890828,
        0.03188190042396897,
        0.04225721353125992,
        0.03332851421464698,
        0.014663041986578473,
        0.0040383872832751916,
        0.09331830447663991,
        0.09925850753969678,
        0.017526379047380337,
        0.09495858111704322,
        0.024012313910999783,
        0.032425840077170774,
        0.003615920582456833,
        0.023472456929066323,
        0.06441914521837157,
        0.008370704090848325,
        0.05603949124674337,
        0.007512194343261558,
        0.049071310545362616,
        0.013856283475708876,
        0.025257207374529935,
        0.06477246014423828,
        0.08051797353435251,
        0.06333451018796801,
        0.00046389611426832515,
        0.0806518724847934,
        0.03628484698342809,
        0.031115005781691074,
        0.06960751570110689,
        0.011110328226506185,
        0.03202434776969081,
        0.08722781626411502,
        0.0625467918187581,
        0.06099687681815115,
        0.0038101221422705447,
        0.08143717374715169,
        0.036432296270415776,
        0.04197603344432591,
        0.031210571240648622,
        0.03018503681910524,
        0.058664698365878315,
        0.05223476136171771,
        0.06144828269468361,
        0.02797052112525993,
        0.061430016513411324,
        0.0843732482358429,
        0.03733363250189671,
        0.0904813398423382,
        0.056975091152338876,
        0.05226703825017666,
        0.007215225995983477,
        0.040741002558460894,
        0.022447398456923263,
        0.014881497208933336,
        0.032704607250134146,
        0.0861158450056208,
        0.07390100000815102,
        0.07808345140653541,
        0.07829783795068515,
        0.03556167281280229,
        0.03773400727111884,
        0.03836579740302296,
        0.019310190703449227,
        0.0324338317091527,
        0.08361593132836886,
        0.04893839323219578,
        0.055964364298109665,
        0.037261613338922764,
        0.05525855260518545,
        0.03349120056543155,
        0.0023326261525969615,
        0.03130617143479425,
        0.05640744891632095,
        0.011456297201289234,
        0.08372995087080717,
        0.01606852869307678,
        0.019451651661122574,
        0.04948568820391509,
        0.04996510970161169,
        0.015332128388355926,
        0.0052641074087637525,
        0.07492119772173056,
        0.08420843357002229,
        0.09244512938720316,
        0.06847271418380053,
        0.03892318160615369,
        0.09129274065400018,
        0.07097031174897755,
        0.029205227962182945,
        0.04992064836686364,
        0.05997384397785547,
        0.09162660896901348
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MaxSizedBox = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst MaxSizedBox = ({ maxHeight, maxWidth, children, ...props }) => {\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\", ...props }, children));\n};\nexports.MaxSizedBox = MaxSizedBox;\n//# sourceMappingURL=max-sized-box.js.map",
      "filePath": "../dist/ui/shared/max-sized-box.js",
      "embedding": [
        0.67,
        0.1,
        0,
        0.3,
        0.3,
        0.07485869884171978,
        0.03360149875337668,
        0.010151695476638679,
        0.017574505648656813,
        0.03967543023482637,
        0.07757516577760117,
        0.08277231980535116,
        0.0899244302546937,
        0.08241990689127342,
        0.02207596359253641,
        0.01835921725770605,
        0.010603106643339355,
        0.08633071076375576,
        0.04987765222519557,
        0.056449105691772805,
        0.07592148992520364,
        0.050458381509425554,
        0.07657215033868668,
        0.002211716795033103,
        0.04213586497800013,
        0.008705003442788206,
        0.014505712348278844,
        0.08890903969039214,
        0.03713633537569427,
        0.000025018891572670123,
        0.07521048335039564,
        0.021836721501152446,
        0.021998081321324716,
        0.038545875861595025,
        0.0006472391698058134,
        0.03874912262978251,
        0.026842905868666146,
        0.047037510570947294,
        0.03412840867008408,
        0.07700853245637247,
        0.06905046863221875,
        0.09365676167116879,
        0.028973365816248188,
        0.08132236552303813,
        0.06294092215324235,
        0.005373364538330905,
        0.019228704173364808,
        0.06933819714352059,
        0.050967764982987045,
        0.06424517145149616,
        0.013742780924781107,
        0.06094957717548845,
        0.03914922303831092,
        0.08790897248314146,
        0.04780963656086559,
        0.05266851325215524,
        0.05491307303963805,
        0.03522059099872015,
        0.0694599557392989,
        0.09732456295127577,
        0.09166578810506246,
        0.0685656992739566,
        0.029689169357171297,
        0.07839241228814368,
        0.05433272196558238,
        0.09289917565956281,
        0.023605708529628566,
        0.07056744569475196,
        0.06804496231354625,
        0.09329389279082395,
        0.027504337139175928,
        0.01768029360074097,
        0.08698418985696602,
        0.07528370857882562,
        0.0037356864435736936,
        0.015705452911250795,
        0.004327656826488191,
        0.03810800624468307,
        0.061389636606714086,
        0.019619152630886916,
        0.035921394307833136,
        0.09675788425372625,
        0.05744647082574851,
        0.04921299337277746,
        0.06858054704437226,
        0.07648217760288216,
        0.04596786619915218,
        0.048277840667625076,
        0.001047301054556471,
        0.04957958038333782,
        0.004871814708683342,
        0.06301394495028154,
        0.06630003473586181,
        0.08460914867241792,
        0.08271280092258614,
        0.04084529148958717,
        0.032452999438612455,
        0.007238890651969543,
        0.0103137774384649,
        0.06392393909811585
      ]
    },
    {
      "content": "import React from 'react';\nexport declare const colorizeCode: (content: string, language: string | null, availableTerminalHeight?: number, terminalWidth?: number) => React.ReactNode;\n",
      "filePath": "../dist/ui/utils/code-colorizer.d.ts",
      "embedding": [
        0.21,
        0,
        0,
        0.1,
        0.1,
        0.01960418875926012,
        0.09137029016325932,
        0.08453794734905687,
        0.06649510393481763,
        0.0028514916593912034,
        0.011732693924487593,
        0.08800702057954542,
        0.09230836718528307,
        0.07073983811341698,
        0.07527611972252607,
        0.07348241553148625,
        0.04254331664425662,
        0.052124587703367434,
        0.022662291843687222,
        0.05469647885585606,
        0.03170767906953897,
        0.0833170060251854,
        0.01701403483443792,
        0.08182573540795807,
        0.03052459605167225,
        0.056974876603368745,
        0.033413881550569416,
        0.07424480292254554,
        0.06959321916581636,
        0.06923410580580697,
        0.014403166239682809,
        0.044120072064251316,
        0.007499388191924795,
        0.039801621723039686,
        0.006277267950518162,
        0.06807083914598559,
        0.07340744760570632,
        0.011489034107915564,
        0.021959967850630147,
        0.023070229511637088,
        0.018075825902415077,
        0.015381362389823516,
        0.06489820103267048,
        0.027949986178821176,
        0.04629303920883759,
        0.017616917010788314,
        0.046434261522690104,
        0.08182064940694043,
        0.061895301651603674,
        0.0049728901935624965,
        0.09248984447018631,
        0.0853904155498029,
        0.019477796904483292,
        0.07631117292306834,
        0.03026796281258322,
        0.0005580015150977058,
        0.08785918564437566,
        0.024779488100451844,
        0.03410403949480203,
        0.0194069784861617,
        0.06746651876420204,
        0.06231842052968341,
        0.0837653743713843,
        0.07060158239986478,
        0.010749619886682306,
        0.0951031608651108,
        0.016063973397430365,
        0.02627605913099501,
        0.008216041295176125,
        0.060464189039673114,
        0.009683329940150677,
        0.015650625996082745,
        0.057866139941669795,
        0.0127100898291453,
        0.08052037332873202,
        0.04134601985288927,
        0.077873007982972,
        0.005908866302779348,
        0.08997123456381209,
        0.0016997924617372928,
        0.06801019069119725,
        0.02431975100202335,
        0.05839182162362391,
        0.027030300257932016,
        0.002310357505357019,
        0.03727146534703546,
        0.0820177381609368,
        0.03946735763821289,
        0.0002869332329565544,
        0.03861292635196237,
        0.09914865045419351,
        0.07991964014131282,
        0.0988901471898434,
        0.07732096855789777,
        0.08672046544247101,
        0.06722356937382339,
        0.04385951768222435,
        0.048984189387974275,
        0.048009413097853684,
        0.09572256740894686
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.colorizeCode = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst ink_1 = require(\"ink\");\nconst colorizeCode = (content, language, availableTerminalHeight, terminalWidth) => {\n    // Simple plain text rendering - could be enhanced with syntax highlighting later\n    return (react_1.default.createElement(ink_1.Box, { flexDirection: \"column\" }, content.split('\\n').map((line, index) => (react_1.default.createElement(ink_1.Text, { key: index, wrap: \"wrap\" }, line)))));\n};\nexports.colorizeCode = colorizeCode;\n//# sourceMappingURL=code-colorizer.js.map",
      "filePath": "../dist/ui/utils/code-colorizer.js",
      "embedding": [
        0.87,
        0.1,
        0,
        0.3,
        0.3,
        0.016607769086767754,
        0.03290755207245329,
        0.00458980151554299,
        0.08849712298486258,
        0.05097226404174925,
        0.06398926689878866,
        0.09476572066570699,
        0.0639311545936688,
        0.032277429269968363,
        0.07247832159112155,
        0.007707965027881059,
        0.02865433559830686,
        0.056360909839185604,
        0.01988943721964429,
        0.08902904099237618,
        0.09166063348064996,
        0.04907196112097587,
        0.0971108607779824,
        0.00217687490362517,
        0.01306544376909562,
        0.08485243310438138,
        0.0107032893003153,
        0.09189294589765411,
        0.06257454531311543,
        0.09298636489647993,
        0.05114652872218054,
        0.06940692501563832,
        0.0490074790178292,
        0.028790492072455976,
        0.07528105920528251,
        0.0068795036788027565,
        0.04172906558803449,
        0.014007858586239253,
        0.08822838854152913,
        0.07358070008282463,
        0.015070086488590352,
        0.03305927284099608,
        0.08504368865468392,
        0.017487008954695116,
        0.0887993465238669,
        0.0378421626736964,
        0.07750705805827936,
        0.03043447636935174,
        0.010763985665928767,
        0.019028000851150074,
        0.0990710120021062,
        0.09834932344661926,
        0.04347938788555297,
        0.03261683918374233,
        0.031123643536612424,
        0.07463614511133325,
        0.04945141738948621,
        0.04079317645658294,
        0.06730817233789306,
        0.0970280675343136,
        0.008369341552225962,
        0.07474228527277295,
        0.06932613976572748,
        0.026324025415896693,
        0.04634863756315377,
        0.045944896356893083,
        0.05301123282625397,
        0.04575600060813776,
        0.0255260193631473,
        0.09748235707885433,
        0.0676149259232151,
        0.09589341440778908,
        0.03671522166572986,
        0.024399752494319804,
        0.08185205096407454,
        0.04484945075472433,
        0.06530152580059358,
        0.0036180718219401054,
        0.05214255056695465,
        0.03213177763366305,
        0.06901164537245469,
        0.029661150696542984,
        0.007532357054488148,
        0.07289011339884373,
        0.07718548086872234,
        0.04194009398868738,
        0.09243548225627553,
        0.06452368659977678,
        0.040321340351579554,
        0.027863270289316233,
        0.05388443516060907,
        0.06479382889907641,
        0.01683020625408922,
        0.08597945360555272,
        0.008113764403187574,
        0.04215126797611525,
        0.008399372300037445,
        0.04284420105514252,
        0.04384038485986602,
        0.0724879460418163
      ]
    },
    {
      "content": "/**\n * Color constants for the CLI interface\n */\nexport declare const Colors: {\n    readonly AccentYellow: \"yellow\";\n    readonly Gray: \"gray\";\n    readonly Red: \"red\";\n    readonly Green: \"green\";\n    readonly Blue: \"blue\";\n    readonly Cyan: \"cyan\";\n    readonly Magenta: \"magenta\";\n    readonly White: \"white\";\n    readonly Black: \"black\";\n};\n",
      "filePath": "../dist/ui/utils/colors.d.ts",
      "embedding": [
        0.43,
        0,
        0,
        0,
        0.1,
        0.09110741767049424,
        0.09597595506920568,
        0.0715562065892244,
        0.001955059525195635,
        0.06949704903083272,
        0.01942814017327652,
        0.024392709050103413,
        0.08444530777059654,
        0.048749656722238646,
        0.011342188432881185,
        0.058003699300906875,
        0.0778879798047602,
        0.023416738627504752,
        0.09995384232450992,
        0.060241870496948284,
        0.06546227644661681,
        0.025921899077631295,
        0.03997785465888237,
        0.06668173739441767,
        0.028284830066639646,
        0.045552725636146554,
        0.014026500243499019,
        0.05079463522377597,
        0.03982045371381474,
        0.06699450372135045,
        0.011293647559113851,
        0.013564688983292428,
        0.021307254250011266,
        0.06082456780274739,
        0.055755771859979535,
        0.026713315463572487,
        0.028152388465124013,
        0.050062746384762546,
        0.00025371055213390114,
        0.09109011188844116,
        0.051672082292715096,
        0.08507206089559956,
        0.08919975430887789,
        0.09442063328583533,
        0.06712208680025453,
        0.03301763603903814,
        0.043162841404431156,
        0.024268043266977426,
        0.06057255022743008,
        0.0357132672502792,
        0.023013758407605923,
        0.060671615360262755,
        0.006527050633705467,
        0.029841205827108953,
        0.07663547513054116,
        0.0026248640822982617,
        0.0024056883876475313,
        0.007192994047850454,
        0.09474075915273962,
        0.08716317544392897,
        0.029770423108691504,
        0.056385493432321424,
        0.023194717199312653,
        0.08105234374635058,
        0.09931255626208126,
        0.021437752602359906,
        0.045368859030806875,
        0.023361628923881717,
        0.09362394363996401,
        0.07627083170874982,
        0.03149875981301436,
        0.013114198410960632,
        0.09768381766692336,
        0.06318570944742666,
        0.0716248264796988,
        0.007195651762387645,
        0.08111349840499826,
        0.06717143609278288,
        0.0007464337037041968,
        0.09677181679878939,
        0.0093096599681478,
        0.015064534869734393,
        0.0850383747818762,
        0.04333219015031691,
        0.08983189252411555,
        0.021460661194240983,
        0.011192951336727064,
        0.007763650712324277,
        0.02720986953078235,
        0.06486403869837302,
        0.06294591736537146,
        0.05653056612330542,
        0.03898772384800813,
        0.09979001339801968,
        0.08551305859892033,
        0.09497524307760141,
        0.05914650851072631,
        0.055092357530129026,
        0.06059795027875249,
        0.09482961766983078
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Colors = void 0;\n/**\n * Color constants for the CLI interface\n */\nexports.Colors = {\n    AccentYellow: 'yellow',\n    Gray: 'gray',\n    Red: 'red',\n    Green: 'green',\n    Blue: 'blue',\n    Cyan: 'cyan',\n    Magenta: 'magenta',\n    White: 'white',\n    Black: 'black'\n};\n//# sourceMappingURL=colors.js.map",
      "filePath": "../dist/ui/utils/colors.js",
      "embedding": [
        0.45,
        0,
        0,
        0,
        0.3,
        0.04231106069387213,
        0.038434326507454424,
        0.08248373107565306,
        0.04689815981613297,
        0.005077679820582337,
        0.04242718333511461,
        0.009117251225238278,
        0.0951173965022677,
        0.09862928505371371,
        0.06463690598136915,
        0.02638969544990315,
        0.07048845675409629,
        0.05348576899005319,
        0.057020517317840407,
        0.0851960869066819,
        0.09073575305126011,
        0.06462766635831158,
        0.0895996291355598,
        0.02312157727477933,
        0.027228171932229164,
        0.09668280524320033,
        0.09872748025374678,
        0.04869970640135275,
        0.02695532731213093,
        0.08271632125847507,
        0.01345084554903382,
        0.02835510639586626,
        0.0474389442956261,
        0.06491653433930693,
        0.05535643486804116,
        0.07069135454395006,
        0.07381911900377539,
        0.025871959804708345,
        0.0035515781416698648,
        0.09816846476814445,
        0.024902579821444715,
        0.036875982345533145,
        0.04730715866828941,
        0.05278460534114792,
        0.0034233923521481027,
        0.0005118198074884006,
        0.0890410055633864,
        0.07364446363523532,
        0.08810189659635732,
        0.011851778782664702,
        0.04208299612631039,
        0.0860008676429175,
        0.02252574629240385,
        0.04789288784824758,
        0.08492046121176924,
        0.024121184565264988,
        0.06818937408781008,
        0.054641963201532986,
        0.0003006714264532584,
        0.07404195324839088,
        0.05379522093540798,
        0.015573705169190155,
        0.01926452662887236,
        0.0425525007013552,
        0.020157771471111953,
        0.044565441337894474,
        0.042649557284676134,
        0.0664888823897065,
        0.024021374918482774,
        0.01574889119255565,
        0.0470732978396731,
        0.0812976181885182,
        0.008936175633969057,
        0.024125432746570353,
        0.03606052954893071,
        0.08616486475935314,
        0.09508855881447087,
        0.06876717358598752,
        0.06334621763322695,
        0.011034179391304978,
        0.03283924954086431,
        0.09637859755099691,
        0.04203889114830894,
        0.05891037042819707,
        0.049346250435867524,
        0.053452353193088345,
        0.017899499616738312,
        0.01420131332101774,
        0.04572181089395038,
        0.05893189644183732,
        0.031142254751597334,
        0.05435508872664259,
        0.03635306712854112,
        0.02317301458272757,
        0.08061103411600806,
        0.09038015689300598,
        0.049159578460166664,
        0.08245935782878125,
        0.08325501065191901,
        0.036646370399469656
      ]
    },
    {
      "content": "import React from 'react';\nexport declare function MarkdownRenderer({ content }: {\n    content: string;\n}): React.JSX.Element;\n",
      "filePath": "../dist/ui/utils/markdown-renderer.d.ts",
      "embedding": [
        0.16,
        0.1,
        0,
        0.1,
        0.1,
        0.03910819203286306,
        0.08614579314707693,
        0.05978430666019831,
        0.06038350905590933,
        0.04659524507887411,
        0.01827854826537285,
        0.013530760776489582,
        0.08013701146957346,
        0.07463990825079218,
        0.05078829453381243,
        0.08070716799934279,
        0.03801166032641712,
        0.008211394904049896,
        0.0006819422336618365,
        0.02838229369719263,
        0.08181770557464317,
        0.09741174432040052,
        0.05741551792308334,
        0.07608010365656317,
        0.027731562721247473,
        0.012963290748699464,
        0.023046819734453716,
        0.06488039185213056,
        0.07359280737627205,
        0.07418232744492413,
        0.03046646474165974,
        0.09071915262237411,
        0.09948163458305911,
        0.07624627154458946,
        0.09785070158031348,
        0.023465717088729368,
        0.055177918596760495,
        0.037383948959303685,
        0.05482585870928645,
        0.0038332921556694546,
        0.0572322736977184,
        0.08994986401345878,
        0.08112367072230596,
        0.02231437046854794,
        0.060134320671770686,
        0.08856940578313738,
        0.09328714113761188,
        0.043443660594365524,
        0.07490322879298324,
        0.020285247410699838,
        0.046849059860697886,
        0.05815396089441943,
        0.0955734025504553,
        0.03996692924514599,
        0.029983983851027296,
        0.0454374476690648,
        0.028340297197914102,
        0.04300406364704978,
        0.010522678327478309,
        0.06124706157386688,
        0.040431462308982674,
        0.08070423104601543,
        0.013212287211665275,
        0.03865820829521625,
        0.049427083026500264,
        0.05376969081572469,
        0.06089206248512528,
        0.01181418953824286,
        0.016497202958167246,
        0.0049449708628694355,
        0.04521392980465379,
        0.07827220817409578,
        0.04614451890775478,
        0.08387777102093502,
        0.012108573242641042,
        0.020244967732016395,
        0.0801024302904351,
        0.0027953502714542777,
        0.04164380583457784,
        0.011631088726222018,
        0.07830806668696472,
        0.05561864803660495,
        0.07069680629906332,
        0.05362941864066878,
        0.005958642947433724,
        0.028886888174851036,
        0.005892459007699902,
        0.0805899922113379,
        0.01401277643268688,
        0.01973709906861647,
        0.08364746307392276,
        0.04706257120111234,
        0.006634589966690619,
        0.038089526119534915,
        0.025831761368217823,
        0.019701219433811146,
        0.07916178381586939,
        0.032745774607640735,
        0.09750489447900484,
        0.069340885979887
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MarkdownRenderer = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst ink_markdown_1 = __importDefault(require(\"ink-markdown\"));\nfunction MarkdownRenderer({ content }) {\n    return react_1.default.createElement(ink_markdown_1.default, null, content);\n}\nexports.MarkdownRenderer = MarkdownRenderer;\n//# sourceMappingURL=markdown-renderer.js.map",
      "filePath": "../dist/ui/utils/markdown-renderer.js",
      "embedding": [
        0.57,
        0.2,
        0,
        0.4,
        0.3,
        0.0012769138140372505,
        0.001264532747706415,
        0.02063827759956185,
        0.066156060933494,
        0.07069003775226002,
        0.08902113429786057,
        0.031123138626475234,
        0.09662816948663626,
        0.08441414092287261,
        0.03204430925234412,
        0.058109165673341394,
        0.01816434749829222,
        0.04433635229986188,
        0.0009056969228903533,
        0.0294660713871172,
        0.045261183142626886,
        0.07470129167424865,
        0.06991081825013186,
        0.04160645489024542,
        0.019146262550232343,
        0.022583083916222848,
        0.06666131776083845,
        0.020914037851131696,
        0.01781459686892998,
        0.023699058812717323,
        0.03070926981027359,
        0.04021809567549135,
        0.06827635199905972,
        0.02540027542180843,
        0.09761886699856445,
        0.050848987456614494,
        0.0030138669762801774,
        0.010549743408578739,
        0.0760604961778456,
        0.00020160494360925709,
        0.07012891106802638,
        0.07111721062329433,
        0.05879893987707102,
        0.034405761613221654,
        0.031238204306728457,
        0.05775828977059455,
        0.05844000921341367,
        0.0759685011693272,
        0.09639642989059183,
        0.08029764859005394,
        0.09003141956407079,
        0.07126734990250774,
        0.043190112644881276,
        0.0888521222205976,
        0.0010293550450895307,
        0.06185043451887785,
        0.03366902818776094,
        0.0039856881986358285,
        0.09977958963335803,
        0.0798550990043041,
        0.04919098983219505,
        0.025632237648477354,
        0.05213396218696584,
        0.055078533753284614,
        0.0732921803293725,
        0.04828808667344338,
        0.07401544438988951,
        0.02604960819215464,
        0.057041197169001245,
        0.035462612397160385,
        0.054878631453065346,
        0.07715138286366763,
        0.03910565589917512,
        0.02786382319339068,
        0.07206419236962423,
        0.09859377161069266,
        0.04165947654842154,
        0.03561496501484578,
        0.016531266078639195,
        0.08507674526020728,
        0.09358229767684254,
        0.0195098642099953,
        0.06820034314665542,
        0.026370666776383302,
        0.06351690662841589,
        0.0667539393521303,
        0.022894718632938172,
        0.06810931256691415,
        0.04789606250655364,
        0.08758425959211259,
        0.03846071925359038,
        0.04585244614340759,
        0.030569712507422665,
        0.007881583974570462,
        0.0008035184507104832,
        0.06549097133808256,
        0.03480427250027612,
        0.04047399280462702,
        0.022600150451667113,
        0.04550750452214506
      ]
    },
    {
      "content": "export interface AddedMcpServer {\n    name: string;\n    command: string;\n    args?: string[];\n    env?: Record<string, string>;\n    description?: string;\n    dateAdded: string;\n}\nexport declare function loadAddedMcpServers(): AddedMcpServer[];\nexport declare function saveAddedMcpServers(servers: AddedMcpServer[]): void;\nexport declare function addMcpServer(name: string, command: string, args?: string[], env?: Record<string, string>, description?: string): void;\nexport declare function deleteMcpServer(name: string): boolean;\nexport declare function getAllAddedMcpServers(): AddedMcpServer[];\nexport declare function isMcpServerAdded(name: string): boolean;\nexport declare function getMcpServerByName(name: string): AddedMcpServer | undefined;\n",
      "filePath": "../dist/utils/added-mcp-servers.d.ts",
      "embedding": [
        0.7,
        0.7,
        0,
        0,
        0.8,
        0.059708629059323386,
        0.05332153309824666,
        0.08766138480052814,
        0.05859439367947104,
        0.08519467918390286,
        0.04384277146995067,
        0.09256509872261676,
        0.09019412371242934,
        0.009878004498622361,
        0.08418780752273657,
        0.08057278397186363,
        0.0808296065393827,
        0.012946881425987678,
        0.045592970936396575,
        0.00101621556291821,
        0.0055508192679102454,
        0.02837685663421077,
        0.005674270172009477,
        0.009688763270649547,
        0.03187487459847454,
        0.08730307324639286,
        0.003875702947841764,
        0.0652377896751869,
        0.005946250344550164,
        0.04928984446816007,
        0.06356031688058285,
        0.08088559003248597,
        0.09722414711780679,
        0.041803090132082193,
        0.06468245044648034,
        0.018252836175101417,
        0.03749233283285463,
        0.07365273003486071,
        0.03670954399539344,
        0.004648529485529885,
        0.0851135440162883,
        0.023279892355397305,
        0.051439182545420604,
        0.02271029362831042,
        0.09032127106127895,
        0.006337246910489525,
        0.057805018358837695,
        0.09549229702527134,
        0.031883516445271945,
        0.08479636297534839,
        0.08993901529850079,
        0.02531637548909448,
        0.05568762014119891,
        0.0738820844975843,
        0.06218154041625758,
        0.07172533970186643,
        0.060897609002028744,
        0.021784652571099895,
        0.07253769736617627,
        0.025746045243828477,
        0.02353253086996006,
        0.02549871488304414,
        0.02979121437444351,
        0.005146436452450798,
        0.019039703865463033,
        0.07071479002891234,
        0.020773573991767148,
        0.09862958771776431,
        0.06240567372033441,
        0.04637868502272903,
        0.09564205546323316,
        0.02417356667854477,
        0.007367692697426088,
        0.02022584811661503,
        0.06750565235485771,
        0.014646038152856956,
        0.08706897903669963,
        0.04505971114881731,
        0.03347128592726602,
        0.015082287807615237,
        0.05840161920964823,
        0.02117753648943891,
        0.07750130173879899,
        0.035609551308290965,
        0.002596826661424312,
        0.015850740164585132,
        0.09661961614303713,
        0.0033599953780588778,
        0.08299485648555963,
        0.014013397656205673,
        0.05979756632528297,
        0.0047826613745649005,
        0.08684274309702836,
        0.07435248402049562,
        0.06019070120824323,
        0.011105981105230957,
        0.09994365543310003,
        0.022631965310777116,
        0.048542818167767024,
        0.03393505902106151
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMcpServerByName = exports.isMcpServerAdded = exports.getAllAddedMcpServers = exports.deleteMcpServer = exports.addMcpServer = exports.saveAddedMcpServers = exports.loadAddedMcpServers = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst os = __importStar(require(\"os\"));\nconst getStorageFile = () => {\n    const homeDir = os.homedir();\n    const gigaDir = path.join(homeDir, '.giga');\n    // Create .giga directory if it doesn't exist\n    if (!fs.existsSync(gigaDir)) {\n        fs.mkdirSync(gigaDir, { mode: 0o700 });\n    }\n    return path.join(gigaDir, 'added-mcp-servers.json');\n};\nfunction loadAddedMcpServers() {\n    try {\n        const storageFile = getStorageFile();\n        if (!fs.existsSync(storageFile)) {\n            return [];\n        }\n        const data = JSON.parse(fs.readFileSync(storageFile, 'utf8'));\n        return data.servers || [];\n    }\n    catch (error) {\n        console.error('Error loading added MCP servers:', error);\n        return [];\n    }\n}\nexports.loadAddedMcpServers = loadAddedMcpServers;\nfunction saveAddedMcpServers(servers) {\n    try {\n        const storageFile = getStorageFile();\n        const data = { servers };\n        fs.writeFileSync(storageFile, JSON.stringify(data, null, 2), { mode: 0o600 });\n    }\n    catch (error) {\n        console.error('Error saving added MCP servers:', error);\n    }\n}\nexports.saveAddedMcpServers = saveAddedMcpServers;\nfunction addMcpServer(name, command, args, env, description) {\n    const servers = loadAddedMcpServers();\n    // Check if server already exists\n    const exists = servers.some(s => s.name === name);\n    if (!exists) {\n        const newServer = {\n            name,\n            command,\n            args,\n            env,\n            description,\n            dateAdded: new Date().toISOString(),\n        };\n        servers.push(newServer);\n        saveAddedMcpServers(servers);\n    }\n}\nexports.addMcpServer = addMcpServer;\nfunction deleteMcpServer(name) {\n    const servers = loadAddedMcpServers();\n    const initialLength = servers.length;\n    const filteredServers = servers.filter(s => s.name !== name);\n    if (filteredServers.length < initialLength) {\n        saveAddedMcpServers(filteredServers);\n        return true;\n    }\n    return false;\n}\nexports.deleteMcpServer = deleteMcpServer;\nfunction getAllAddedMcpServers() {\n    return loadAddedMcpServers();\n}\nexports.getAllAddedMcpServers = getAllAddedMcpServers;\nfunction isMcpServerAdded(name) {\n    const servers = loadAddedMcpServers();\n    return servers.some(s => s.name === name);\n}\nexports.isMcpServerAdded = isMcpServerAdded;\nfunction getMcpServerByName(name) {\n    const servers = loadAddedMcpServers();\n    return servers.find(s => s.name === name);\n}\nexports.getMcpServerByName = getMcpServerByName;\n//# sourceMappingURL=added-mcp-servers.js.map",
      "filePath": "../dist/utils/added-mcp-servers.js",
      "embedding": [
        4.24,
        1.3,
        0,
        0.5,
        1.5,
        0.007934501712823628,
        0.043153896038925624,
        0.05184648030199586,
        0.038677090860497254,
        0.0061858404625929845,
        0.09910789213062653,
        0.0641017954089103,
        0.054146132767255634,
        0.07904327981472054,
        0.08665009276443884,
        0.09053660558071704,
        0.010486187078134646,
        0.04766154918418987,
        0.02271352238003284,
        0.004408446486888229,
        0.022645545405329783,
        0.0932612283181402,
        0.026332325682981474,
        0.01725679049190305,
        0.03320405754582648,
        0.05636706246905174,
        0.030386048952189673,
        0.028923149013649577,
        0.0908310882408515,
        0.07366920849810277,
        0.047107984709202536,
        0.047559127109583,
        0.0673488224004736,
        0.06366678798615728,
        0.08268462257567906,
        0.0038845952893875046,
        0.07733837513404207,
        0.0637892178844056,
        0.08309714431127657,
        0.00026213486519039987,
        0.08057562235465078,
        0.08696515636053997,
        0.09778861900299597,
        0.0048048992050339304,
        0.07804742091522948,
        0.03392689960817916,
        0.08122135843042277,
        0.050634623722142974,
        0.05114770887937258,
        0.09262407936364375,
        0.0708303672606009,
        0.09419304921448855,
        0.04178886630322348,
        0.0025098993305091356,
        0.09163959650595084,
        0.004472290329895912,
        0.09547051291699953,
        0.05869299663828436,
        0.0535115232159982,
        0.09497190628253778,
        0.027440526983053562,
        0.024916512278780202,
        0.06917109232852996,
        0.06816853435449809,
        0.043703835478056036,
        0.07811428339260404,
        0.011846312428413153,
        0.023858760518325875,
        0.03297395069063632,
        0.008793228864547187,
        0.013580493637580293,
        0.007375909697904848,
        0.09312198004946534,
        0.016298733150412748,
        0.04237212741963862,
        0.012825446067311076,
        0.04022013146227123,
        0.03659566769139788,
        0.06632052150638472,
        0.029297849508360542,
        0.03209526170666115,
        0.059876889008176885,
        0.05803353041149484,
        0.07075482276156181,
        0.04573808110576719,
        0.06508421183880207,
        0.023955129778218755,
        0.08792864656243897,
        0.04574552370767605,
        0.05865594158743458,
        0.0009029731847016054,
        0.0789689823196236,
        0.047968193267810544,
        0.053245213286552774,
        0.030804320999815393,
        0.013553618088053266,
        0.08020153605182045,
        0.04975309569845182,
        0.052334609253111224,
        0.04477105775029482
      ]
    },
    {
      "content": "export interface AddedModel {\n    modelName: string;\n    providerName: string;\n    dateAdded: string;\n    openRouterProvider?: string;\n}\nexport declare function loadAddedModels(): AddedModel[];\nexport declare function saveAddedModels(models: AddedModel[]): void;\nexport declare function addModel(modelName: string, providerName: string): void;\nexport declare function deleteModel(modelName: string, providerName: string): boolean;\nexport declare function getAddedModelsForProvider(providerName: string): AddedModel[];\nexport declare function getAllAddedModels(): AddedModel[];\nexport declare function isModelAdded(modelName: string, providerName: string): boolean;\nexport declare function setOpenRouterProvider(modelName: string, openRouterProvider: string): boolean;\nexport declare function getOpenRouterProvider(modelName: string): string | null;\n",
      "filePath": "../dist/utils/added-models.d.ts",
      "embedding": [
        0.76,
        0.9,
        0,
        0,
        1,
        0.08486507153838585,
        0.07756201537910834,
        0.04411999505179235,
        0.06489317493347856,
        0.07560163845050707,
        0.009039490695797547,
        0.007827231411573687,
        0.04696795321384713,
        0.056090460886851684,
        0.02445931179504962,
        0.0672267927357658,
        0.0010062165600642993,
        0.004371340839535576,
        0.09509032940509549,
        0.04641307064149607,
        0.09369785088978304,
        0.013067039497995848,
        0.0465024200104349,
        0.04943682146086945,
        0.08668811118383696,
        0.016260403896236685,
        0.07937659320882981,
        0.07318587721369783,
        0.01885633767427516,
        0.020683512088323253,
        0.09570465021359403,
        0.03297588329745156,
        0.015816146558604395,
        0.019929686890730127,
        0.06193955568176307,
        0.061074259215886495,
        0.04911015627180918,
        0.013530919107617445,
        0.09017746121423298,
        0.07063851881191999,
        0.025469351710610946,
        0.0668582721988902,
        0.039309532136068005,
        0.012149236378105756,
        0.026007893364168724,
        0.06754879883419483,
        0.0863753342722311,
        0.059397827553944606,
        0.08021095433635568,
        0.04777901391674249,
        0.09242947528140803,
        0.06187555830264248,
        0.058009861711114885,
        0.05630654817261539,
        0.061628718365800056,
        0.055762297060863254,
        0.03257606329309161,
        0.08096007196672687,
        0.058181024009030996,
        0.015842919947777413,
        0.02501010878360519,
        0.04330964117963509,
        0.06973254216610181,
        0.032767898577395836,
        0.029542191827496702,
        0.0027652865574736007,
        0.037181047258809156,
        0.027531494119032152,
        0.03303982381494599,
        0.09812593356986532,
        0.08898620961288248,
        0.01763241541890991,
        0.022448873128067516,
        0.08554926884136778,
        0.01206383689346957,
        0.05826299566631987,
        0.07345298788558874,
        0.08984455834971208,
        0.04125613214402127,
        0.04118040683509028,
        0.09132900132012488,
        0.04106490507377433,
        0.03987705590998845,
        0.028544882226324165,
        0.07766846315101149,
        0.06746946738556743,
        0.03892364547522405,
        0.042836971706866595,
        0.0410644460039027,
        0.02831844448966856,
        0.04952096192412674,
        0.026472025620097064,
        0.04447099328283909,
        0.04047340552798018,
        0.01061757865435955,
        0.07885408054262479,
        0.0010562874507397124,
        0.027894992195222124,
        0.033725346044843986,
        0.055359132426267305
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getOpenRouterProvider = exports.setOpenRouterProvider = exports.isModelAdded = exports.getAllAddedModels = exports.getAddedModelsForProvider = exports.deleteModel = exports.addModel = exports.saveAddedModels = exports.loadAddedModels = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst os = __importStar(require(\"os\"));\nconst getStorageFile = () => {\n    const homeDir = os.homedir();\n    const gigaDir = path.join(homeDir, '.giga');\n    // Create .giga directory if it doesn't exist\n    if (!fs.existsSync(gigaDir)) {\n        fs.mkdirSync(gigaDir, { mode: 0o700 });\n    }\n    return path.join(gigaDir, 'added-models.json');\n};\nfunction loadAddedModels() {\n    try {\n        const storageFile = getStorageFile();\n        if (!fs.existsSync(storageFile)) {\n            return [];\n        }\n        const data = JSON.parse(fs.readFileSync(storageFile, 'utf8'));\n        return data.models || [];\n    }\n    catch (error) {\n        console.error('Error loading added models:', error);\n        return [];\n    }\n}\nexports.loadAddedModels = loadAddedModels;\nfunction saveAddedModels(models) {\n    try {\n        const storageFile = getStorageFile();\n        const data = { models };\n        fs.writeFileSync(storageFile, JSON.stringify(data, null, 2), { mode: 0o600 });\n    }\n    catch (error) {\n        console.error('Error saving added models:', error);\n    }\n}\nexports.saveAddedModels = saveAddedModels;\nfunction addModel(modelName, providerName) {\n    const models = loadAddedModels();\n    // Check if model already exists\n    const exists = models.some(m => m.modelName === modelName && m.providerName === providerName);\n    if (!exists) {\n        const newModel = {\n            modelName,\n            providerName,\n            dateAdded: new Date().toISOString(),\n        };\n        models.push(newModel);\n        saveAddedModels(models);\n    }\n}\nexports.addModel = addModel;\nfunction deleteModel(modelName, providerName) {\n    const models = loadAddedModels();\n    const initialLength = models.length;\n    const filteredModels = models.filter(m => !(m.modelName === modelName && m.providerName === providerName));\n    if (filteredModels.length < initialLength) {\n        saveAddedModels(filteredModels);\n        return true;\n    }\n    return false;\n}\nexports.deleteModel = deleteModel;\nfunction getAddedModelsForProvider(providerName) {\n    const models = loadAddedModels();\n    return models.filter(m => m.providerName === providerName);\n}\nexports.getAddedModelsForProvider = getAddedModelsForProvider;\nfunction getAllAddedModels() {\n    return loadAddedModels();\n}\nexports.getAllAddedModels = getAllAddedModels;\nfunction isModelAdded(modelName, providerName) {\n    const models = loadAddedModels();\n    return models.some(m => m.modelName === modelName && m.providerName === providerName);\n}\nexports.isModelAdded = isModelAdded;\nfunction setOpenRouterProvider(modelName, openRouterProvider) {\n    const models = loadAddedModels();\n    console.log(`DEBUG: Looking for model ${modelName} with provider OpenRouter`);\n    console.log(`DEBUG: Available models:`, models.map(m => `${m.modelName} (${m.providerName})`));\n    const modelIndex = models.findIndex(m => m.modelName === modelName && m.providerName === 'OpenRouter');\n    console.log(`DEBUG: Found model at index: ${modelIndex}`);\n    if (modelIndex === -1) {\n        console.log(`DEBUG: Model ${modelName} not found or not an OpenRouter model`);\n        return false; // Model not found or not an OpenRouter model\n    }\n    console.log(`DEBUG: Setting openRouterProvider to ${openRouterProvider} for ${modelName}`);\n    models[modelIndex].openRouterProvider = openRouterProvider;\n    saveAddedModels(models);\n    return true;\n}\nexports.setOpenRouterProvider = setOpenRouterProvider;\nfunction getOpenRouterProvider(modelName) {\n    const models = loadAddedModels();\n    const model = models.find(m => m.modelName === modelName && m.providerName === 'OpenRouter');\n    return model?.openRouterProvider || null;\n}\nexports.getOpenRouterProvider = getOpenRouterProvider;\n//# sourceMappingURL=added-models.js.map",
      "filePath": "../dist/utils/added-models.js",
      "embedding": [
        5.46,
        1.5,
        0,
        0.5,
        1.9,
        0.007160100793779623,
        0.08620353058255423,
        0.08330968747606592,
        0.06431614967544956,
        0.010746519750866934,
        0.06486146567316252,
        0.0677189357966854,
        0.01594132350739971,
        0.04258961568498553,
        0.0976522294902154,
        0.07902520143968866,
        0.07088407905651417,
        0.07163628080612737,
        0.007130730912497252,
        0.06836277293638715,
        0.07763176541767954,
        0.044844175663429714,
        0.006754072254233046,
        0.005959062873108945,
        0.02927161850465171,
        0.06450748297167724,
        0.01200015477169335,
        0.08461106284541783,
        0.0799793605980043,
        0.08041808428155495,
        0.01745083545340086,
        0.03594513821720833,
        0.017592446395576535,
        0.05954822197052082,
        0.03176978282232793,
        0.03905340175956819,
        0.09414264874938447,
        0.0105919425329562,
        0.019004474334799792,
        0.010253407876908994,
        0.07099180962619416,
        0.05887446669898022,
        0.09946539242145841,
        0.08255680479596957,
        0.06569889214764903,
        0.09814643264562824,
        0.015101295236982105,
        0.0790072690542141,
        0.06498824705853969,
        0.013451889830210463,
        0.09783175579543758,
        0.08496444232858971,
        0.005667569369522174,
        0.0165419696525718,
        0.05618409714923059,
        0.00048273376600107556,
        0.029760870470045775,
        0.09512984447722285,
        0.04147136013828763,
        0.03440123506363592,
        0.03663956448283016,
        0.0898689733726644,
        0.06138661089254676,
        0.06194813128690696,
        0.06187817593317764,
        0.07162216564836808,
        0.07926261293972142,
        0.09040654426265565,
        0.07367224176425619,
        0.03777973928344787,
        0.0021506649295765404,
        0.07874990313714109,
        0.07570664947116285,
        0.022185089467832042,
        0.01824635079569059,
        0.08205376586122344,
        0.001391911467977769,
        0.09385230698928167,
        0.06764075006254645,
        0.0824253744635623,
        0.031274368527470287,
        0.09530427981943475,
        0.087397485798628,
        0.02914205076464409,
        0.04478584413896802,
        0.09998483396089068,
        0.00008114042679906453,
        0.0666810671550194,
        0.014056665147165704,
        0.02625195730871077,
        0.03557178060731624,
        0.024195350978072606,
        0.05916780166316942,
        0.019665617906279898,
        0.010620888977593657,
        0.07666336210286541,
        0.01152814342383597,
        0.008671651033078221,
        0.061864888330663836,
        0.07637838039547297
      ]
    },
    {
      "content": "export interface ApiKeyValidationResult {\n    isValid: boolean;\n    error?: string;\n}\nexport declare function validateOpenRouterKey(apiKey: string): Promise<ApiKeyValidationResult>;\nexport declare function validateAnthropicKey(apiKey: string): Promise<ApiKeyValidationResult>;\nexport declare function validateGoogleKey(apiKey: string): Promise<ApiKeyValidationResult>;\nexport declare function validateXaiKey(apiKey: string): Promise<ApiKeyValidationResult>;\nexport declare function validateGroqKey(apiKey: string): Promise<ApiKeyValidationResult>;\nexport declare function validateCerebrasKey(apiKey: string, model?: string): Promise<ApiKeyValidationResult>;\nexport declare function validatePerplexityKey(apiKey: string): Promise<ApiKeyValidationResult>;\nexport declare function validateOpenaiKey(apiKey: string): Promise<ApiKeyValidationResult>;\nexport declare function validateOllamaUrl(baseUrl: string): Promise<ApiKeyValidationResult>;\nexport declare function validateApiKey(provider: string, apiKey: string, model?: string): Promise<ApiKeyValidationResult>;\n",
      "filePath": "../dist/utils/api-key-validator.d.ts",
      "embedding": [
        0.76,
        1,
        0,
        0,
        1.1,
        0.056780383573488837,
        0.040633633492918965,
        0.09105764703231889,
        0.034663210512828835,
        0.08579969899774618,
        0.01731387000977627,
        0.06196229948700893,
        0.013089103405769653,
        0.030260562264151913,
        0.05074793012454637,
        0.0018841598326714505,
        0.05918505279026003,
        0.027138624627071964,
        0.06299784722436357,
        0.028908308513744974,
        0.017515990490244004,
        0.047921325102576545,
        0.01034047957553529,
        0.05706394849118593,
        0.053935730573499124,
        0.08949046121529436,
        0.08461579939300717,
        0.03001155188866882,
        0.022915812530073434,
        0.040831221592333614,
        0.0742884865031838,
        0.07797365268746627,
        0.007144980690617165,
        0.06697710150041224,
        0.041372046658464424,
        0.03627573988674385,
        0.05417525468009176,
        0.01079442267358729,
        0.06280285352045356,
        0.005876883325871796,
        0.004928060030388548,
        0.007478357139163283,
        0.08705451196959135,
        0.06612939111435567,
        0.0828411416857278,
        0.04318955036737946,
        0.08054742164415729,
        0.04413273112617805,
        0.03676538322316527,
        0.07234639636310772,
        0.0983443392864284,
        0.05962822261859621,
        0.0037020136655135597,
        0.005577297489934585,
        0.09515128082918069,
        0.032848258771700015,
        0.04343019466305335,
        0.039708904857749854,
        0.05291574662534331,
        0.09958118331788543,
        0.01165385713359164,
        0.02806958727944684,
        0.051075110994576636,
        0.061861519295559386,
        0.050885803943957565,
        0.012550571384826882,
        0.09781605415287999,
        0.017056471868361223,
        0.020155476881892245,
        0.06216867599103457,
        0.03935132958046453,
        0.09673442897474822,
        0.09771394027542252,
        0.08321454341081813,
        0.06720123901825713,
        0.016237739502655814,
        0.06802108491440266,
        0.052880656762182114,
        0.051360805799475606,
        0.006005812226059559,
        0.06934188891455702,
        0.061452926860792026,
        0.08217638724257167,
        0.08517034747779713,
        0.0724500381007599,
        0.06378904284158464,
        0.05549289678379876,
        0.009668626892995925,
        0.04166468365122842,
        0.05086674617215107,
        0.08904774242100359,
        0.011547976563173147,
        0.0773514177830703,
        0.03139389212214098,
        0.03426831671405769,
        0.028159157184241168,
        0.0254198952926049,
        0.04421262108560758,
        0.0029691602870614456,
        0.09416943228064467
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateApiKey = exports.validateOllamaUrl = exports.validateOpenaiKey = exports.validatePerplexityKey = exports.validateCerebrasKey = exports.validateGroqKey = exports.validateXaiKey = exports.validateGoogleKey = exports.validateAnthropicKey = exports.validateOpenRouterKey = void 0;\nconst openai_1 = __importDefault(require(\"openai\"));\nconst cerebras_cloud_sdk_1 = __importDefault(require(\"@cerebras/cerebras_cloud_sdk\"));\nconst ollama_models_1 = require(\"./ollama-models\");\n// Validate OpenRouter API key\nasync function validateOpenRouterKey(apiKey) {\n    try {\n        const client = new openai_1.default({\n            apiKey,\n            baseURL: 'https://openrouter.ai/api/v1',\n            timeout: 10000,\n        });\n        await client.models.list();\n        return { isValid: true };\n    }\n    catch (error) {\n        return { isValid: false, error: error?.message || \"API validation failed\" };\n    }\n}\nexports.validateOpenRouterKey = validateOpenRouterKey;\n// Validate Anthropic API key\nasync function validateAnthropicKey(apiKey) {\n    try {\n        const client = new openai_1.default({\n            apiKey,\n            baseURL: 'https://api.anthropic.com/v1',\n            timeout: 10000,\n        });\n        await client.models.list();\n        return { isValid: true };\n    }\n    catch (error) {\n        return { isValid: false, error: error?.message || \"API validation failed\" };\n    }\n}\nexports.validateAnthropicKey = validateAnthropicKey;\n// Validate Google API key\nasync function validateGoogleKey(apiKey) {\n    try {\n        const client = new openai_1.default({\n            apiKey,\n            baseURL: 'https://generativelanguage.googleapis.com/v1beta/openai',\n            timeout: 10000,\n        });\n        await client.models.list();\n        return { isValid: true };\n    }\n    catch (error) {\n        return { isValid: false, error: error?.message || \"API validation failed\" };\n    }\n}\nexports.validateGoogleKey = validateGoogleKey;\n// Validate xAI API key\nasync function validateXaiKey(apiKey) {\n    try {\n        const client = new openai_1.default({\n            apiKey,\n            baseURL: 'https://api.x.ai/v1',\n            timeout: 10000,\n        });\n        await client.models.list();\n        return { isValid: true };\n    }\n    catch (error) {\n        return { isValid: false, error: error?.message || \"API validation failed\" };\n    }\n}\nexports.validateXaiKey = validateXaiKey;\n// Validate Groq API key\nasync function validateGroqKey(apiKey) {\n    try {\n        const client = new openai_1.default({\n            apiKey,\n            baseURL: 'https://api.groq.com/openai/v1',\n            timeout: 10000,\n        });\n        await client.models.list();\n        return { isValid: true };\n    }\n    catch (error) {\n        return { isValid: false, error: error?.message || \"API validation failed\" };\n    }\n}\nexports.validateGroqKey = validateGroqKey;\n// Validate Cerebras API key\nasync function validateCerebrasKey(apiKey, model) {\n    try {\n        const client = new cerebras_cloud_sdk_1.default({\n            apiKey,\n            timeout: 10000,\n        });\n        // Use the provided model or default to qwen-3-235b-a22b-instruct-2507 for validation\n        const validationModel = model || 'qwen-3-235b-a22b-instruct-2507';\n        // Try a simple chat completion request instead of listing models\n        const response = await client.chat.completions.create({\n            model: validationModel,\n            messages: [{ role: 'user', content: 'test' }],\n            max_completion_tokens: 1,\n            temperature: 0.1,\n        });\n        return { isValid: true };\n    }\n    catch (error) {\n        return { isValid: false, error: error?.message || \"API validation failed\" };\n    }\n}\nexports.validateCerebrasKey = validateCerebrasKey;\n// Validate Perplexity API key\nasync function validatePerplexityKey(apiKey) {\n    try {\n        const response = await fetch('https://api.perplexity.ai/chat/completions', {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                model: 'sonar',\n                messages: [{ role: 'user', content: 'test' }],\n                max_tokens: 1,\n            }),\n            signal: AbortSignal.timeout(10000),\n        });\n        if (response.status === 401) {\n            return { isValid: false, error: 'Invalid API key' };\n        }\n        return { isValid: true };\n    }\n    catch (error) {\n        return { isValid: false, error: error?.message || \"API validation failed\" };\n    }\n}\nexports.validatePerplexityKey = validatePerplexityKey;\n// Validate OpenAI API key\nasync function validateOpenaiKey(apiKey) {\n    try {\n        const client = new openai_1.default({\n            apiKey,\n            baseURL: 'https://api.openai.com/v1',\n            timeout: 10000,\n        });\n        await client.models.list();\n        return { isValid: true };\n    }\n    catch (error) {\n        return { isValid: false, error: error?.message || \"API validation failed\" };\n    }\n}\nexports.validateOpenaiKey = validateOpenaiKey;\n// Validate Ollama connection (baseUrl instead of API key)\nasync function validateOllamaUrl(baseUrl) {\n    try {\n        const result = await (0, ollama_models_1.testOllamaConnection)(baseUrl);\n        if (result.success) {\n            return {\n                isValid: true,\n            };\n        }\n        else {\n            return {\n                isValid: false,\n                error: result.error || \"Cannot connect to Ollama\"\n            };\n        }\n    }\n    catch (error) {\n        return { isValid: false, error: error?.message || \"Ollama connection failed\" };\n    }\n}\nexports.validateOllamaUrl = validateOllamaUrl;\n// Main validation function that routes to the correct provider\nasync function validateApiKey(provider, apiKey, model) {\n    // Special case for Ollama - it's a base URL, not an API key, and can be empty (defaults to localhost)\n    if (provider.toLowerCase() === 'ollama') {\n        const baseUrl = apiKey || 'http://localhost:11434';\n        return validateOllamaUrl(baseUrl);\n    }\n    if (!apiKey || !apiKey.trim()) {\n        return { isValid: false, error: 'API key is empty' };\n    }\n    switch (provider.toLowerCase()) {\n        case 'openrouter':\n            return validateOpenRouterKey(apiKey);\n        case 'anthropic':\n            return validateAnthropicKey(apiKey);\n        case 'google':\n            return validateGoogleKey(apiKey);\n        case 'xai':\n            return validateXaiKey(apiKey);\n        case 'groq':\n            return validateGroqKey(apiKey);\n        case 'cerebras':\n            return validateCerebrasKey(apiKey, model);\n        case 'perplexity':\n            return validatePerplexityKey(apiKey);\n        case 'openai':\n            return validateOpenaiKey(apiKey);\n        default:\n            return { isValid: false, error: 'Unknown provider' };\n    }\n}\nexports.validateApiKey = validateApiKey;\n//# sourceMappingURL=api-key-validator.js.map",
      "filePath": "../dist/utils/api-key-validator.js",
      "embedding": [
        7.19,
        1.2,
        0,
        0.4,
        2.1,
        0.06380874318182826,
        0.012757080182746206,
        0.03605785219685203,
        0.08844466947730467,
        0.09945910278331466,
        0.017688002518583514,
        0.03455945903789092,
        0.020492389857326623,
        0.05923362950241569,
        0.050354756565970854,
        0.019839598494803913,
        0.01452388274709352,
        0.02683558852126582,
        0.0723644834412645,
        0.08974609487673885,
        0.01997800393222572,
        0.08067320698780636,
        0.07906726858505975,
        0.09387569375069656,
        0.07364624173843144,
        0.018359999538162964,
        0.03286508059438342,
        0.01849189197909623,
        0.05385408339377551,
        0.054536916924931546,
        0.038382439315829575,
        0.04607696068333903,
        0.06288443465261176,
        0.058484616908957655,
        0.08393525945073085,
        0.0688493603444905,
        0.013833819284062044,
        0.021754422638796757,
        0.07752042797675927,
        0.08062842188736528,
        0.05016624370902815,
        0.01607594970336699,
        0.05324077759884119,
        0.046946273430249374,
        0.05415658330332687,
        0.03358100240537242,
        0.03416245617689887,
        0.07110836154506783,
        0.033845790840947756,
        0.029116841133291205,
        0.06464897066752634,
        0.09975881653005961,
        0.07180725248510794,
        0.09089716225863698,
        0.05657449735831687,
        0.06334837499547738,
        0.021079027980357126,
        0.023811837060338126,
        0.021401563277089267,
        0.0639989693610356,
        0.05376702680867971,
        0.04265871379872904,
        0.06575616955625953,
        0.011404929697722277,
        0.019929236471064773,
        0.03753983146389942,
        0.08413469216254943,
        0.021149426762121316,
        0.0978705657549615,
        0.0067744477651763835,
        0.03981282181048973,
        0.03921227533685023,
        0.06810949667518482,
        0.032378489937014955,
        0.07167228813140461,
        0.022672878185790758,
        0.08808542993177701,
        0.039823350241843226,
        0.03451776340676123,
        0.05520175327514309,
        0.05049961005780462,
        0.06822969479206666,
        0.020962454111858632,
        0.031132290730671267,
        0.034626032540034234,
        0.05057782635212459,
        0.0931889917377829,
        0.05832794880170942,
        0.012043540416468502,
        0.08937154334559676,
        0.09257249938718748,
        0.05934528856784874,
        0.08482580940319336,
        0.0790995898055173,
        0.015879538468855713,
        0.024164496316443008,
        0.07847368557089052,
        0.02547874096803167,
        0.031986020144384224,
        0.09141290163965389
      ]
    },
    {
      "content": "export interface ApiKeys {\n    xaiApiKey?: string;\n    groqApiKey?: string;\n    anthropicApiKey?: string;\n    openRouterApiKey?: string;\n    googleApiKey?: string;\n    cerebrasApiKey?: string;\n    perplexityApiKey?: string;\n    openaiApiKey?: string;\n    ollamaBaseUrl?: string;\n}\nexport declare function refreshGlobalSharedInfo(): void;\nexport declare function loadApiKeys(): ApiKeys;\n",
      "filePath": "../dist/utils/api-keys.d.ts",
      "embedding": [
        0.34,
        0.2,
        0,
        0,
        0.3,
        0.0758043308131901,
        0.05008129163941181,
        0.033347810404044664,
        0.043998070330677125,
        0.047657541930046836,
        0.09030588779361565,
        0.07829548517510246,
        0.05759676379164887,
        0.08538872606683404,
        0.07605893068814118,
        0.06387762705189408,
        0.010803705202724346,
        0.06989175131358928,
        0.06701927198255818,
        0.017359974470405548,
        0.008031553934964597,
        0.0667856522847146,
        0.030978583601503074,
        0.07043588542839294,
        0.00634672544581264,
        0.02214980855859813,
        0.07572697295527424,
        0.047728592310046315,
        0.08651520491289659,
        0.06603434152673648,
        0.06153676407382069,
        0.07324773739224405,
        0.08978748041264764,
        0.0597377869630364,
        0.09939338580089987,
        0.0018271491955497044,
        0.040951306467951226,
        0.05297853852837027,
        0.07263305590120252,
        0.07079607897544193,
        0.0014558441686374991,
        0.0005138125194329324,
        0.035785083168363985,
        0.069616412044574,
        0.04548607607619504,
        0.03598711017528933,
        0.02211839038915575,
        0.0007422017561762196,
        0.06415463226250567,
        0.0869645533841874,
        0.07137851473668574,
        0.059455334403736994,
        0.011177363343290015,
        0.03373070745439324,
        0.029437303617463828,
        0.07237892916009975,
        0.04095379834785387,
        0.05807129466934962,
        0.05451359115260834,
        0.07307505180176904,
        0.06392275780526893,
        0.014683130249736387,
        0.0652770892326615,
        0.00757245504931664,
        0.09291695773845697,
        0.006816171845972829,
        0.04691012523735353,
        0.08294515298672778,
        0.01571094414574604,
        0.003148089627913664,
        0.024789114059182306,
        0.07590204427066898,
        0.006628154860902425,
        0.09253676228044518,
        0.059607367429090174,
        0.019804397542535046,
        0.015267927071342247,
        0.0979685775663445,
        0.05696308966915392,
        0.09404781590508537,
        0.08852558749211434,
        0.026375226019855515,
        0.03826216165148867,
        0.027079861198790522,
        0.06691044047075541,
        0.08275689174235662,
        0.033031453756599126,
        0.08237572115421245,
        0.03646800346711406,
        0.006170707962546252,
        0.013832896295580432,
        0.08582296329868082,
        0.07460235683946895,
        0.04931931621655669,
        0.017032324295839753,
        0.06168856361031813,
        0.09612146915825111,
        0.029234184378721696,
        0.06593612525893533,
        0.09788460845754052
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadApiKeys = exports.refreshGlobalSharedInfo = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst os = __importStar(require(\"os\"));\nfunction checkShellFiles() {\n    const homeDir = os.homedir();\n    const shellFiles = [\n        path.join(homeDir, '.bashrc'),\n        path.join(homeDir, '.zshrc'),\n        path.join(homeDir, '.bash_profile'),\n        path.join(homeDir, '.profile')\n    ];\n    const keys = {};\n    const keyPatterns = {\n        xaiApiKey: /export\\s+XAI_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n        groqApiKey: /export\\s+GROQ_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n        anthropicApiKey: /export\\s+(?:ANTHROPIC_API_KEY|CLAUDE_API_KEY)\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n        openRouterApiKey: /export\\s+OPENROUTER_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n        googleApiKey: /export\\s+GOOGLE_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n        cerebrasApiKey: /export\\s+CEREBRAS_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n        perplexityApiKey: /export\\s+PERPLEXITY_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n        openaiApiKey: /export\\s+OPENAI_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n        ollamaBaseUrl: /export\\s+OLLAMA_BASE_URL\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n    };\n    for (const file of shellFiles) {\n        try {\n            if (fs.existsSync(file)) {\n                const content = fs.readFileSync(file, 'utf8');\n                for (const [keyName, pattern] of Object.entries(keyPatterns)) {\n                    if (!keys[keyName]) {\n                        const match = content.match(pattern);\n                        if (match && match[1]) {\n                            keys[keyName] = match[1];\n                        }\n                    }\n                }\n            }\n        }\n        catch (error) {\n            // Ignore errors reading shell files\n        }\n    }\n    return keys;\n}\nfunction saveShellKeysToSettings(shellKeys) {\n    try {\n        const homeDir = os.homedir();\n        const settingsDir = path.join(homeDir, '.giga');\n        const settingsFile = path.join(settingsDir, 'user-settings.json');\n        // Create .giga directory if it doesn't exist\n        if (!fs.existsSync(settingsDir)) {\n            fs.mkdirSync(settingsDir, { recursive: true });\n        }\n        // Load existing settings or create empty object\n        let settings = {};\n        if (fs.existsSync(settingsFile)) {\n            settings = JSON.parse(fs.readFileSync(settingsFile, 'utf8'));\n        }\n        // Only save shell keys that are not already in settings and are not empty\n        let hasChanges = false;\n        const keyMappings = {\n            xaiApiKey: 'xaiApiKey',\n            groqApiKey: 'groqApiKey',\n            anthropicApiKey: 'anthropicApiKey',\n            openRouterApiKey: 'openRouterApiKey',\n            googleApiKey: 'googleApiKey',\n            cerebrasApiKey: 'cerebrasApiKey',\n            perplexityApiKey: 'perplexityApiKey',\n            openaiApiKey: 'openaiApiKey',\n            ollamaBaseUrl: 'ollamaBaseUrl',\n        };\n        for (const [apiKeyName, settingsKeyName] of Object.entries(keyMappings)) {\n            const shellValue = shellKeys[apiKeyName];\n            if (shellValue && !settings[settingsKeyName]) {\n                settings[settingsKeyName] = shellValue;\n                hasChanges = true;\n            }\n        }\n        // Handle legacy apiKey field\n        if (shellKeys.xaiApiKey && !settings.apiKey && !settings.xaiApiKey) {\n            settings.apiKey = shellKeys.xaiApiKey;\n            hasChanges = true;\n        }\n        // Save settings file if there were changes\n        if (hasChanges) {\n            fs.writeFileSync(settingsFile, JSON.stringify(settings, null, 2));\n            // Refresh global shared info after changes\n            try {\n                const now = new Date();\n                fs.utimesSync(settingsFile, now, now);\n            }\n            catch (refreshError) {\n                // Silently ignore refresh errors\n            }\n        }\n    }\n    catch (error) {\n        // Silently ignore errors to avoid disrupting the application\n    }\n}\nfunction refreshGlobalSharedInfo() {\n    try {\n        const homeDir = os.homedir();\n        const settingsFile = path.join(homeDir, '.giga', 'user-settings.json');\n        // If user-settings.json exists, refresh global shared info\n        if (fs.existsSync(settingsFile)) {\n            // Trigger refresh by updating modification time\n            const now = new Date();\n            fs.utimesSync(settingsFile, now, now);\n        }\n    }\n    catch (error) {\n        // Silently ignore errors\n    }\n}\nexports.refreshGlobalSharedInfo = refreshGlobalSharedInfo;\nfunction loadApiKeys() {\n    try {\n        const homeDir = os.homedir();\n        const settingsFile = path.join(homeDir, '.giga', 'user-settings.json');\n        // Start with environment variables\n        const envKeys = {\n            xaiApiKey: process.env.XAI_API_KEY,\n            groqApiKey: process.env.GROQ_API_KEY,\n            anthropicApiKey: process.env.ANTHROPIC_API_KEY || process.env.CLAUDE_API_KEY,\n            openRouterApiKey: process.env.OPENROUTER_API_KEY,\n            googleApiKey: process.env.GOOGLE_API_KEY,\n            cerebrasApiKey: process.env.CEREBRAS_API_KEY,\n            perplexityApiKey: process.env.PERPLEXITY_API_KEY,\n            openaiApiKey: process.env.OPENAI_API_KEY,\n            ollamaBaseUrl: process.env.OLLAMA_BASE_URL,\n        };\n        // Check shell files for exported variables\n        const shellKeys = checkShellFiles();\n        // Save shell keys to settings if they're not already saved\n        saveShellKeysToSettings(shellKeys);\n        // Load settings file\n        let settingsKeys = {};\n        if (fs.existsSync(settingsFile)) {\n            const settings = JSON.parse(fs.readFileSync(settingsFile, 'utf8'));\n            settingsKeys = {\n                xaiApiKey: settings.apiKey || settings.xaiApiKey,\n                groqApiKey: settings.groqApiKey,\n                anthropicApiKey: settings.anthropicApiKey,\n                openRouterApiKey: settings.openRouterApiKey,\n                googleApiKey: settings.googleApiKey,\n                cerebrasApiKey: settings.cerebrasApiKey,\n                perplexityApiKey: settings.perplexityApiKey,\n                openaiApiKey: settings.openaiApiKey,\n                ollamaBaseUrl: settings.ollamaBaseUrl,\n            };\n        }\n        // Priority: env vars > shell files > settings file\n        return {\n            xaiApiKey: envKeys.xaiApiKey || shellKeys.xaiApiKey || settingsKeys.xaiApiKey,\n            groqApiKey: envKeys.groqApiKey || shellKeys.groqApiKey || settingsKeys.groqApiKey,\n            anthropicApiKey: envKeys.anthropicApiKey || shellKeys.anthropicApiKey || settingsKeys.anthropicApiKey,\n            openRouterApiKey: envKeys.openRouterApiKey || shellKeys.openRouterApiKey || settingsKeys.openRouterApiKey,\n            googleApiKey: envKeys.googleApiKey || shellKeys.googleApiKey || settingsKeys.googleApiKey,\n            cerebrasApiKey: envKeys.cerebrasApiKey || shellKeys.cerebrasApiKey || settingsKeys.cerebrasApiKey,\n            perplexityApiKey: envKeys.perplexityApiKey || shellKeys.perplexityApiKey || settingsKeys.perplexityApiKey,\n            openaiApiKey: envKeys.openaiApiKey || shellKeys.openaiApiKey || settingsKeys.openaiApiKey,\n            ollamaBaseUrl: envKeys.ollamaBaseUrl || shellKeys.ollamaBaseUrl || settingsKeys.ollamaBaseUrl || 'http://localhost:11434',\n        };\n    }\n    catch (error) {\n        return {};\n    }\n}\nexports.loadApiKeys = loadApiKeys;\n//# sourceMappingURL=api-keys.js.map",
      "filePath": "../dist/utils/api-keys.js",
      "embedding": [
        7.21,
        1,
        0,
        0.5,
        1.5,
        0.07065847994469633,
        0.03902216169856465,
        0.030814070715320864,
        0.0951505049397584,
        0.03861032573630446,
        0.08423823448327583,
        0.07062271841475914,
        0.04349978026896583,
        0.03009387956071016,
        0.026838867687064828,
        0.06860931693163677,
        0.03384673286699165,
        0.07309075901770835,
        0.035110768133619095,
        0.01322796061350644,
        0.0683091978949984,
        0.06105094045780223,
        0.04051053920441085,
        0.02333286703900861,
        0.02262696502210837,
        0.051603538091381566,
        0.054159310056216325,
        0.04305599185283232,
        0.08108848533786434,
        0.06812470032772242,
        0.02997596474837021,
        0.06130928388610057,
        0.07407855307298837,
        0.015272426899054404,
        0.016002806382899516,
        0.02768036467968217,
        0.0578809139333096,
        0.049444433133568125,
        0.014340480834182845,
        0.01759464015586484,
        0.010336841074355108,
        0.044026032452613495,
        0.004996423704322051,
        0.05758165042318071,
        0.010096389356894454,
        0.068704010793938,
        0.049006316592117044,
        0.07666990863273686,
        0.07258322243048601,
        0.06541522568458866,
        0.07668903893577655,
        0.0031594564764968803,
        0.03400203712800224,
        0.06411098218576225,
        0.05653332936008272,
        0.06495662419757223,
        0.04709524281208401,
        0.05610567710694625,
        0.007643483794615447,
        0.038589787435589454,
        0.03703121168509175,
        0.04194109846583778,
        0.07571617310295678,
        0.02073555735965517,
        0.05060985634623756,
        0.010663481794265474,
        0.03479977565983413,
        0.009410719308155058,
        0.06472626797370289,
        0.015149481381452778,
        0.08890804503496066,
        0.034050042297519845,
        0.006625683804964578,
        0.03458504822714852,
        0.01993454077600465,
        0.0640439722894446,
        0.030353306108651546,
        0.02946732813294255,
        0.0021578909534266666,
        0.07091096618125178,
        0.040512333424787855,
        0.0838032009413278,
        0.038608322474724344,
        0.016144128006169912,
        0.025706124785312492,
        0.0074870882411200886,
        0.05899557796711158,
        0.03756168950454006,
        0.00537375188123137,
        0.07585541828766337,
        0.033385534329643696,
        0.06348978531604083,
        0.08374685205545573,
        0.09441058064624981,
        0.09829591347217612,
        0.010206092158376834,
        0.032622953597484794,
        0.007914785941876246,
        0.002106347803151276,
        0.06308562384667894
      ]
    },
    {
      "content": "/// <reference types=\"node\" />\nimport { EventEmitter } from 'events';\nexport interface ConfirmationOptions {\n    operation: string;\n    filename: string;\n    showVSCodeOpen?: boolean;\n    content?: string;\n}\nexport interface ConfirmationResult {\n    confirmed: boolean;\n    dontAskAgain?: boolean;\n    feedback?: string;\n}\nexport declare class ConfirmationService extends EventEmitter {\n    private static instance;\n    private skipConfirmationThisSession;\n    private pendingConfirmation;\n    private resolveConfirmation;\n    private headlessMode;\n    private sessionFlags;\n    static getInstance(): ConfirmationService;\n    constructor();\n    requestConfirmation(options: ConfirmationOptions, operationType?: 'file' | 'bash'): Promise<ConfirmationResult>;\n    confirmOperation(confirmed: boolean, dontAskAgain?: boolean): void;\n    rejectOperation(feedback?: string): void;\n    private openInVSCode;\n    isPending(): boolean;\n    resetSession(): void;\n    getSessionFlags(): {\n        fileOperations: boolean;\n        bashCommands: boolean;\n        allOperations: boolean;\n    };\n    setHeadlessMode(enabled: boolean): void;\n    isHeadlessMode(): boolean;\n}\n",
      "filePath": "../dist/utils/confirmation-service.d.ts",
      "embedding": [
        0.95,
        0,
        0.1,
        0.1,
        0.3,
        0.025161157755506758,
        0.06781782268284407,
        0.07707866049602974,
        0.08951795316276416,
        0.0046266099263798655,
        0.0967245590610185,
        0.008510922340196925,
        0.03192010763514735,
        0.03756408860585682,
        0.028650599381447983,
        0.07829258298146713,
        0.046514975565135654,
        0.0603973048689083,
        0.056071846280746844,
        0.013019015838456695,
        0.051788987698662664,
        0.044285033113325295,
        0.07347561464745068,
        0.005760929173496399,
        0.04739904161264677,
        0.0784268349026892,
        0.07267047220878596,
        0.020359495599843083,
        0.032425914569009354,
        0.051295386454998065,
        0.02481524869014581,
        0.014916188780851249,
        0.001543558870986317,
        0.09186936388495925,
        0.05080009004163569,
        0.05765666937117121,
        0.027025691639938565,
        0.028211577169445803,
        0.07574715376805627,
        0.0591279997751359,
        0.0057700317561955265,
        0.09932594782974218,
        0.06348115587612188,
        0.02784243950222708,
        0.06864484895462862,
        0.032192453489566834,
        0.010228537395155125,
        0.07101339090396223,
        0.06639187364249459,
        0.05329503511650338,
        0.0991048676974447,
        0.056697689229518414,
        0.049769962764037404,
        0.027918453943231836,
        0.09533835407372704,
        0.08692356859941242,
        0.07997107385582036,
        0.017740109531914263,
        0.009481215178326341,
        0.09968226896606647,
        0.08884137887602883,
        0.062387138789714316,
        0.04331301535580634,
        0.031754417722820574,
        0.019896948955414995,
        0.01551490147008966,
        0.018791808433001114,
        0.08444109929403433,
        0.002075087162607847,
        0.0944249650868263,
        0.04295855281172788,
        0.08441843410000988,
        0.018638947247927886,
        0.02465358715122449,
        0.0667445508047399,
        0.08744055377756917,
        0.08815651632226355,
        0.07691457246290788,
        0.0008324045414028203,
        0.044811781702543164,
        0.068973025680372,
        0.08176369757661202,
        0.06531038018647378,
        0.011400311221599957,
        0.03447540860489765,
        0.0833136983286455,
        0.09851513436208045,
        0.06082194684109236,
        0.00006464010453631764,
        0.0615013721835328,
        0.047593973788883304,
        0.007560312374777134,
        0.016118171988381304,
        0.034402589595177814,
        0.027738132622367975,
        0.0828686093541653,
        0.04069015956707294,
        0.05896721086372179,
        0.03943833830567475,
        0.09805761617717253
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfirmationService = void 0;\nconst child_process_1 = require(\"child_process\");\nconst util_1 = require(\"util\");\nconst events_1 = require(\"events\");\nconst mode_manager_1 = require(\"./mode-manager\");\nconst types_1 = require(\"../types\");\nconst execAsync = (0, util_1.promisify)(child_process_1.exec);\nclass ConfirmationService extends events_1.EventEmitter {\n    static getInstance() {\n        if (!ConfirmationService.instance) {\n            ConfirmationService.instance = new ConfirmationService();\n        }\n        return ConfirmationService.instance;\n    }\n    constructor() {\n        super();\n        this.skipConfirmationThisSession = false;\n        this.pendingConfirmation = null;\n        this.resolveConfirmation = null;\n        this.headlessMode = false;\n        // Session flags for different operation types\n        this.sessionFlags = {\n            fileOperations: false,\n            bashCommands: false,\n            allOperations: false\n        };\n    }\n    async requestConfirmation(options, operationType = 'file') {\n        // In headless mode, auto-approve all operations\n        if (this.headlessMode) {\n            return { confirmed: true };\n        }\n        // In GIGA mode, default to no confirmations (full power mode)\n        const currentMode = mode_manager_1.modeManager.getCurrentMode();\n        if (currentMode === types_1.AgentMode.GIGA) {\n            // GIGA mode = full power, no permission requests by default\n            return { confirmed: true };\n        }\n        // In CHILL mode, always ask for confirmation unless user has set session flags\n        if (currentMode === types_1.AgentMode.CHILL) {\n            // Check session flags first\n            if (this.sessionFlags.allOperations ||\n                (operationType === 'file' && this.sessionFlags.fileOperations) ||\n                (operationType === 'bash' && this.sessionFlags.bashCommands)) {\n                return { confirmed: true };\n            }\n            // In CHILL mode, we need to ask for confirmation\n        }\n        // In PLAN mode, generally approve basic operations but still respect session flags\n        if (currentMode === types_1.AgentMode.PLAN) {\n            if (this.sessionFlags.allOperations ||\n                (operationType === 'file' && this.sessionFlags.fileOperations) ||\n                (operationType === 'bash' && this.sessionFlags.bashCommands)) {\n                return { confirmed: true };\n            }\n            // For PLAN mode, we might want to be more permissive for read operations\n            // but still ask for write operations - the individual tools can decide\n        }\n        // If VS Code should be opened, try to open it\n        if (options.showVSCodeOpen) {\n            try {\n                await this.openInVSCode(options.filename);\n            }\n            catch (error) {\n                // If VS Code opening fails, continue without it\n                options.showVSCodeOpen = false;\n            }\n        }\n        // Create a promise that will be resolved by the UI component\n        this.pendingConfirmation = new Promise((resolve) => {\n            this.resolveConfirmation = resolve;\n        });\n        // Emit custom event that the UI can listen to (using setImmediate to ensure the UI updates)\n        setImmediate(() => {\n            this.emit('confirmation-requested', options);\n        });\n        const result = await this.pendingConfirmation;\n        if (result.dontAskAgain) {\n            // Set the appropriate session flag based on operation type\n            if (operationType === 'file') {\n                this.sessionFlags.fileOperations = true;\n            }\n            else if (operationType === 'bash') {\n                this.sessionFlags.bashCommands = true;\n            }\n            // Could also set allOperations for global skip\n        }\n        return result;\n    }\n    confirmOperation(confirmed, dontAskAgain) {\n        if (this.resolveConfirmation) {\n            this.resolveConfirmation({ confirmed, dontAskAgain });\n            this.resolveConfirmation = null;\n            this.pendingConfirmation = null;\n        }\n    }\n    rejectOperation(feedback) {\n        if (this.resolveConfirmation) {\n            this.resolveConfirmation({ confirmed: false, feedback });\n            this.resolveConfirmation = null;\n            this.pendingConfirmation = null;\n        }\n    }\n    async openInVSCode(filename) {\n        // Try different VS Code commands\n        const commands = ['code', 'code-insiders', 'codium'];\n        for (const cmd of commands) {\n            try {\n                await execAsync(`which ${cmd}`);\n                await execAsync(`${cmd} \"${filename}\"`);\n                return;\n            }\n            catch (error) {\n                // Continue to next command\n                continue;\n            }\n        }\n        throw new Error('VS Code not found');\n    }\n    isPending() {\n        return this.pendingConfirmation !== null;\n    }\n    resetSession() {\n        this.sessionFlags = {\n            fileOperations: false,\n            bashCommands: false,\n            allOperations: false\n        };\n    }\n    getSessionFlags() {\n        return { ...this.sessionFlags };\n    }\n    setHeadlessMode(enabled) {\n        this.headlessMode = enabled;\n    }\n    isHeadlessMode() {\n        return this.headlessMode;\n    }\n}\nexports.ConfirmationService = ConfirmationService;\n//# sourceMappingURL=confirmation-service.js.map",
      "filePath": "../dist/utils/confirmation-service.js",
      "embedding": [
        5.3,
        0,
        0.1,
        0,
        0.3,
        0.05871684596088964,
        0.027015282609349968,
        0.01804332720505931,
        0.036932065597575746,
        0.001073985640859998,
        0.059186634965720235,
        0.08427310299705887,
        0.010414008543279996,
        0.07026728982890251,
        0.09101682008662114,
        0.05202206223322501,
        0.026029660485641648,
        0.029532045688686406,
        0.03371680227145607,
        0.009282458295990104,
        0.0076174774243432004,
        0.01595350711507052,
        0.06519177694343796,
        0.09300936908285179,
        0.09901146541934114,
        0.09965546040266701,
        0.05780329190308934,
        0.037637365457695686,
        0.055462092084083314,
        0.037306960771217805,
        0.06671133603618262,
        0.04474396145916448,
        0.08958425806359553,
        0.039557754369580256,
        0.09906172144841852,
        0.0741779344724897,
        0.01587721597629499,
        0.06400348202315795,
        0.039508175027787445,
        0.005580959129414443,
        0.03539862114489655,
        0.01658934776286627,
        0.09963093474056063,
        0.04607085737103092,
        0.02013045220922599,
        0.06519791933541708,
        0.022902234632389773,
        0.08720860793408192,
        0.05535061845200445,
        0.09048704753333993,
        0.051485251349078956,
        0.08905363714198673,
        0.054512821684121464,
        0.02455797598992179,
        0.047331199630837,
        0.05907826203784725,
        0.03777470060796165,
        0.05464153869108628,
        0.06864528977001988,
        0.03594252431536839,
        0.098746848825783,
        0.009696837892134458,
        0.029433461244052397,
        0.036352754319413726,
        0.05165743317768043,
        0.07880270558277663,
        0.03672454447987108,
        0.02637755666972367,
        0.04407247814058303,
        0.028586059551830224,
        0.03454688049637724,
        0.08313537563901507,
        0.05674948831513339,
        0.07437421064551207,
        0.05411176260750013,
        0.05464244778289467,
        0.01693933206725755,
        0.053867187041228115,
        0.07059040172267382,
        0.004372372775312228,
        0.004089185127104789,
        0.0017025473115280022,
        0.08038558680079003,
        0.03497793153400176,
        0.0185382214940801,
        0.022875694019965722,
        0.009236598125360086,
        0.014376438125182823,
        0.07610074215218268,
        0.0499287438487741,
        0.046629927045263635,
        0.0878677953265901,
        0.07882171116775188,
        0.0056987542512115024,
        0.0014633628018151713,
        0.01438780026447617,
        0.02227605722963684,
        0.052047629325175905,
        0.009858913953624772,
        0.08000408787338022
      ]
    },
    {
      "content": "import { ChatEntry } from '../agent/giga-agent';\nexport interface SavedConversation {\n    id: string;\n    title: string;\n    messages: ChatEntry[];\n    createdAt: Date;\n    updatedAt: Date;\n    model: string;\n    messageCount: number;\n}\nexport interface ConversationSummary {\n    id: string;\n    title: string;\n    createdAt: Date;\n    updatedAt: Date;\n    model: string;\n    messageCount: number;\n    preview: string;\n}\nexport declare class ConversationManager {\n    private static instance;\n    private conversationsDir;\n    private constructor();\n    static getInstance(): ConversationManager;\n    private ensureConversationsDir;\n    private generateConversationId;\n    private getConversationPath;\n    generateTitle(messages: ChatEntry[]): Promise<string>;\n    saveConversation(messages: ChatEntry[], model: string, existingId?: string): Promise<string>;\n    loadConversation(id: string): Promise<SavedConversation | null>;\n    listConversations(): Promise<ConversationSummary[]>;\n    deleteConversation(id: string): Promise<boolean>;\n    searchConversations(query: string): Promise<ConversationSummary[]>;\n}\n",
      "filePath": "../dist/utils/conversation-manager.d.ts",
      "embedding": [
        0.9,
        0,
        0.1,
        0.1,
        0.3,
        0.05460801563346793,
        0.010316471635758984,
        0.057730281465182165,
        0.08120768397477518,
        0.06060524478269924,
        0.05085761893106086,
        0.08671422921639291,
        0.07882568342685792,
        0.07032073290089741,
        0.06529866284186672,
        0.07283100678428844,
        0.04088308168312164,
        0.0008466460249276664,
        0.028144885718714575,
        0.054889664363062286,
        0.06512449245181771,
        0.09398816650200516,
        0.04309728408697862,
        0.07113943290125271,
        0.06601369905822366,
        0.03723433323660246,
        0.09679572584049057,
        0.03916135788266886,
        0.053724468965869535,
        0.029263730679331093,
        0.0756873251230977,
        0.028850039977141795,
        0.08107346629645994,
        0.005355650740015261,
        0.04622044211333355,
        0.055409359477886604,
        0.08757945428341951,
        0.08864175747175128,
        0.012270022821229722,
        0.06589360633906642,
        0.08982798243754497,
        0.02523818080546544,
        0.09375234047918801,
        0.020665723293988792,
        0.08046389860578941,
        0.050969034218135305,
        0.04939689868827301,
        0.004011082197232963,
        0.02281991608234295,
        0.06906517152117744,
        0.0920998380233912,
        0.019278721992063666,
        0.07245835530960645,
        0.0007183735233874944,
        0.05979088701866982,
        0.020069571381965724,
        0.08212178313611163,
        0.06727607610553409,
        0.056387054098143076,
        0.039198259647534345,
        0.08358857789968341,
        0.053438368132880776,
        0.016499763310392546,
        0.00864689000056026,
        0.001426771270151006,
        0.009511733700544624,
        0.07201658057207741,
        0.004563315756166831,
        0.05716080822292444,
        0.05572115291712683,
        0.03246857300093116,
        0.08760923435839346,
        0.01657317398133973,
        0.029211603565148427,
        0.0759776909359509,
        0.009625966144925047,
        0.08338029455930317,
        0.08724756327184463,
        0.07490307939859978,
        0.006741326388718816,
        0.038686046634503646,
        0.000673347150182213,
        0.05784004883066543,
        0.02811972882327919,
        0.06005962240419878,
        0.07070937655959203,
        0.09464942061055388,
        0.09723336396920214,
        0.05143640679506428,
        0.0035263591563669872,
        0.07032790475642008,
        0.05167576341326896,
        0.002389159350053927,
        0.06337471159258247,
        0.06880338285157865,
        0.06931637094468787,
        0.04591366596726729,
        0.08787733484314197,
        0.0740940947465251,
        0.027307213502561933
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConversationManager = void 0;\nconst path_1 = __importDefault(require(\"path\"));\nconst promises_1 = __importDefault(require(\"fs/promises\"));\nconst os_1 = __importDefault(require(\"os\"));\nconst api_keys_1 = require(\"./api-keys\");\nclass ConversationManager {\n    constructor() {\n        this.conversationsDir = path_1.default.join(os_1.default.homedir(), '.giga', 'conversations');\n    }\n    static getInstance() {\n        if (!ConversationManager.instance) {\n            ConversationManager.instance = new ConversationManager();\n        }\n        return ConversationManager.instance;\n    }\n    async ensureConversationsDir() {\n        try {\n            await promises_1.default.mkdir(this.conversationsDir, { recursive: true });\n        }\n        catch (error) {\n            console.error('Failed to create conversations directory:', error);\n        }\n    }\n    generateConversationId() {\n        return `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    getConversationPath(id) {\n        return path_1.default.join(this.conversationsDir, `${id}.json`);\n    }\n    async generateTitle(messages) {\n        const apiKeys = (0, api_keys_1.loadApiKeys)();\n        const groqApiKey = apiKeys.groqApiKey || process.env.GROQ_API_KEY;\n        if (!groqApiKey) {\n            // Fallback to first user message if no API key\n            const firstUserMessage = messages.find(m => m.type === 'user');\n            return firstUserMessage?.content.slice(0, 50) + '...' || 'Untitled Conversation';\n        }\n        try {\n            // Get first few meaningful messages for context\n            const contextMessages = messages\n                .filter(m => m.type === 'user' || m.type === 'assistant')\n                .slice(0, 6)\n                .map(m => `${m.type}: ${m.content}`)\n                .join('\\n');\n            const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${groqApiKey}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    model: 'llama-3.3-70b-versatile',\n                    messages: [\n                        {\n                            role: 'system',\n                            content: 'Generate a concise 3-6 word title for this coding conversation. Focus on the main task/topic. Examples: \"React Component Bug Fix\", \"Database Schema Design\", \"API Integration Setup\".'\n                        },\n                        {\n                            role: 'user',\n                            content: `Conversation:\\n${contextMessages}\\n\\nTitle:`\n                        }\n                    ],\n                    max_tokens: 20,\n                    temperature: 0.1\n                })\n            });\n            if (response.ok) {\n                const data = await response.json();\n                const title = data.choices?.[0]?.message?.content?.trim();\n                if (title && title.length > 0) {\n                    return title.replace(/['\"]/g, ''); // Remove quotes if any\n                }\n            }\n        }\n        catch (error) {\n            console.error('Failed to generate title:', error);\n        }\n        // Fallback to first user message\n        const firstUserMessage = messages.find(m => m.type === 'user');\n        return firstUserMessage?.content.slice(0, 50) + '...' || 'Untitled Conversation';\n    }\n    async saveConversation(messages, model, existingId) {\n        await this.ensureConversationsDir();\n        const id = existingId || this.generateConversationId();\n        const now = new Date();\n        // Generate title if this is a new conversation or if it doesn't have many messages yet\n        let title = 'New Conversation';\n        if (messages.length >= 2) {\n            title = await this.generateTitle(messages);\n        }\n        const conversation = {\n            id,\n            title,\n            messages,\n            createdAt: existingId ? (await this.loadConversation(id))?.createdAt || now : now,\n            updatedAt: now,\n            model,\n            messageCount: messages.filter(m => m.type === 'user' || m.type === 'assistant').length\n        };\n        const filePath = this.getConversationPath(id);\n        await promises_1.default.writeFile(filePath, JSON.stringify(conversation, null, 2));\n        return id;\n    }\n    async loadConversation(id) {\n        try {\n            const filePath = this.getConversationPath(id);\n            const data = await promises_1.default.readFile(filePath, 'utf-8');\n            const conversation = JSON.parse(data);\n            // Convert date strings back to Date objects\n            conversation.createdAt = new Date(conversation.createdAt);\n            conversation.updatedAt = new Date(conversation.updatedAt);\n            conversation.messages = conversation.messages.map((msg) => ({\n                ...msg,\n                timestamp: new Date(msg.timestamp)\n            }));\n            return conversation;\n        }\n        catch (error) {\n            console.error(`Failed to load conversation ${id}:`, error);\n            return null;\n        }\n    }\n    async listConversations() {\n        await this.ensureConversationsDir();\n        try {\n            const files = await promises_1.default.readdir(this.conversationsDir);\n            const jsonFiles = files.filter(f => f.endsWith('.json'));\n            const summaries = [];\n            for (const file of jsonFiles) {\n                try {\n                    const id = file.replace('.json', '');\n                    const conversation = await this.loadConversation(id);\n                    if (conversation) {\n                        const firstUserMessage = conversation.messages.find(m => m.type === 'user');\n                        const preview = firstUserMessage?.content.slice(0, 100) + '...' || 'No messages';\n                        summaries.push({\n                            id: conversation.id,\n                            title: conversation.title,\n                            createdAt: conversation.createdAt,\n                            updatedAt: conversation.updatedAt,\n                            model: conversation.model,\n                            messageCount: conversation.messageCount,\n                            preview\n                        });\n                    }\n                }\n                catch (error) {\n                    console.error(`Failed to process conversation file ${file}:`, error);\n                }\n            }\n            // Sort by most recently updated first\n            return summaries.sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());\n        }\n        catch (error) {\n            console.error('Failed to list conversations:', error);\n            return [];\n        }\n    }\n    async deleteConversation(id) {\n        try {\n            const filePath = this.getConversationPath(id);\n            await promises_1.default.unlink(filePath);\n            return true;\n        }\n        catch (error) {\n            console.error(`Failed to delete conversation ${id}:`, error);\n            return false;\n        }\n    }\n    async searchConversations(query) {\n        const allConversations = await this.listConversations();\n        if (!query.trim()) {\n            return allConversations;\n        }\n        const lowerQuery = query.toLowerCase();\n        return allConversations.filter(conv => conv.title.toLowerCase().includes(lowerQuery) ||\n            conv.preview.toLowerCase().includes(lowerQuery));\n    }\n}\nexports.ConversationManager = ConversationManager;\n//# sourceMappingURL=conversation-manager.js.map",
      "filePath": "../dist/utils/conversation-manager.js",
      "embedding": [
        6.4,
        0.1,
        0.1,
        0.5,
        0.3,
        0.003449975725884036,
        0.04774587410619029,
        0.03622127987173849,
        0.047524027487462095,
        0.07406738514773485,
        0.08734884390888137,
        0.01599600664106379,
        0.030704709606115745,
        0.048247076473945306,
        0.05762797177860405,
        0.039913148347325705,
        0.08544491748748353,
        0.01020310700673579,
        0.09002034844893887,
        0.09383617696968051,
        0.05101525284455192,
        0.048916960489282506,
        0.008447765280163234,
        0.026421894655781722,
        0.06872477503144792,
        0.010233783279196208,
        0.0287563799065801,
        0.03127725141803085,
        0.061669916116062595,
        0.08230607656193595,
        0.08695427858940519,
        0.06256448831482146,
        0.028221419013987795,
        0.029292674498032346,
        0.019800665250407846,
        0.022697284926738018,
        0.02247644891619619,
        0.05138654113332004,
        0.016653675615998065,
        0.07018151406754536,
        0.06326505211129771,
        0.032560220408397636,
        0.03861255748349893,
        0.03447620460071895,
        0.08494770396141425,
        0.08363956618909937,
        0.07473499403477145,
        0.05416983235061004,
        0.010957529114207998,
        0.08730093584678991,
        0.005457887730184164,
        0.02783238393116775,
        0.07195447620704991,
        0.09053930159198516,
        0.0011768265134056378,
        0.08441440150441548,
        0.02407989384346273,
        0.009812450252491523,
        0.007085814634319832,
        0.06752378530237256,
        0.08429511083310974,
        0.06314291780339373,
        0.06577269872905431,
        0.08051357007803354,
        0.06086735714627648,
        0.00042262472480424367,
        0.03552329243215815,
        0.09785890138601983,
        0.09085018974283254,
        0.05863729138143008,
        0.020548382871075733,
        0.015528530128092544,
        0.09147903888768652,
        0.03003699188304353,
        0.04850822514357716,
        0.0880368807157676,
        0.01597395788803623,
        0.04329977814995609,
        0.06003565637157963,
        0.06711475088817441,
        0.017670120269205915,
        0.04432786663945626,
        0.022788076385169467,
        0.07420014100484404,
        0.05616898575954309,
        0.037081783117325594,
        0.06192827595773083,
        0.0889046208926303,
        0.0720665308378357,
        0.07702010417392925,
        0.09810532957491286,
        0.038028208880791475,
        0.06920627557395757,
        0.09253832383923177,
        0.0858917418017441,
        0.08320034611858704,
        0.0027350310287654446,
        0.021156250212311448,
        0.07751096446392486,
        0.08305043153795175
      ]
    },
    {
      "content": "export declare function loadCustomInstructions(workingDirectory?: string): string | null;\n",
      "filePath": "../dist/utils/custom-instructions.d.ts",
      "embedding": [
        0.09,
        0.1,
        0,
        0,
        0.1,
        0.08061002328375318,
        0.06182039401136,
        0.06714874487237908,
        0.004365721276736046,
        0.051409472679439475,
        0.012772627548161398,
        0.08418537334287024,
        0.047614593384522244,
        0.011087068264413726,
        0.09010842457281679,
        0.02339900439433843,
        0.09153130311063525,
        0.07719501350836648,
        0.013022447312142693,
        0.094681669336936,
        0.043799086058552074,
        0.055550146683462955,
        0.09488972485994682,
        0.09135707118553958,
        0.09073804558705906,
        0.07800504891869459,
        0.0484117785505568,
        0.05684365247636215,
        0.0518708518997835,
        0.041361325824549745,
        0.09623948463548587,
        0.053159762531057454,
        0.03611763875223584,
        0.07110680799962846,
        0.04227119117425432,
        0.06796396336338129,
        0.04221381758604427,
        0.055033961546460654,
        0.040815455119912185,
        0.040411549989165144,
        0.036432711142016086,
        0.07123451886814941,
        0.0034255729923230007,
        0.08494654185750887,
        0.05456977309674707,
        0.01358925625931693,
        0.007644971968218484,
        0.027094119229799554,
        0.010645655428882917,
        0.055980549069429376,
        0.03786648460658381,
        0.04934002840605606,
        0.00007122897404180373,
        0.07543074784255262,
        0.07961139730080474,
        0.02375012888088318,
        0.005687629876371159,
        0.09686059680334808,
        0.08028888948968144,
        0.043227640764433965,
        0.05261234220012981,
        0.06929959475273115,
        0.08078052965363497,
        0.03760980516157461,
        0.06838262088218597,
        0.07319620196530063,
        0.009907639641455225,
        0.09177865128887211,
        0.08709423753306371,
        0.062246878973404064,
        0.05997272544401561,
        0.044938605550727054,
        0.0203417166423831,
        0.08985929047119014,
        0.05736592117504478,
        0.06354697505939239,
        0.014903692009130099,
        0.06728850793062816,
        0.014175363545070175,
        0.09716326523183333,
        0.004984972636066476,
        0.004780256387796944,
        0.04868432862567206,
        0.09311112904697183,
        0.03755575357214226,
        0.09445971844991093,
        0.017220076819744634,
        0.06193123177207121,
        0.0929254695536444,
        0.0551376938033757,
        0.013619294860303567,
        0.0036300975221491786,
        0.03322636478581059,
        0.030395735128734915,
        0.0858759613257882,
        0.01402070177198167,
        0.08060039535140118,
        0.044464964996976754,
        0.005157538629758507,
        0.05914426946700642
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadCustomInstructions = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst prompts_1 = require(\"./prompts\");\nfunction loadCustomInstructions(workingDirectory = process.cwd()) {\n    try {\n        const instructionsPath = path.join(workingDirectory, '.giga', 'GIGA.md');\n        let customInstructions = '';\n        // Load global custom prompts first\n        const globalPrompts = (0, prompts_1.getPromptsAsSystemPrompt)();\n        if (globalPrompts) {\n            customInstructions += globalPrompts;\n        }\n        // Then load project-specific GIGA.md if it exists\n        if (fs.existsSync(instructionsPath)) {\n            const projectInstructions = fs.readFileSync(instructionsPath, 'utf-8');\n            if (projectInstructions.trim()) {\n                if (customInstructions) {\n                    customInstructions += '\\n\\n' + projectInstructions.trim();\n                }\n                else {\n                    customInstructions = projectInstructions.trim();\n                }\n            }\n        }\n        return customInstructions || null;\n    }\n    catch (error) {\n        console.warn('Failed to load custom instructions:', error);\n        return null;\n    }\n}\nexports.loadCustomInstructions = loadCustomInstructions;\n//# sourceMappingURL=custom-instructions.js.map",
      "filePath": "../dist/utils/custom-instructions.js",
      "embedding": [
        2.64,
        0.7,
        0,
        0.4,
        0.3,
        0.09262937863770257,
        0.05723678957725863,
        0.04999154807836475,
        0.07295244148675682,
        0.014284990805350518,
        0.08612612793949864,
        0.071894994420148,
        0.04800627373985135,
        0.04586317201628612,
        0.0001832015793415409,
        0.055137025947317425,
        0.06012537575826065,
        0.0005353103194506214,
        0.09871497619906405,
        0.07607003745328479,
        0.094935569772585,
        0.034768622028847895,
        0.024497766268815325,
        0.007833259726343146,
        0.07739910989168046,
        0.0013163425710627898,
        0.08095039177009,
        0.013169883835222452,
        0.09096537857908554,
        0.00799741582329352,
        0.08412516321878322,
        0.03504760985338712,
        0.0884686878238603,
        0.0671574480915354,
        0.08529111835211953,
        0.028351524152163844,
        0.06750396778865618,
        0.0489045572193328,
        0.014112472062270077,
        0.0062756810807178326,
        0.022058892822125732,
        0.09981897882555096,
        0.00998822294065732,
        0.022109936108103512,
        0.09087139291717876,
        0.036995190828655336,
        0.06563313147369025,
        0.08584152671703438,
        0.0731258128289114,
        0.0580518001891068,
        0.05403142748354437,
        0.096918259878757,
        0.07234153503083436,
        0.06503116969671878,
        0.08286409133191644,
        0.05021165547979126,
        0.06479718616650125,
        0.0008479017415899848,
        0.07686648830090131,
        0.047657665466994605,
        0.026654827361024903,
        0.026287561537108296,
        0.09451585963883764,
        0.06039366909062106,
        0.08418693230105087,
        0.07049590318478094,
        0.025654055285868872,
        0.015272925179610942,
        0.07402787037266521,
        0.051419390422574374,
        0.07137876193046938,
        0.027106123440286026,
        0.014085922754325698,
        0.010363334227550793,
        0.03553575745032078,
        0.0055235780013038974,
        0.07550779085572334,
        0.05181217546576181,
        0.03971518428387893,
        0.06845263606909444,
        0.05427215399559574,
        0.06068871908613976,
        0.08456318125979762,
        0.0157145073224794,
        0.06252022163476155,
        0.015277060082795724,
        0.07889793286676001,
        0.07077913711851963,
        0.04914076333071078,
        0.027909357080350916,
        0.04199628016158026,
        0.027298264627851444,
        0.035099058958085814,
        0.09992914069029407,
        0.01702283088221537,
        0.011346003846534381,
        0.0748011891675651,
        0.03362052386652897,
        0.022323570413882957,
        0.037259139881351
      ]
    },
    {
      "content": "import { ProviderName } from './provider-models';\nexport interface ModelInfo {\n    id: string;\n    name?: string;\n    description?: string;\n    provider?: string;\n}\nexport interface ModelFetchResult {\n    success: boolean;\n    models: string[];\n    error?: string;\n}\nexport declare function fetchProviderModels(provider: ProviderName, apiKey: string): Promise<ModelFetchResult>;\nexport declare function fetchModelsWithFallback(provider: ProviderName, apiKey: string): Promise<string[]>;\n",
      "filePath": "../dist/utils/dynamic-model-fetcher.d.ts",
      "embedding": [
        0.47,
        0.2,
        0,
        0.1,
        0.4,
        0.0852520315196966,
        0.01038143186873607,
        0.054480520441834206,
        0.04910552410261363,
        0.05720592014250982,
        0.09515060318265323,
        0.07843883825298933,
        0.07824935852716597,
        0.01483155027817773,
        0.09712007651923142,
        0.03707461970367067,
        0.005843575705570725,
        0.07020234929722989,
        0.07860547846518595,
        0.06339487846842638,
        0.08121097854287705,
        0.016893080183058774,
        0.023794506126594728,
        0.038187390103948504,
        0.03350976746939107,
        0.0389692943442201,
        0.0971467710435009,
        0.08316147697988197,
        0.04013097635079641,
        0.08237431499729125,
        0.01727749818933936,
        0.07078727837314745,
        0.035637721522306647,
        0.03167729075446423,
        0.05002052235340167,
        0.03293631697383275,
        0.07386026872721697,
        0.04988462435724335,
        0.09271047338692066,
        0.0010048099066047866,
        0.08495295302683199,
        0.0828331477892125,
        0.025385156904508502,
        0.07113511724941522,
        0.05539032794396764,
        0.06291001564153355,
        0.03187287437468558,
        0.0796447304759581,
        0.09809047437285248,
        0.061960693373474145,
        0.03113144832611935,
        0.007487294172180747,
        0.089616521911315,
        0.09159958494110884,
        0.08332158151752601,
        0.04834397160188833,
        0.06523888155601758,
        0.09958427111553375,
        0.04063467019787125,
        0.028520832952012368,
        0.05137965244012153,
        0.022436105641212456,
        0.011753209165427292,
        0.01570804190402202,
        0.07492364095180006,
        0.040625953673461716,
        0.05424545244664902,
        0.04321923910075261,
        0.0393584549768793,
        0.02596704103563896,
        0.029137532980477956,
        0.03651047151539936,
        0.006768691851897013,
        0.049896969813598584,
        0.06393724443665476,
        0.022157381691967317,
        0.024809690033712153,
        0.08310806510016668,
        0.07473113902568489,
        0.026691963516818396,
        0.08422981708930807,
        0.01629488143431156,
        0.05464395833929584,
        0.029119061346741595,
        0.016597627619383305,
        0.06378482299554232,
        0.02469778908686887,
        0.04585114610722133,
        0.019181388395807256,
        0.0247457442402804,
        0.09031777276928281,
        0.0916553997807322,
        0.007881571060111591,
        0.06919697894092958,
        0.06385433704097923,
        0.0014447458964523376,
        0.0701256880188356,
        0.013924438672730645,
        0.08664732342320997,
        0.0868083253645629
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchModelsWithFallback = exports.fetchProviderModels = void 0;\nconst provider_models_1 = require(\"./provider-models\");\nconst ollama_models_1 = require(\"./ollama-models\");\n// Fetch models from OpenRouter API\nasync function fetchOpenRouterModels(apiKey) {\n    try {\n        const response = await fetch('https://openrouter.ai/api/v1/models', {\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n            },\n            signal: AbortSignal.timeout(10000),\n        });\n        if (!response.ok) {\n            return { success: false, models: [], error: `HTTP ${response.status}` };\n        }\n        const data = await response.json();\n        const models = data.data || data;\n        const modelIds = Array.isArray(models)\n            ? models.map((model) => model.id).filter(Boolean)\n            : [];\n        return { success: true, models: modelIds };\n    }\n    catch (error) {\n        return { success: false, models: [], error: error.message };\n    }\n}\n// Fetch models from Google AI API\nasync function fetchGoogleModels(apiKey) {\n    try {\n        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`, {\n            signal: AbortSignal.timeout(10000),\n        });\n        if (!response.ok) {\n            return { success: false, models: [], error: `HTTP ${response.status}` };\n        }\n        const data = await response.json();\n        const models = data.models || [];\n        const modelIds = models\n            .map((model) => model.name?.replace('models/', '') || model.id)\n            .filter(Boolean);\n        return { success: true, models: modelIds };\n    }\n    catch (error) {\n        return { success: false, models: [], error: error.message };\n    }\n}\n// Fetch models from xAI API\nasync function fetchXaiModels(apiKey) {\n    try {\n        const response = await fetch('https://api.x.ai/v1/models', {\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n            },\n            signal: AbortSignal.timeout(10000),\n        });\n        if (!response.ok) {\n            return { success: false, models: [], error: `HTTP ${response.status}` };\n        }\n        const data = await response.json();\n        const models = data.data || data;\n        const modelIds = Array.isArray(models)\n            ? models.map((model) => model.id).filter(Boolean)\n            : [];\n        return { success: true, models: modelIds };\n    }\n    catch (error) {\n        return { success: false, models: [], error: error.message };\n    }\n}\n// Fetch models from Groq API\nasync function fetchGroqModels(apiKey) {\n    try {\n        const response = await fetch('https://api.groq.com/openai/v1/models', {\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n            },\n            signal: AbortSignal.timeout(10000),\n        });\n        if (!response.ok) {\n            return { success: false, models: [], error: `HTTP ${response.status}` };\n        }\n        const data = await response.json();\n        const models = data.data || [];\n        const modelIds = models.map((model) => model.id).filter(Boolean);\n        return { success: true, models: modelIds };\n    }\n    catch (error) {\n        return { success: false, models: [], error: error.message };\n    }\n}\n// Fetch models from Cerebras API\nasync function fetchCerebrasModels(apiKey) {\n    try {\n        const response = await fetch('https://api.cerebras.ai/v1/models', {\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n            },\n            signal: AbortSignal.timeout(10000),\n        });\n        if (!response.ok) {\n            return { success: false, models: [], error: `HTTP ${response.status}` };\n        }\n        const data = await response.json();\n        const models = data.data || [];\n        const modelIds = models.map((model) => model.id).filter(Boolean);\n        return { success: true, models: modelIds };\n    }\n    catch (error) {\n        return { success: false, models: [], error: error.message };\n    }\n}\n// Fetch models from Perplexity API\nasync function fetchPerplexityModels(apiKey) {\n    try {\n        const response = await fetch('https://api.perplexity.ai/models', {\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n            },\n            signal: AbortSignal.timeout(10000),\n        });\n        if (!response.ok) {\n            return { success: false, models: [], error: `HTTP ${response.status}` };\n        }\n        const data = await response.json();\n        const models = Array.isArray(data) ? data : data.data || [];\n        const modelIds = models.map((model) => model.id || model.name).filter(Boolean);\n        return { success: true, models: modelIds };\n    }\n    catch (error) {\n        return { success: false, models: [], error: error.message };\n    }\n}\n// Fetch models from OpenAI API\nasync function fetchOpenaiModels(apiKey) {\n    try {\n        const response = await fetch('https://api.openai.com/v1/models', {\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n            },\n            signal: AbortSignal.timeout(10000),\n        });\n        if (!response.ok) {\n            return { success: false, models: [], error: `HTTP ${response.status}` };\n        }\n        const data = await response.json();\n        const models = data.data || [];\n        const modelIds = models.map((model) => model.id).filter(Boolean);\n        return { success: true, models: modelIds };\n    }\n    catch (error) {\n        return { success: false, models: [], error: error.message };\n    }\n}\n// Fetch models from Ollama API\nasync function fetchOllamaModelsFromApi(baseUrl) {\n    try {\n        const models = await (0, ollama_models_1.fetchOllamaModels)(baseUrl);\n        return { success: true, models };\n    }\n    catch (error) {\n        return { success: false, models: [], error: error.message };\n    }\n}\n// Main function to fetch models for a provider\nasync function fetchProviderModels(provider, apiKey) {\n    // For Ollama, apiKey is actually the base URL\n    if (provider.toLowerCase() === 'ollama') {\n        const baseUrl = apiKey || 'http://localhost:11434';\n        return await fetchOllamaModelsFromApi(baseUrl);\n    }\n    if (!apiKey || !apiKey.trim()) {\n        return { success: false, models: [], error: 'API key is required' };\n    }\n    try {\n        switch (provider.toLowerCase()) {\n            case 'openrouter':\n                return await fetchOpenRouterModels(apiKey);\n            case 'google':\n                return await fetchGoogleModels(apiKey);\n            case 'xai':\n                return await fetchXaiModels(apiKey);\n            case 'groq':\n                return await fetchGroqModels(apiKey);\n            case 'cerebras':\n                // Cerebras uses static models since API doesn't return correct model names\n                return { success: true, models: provider_models_1.PROVIDER_MODELS.cerebras };\n            case 'perplexity':\n                return await fetchPerplexityModels(apiKey);\n            case 'openai':\n                return await fetchOpenaiModels(apiKey);\n            case 'anthropic':\n                // Anthropic doesn't have a public models endpoint, use static list\n                return { success: true, models: provider_models_1.PROVIDER_MODELS.anthropic };\n            default:\n                return { success: false, models: [], error: 'Unknown provider' };\n        }\n    }\n    catch (error) {\n        return { success: false, models: [], error: error.message };\n    }\n}\nexports.fetchProviderModels = fetchProviderModels;\n// Fetch models with fallback to static list\nasync function fetchModelsWithFallback(provider, apiKey) {\n    const result = await fetchProviderModels(provider, apiKey);\n    if (result.success && result.models.length > 0) {\n        return result.models.sort();\n    }\n    // Fallback to static models\n    const staticModels = provider_models_1.PROVIDER_MODELS[provider] || [];\n    return staticModels.sort();\n}\nexports.fetchModelsWithFallback = fetchModelsWithFallback;\n//# sourceMappingURL=dynamic-model-fetcher.js.map",
      "filePath": "../dist/utils/dynamic-model-fetcher.js",
      "embedding": [
        8.45,
        1.1,
        0,
        0,
        0.5,
        0.033151273020031416,
        0.05644822243577731,
        0.013436197034392706,
        0.047017595671292926,
        0.05176106536436357,
        0.09796683816614433,
        0.07878473661727396,
        0.08080496777104079,
        0.0720159023622489,
        0.017336718499781058,
        0.05100931034696852,
        0.020191795996662855,
        0.05999237488455396,
        0.026400290880993927,
        0.09249171273660933,
        0.04611031829124643,
        0.028303919114211595,
        0.07086187056694099,
        0.08803323638862832,
        0.022576074953782544,
        0.09951825320352364,
        0.06335236305053932,
        0.04698864392130884,
        0.09693781297203821,
        0.08233769324938624,
        0.06463047934627235,
        0.027875258814401727,
        0.07066818879702967,
        0.07728785529878432,
        0.025568964345185942,
        0.04621891914830178,
        0.09256454537715353,
        0.09245434357066233,
        0.006709862568204572,
        0.08120380874648023,
        0.00007150018981197937,
        0.08541598419637786,
        0.0034040548930415085,
        0.048337729723821936,
        0.0900208423605891,
        0.037286874779703626,
        0.01894029505730658,
        0.0009115574706013985,
        0.05546537338887252,
        0.03858262214005964,
        0.0867476367003869,
        0.07880162547451097,
        0.0672732559763461,
        0.05418713014723597,
        0.08545460683593845,
        0.07811326494046611,
        0.02238706520080327,
        0.03361737321699634,
        0.06666843620678914,
        0.09832277330861436,
        0.062353060324784805,
        0.06344080894555203,
        0.03362354542563969,
        0.032612963347917114,
        0.04377514671046315,
        0.07175225712178356,
        0.048880681144856386,
        0.07888743893676563,
        0.09249864034835553,
        0.08193125671352985,
        0.041448144215784646,
        0.003700681908976766,
        0.04061179182414949,
        0.046044994677893684,
        0.035639051029867884,
        0.010041954713491697,
        0.0841983983768064,
        0.09277852940038696,
        0.010439766976701082,
        0.04687586497647267,
        0.05073785648471716,
        0.05478593658842845,
        0.07381504407756462,
        0.05739271204712731,
        0.04488404230154239,
        0.03541336928668,
        0.09168933345756931,
        0.06601466056563576,
        0.007844690528124022,
        0.06233921216275509,
        0.08606367520138579,
        0.08509615185260773,
        0.06571392629710444,
        0.07791368619498502,
        0.04441701318043102,
        0.022006446802492398,
        0.028973949132976774,
        0.037188949310510415,
        0.008841121370355687,
        0.08696052539315796
      ]
    },
    {
      "content": "export interface ExpertModelsConfig {\n    enabled: boolean;\n    fastModel: string | null;\n    codeModel: string | null;\n    reasoningModel: string | null;\n    toolsModel: string | null;\n}\ndeclare class ExpertModelsManager {\n    private static instance;\n    private constructor();\n    static getInstance(): ExpertModelsManager;\n    private getGigaDir;\n    private getConfigPath;\n    getExpertModelsConfig(): ExpertModelsConfig;\n    setExpertModelsConfig(expertModels: ExpertModelsConfig): void;\n    migrateFromSessionConfig(sessionConfigPath: string): boolean;\n    migrateFromAllSessions(): void;\n}\nexport declare const expertModelsManager: ExpertModelsManager;\nexport {};\n",
      "filePath": "../dist/utils/expert-models-manager.d.ts",
      "embedding": [
        0.58,
        0,
        0.1,
        0,
        0.3,
        0.08601610753968114,
        0.0773712011396213,
        0.0852831691709703,
        0.04396619111347545,
        0.09676895576491701,
        0.08920389876798751,
        0.043040913240367684,
        0.04333175293254558,
        0.024200680722156555,
        0.014459865825039386,
        0.07136125505963391,
        0.07131785068318838,
        0.012642718869047298,
        0.09932405243345965,
        0.031825131893866924,
        0.08516789028546916,
        0.0018382377827459884,
        0.056677070988479406,
        0.004862017641655048,
        0.0481626856224628,
        0.038826693052572615,
        0.013846078299085896,
        0.0006933958184282996,
        0.045524720393452615,
        0.006542723157795905,
        0.06391985153722143,
        0.04802667842883426,
        0.07411901228743885,
        0.0400659755741128,
        0.06015886371876215,
        0.013297735089626929,
        0.09998940564440328,
        0.053015510472246244,
        0.07014274354181942,
        0.027263515530638906,
        0.030799981602965845,
        0.03191423838164605,
        0.02710942449268914,
        0.0655787074568459,
        0.07673884811595497,
        0.06610482682744935,
        0.05214015134611182,
        0.04420365530126914,
        0.041244359210806464,
        0.04123091032701264,
        0.08382807776822601,
        0.04144366779589557,
        0.09519071947751936,
        0.018595024486892476,
        0.04777247488493304,
        0.013449209542975083,
        0.06380214670048921,
        0.004226655322957185,
        0.030098699244544426,
        0.07260624161055693,
        0.05246059236208864,
        0.038804118184838136,
        0.04259048141872473,
        0.06858042039937819,
        0.0058006858571706295,
        0.02299489507366508,
        0.0005690480321524527,
        0.04828354419187664,
        0.00139445632195776,
        0.09401025216220049,
        0.041008813481426966,
        0.051436091772554086,
        0.09759035196657684,
        0.0733844608834208,
        0.028665471608832573,
        0.08316269099503912,
        0.0363211245036973,
        0.08865904113794941,
        0.07879353127109462,
        0.019584418318261243,
        0.07336868181968276,
        0.03597821993368301,
        0.0376675788149281,
        0.06569216942214644,
        0.028679221922815523,
        0.09984569693290457,
        0.03299661737567429,
        0.013850456876222272,
        0.033882309575079074,
        0.008055059674161225,
        0.04740742722045033,
        0.05470827677339936,
        0.03730337220152535,
        0.06464140964848457,
        0.026257964653690548,
        0.09982943655109339,
        0.032810341535986935,
        0.09527858940550504,
        0.0472939234702671,
        0.008076043349819395
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.expertModelsManager = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst os = __importStar(require(\"os\"));\nclass ExpertModelsManager {\n    constructor() { }\n    static getInstance() {\n        if (!ExpertModelsManager.instance) {\n            ExpertModelsManager.instance = new ExpertModelsManager();\n        }\n        return ExpertModelsManager.instance;\n    }\n    getGigaDir() {\n        const homeDir = os.homedir();\n        const gigaDir = path.join(homeDir, '.giga');\n        if (!fs.existsSync(gigaDir)) {\n            fs.mkdirSync(gigaDir, { mode: 0o700 });\n        }\n        return gigaDir;\n    }\n    getConfigPath() {\n        const gigaDir = this.getGigaDir();\n        return path.join(gigaDir, 'expert-models.json');\n    }\n    getExpertModelsConfig() {\n        try {\n            const configPath = this.getConfigPath();\n            if (!fs.existsSync(configPath)) {\n                return {\n                    enabled: false,\n                    fastModel: null,\n                    codeModel: null,\n                    reasoningModel: null,\n                    toolsModel: null,\n                };\n            }\n            const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n            // Validate config structure\n            if (typeof config.enabled !== 'boolean') {\n                config.enabled = false;\n            }\n            return config;\n        }\n        catch (error) {\n            console.error('Error loading expert models config:', error);\n            return {\n                enabled: false,\n                fastModel: null,\n                codeModel: null,\n                reasoningModel: null,\n                toolsModel: null,\n            };\n        }\n    }\n    setExpertModelsConfig(expertModels) {\n        try {\n            const configPath = this.getConfigPath();\n            fs.writeFileSync(configPath, JSON.stringify(expertModels, null, 2), { mode: 0o600 });\n        }\n        catch (error) {\n            console.error('Error saving expert models config:', error);\n        }\n    }\n    migrateFromSessionConfig(sessionConfigPath) {\n        try {\n            if (!fs.existsSync(sessionConfigPath)) {\n                return false;\n            }\n            const sessionConfig = JSON.parse(fs.readFileSync(sessionConfigPath, 'utf8'));\n            if (sessionConfig.expertModels) {\n                // Check if global config already exists\n                const globalConfigPath = this.getConfigPath();\n                if (!fs.existsSync(globalConfigPath)) {\n                    console.log('Migrating expert models config from session to global storage...');\n                    this.setExpertModelsConfig(sessionConfig.expertModels);\n                    return true;\n                }\n            }\n            return false;\n        }\n        catch (error) {\n            console.error('Error migrating expert models config:', error);\n            return false;\n        }\n    }\n    migrateFromAllSessions() {\n        try {\n            const homeDir = os.homedir();\n            const sessionsDir = path.join(homeDir, '.giga', 'sessions');\n            if (!fs.existsSync(sessionsDir)) {\n                return;\n            }\n            // Check if global config already exists\n            if (fs.existsSync(this.getConfigPath())) {\n                return; // Don't overwrite existing global config\n            }\n            const sessionDirs = fs.readdirSync(sessionsDir);\n            let latestConfig = null;\n            let latestTimestamp = 0;\n            // Find the most recently used session with expert models config\n            for (const sessionDir of sessionDirs) {\n                const configPath = path.join(sessionsDir, sessionDir, 'config.json');\n                if (fs.existsSync(configPath)) {\n                    try {\n                        const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n                        if (config.expertModels && config.lastUsed) {\n                            const timestamp = new Date(config.lastUsed).getTime();\n                            if (timestamp > latestTimestamp) {\n                                latestTimestamp = timestamp;\n                                latestConfig = config.expertModels;\n                            }\n                        }\n                    }\n                    catch (error) {\n                        // Skip invalid config files\n                        continue;\n                    }\n                }\n            }\n            // If we found a config, migrate it\n            if (latestConfig) {\n                console.log('Migrating expert models config from most recent session to global storage...');\n                this.setExpertModelsConfig(latestConfig);\n            }\n        }\n        catch (error) {\n            console.error('Error migrating expert models from sessions:', error);\n        }\n    }\n}\n// Export singleton instance\nexports.expertModelsManager = ExpertModelsManager.getInstance();\n//# sourceMappingURL=expert-models-manager.js.map",
      "filePath": "../dist/utils/expert-models-manager.js",
      "embedding": [
        5.49,
        0.6,
        0.1,
        0.5,
        0.3,
        0.049268330057103384,
        0.04593339111199021,
        0.05181670855091252,
        0.08351880484240995,
        0.07759758940920347,
        0.02136669335201351,
        0.006820486550188765,
        0.02482795828408112,
        0.004935361554266227,
        0.07234618114778396,
        0.044147584055177616,
        0.018880247715693632,
        0.0603340012555303,
        0.08627368765830967,
        0.012191967368957913,
        0.00854788823269388,
        0.03521380801438228,
        0.0972551907989836,
        0.012653213866117308,
        0.09074862230557436,
        0.028312259926986105,
        0.03546941256624234,
        0.01193945464459576,
        0.087949569778559,
        0.011473380164769831,
        0.08434058630675514,
        0.08487148377812932,
        0.05438904192132135,
        0.003285757920903987,
        0.06008045797264581,
        0.013384326728699892,
        0.018268115319680835,
        0.09099619260322939,
        0.037297470555555594,
        0.08672801747712809,
        0.05475895466875289,
        0.04387401502929842,
        0.04538908639476448,
        0.08489090042156473,
        0.0394924614799903,
        0.0702570445632148,
        0.0658169805421183,
        0.09286416722989156,
        0.047813456560270806,
        0.07712229207858644,
        0.0038608278576701127,
        0.02815039775380629,
        0.06770031362005777,
        0.08920416837138159,
        0.04975030675135701,
        0.015988644395583108,
        0.09075613915480833,
        0.05506772158022308,
        0.06407369080329209,
        0.031874471595653896,
        0.08788486818709025,
        0.04436347191061274,
        0.05613672877002304,
        0.00041313167476988435,
        0.08698615208632123,
        0.09217287545753039,
        0.006553377472957378,
        0.060248427141901206,
        0.0005835955737955812,
        0.05034010538887959,
        0.03921168920370952,
        0.0031347623431815744,
        0.04824019778045855,
        0.09424437890903713,
        0.07594452241137944,
        0.07523128929305317,
        0.06881839869606762,
        0.009314982937179818,
        0.0004008847730027965,
        0.09208291756902802,
        0.022175011899006204,
        0.0716207550909311,
        0.06030912501619998,
        0.07001875182654331,
        0.0010687014042984444,
        0.028967487610389045,
        0.03817939949970513,
        0.008038333012055454,
        0.026907386714353877,
        0.06919772482129215,
        0.07085929217888629,
        0.07586614817638715,
        0.016994170696224966,
        0.02313283470262935,
        0.0016060481149192118,
        0.09032709412713563,
        0.06920845890641415,
        0.06100474345667922,
        0.055453236445764865,
        0.06897027051483587
      ]
    },
    {
      "content": "export interface FileInfo {\n    name: string;\n    relativePath: string;\n    isDirectory: boolean;\n}\n/**\n * Get all files in the current directory and subdirectories\n */\nexport declare function getAllFiles(rootDir?: string, maxDepth?: number): FileInfo[];\n/**\n * Extract file search query from input text after @ symbol\n * Only returns a result if @ is the last \"word\" (no spaces after @)\n */\nexport declare function extractFileQuery(input: string): {\n    beforeAt: string;\n    query: string;\n    afterAt: string;\n    isDirectory: boolean;\n} | null;\n/**\n * Filter files to get only files or only directories based on query\n */\nexport declare function getFilteredItems(files: FileInfo[], query: string, isDirectory: boolean): string[];\n/**\n * Replace the file query in input with the selected file path\n */\nexport declare function replaceFileQuery(input: string, selectedFile: string): string;\n",
      "filePath": "../dist/utils/file-finder.d.ts",
      "embedding": [
        1.24,
        0.4,
        0,
        0,
        0.5,
        0.06955688667755844,
        0.018750812974780706,
        0.06787572129743191,
        0.08630142515418018,
        0.09295385614305848,
        0.04036084815348291,
        0.0416133627359394,
        0.07322984592223558,
        0.09571885042722968,
        0.024530809404861575,
        0.07029857003080317,
        0.05825936906599521,
        0.04321494831747416,
        0.02509009211269375,
        0.06985378993143007,
        0.06079805387645241,
        0.028937225201597763,
        0.035417062561161415,
        0.006385624450612393,
        0.01593658189487476,
        0.04443354947347024,
        0.05148359363660068,
        0.009865318760169762,
        0.04883881693427904,
        0.028138746894436285,
        0.05386551306207002,
        0.02943846633150207,
        0.09895748197689141,
        0.012161441574114208,
        0.007417725797120012,
        0.017303122653646665,
        0.06031292252304448,
        0.09949303011507074,
        0.05659909193374829,
        0.05759562240690283,
        0.034872309622177,
        0.03149168019484808,
        0.07309474585432704,
        0.06267384644318608,
        0.09812078328665427,
        0.06616158420766509,
        0.08283845812527646,
        0.06777351874890758,
        0.06273587760727536,
        0.076154050972911,
        0.07730692213102117,
        0.08124280911447881,
        0.025920382527646835,
        0.047831427670266304,
        0.035744337907925465,
        0.047501484696322975,
        0.03577013581702572,
        0.0859631656712755,
        0.03168048665845428,
        0.09188063620757422,
        0.0777242241816557,
        0.09708659449916104,
        0.0807267420392234,
        0.0914583547043597,
        0.004620077430618941,
        0.06812483442914719,
        0.09592622891795953,
        0.02574362876240016,
        0.009151502097793673,
        0.04655143179134487,
        0.04315338201109081,
        0.04951957946611296,
        0.09115288229183803,
        0.04476866596506355,
        0.07277106202838547,
        0.04564823787892089,
        0.06480193638486094,
        0.06581487028244759,
        0.04201175449782259,
        0.046526404699277685,
        0.04856023047017941,
        0.007387588593724493,
        0.021482253400877283,
        0.09013393831722016,
        0.031658011735223514,
        0.02087014330762024,
        0.04195609162824933,
        0.058247885624649304,
        0.08122034303849188,
        0.044857599220274075,
        0.053120544309100216,
        0.08790890072186011,
        0.0656889654170687,
        0.07156339874818296,
        0.043848698556123444,
        0.0496403660813115,
        0.09690457541865383,
        0.046545445182602486,
        0.036058328461521794,
        0.00729526550462194
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.replaceFileQuery = exports.getFilteredItems = exports.extractFileQuery = exports.getAllFiles = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\n/**\n * Get all files in the current directory and subdirectories\n */\nfunction getAllFiles(rootDir = process.cwd(), maxDepth = 3) {\n    const files = [];\n    function walkDirectory(dir, currentDepth = 0) {\n        if (currentDepth > maxDepth)\n            return;\n        try {\n            const entries = fs.readdirSync(dir, { withFileTypes: true });\n            for (const entry of entries) {\n                // Skip hidden files and common ignore patterns\n                if (entry.name.startsWith('.') ||\n                    entry.name === 'node_modules' ||\n                    entry.name === 'dist' ||\n                    entry.name === 'build' ||\n                    entry.name === '.git') {\n                    continue;\n                }\n                const fullPath = path.join(dir, entry.name);\n                const relativePath = path.relative(rootDir, fullPath);\n                if (entry.isDirectory()) {\n                    files.push({\n                        name: entry.name,\n                        relativePath,\n                        isDirectory: true\n                    });\n                    walkDirectory(fullPath, currentDepth + 1);\n                }\n                else {\n                    files.push({\n                        name: entry.name,\n                        relativePath,\n                        isDirectory: false\n                    });\n                }\n            }\n        }\n        catch (error) {\n            // Ignore permission errors and continue\n        }\n    }\n    walkDirectory(rootDir);\n    return files;\n}\nexports.getAllFiles = getAllFiles;\n/**\n * Extract file search query from input text after @ symbol\n * Only returns a result if @ is the last \"word\" (no spaces after @)\n */\nfunction extractFileQuery(input) {\n    const atIndex = input.lastIndexOf('@');\n    if (atIndex === -1)\n        return null;\n    // Check if there are any spaces after the @ symbol\n    const afterAt = input.substring(atIndex + 1);\n    if (afterAt.includes(' ')) {\n        // There's a space after @, so this is not an active file query\n        return null;\n    }\n    const beforeAt = input.substring(0, atIndex);\n    const query = afterAt; // Everything after @ until end of string\n    const isDirectory = query.endsWith('/');\n    // Only show file finder if there's at least the @ symbol\n    // Allow empty query to show all files/directories\n    return { beforeAt, query, afterAt: '', isDirectory };\n}\nexports.extractFileQuery = extractFileQuery;\n/**\n * Filter files to get only files or only directories based on query\n */\nfunction getFilteredItems(files, query, isDirectory) {\n    // Remove trailing slash for directory search\n    const searchQuery = isDirectory ? query.slice(0, -1) : query;\n    if (isDirectory) {\n        // Filter for directories only\n        let results = files\n            .filter(file => file.isDirectory)\n            .map(file => file.relativePath + '/');\n        // If there's a search query, filter by it\n        if (searchQuery) {\n            results = results.filter(path => path.toLowerCase().includes(searchQuery.toLowerCase()));\n        }\n        return results.sort().slice(0, 10); // Limit results\n    }\n    else {\n        // Filter for files only\n        let results = files\n            .filter(file => !file.isDirectory)\n            .map(file => file.relativePath);\n        // If there's a search query, filter by it\n        if (query) {\n            results = results.filter(path => path.toLowerCase().includes(query.toLowerCase()));\n        }\n        return results.sort().slice(0, 10); // Limit results\n    }\n}\nexports.getFilteredItems = getFilteredItems;\n/**\n * Replace the file query in input with the selected file path\n */\nfunction replaceFileQuery(input, selectedFile) {\n    const queryInfo = extractFileQuery(input);\n    if (!queryInfo)\n        return input;\n    return queryInfo.beforeAt + selectedFile + queryInfo.afterAt;\n}\nexports.replaceFileQuery = replaceFileQuery;\n//# sourceMappingURL=file-finder.js.map",
      "filePath": "../dist/utils/file-finder.js",
      "embedding": [
        6.04,
        1.1,
        0,
        0.4,
        0.9,
        0.07474739485050837,
        0.08002963518212847,
        0.006770901518588369,
        0.03621390466579715,
        0.04888543117666391,
        0.07620330911670581,
        0.03754954180062611,
        0.0915417824603405,
        0.05956021631163967,
        0.013508097115325147,
        0.010572238359062226,
        0.03527352082473092,
        0.027584505442369213,
        0.05411695942076137,
        0.014823340340290404,
        0.009617158393379656,
        0.09554813848633303,
        0.08905509784809656,
        0.036196449947775426,
        0.055764844341457356,
        0.035646611878937716,
        0.07588875404422846,
        0.0498493898009075,
        0.04429043292644546,
        0.08605353621304244,
        0.08249273886904147,
        0.05232648302750518,
        0.05176751401098656,
        0.0945908182922706,
        0.08646479453763652,
        0.033019202760256265,
        0.08687416723614232,
        0.0499520654328968,
        0.06999462929865227,
        0.08067667494889968,
        0.04442064818291616,
        0.048499688650075326,
        0.0024761563067879026,
        0.004000585538580237,
        0.07947076294129211,
        0.06794553309383611,
        0.03329344036651374,
        0.09599399629317193,
        0.06475228095692816,
        0.03436458145800574,
        0.09866419433254045,
        0.04488055362702179,
        0.0421139108831948,
        0.07236369403170173,
        0.02345967211320942,
        0.09805844418171204,
        0.07621172685529598,
        0.07793673275028483,
        0.09773000472611419,
        0.03771931367144558,
        0.024335749677822552,
        0.0990328387948593,
        0.03589369767172378,
        0.04531395222980092,
        0.0663280668754712,
        0.0029166323473303725,
        0.020820911040724477,
        0.020731163358182137,
        0.025006809847246528,
        0.0665671929483023,
        0.02078275528498751,
        0.08716271223964692,
        0.06523137450724803,
        0.06139982812787614,
        0.05609175806323773,
        0.0004011044133917952,
        0.04501006592310686,
        0.030640569157497057,
        0.020249927724888407,
        0.028629186233631865,
        0.07853192927250369,
        0.01585640501419071,
        0.06864445573440635,
        0.09603194533743717,
        0.019182722804192767,
        0.02441474172755681,
        0.03780248683721953,
        0.04645351360916568,
        0.01025781689375095,
        0.09777937638460885,
        0.04557108379579387,
        0.04292260273800866,
        0.03953390701140809,
        0.0030379421579306955,
        0.07156872552685926,
        0.060754861471948876,
        0.02840824592981285,
        0.06679369778365604,
        0.09053931261949176,
        0.00038675431994957823
      ]
    },
    {
      "content": "interface FuzzyMatch {\n    item: any;\n    score: number;\n    matches: number[];\n}\n/**\n * Simple fuzzy matching algorithm that scores matches based on:\n * - Exact matches get highest score\n * - Sequential character matches get high score\n * - Character matches get base score\n * - Shorter strings with matches get bonus points\n */\nexport declare function fuzzyMatch(query: string, target: string): FuzzyMatch | null;\nexport declare function fuzzySearch<T>(query: string, items: T[], getText: (item: T) => string, limit?: number): T[];\nexport {};\n",
      "filePath": "../dist/utils/fuzzy-search.d.ts",
      "embedding": [
        0.81,
        0.2,
        0,
        0,
        0.3,
        0.029919727688488496,
        0.029187882266333443,
        0.08427808069988883,
        0.025781308089914457,
        0.048483609122569674,
        0.05209175028230109,
        0.013503978952466557,
        0.0002908069389209622,
        0.06363844279065128,
        0.051595773094070554,
        0.02573899510817118,
        0.07103486583374273,
        0.09100299015606492,
        0.013706177390216491,
        0.09923488987736176,
        0.0324322011093794,
        0.04398363668389932,
        0.09982242416960485,
        0.054558658819830255,
        0.07567885767726985,
        0.0671155915492929,
        0.04905456416170864,
        0.09479797058340765,
        0.08394424141722501,
        0.07519742123732637,
        0.006954527258017474,
        0.08283263469375259,
        0.008317337210281606,
        0.04460774303691609,
        0.06774910437102828,
        0.09017706185553823,
        0.0759565417583368,
        0.021055341572780963,
        0.012309311707083126,
        0.07607809196475662,
        0.020521282115296382,
        0.016372381133974,
        0.05117151288410746,
        0.0805833267683382,
        0.04044785700955045,
        0.06477370318365451,
        0.02554383889036579,
        0.040215021477583206,
        0.07918491275662805,
        0.08056620817992982,
        0.0435025265361359,
        0.011835285983035083,
        0.09960045292601778,
        0.07917344766193844,
        0.008986391282169192,
        0.019732844045618314,
        0.053435548269561685,
        0.05212354953991251,
        0.0921872961502104,
        0.01436316121058804,
        0.06604440687959538,
        0.0035832467015563642,
        0.05191390685951203,
        0.0007803147755514384,
        0.04956035594344865,
        0.04107881887064856,
        0.02900776107348442,
        0.02053899876765194,
        0.006480496295585548,
        0.046689955309163846,
        0.031499829501670365,
        0.009159257278872113,
        0.0460462355145591,
        0.028661586893912995,
        0.0021019008881765777,
        0.061038611106833396,
        0.040716516277545994,
        0.03205469429787879,
        0.09104853659540028,
        0.01747780552337903,
        0.022407674648029053,
        0.07308579306024786,
        0.021956953147561978,
        0.09614045852767239,
        0.07030456842916394,
        0.05587969771170435,
        0.02637344000169896,
        0.022395109658456272,
        0.07743811295025085,
        0.002584182934676627,
        0.02095895954545255,
        0.06882416620114394,
        0.060511900460986257,
        0.03703190628814397,
        0.023782133719503752,
        0.01218317137619136,
        0.0892620060278499,
        0.012245618036075257,
        0.0023971079836857204,
        0.04167578759572053
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fuzzySearch = exports.fuzzyMatch = void 0;\n/**\n * Simple fuzzy matching algorithm that scores matches based on:\n * - Exact matches get highest score\n * - Sequential character matches get high score\n * - Character matches get base score\n * - Shorter strings with matches get bonus points\n */\nfunction fuzzyMatch(query, target) {\n    if (!query || !target)\n        return null;\n    const lowerQuery = query.toLowerCase();\n    const lowerTarget = target.toLowerCase();\n    // Exact match gets maximum score\n    if (lowerTarget === lowerQuery) {\n        return {\n            item: target,\n            score: 1000,\n            matches: Array.from({ length: target.length }, (_, i) => i)\n        };\n    }\n    // If target starts with query, give it high score\n    if (lowerTarget.startsWith(lowerQuery)) {\n        return {\n            item: target,\n            score: 900,\n            matches: Array.from({ length: lowerQuery.length }, (_, i) => i)\n        };\n    }\n    const matches = [];\n    let queryIndex = 0;\n    let score = 0;\n    let consecutiveMatches = 0;\n    for (let i = 0; i < lowerTarget.length && queryIndex < lowerQuery.length; i++) {\n        if (lowerTarget[i] === lowerQuery[queryIndex]) {\n            matches.push(i);\n            queryIndex++;\n            consecutiveMatches++;\n            // Base score for each match\n            score += 10;\n            // Bonus for consecutive matches\n            if (consecutiveMatches > 1) {\n                score += consecutiveMatches * 5;\n            }\n            // Bonus for matches at the beginning\n            if (i === queryIndex - 1) {\n                score += 20;\n            }\n        }\n        else {\n            consecutiveMatches = 0;\n        }\n    }\n    // If we didn't match all query characters, no match\n    if (queryIndex < lowerQuery.length) {\n        return null;\n    }\n    // Bonus for shorter targets (more relevant)\n    const lengthBonus = Math.max(0, 100 - target.length);\n    score += lengthBonus;\n    return {\n        item: target,\n        score,\n        matches\n    };\n}\nexports.fuzzyMatch = fuzzyMatch;\nfunction fuzzySearch(query, items, getText, limit = 10) {\n    if (!query.trim()) {\n        return items.slice(0, limit);\n    }\n    const matches = [];\n    for (const item of items) {\n        const text = getText(item);\n        const match = fuzzyMatch(query, text);\n        if (match) {\n            matches.push({ item, score: match.score });\n        }\n    }\n    // Sort by score (descending) and return items\n    return matches\n        .sort((a, b) => b.score - a.score)\n        .slice(0, limit)\n        .map(match => match.item);\n}\nexports.fuzzySearch = fuzzySearch;\n//# sourceMappingURL=fuzzy-search.js.map",
      "filePath": "../dist/utils/fuzzy-search.js",
      "embedding": [
        3.39,
        0.2,
        0,
        0,
        0.5,
        0.03980145498465885,
        0.047613197132730295,
        0.0872970672085212,
        0.08185016471284783,
        0.030447295448474156,
        0.04864263390163864,
        0.08018163424936951,
        0.03205063211668259,
        0.038510703940385194,
        0.04077035602053261,
        0.09701574978337663,
        0.010367924465673528,
        0.08380574231780141,
        0.028549832342533145,
        0.04897256953452389,
        0.08619924676082828,
        0.02702449433776697,
        0.08011712229864427,
        0.04610457411910766,
        0.023050695662872846,
        0.08318577529590901,
        0.0975367079619899,
        0.0339674291990345,
        0.06214995609471078,
        0.06988431788222065,
        0.03832917585432714,
        0.07754126891833275,
        0.01706619929442028,
        0.07715208719962585,
        0.042124074971978176,
        0.042185351516454174,
        0.07289848004989492,
        0.004908011757791431,
        0.01706925173000893,
        0.026552407669706082,
        0.08046130713497103,
        0.06066216329522021,
        0.03722524689424777,
        0.03050398277537967,
        0.03880369002191441,
        0.06195981147986357,
        0.042477972128422706,
        0.03278830804992627,
        0.08976225678433167,
        0.02692073522196964,
        0.055368723562867594,
        0.060374144644106,
        0.09430843934068817,
        0.020190032322503184,
        0.05487413772943214,
        0.038574777407836595,
        0.05946875170466978,
        0.060049967620404335,
        0.0026951912502189757,
        0.09471686394642925,
        0.06811529821707585,
        0.00994294013029613,
        0.015391523411853259,
        0.075000095277728,
        0.06479925226964826,
        0.07470335787502057,
        0.06445508896686437,
        0.03585164854219974,
        0.045737392260525395,
        0.02526507892114739,
        0.022531462278481563,
        0.01259594379177782,
        0.057384306726400415,
        0.05595001270462389,
        0.02655758103952558,
        0.0670116591869405,
        0.02748143291870181,
        0.030184729424094427,
        0.06836376954397763,
        0.01611977568883033,
        0.06581435418829333,
        0.06594153838076065,
        0.08526732749226212,
        0.060234021055924285,
        0.06440894476128826,
        0.040127496067742574,
        0.012517093229994836,
        0.09706526691121933,
        0.0389315573436319,
        0.09259832458845885,
        0.003949171525066198,
        0.041064328609813176,
        0.054367958390035914,
        0.00759856632262489,
        0.011877101949873093,
        0.06318661779331565,
        0.009990044227277561,
        0.013295896088525473,
        0.013533533795226694,
        0.056245607851053786
      ]
    },
    {
      "content": "export interface InstanceModelPreferences {\n    instanceId: string;\n    favoriteModels: string[];\n    recentlyUsedModels: string[];\n    lastUpdated: string;\n}\nexport declare function loadInstanceModelPreferences(): InstanceModelPreferences;\nexport declare function saveInstanceModelPreferences(preferences: InstanceModelPreferences): void;\nexport declare function addModelToRecentlyUsed(modelName: string): void;\nexport declare function toggleModelFavorite(modelName: string): boolean;\nexport declare function getInstanceAvailableModels(): {\n    model: string;\n    description: string;\n    isFavorite: boolean;\n    isRecentlyUsed: boolean;\n}[];\nexport declare function onModelSelected(modelName: string): void;\n",
      "filePath": "../dist/utils/instance-models.d.ts",
      "embedding": [
        0.57,
        0.6,
        0,
        0,
        0.7,
        0.00481837545773578,
        0.024079200534482193,
        0.08185691686756587,
        0.014522049250883419,
        0.019638881408610243,
        0.0784410461617356,
        0.0893562807835021,
        0.039339319278027446,
        0.05284597907384985,
        0.08018058756117136,
        0.09808619846951531,
        0.04026670834569512,
        0.08482055986109695,
        0.011728079627109101,
        0.014387344008467263,
        0.08875185073821565,
        0.012474466323975942,
        0.03488415382183916,
        0.03019856270041478,
        0.08992074663715088,
        0.003727372128568041,
        0.04634546754463166,
        0.08897032276392648,
        0.09489146953187082,
        0.0377006226068202,
        0.023000343542412562,
        0.03019420016476362,
        0.015743832284402983,
        0.036672916676654954,
        0.08086423551121945,
        0.004741008521797219,
        0.026004463513179733,
        0.04218175584924441,
        0.042007127539485635,
        0.009707046704064382,
        0.06883370594127074,
        0.027177702518427937,
        0.07516253245103781,
        0.06791202016815502,
        0.0827369301809268,
        0.09236869301569983,
        0.07270519163444839,
        0.04587315485003488,
        0.030621582324093278,
        0.08002272806205273,
        0.011465211207916139,
        0.06850407714316227,
        0.08887356899275878,
        0.057908187475625345,
        0.0945954385011091,
        0.009388250024535295,
        0.01983518418381132,
        0.0012842436099507306,
        0.08730885898915586,
        0.03760190888019156,
        0.0039027418122019155,
        0.040522647556578896,
        0.08637520910118836,
        0.04000267818524722,
        0.0528641013493406,
        0.06111949073567155,
        0.007501757521475228,
        0.01363030288623014,
        0.010546483620281311,
        0.04110784908536093,
        0.015002183133790682,
        0.047202506267991676,
        0.08246564332766199,
        0.006289979620564035,
        0.0828496705330748,
        0.0032529330029965942,
        0.08521194487973788,
        0.002785442272995331,
        0.08006297433522251,
        0.08964283683659748,
        0.09408135234033721,
        0.03711545814995076,
        0.09677384311348222,
        0.0814682420432481,
        0.04077887904540592,
        0.032772693535577616,
        0.05500978265739098,
        0.08706625708529013,
        0.011600831873165685,
        0.045247527235923936,
        0.03996644058343915,
        0.027660266463208707,
        0.025090663164971373,
        0.0017840505761718584,
        0.05588637347023778,
        0.06809741434782682,
        0.05304214537832202,
        0.08094853044742091,
        0.06394442223270795,
        0.09922785249313032
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.onModelSelected = exports.getInstanceAvailableModels = exports.toggleModelFavorite = exports.addModelToRecentlyUsed = exports.saveInstanceModelPreferences = exports.loadInstanceModelPreferences = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst session_manager_1 = require(\"./session-manager\");\nconst added_models_1 = require(\"./added-models\");\nconst getInstancePreferencesPath = () => {\n    const sessionInfo = session_manager_1.sessionManager.getSessionInfo();\n    if (!sessionInfo) {\n        throw new Error('No active session found');\n    }\n    const homeDir = require('os').homedir();\n    const sessionDir = path.join(homeDir, '.giga', 'sessions', sessionInfo.instanceId);\n    // Ensure session directory exists\n    if (!fs.existsSync(sessionDir)) {\n        fs.mkdirSync(sessionDir, { recursive: true, mode: 0o700 });\n    }\n    return path.join(sessionDir, 'model-preferences.json');\n};\nfunction loadInstanceModelPreferences() {\n    try {\n        const preferencesPath = getInstancePreferencesPath();\n        const sessionInfo = session_manager_1.sessionManager.getSessionInfo();\n        if (!sessionInfo) {\n            throw new Error('No active session found');\n        }\n        if (!fs.existsSync(preferencesPath)) {\n            // Return default preferences for new session\n            return {\n                instanceId: sessionInfo.instanceId,\n                favoriteModels: [],\n                recentlyUsedModels: sessionInfo.currentModel ? [sessionInfo.currentModel] : [],\n                lastUpdated: new Date().toISOString()\n            };\n        }\n        const data = JSON.parse(fs.readFileSync(preferencesPath, 'utf8'));\n        return data;\n    }\n    catch (error) {\n        console.error('Error loading instance model preferences:', error);\n        const sessionInfo = session_manager_1.sessionManager.getSessionInfo();\n        return {\n            instanceId: sessionInfo?.instanceId || 'unknown',\n            favoriteModels: [],\n            recentlyUsedModels: [],\n            lastUpdated: new Date().toISOString()\n        };\n    }\n}\nexports.loadInstanceModelPreferences = loadInstanceModelPreferences;\nfunction saveInstanceModelPreferences(preferences) {\n    try {\n        const preferencesPath = getInstancePreferencesPath();\n        preferences.lastUpdated = new Date().toISOString();\n        fs.writeFileSync(preferencesPath, JSON.stringify(preferences, null, 2), { mode: 0o600 });\n    }\n    catch (error) {\n        console.error('Error saving instance model preferences:', error);\n    }\n}\nexports.saveInstanceModelPreferences = saveInstanceModelPreferences;\nfunction addModelToRecentlyUsed(modelName) {\n    try {\n        const preferences = loadInstanceModelPreferences();\n        // Remove model if it already exists in the list\n        preferences.recentlyUsedModels = preferences.recentlyUsedModels.filter(m => m !== modelName);\n        // Add to the beginning of the list\n        preferences.recentlyUsedModels.unshift(modelName);\n        // Keep only the last 10 recently used models\n        preferences.recentlyUsedModels = preferences.recentlyUsedModels.slice(0, 10);\n        saveInstanceModelPreferences(preferences);\n    }\n    catch (error) {\n        console.error('Error adding model to recently used:', error);\n    }\n}\nexports.addModelToRecentlyUsed = addModelToRecentlyUsed;\nfunction toggleModelFavorite(modelName) {\n    try {\n        const preferences = loadInstanceModelPreferences();\n        const isFavorite = preferences.favoriteModels.includes(modelName);\n        if (isFavorite) {\n            // Remove from favorites\n            preferences.favoriteModels = preferences.favoriteModels.filter(m => m !== modelName);\n        }\n        else {\n            // Add to favorites\n            preferences.favoriteModels.push(modelName);\n        }\n        saveInstanceModelPreferences(preferences);\n        return !isFavorite; // Return new favorite status\n    }\n    catch (error) {\n        console.error('Error toggling model favorite:', error);\n        return false;\n    }\n}\nexports.toggleModelFavorite = toggleModelFavorite;\nfunction getInstanceAvailableModels() {\n    try {\n        const preferences = loadInstanceModelPreferences();\n        const globalModels = (0, added_models_1.loadAddedModels)();\n        // Only show global added models (no built-in models)\n        const modelsWithPreferences = globalModels.map(m => ({\n            model: m.modelName,\n            description: `${m.modelName} (${m.providerName})`,\n            isFavorite: preferences.favoriteModels.includes(m.modelName),\n            isRecentlyUsed: preferences.recentlyUsedModels.includes(m.modelName)\n        }));\n        // Sort: favorites first, then recently used, then alphabetically\n        return modelsWithPreferences.sort((a, b) => {\n            if (a.isFavorite && !b.isFavorite)\n                return -1;\n            if (!a.isFavorite && b.isFavorite)\n                return 1;\n            if (a.isRecentlyUsed && !b.isRecentlyUsed)\n                return -1;\n            if (!a.isRecentlyUsed && b.isRecentlyUsed)\n                return 1;\n            return a.model.localeCompare(b.model);\n        });\n    }\n    catch (error) {\n        console.error('Error getting instance available models:', error);\n        return [];\n    }\n}\nexports.getInstanceAvailableModels = getInstanceAvailableModels;\n// Update recently used when model is selected\nfunction onModelSelected(modelName) {\n    addModelToRecentlyUsed(modelName);\n    session_manager_1.sessionManager.setCurrentModel(modelName);\n}\nexports.onModelSelected = onModelSelected;\n//# sourceMappingURL=instance-models.js.map",
      "filePath": "../dist/utils/instance-models.js",
      "embedding": [
        6.02,
        1.2,
        0,
        0.4,
        1.3,
        0.09536004856498527,
        0.09511139362128397,
        0.08124018649587636,
        0.0450750984196635,
        0.023752409234978955,
        0.07405340607393755,
        0.08642523718920563,
        0.07186072875530454,
        0.08516428101801754,
        0.052232920018387446,
        0.049111856615447674,
        0.09061355739655973,
        0.014318701573728354,
        0.05064206435268828,
        0.051185824258272616,
        0.08484335968371115,
        0.07061552922194711,
        0.04673212889284637,
        0.010982249652803922,
        0.05979759631078118,
        0.07581473920073482,
        0.05686912287866569,
        0.06291189131107665,
        0.03918328680290467,
        0.09723753024285568,
        0.05413512094947817,
        0.055053341323139694,
        0.05006166129939356,
        0.020444932233912107,
        0.07858812200456364,
        0.07557997983043271,
        0.025526324335703544,
        0.014466949048387523,
        0.05212482070225393,
        0.08101807157833768,
        0.0076078694956355,
        0.08334875150157646,
        0.07343410839588492,
        0.06212019853511951,
        0.020423258128418366,
        0.042461964859839364,
        0.0024832888797557853,
        0.07808186621607768,
        0.06025338599120128,
        0.06447699036573257,
        0.019974530305369543,
        0.06732796702733916,
        0.06490372686413191,
        0.06785202807673468,
        0.0751107422233053,
        0.05447848597260511,
        0.06160614297432413,
        0.07691936279459388,
        0.006143168681271205,
        0.0004708265137716716,
        0.06875085525934636,
        0.05505359460870817,
        0.05162560608117,
        0.00821318764941128,
        0.028123686779992208,
        0.09540831627225096,
        0.07779058762342277,
        0.04433006357396793,
        0.0457755895083827,
        0.07347726487957279,
        0.018375824682847187,
        0.04742480416185864,
        0.057693073424711895,
        0.011148046996166961,
        0.04099906570284176,
        0.06316456598276807,
        0.09167945552431622,
        0.09684440777261698,
        0.07857506072578106,
        0.09341010832797575,
        0.020877207231712505,
        0.028353542963762038,
        0.08777411716660798,
        0.08043178793776704,
        0.09183491199739315,
        0.07294281256708161,
        0.018718045869905144,
        0.09806062496964765,
        0.06985254763584879,
        0.058676801618613744,
        0.0015037912521459918,
        0.06272756110311337,
        0.003769787164200256,
        0.019139833459596346,
        0.0047337556853837785,
        0.08903894271092738,
        0.0395925705651813,
        0.0438523049889483,
        0.005795992715516974,
        0.008583216901088708
      ]
    },
    {
      "content": "import { AgentMode, ModeConfig } from '../types';\nexport declare class ModeManager {\n    private static instance;\n    private currentMode;\n    private modeConfigs;\n    private constructor();\n    static getInstance(): ModeManager;\n    getCurrentMode(): AgentMode;\n    getCurrentModeConfig(): ModeConfig;\n    getAllModes(): AgentMode[];\n    cycleMode(): AgentMode;\n    setMode(mode: AgentMode): void;\n    shouldAllowExpertModels(): boolean;\n    shouldRequireConfirmation(): boolean;\n    getModeDisplayName(): string;\n    getModeDescription(): string;\n}\nexport declare const modeManager: ModeManager;\n",
      "filePath": "../dist/utils/mode-manager.d.ts",
      "embedding": [
        0.5,
        0,
        0.1,
        0.1,
        0.2,
        0.03267833332200914,
        0.045327939947895225,
        0.008320357787087118,
        0.07409890726986469,
        0.06262548010268575,
        0.002213443456614961,
        0.061603191136362534,
        0.009459573038111136,
        0.050953126323986256,
        0.016383572840760086,
        0.09005273939276622,
        0.020164787624983305,
        0.04758313506749284,
        0.048265638283987736,
        0.016912486081956748,
        0.07991302741420397,
        0.02544345441181546,
        0.08453475636663803,
        0.048199552015907476,
        0.0725422199257085,
        0.0007426829644052613,
        0.057339789466929206,
        0.020284827088671256,
        0.08498752679276256,
        0.02864958807678021,
        0.027627168153289295,
        0.012049246635962997,
        0.056635758681982055,
        0.010458416719137399,
        0.05396034718032299,
        0.03420394395559395,
        0.015125608215072873,
        0.0007241301671413903,
        0.09451559589206869,
        0.09894681039197444,
        0.07984797660344067,
        0.0751332633873395,
        0.07471842409450968,
        0.009728019310438131,
        0.07060815186154937,
        0.08137965781829037,
        0.058857666804758874,
        0.01678225305190936,
        0.0026244369766931343,
        0.019334627559632413,
        0.021938467765236225,
        0.03228085469257579,
        0.066027912660903,
        0.05447320271494659,
        0.09244291553567471,
        0.026618208174543346,
        0.0623854305230224,
        0.08333803484136969,
        0.045163085751608815,
        0.021013576679496427,
        0.09468513374187858,
        0.07096976572673928,
        0.013940672784960773,
        0.0028622575710088197,
        0.006804397214843006,
        0.07154787336786304,
        0.06534736161276423,
        0.08905080499167521,
        0.0032227194377704715,
        0.08497008319206201,
        0.0913208749169942,
        0.06291073045008998,
        0.06407958179737872,
        0.09053821427533079,
        0.05381341921441157,
        0.057626914862042994,
        0.00898944201292795,
        0.034067509495653785,
        0.0806106037653071,
        0.0037793822946888935,
        0.06772118111504076,
        0.060114362700146175,
        0.02898364656356176,
        0.07904967188581175,
        0.08392643140196043,
        0.05689191283369861,
        0.09172218654740011,
        0.08637825039152551,
        0.05840698090802631,
        0.038095500000623055,
        0.01817607705097021,
        0.023152571370332366,
        0.08134625880002505,
        0.08348160082471494,
        0.018049087176985747,
        0.05197507732304495,
        0.08908243548203354,
        0.020719806292922582,
        0.05182462137533866,
        0.016216332844299863
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.modeManager = exports.ModeManager = void 0;\nconst types_1 = require(\"../types\");\nclass ModeManager {\n    constructor() {\n        this.currentMode = types_1.AgentMode.CHILL;\n        this.modeConfigs = {\n            [types_1.AgentMode.PLAN]: {\n                mode: types_1.AgentMode.PLAN,\n                allowExpertModels: false,\n                requireConfirmation: false,\n                displayName: '📋 PLAN MODE',\n                description: 'Planning and thinking only - no expert models'\n            },\n            [types_1.AgentMode.CHILL]: {\n                mode: types_1.AgentMode.CHILL,\n                allowExpertModels: true,\n                requireConfirmation: true,\n                displayName: '😌 CHILL MODE',\n                description: 'All models available - asks permission for tool calls'\n            },\n            [types_1.AgentMode.GIGA]: {\n                mode: types_1.AgentMode.GIGA,\n                allowExpertModels: true,\n                requireConfirmation: false,\n                displayName: '⚡ GIGA MODE',\n                description: 'Full power - no permission requests'\n            }\n        };\n    }\n    static getInstance() {\n        if (!ModeManager.instance) {\n            ModeManager.instance = new ModeManager();\n        }\n        return ModeManager.instance;\n    }\n    getCurrentMode() {\n        return this.currentMode;\n    }\n    getCurrentModeConfig() {\n        return this.modeConfigs[this.currentMode];\n    }\n    getAllModes() {\n        return [types_1.AgentMode.PLAN, types_1.AgentMode.CHILL, types_1.AgentMode.GIGA];\n    }\n    cycleMode() {\n        const modes = this.getAllModes();\n        const currentIndex = modes.indexOf(this.currentMode);\n        const nextIndex = (currentIndex + 1) % modes.length;\n        this.currentMode = modes[nextIndex];\n        return this.currentMode;\n    }\n    setMode(mode) {\n        this.currentMode = mode;\n    }\n    shouldAllowExpertModels() {\n        return this.modeConfigs[this.currentMode].allowExpertModels;\n    }\n    shouldRequireConfirmation() {\n        return this.modeConfigs[this.currentMode].requireConfirmation;\n    }\n    getModeDisplayName() {\n        return this.modeConfigs[this.currentMode].displayName;\n    }\n    getModeDescription() {\n        return this.modeConfigs[this.currentMode].description;\n    }\n}\nexports.ModeManager = ModeManager;\nexports.modeManager = ModeManager.getInstance();\n//# sourceMappingURL=mode-manager.js.map",
      "filePath": "../dist/utils/mode-manager.js",
      "embedding": [
        1.86,
        0,
        0.1,
        0,
        0.5,
        0.09796494654771781,
        0.07023091765643612,
        0.035644126788132904,
        0.03661640534586317,
        0.03577954010600637,
        0.08999087662759783,
        0.08953129466598643,
        0.0917137493195392,
        0.07184639834303669,
        0.06454263888849988,
        0.01474684733395838,
        0.09612349825509414,
        0.022961269741890444,
        0.06086494135753352,
        0.09921645358730971,
        0.06711355214387613,
        0.012688296581242032,
        0.021950742021188144,
        0.04999679809974355,
        0.03756432719061288,
        0.09509273677690022,
        0.027264140106543978,
        0.04567941140049121,
        0.06102994294036246,
        0.06818970769461008,
        0.00998459063189542,
        0.005530795139154155,
        0.0073901417337928765,
        0.005376578168951507,
        0.03335515606650088,
        0.048020292925959544,
        0.014813149459737296,
        0.02168283949274115,
        0.044105701265100966,
        0.09691322741312175,
        0.08967417987888321,
        0.060614735197603645,
        0.08817455317012812,
        0.004654186288187834,
        0.08894807146376628,
        0.08437189160079768,
        0.09517504907799289,
        0.08411124884353997,
        0.04907435594787059,
        0.028770648098191,
        0.05071576488325039,
        0.07015171627953141,
        0.04716356149850755,
        0.09217071686268359,
        0.07130631384263424,
        0.07035549773760101,
        0.08317188904346069,
        0.055605826183405704,
        0.06573904692063653,
        0.07561761026876937,
        0.08122876464264957,
        0.04525083888752695,
        0.0294950123709017,
        0.010686697208064833,
        0.037001240923463186,
        0.08933778560436564,
        0.021521717919210537,
        0.06824790821893563,
        0.06369282280274817,
        0.08651858348305258,
        0.021636358325996443,
        0.06840906465653143,
        0.06504583651098303,
        0.08993941469131372,
        0.0658430446033919,
        0.09037571744644465,
        0.05233262526650632,
        0.0036134412461701795,
        0.07896502346819544,
        0.04990203067885988,
        0.09593389332552082,
        0.07287633645911362,
        0.018523530681832445,
        0.06130557102348623,
        0.03562692295208827,
        0.02077555595503342,
        0.06132211624194128,
        0.040250001049038045,
        0.04884150656844965,
        0.06295789159755782,
        0.06665348366490824,
        0.06643039740188585,
        0.03670410352564446,
        0.09925870941442412,
        0.07207462915372626,
        0.09006481915860577,
        0.005102364119006265,
        0.0990056883040154,
        0.006245028950702259,
        0.044618946346215854
      ]
    },
    {
      "content": "export interface OllamaModel {\n    name: string;\n    model: string;\n    modified_at: string;\n    size: number;\n    digest: string;\n    details?: {\n        parent_model?: string;\n        format?: string;\n        family?: string;\n        families?: string[];\n        parameter_size?: string;\n        quantization_level?: string;\n    };\n}\nexport interface OllamaModelsResponse {\n    models: OllamaModel[];\n}\nexport declare function fetchOllamaModels(baseUrl?: string): Promise<string[]>;\nexport declare function searchOllamaModels(query: string, baseUrl?: string): Promise<string[]>;\nexport declare function testOllamaConnection(baseUrl?: string): Promise<{\n    success: boolean;\n    error?: string;\n    modelCount?: number;\n}>;\nexport declare function getRecommendedOllamaModels(): string[];\n",
      "filePath": "../dist/utils/ollama-models.d.ts",
      "embedding": [
        0.7,
        0.4,
        0,
        0,
        0.6,
        0.06219949587229349,
        0.026018043588771345,
        0.019138573732727693,
        0.08815544339745189,
        0.015484606797826574,
        0.08999689968373838,
        0.04585594779998993,
        0.09086065867927591,
        0.04803603771269748,
        0.04512783148750674,
        0.0653918585785831,
        0.018677866234997387,
        0.026445505536068073,
        0.046444524569641356,
        0.06790155882578983,
        0.032639748264172146,
        0.03970443736651687,
        0.0059162047253944255,
        0.0919341267014339,
        0.08942723276917908,
        0.05543653213086204,
        0.01558883158923926,
        0.06345999280308116,
        0.026927742429404957,
        0.09672924360392082,
        0.03808631686538434,
        0.0389013047196083,
        0.07941311343352653,
        0.04531280830743868,
        0.08782688824475939,
        0.049676870367415304,
        0.09555802845182368,
        0.03157565423061705,
        0.09184296500969098,
        0.0139177393361278,
        0.0025416231828532367,
        0.06092736417663591,
        0.09080098220364091,
        0.09601392179058152,
        0.04043496224249021,
        0.03748372559162431,
        0.09189415961918491,
        0.00399182731977924,
        0.014033267037930742,
        0.04085980957847013,
        0.043401350287344743,
        0.05266180640648064,
        0.05064722785676662,
        0.0936068643281783,
        0.09915867540158636,
        0.023698165212463818,
        0.07453840373262409,
        0.07986039286673131,
        0.011678963120704012,
        0.08235409275064182,
        0.040873010809552725,
        0.01493074429604584,
        0.017712526198688718,
        0.06857258849389115,
        0.06412006798024415,
        0.032202057249733886,
        0.05117548058195577,
        0.015629040889212742,
        0.09471407353257472,
        0.07225674849745936,
        0.0612717847497668,
        0.04215186013780947,
        0.035746332104005706,
        0.00058796638247679,
        0.03125923918664752,
        0.022152357231736943,
        0.04543049470497256,
        0.04889356129903384,
        0.06792858412993591,
        0.083372116351148,
        0.0869598227594313,
        0.022226991648056273,
        0.04444509259131536,
        0.038129403104084914,
        0.0323314101725002,
        0.032771556113943966,
        0.09488408508598749,
        0.09773959346146,
        0.057101125781703524,
        0.0510075362557242,
        0.07001340757716855,
        0.0015550994468061187,
        0.03781564012430836,
        0.09356890380088129,
        0.0065924361187442385,
        0.09483121697227515,
        0.007600652487899074,
        0.04058774143165505,
        0.030171802345991806,
        0.015062237360294328
      ]
    },
    {
      "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRecommendedOllamaModels = exports.testOllamaConnection = exports.searchOllamaModels = exports.fetchOllamaModels = void 0;\nconst axios_1 = __importDefault(require(\"axios\"));\nasync function fetchOllamaModels(baseUrl = 'http://localhost:11434') {\n    try {\n        // Remove any trailing slashes and ensure proper URL format\n        let cleanBaseUrl = baseUrl.replace(/\\/+$/, '');\n        // Add http:// protocol if missing\n        if (!cleanBaseUrl.startsWith('http://') && !cleanBaseUrl.startsWith('https://')) {\n            cleanBaseUrl = `http://${cleanBaseUrl}`;\n        }\n        const apiUrl = `${cleanBaseUrl}/api/tags`;\n        const response = await axios_1.default.get(apiUrl, {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            timeout: 10000, // 10 second timeout\n        });\n        const data = response.data;\n        if (!data.models || !Array.isArray(data.models)) {\n            throw new Error('Invalid response format from Ollama API');\n        }\n        // Extract model names and sort them\n        const modelNames = data.models\n            .map(model => model.name)\n            .filter(name => name && name.trim())\n            .sort();\n        return modelNames;\n    }\n    catch (error) {\n        console.error('Error fetching Ollama models:', error.message);\n        // Return empty array on error - will fallback to static list\n        return [];\n    }\n}\nexports.fetchOllamaModels = fetchOllamaModels;\nasync function searchOllamaModels(query, baseUrl = 'http://localhost:11434') {\n    try {\n        const allModels = await fetchOllamaModels(baseUrl);\n        if (!query || !query.trim()) {\n            return allModels;\n        }\n        const searchTerm = query.toLowerCase().trim();\n        // Filter models that contain the search term\n        const filtered = allModels.filter(model => model.toLowerCase().includes(searchTerm));\n        // Sort by relevance: exact matches first, then starts with, then contains\n        const sorted = filtered.sort((a, b) => {\n            const aLower = a.toLowerCase();\n            const bLower = b.toLowerCase();\n            // Exact match\n            if (aLower === searchTerm && bLower !== searchTerm)\n                return -1;\n            if (bLower === searchTerm && aLower !== searchTerm)\n                return 1;\n            // Starts with\n            if (aLower.startsWith(searchTerm) && !bLower.startsWith(searchTerm))\n                return -1;\n            if (bLower.startsWith(searchTerm) && !aLower.startsWith(searchTerm))\n                return 1;\n            // Alphabetical for same relevance\n            return a.localeCompare(b);\n        });\n        return sorted;\n    }\n    catch (error) {\n        console.error('Error searching Ollama models:', error);\n        return [];\n    }\n}\nexports.searchOllamaModels = searchOllamaModels;\nasync function testOllamaConnection(baseUrl = 'http://localhost:11434') {\n    try {\n        const models = await fetchOllamaModels(baseUrl);\n        return {\n            success: true,\n            modelCount: models.length\n        };\n    }\n    catch (error) {\n        return {\n            success: false,\n            error: error.message || 'Unknown error'\n        };\n    }\n}\nexports.testOllamaConnection = testOllamaConnection;\n// Get popular/recommended Ollama models for new users\nfunction getRecommendedOllamaModels() {\n    return [\n        'llama3.2:3b',\n        'llama3.2:1b',\n        'qwen2.5:7b',\n        'phi3:3.8b',\n        'gemma2:9b',\n        'mistral:7b',\n        'codellama:7b',\n        'neural-chat:7b',\n        'tinyllama:1.1b', // Ultra-fast tiny model\n    ];\n}\nexports.getRecommendedOllamaModels = getRecommendedOllamaModels;\n//# sourceMappingURL=ollama-models.js.map",
      "filePath": "../dist/utils/ollama-models.js",
      "embedding": [
        3.75,
        0.5,
        0,
        0.3,
        0.9,
        0.06919460122321514,
        0.07144003069530817,
        0.028582135537404442,
        0.041412062467649946,
        0.05148136172840301,
        0.0959168685726557,
        0.010898213723110029,
        0.010533713764286447,
        0.091433881735978,
        0.07322479838360811,
        0.07771939745007823,
        0.02402990162494787,
        0.05517405822405476,
        0.059931005995685106,
        0.02090491214012853,
        0.0037758308118193366,
        0.0674178429283204,
        0.08086942928979826,
        0.08121132461655331,
        0.08269322902522476,
        0.05424031720278023,
        0.09052426511606014,
        0.07200254002613593,
        0.03317705444072423,
        0.04724381660575777,
        0.09172956677151278,
        0.05163511140518269,
        0.015013006728746649,
        0.0757239626537507,
        0.04125744766398656,
        0.04552366569664084,
        0.011962497399446338,
        0.06219961592847437,
        0.05941980004890948,
        0.02887310156588323,
        0.05767984699312106,
        0.08096279003675393,
        0.06976035751810998,
        0.06853745964497802,
        0.06388562612383727,
        0.011451555120631464,
        0.05575784670106169,
        0.05962568574060576,
        0.043071180225905205,
        0.0933987629597608,
        0.01044088135826753,
        0.05034751245995979,
        0.0036145994020727935,
        0.03651619948657775,
        0.0048751752942338585,
        0.04149933137170473,
        0.05005501389455289,
        0.03253447680339427,
        0.07621899579670904,
        0.07034272155870439,
        0.03474008067902771,
        0.09259163150347859,
        0.0910580320742214,
        0.09652310549471638,
        0.09983241416349503,
        0.0070322049104891045,
        0.0934406639381871,
        0.03302079037477608,
        0.014624114278846623,
        0.050844752221231804,
        0.04628692647226626,
        0.09148866079658284,
        0.01849604486801929,
        0.06761132965224534,
        0.04138176346384727,
        0.04714378995312536,
        0.006908476396408581,
        0.04131120447385679,
        0.03642237360250277,
        0.09023849759230097,
        0.04578066836365574,
        0.09146708809275154,
        0.056414044624900406,
        0.0706678248310229,
        0.07165042850822288,
        0.043220346287294514,
        0.05847961066709757,
        0.08124686726011954,
        0.03315521546909961,
        0.009217674123238562,
        0.04708534758274594,
        0.06394659041634539,
        0.06571491300261609,
        0.01423498615621014,
        0.09889810613358098,
        0.08469445712651562,
        0.09070039753823643,
        0.08662477643852358,
        0.08394400938824538,
        0.055808908025399756
      ]
    },
    {
      "content": "export interface OpenRouterProvider {\n    id: string;\n    name: string;\n    description?: string;\n    pricing?: {\n        prompt: number;\n        completion: number;\n    };\n    quantization?: string;\n    uptime?: number;\n    context_length?: number;\n}\nexport interface OpenRouterModelDetails {\n    id: string;\n    name: string;\n    description?: string;\n    providers: OpenRouterProvider[];\n    context_length?: number;\n    architecture?: {\n        modality?: string;\n        tokenizer?: string;\n        instruct_type?: string;\n    };\n}\nexport interface ProviderFetchResult {\n    success: boolean;\n    providers: OpenRouterProvider[];\n    error?: string;\n}\nexport declare function fetchModelProviders(modelId: string, apiKey: string): Promise<ProviderFetchResult>;\nexport declare function fetchAllModelProviders(apiKey: string): Promise<Map<string, OpenRouterProvider[]>>;\nexport declare const COMMON_OPENROUTER_PROVIDERS: OpenRouterProvider[];\nexport declare function isOpenRouterModel(modelId: string): boolean;\nexport declare function getModelProvidersWithFallback(modelId: string, apiKey: string): Promise<OpenRouterProvider[]>;\n",
      "filePath": "../dist/utils/openrouter-providers.d.ts",
      "embedding": [
        0.94,
        0.4,
        0,
        0,
        0.8,
        0.045586301969929834,
        0.09109783262683803,
        0.046210824502196116,
        0.0667163039416012,
        0.0077559806110118375,
        0.03458967067366865,
        0.017314474611573285,
        0.034498800922029595,
        0.011019723500030177,
        0.002727106335781726,
        0.005892814223484134,
        0.03220881650241617,
        0.029113258044196812,
        0.07901581314876391,
        0.007298166418112107,
        0.05640346149700575,
        0.002968245992721552,
        0.06595883663527793,
        0.02619945911315621,
        0.017985376983833023,
        0.07199351588886564,
        0.04943749796518587,
        0.07946842208199174,
        0.02851493769884894,
        0.0080898593751759,
        0.00504438060516258,
        0.03870944358726926,
        0.05446971526836143,
        0.052128546550257185,
        0.07928076707590159,
        0.04548374693688034,
        0.07976058063412685,
        0.021856255069034748,
        0.03159691892787272,
        0.09750977301462094,
        0.055146552828926144,
        0.02608864560126526,
        0.029045611887453616,
        0.056614739843129806,
        0.02463714953737689,
        0.006080670674494315,
        0.049550000501445146,
        0.0363426348313931,
        0.028209560173843275,
        0.05880553143582078,
        0.020177053525359725,
        0.09289708477384326,
        0.08275823656771047,
        0.07416077274090664,
        0.0015750934395376893,
        0.04511639823565949,
        0.03560861555733278,
        0.06638905413631373,
        0.05643263322618058,
        0.07510576219180565,
        0.08187125332878091,
        0.05124268024156112,
        0.03690685093209627,
        0.044272895716836194,
        0.009018066163829075,
        0.0658260560949739,
        0.0718342904206751,
        0.05446530077770093,
        0.08960163415949789,
        0.08109364069942082,
        0.04206677979239205,
        0.0497439963483078,
        0.0482851795599327,
        0.013945223738701419,
        0.08507259496946741,
        0.0685275713484422,
        0.019347909424860435,
        0.04783055654763088,
        0.06357657803242592,
        0.0886442926883661,
        0.09888785765713447,
        0.07669795581932944,
        0.09385655863337222,
        0.07786922395559226,
        0.025372820716032963,
        0.017293747324204103,
        0.06737690869738515,
        0.015396829290642467,
        0.0024476713184471977,
        0.03456564514536651,
        0.03594573746625179,
        0.0026289439080932064,
        0.06205284402983027,
        0.06916016533152063,
        0.09113533229544381,
        0.09951229870838499,
        0.006318581459876216,
        0.005560193995013618,
        0.012496173471014605,
        0.013197102400273242
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getModelProvidersWithFallback = exports.isOpenRouterModel = exports.COMMON_OPENROUTER_PROVIDERS = exports.fetchAllModelProviders = exports.fetchModelProviders = void 0;\n// Fetch available providers for a specific model from OpenRouter\nasync function fetchModelProviders(modelId, apiKey) {\n    if (!apiKey || !apiKey.trim()) {\n        return { success: false, providers: [], error: 'OpenRouter API key is required' };\n    }\n    try {\n        // The correct endpoint format is /api/v1/models/{author}/{slug}/endpoints\n        // Split the modelId into author and slug\n        const modelParts = modelId.split('/');\n        if (modelParts.length !== 2) {\n            return { success: false, providers: [], error: `Invalid model ID format. Expected 'author/model', got: ${modelId}` };\n        }\n        const [author, slug] = modelParts;\n        const url = `https://openrouter.ai/api/v1/models/${encodeURIComponent(author)}/${encodeURIComponent(slug)}/endpoints`;\n        console.log(`DEBUG: Fetching providers for model: ${modelId} from URL: ${url}`);\n        const response = await fetch(url, {\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n                'Content-Type': 'application/json',\n            },\n            signal: AbortSignal.timeout(10000),\n        });\n        if (!response.ok) {\n            const errorText = await response.text().catch(() => 'Unable to read error response');\n            console.log(`DEBUG: HTTP ${response.status} error:`, errorText);\n            return { success: false, providers: [], error: `HTTP ${response.status}: ${response.statusText} - ${errorText}` };\n        }\n        const endpointsData = await response.json();\n        // The actual response format is: { \"data\": { \"id\": \"...\", \"endpoints\": [...] } }\n        const providers = [];\n        let endpointsArray = [];\n        // Handle different possible response formats\n        if (endpointsData.data && endpointsData.data.endpoints && Array.isArray(endpointsData.data.endpoints)) {\n            // Format: { data: { endpoints: [...] } }\n            endpointsArray = endpointsData.data.endpoints;\n        }\n        else if (endpointsData.endpoints && Array.isArray(endpointsData.endpoints)) {\n            // Format: { endpoints: [...] }\n            endpointsArray = endpointsData.endpoints;\n        }\n        if (endpointsArray.length > 0) {\n            // Parse the endpoints into our provider format\n            providers.push(...endpointsArray.map((endpoint) => ({\n                id: endpoint.provider_name || endpoint.name || 'unknown',\n                name: endpoint.provider_name || endpoint.name || 'Unknown Provider',\n                description: endpoint.name,\n                pricing: endpoint.pricing ? {\n                    prompt: parseFloat(endpoint.pricing.prompt || '0'),\n                    completion: parseFloat(endpoint.pricing.completion || '0')\n                } : undefined,\n                quantization: endpoint.quantization,\n                uptime: endpoint.uptime_last_30m ? parseFloat(endpoint.uptime_last_30m.toFixed(1)) : undefined,\n                context_length: endpoint.context_length\n            })));\n        }\n        if (providers.length === 0) {\n            return { success: false, providers: [], error: 'No providers available for this model' };\n        }\n        return { success: true, providers };\n    }\n    catch (error) {\n        return { success: false, providers: [], error: error.message };\n    }\n}\nexports.fetchModelProviders = fetchModelProviders;\n// Fetch all available providers for all models (for caching)\nasync function fetchAllModelProviders(apiKey) {\n    if (!apiKey || !apiKey.trim()) {\n        return new Map();\n    }\n    try {\n        const response = await fetch('https://openrouter.ai/api/v1/models', {\n            headers: {\n                'Authorization': `Bearer ${apiKey}`,\n                'Content-Type': 'application/json',\n            },\n            signal: AbortSignal.timeout(15000),\n        });\n        if (!response.ok) {\n            console.error(`Failed to fetch OpenRouter models: HTTP ${response.status}`);\n            return new Map();\n        }\n        const data = await response.json();\n        const models = data.data || [];\n        const modelProvidersMap = new Map();\n        // Build map of model ID to providers\n        models.forEach((model) => {\n            if (model.id && model.providers) {\n                modelProvidersMap.set(model.id, model.providers);\n            }\n        });\n        return modelProvidersMap;\n    }\n    catch (error) {\n        console.error('Error fetching all model providers:', error);\n        return new Map();\n    }\n}\nexports.fetchAllModelProviders = fetchAllModelProviders;\n// Common OpenRouter provider names for fallback when API fails\nexports.COMMON_OPENROUTER_PROVIDERS = [\n    { id: 'Groq', name: 'Groq', description: 'Fast inference with Groq chips' },\n    { id: 'Cerebras', name: 'Cerebras', description: 'Ultra-fast inference with Cerebras wafer-scale engine' },\n    { id: 'OpenAI', name: 'OpenAI', description: 'Official OpenAI API' },\n    { id: 'Anthropic', name: 'Anthropic', description: 'Official Anthropic API' },\n    { id: 'Google', name: 'Google', description: 'Google AI models' },\n    { id: 'Meta', name: 'Meta', description: 'Meta Llama models' },\n    { id: 'Mistral', name: 'Mistral', description: 'Mistral AI models' },\n    { id: 'Qwen', name: 'Qwen', description: 'Alibaba Qwen models' },\n    { id: 'DeepSeek', name: 'DeepSeek', description: 'DeepSeek models' },\n];\n// Check if a model ID is in OpenRouter format (author/model)\nfunction isOpenRouterModel(modelId) {\n    return modelId.includes('/') && modelId.split('/').length === 2;\n}\nexports.isOpenRouterModel = isOpenRouterModel;\n// Get providers for a model with fallback\nasync function getModelProvidersWithFallback(modelId, apiKey) {\n    // Only try to fetch providers for OpenRouter models\n    if (!isOpenRouterModel(modelId)) {\n        console.warn(`Model ${modelId} is not in OpenRouter format (author/model), skipping provider fetch`);\n        return [];\n    }\n    const result = await fetchModelProviders(modelId, apiKey);\n    if (result.success && result.providers.length > 0) {\n        return result.providers;\n    }\n    // If API call failed, return empty array instead of hardcoded fallbacks\n    // This forces the user to check their API key or model availability\n    console.warn(`Failed to fetch providers for model ${modelId}: ${result.error}`);\n    return [];\n}\nexports.getModelProvidersWithFallback = getModelProvidersWithFallback;\n//# sourceMappingURL=openrouter-providers.js.map",
      "filePath": "../dist/utils/openrouter-providers.js",
      "embedding": [
        6.77,
        0.4,
        0,
        0,
        1.1,
        0.08029034080657921,
        0.029355724500270842,
        0.09443921406899491,
        0.00846393924722384,
        0.06207607362941691,
        0.07359748143505573,
        0.03845559660997499,
        0.08541789076726754,
        0.025602864908149406,
        0.07766973217758331,
        0.07780231537516352,
        0.05765147891058704,
        0.03613014262020172,
        0.04002101019076855,
        0.027537947728196344,
        0.08749656677077855,
        0.08503846229004455,
        0.05413442313929086,
        0.08013700982591636,
        0.005663481811032056,
        0.009393702230074796,
        0.01807375215994711,
        0.0537392109563467,
        0.060499837864910505,
        0.035495022389959295,
        0.06537093405608387,
        0.06306089595465356,
        0.03503406492982888,
        0.08769904488043796,
        0.04763865176823119,
        0.008980197438184257,
        0.09672786707934633,
        0.07509975587668186,
        0.05120696671221464,
        0.043229474778741644,
        0.05696834905148837,
        0.0857307450854758,
        0.07499495694988967,
        0.08228809489743344,
        0.011087196376831067,
        0.07383618894080402,
        0.02386000884942492,
        0.09515423120641006,
        0.007556782561855691,
        0.09986931231870033,
        0.08291982676384158,
        0.026807635244903816,
        0.035592577419319114,
        0.026122574386484288,
        0.0845923394568902,
        0.05829713416388687,
        0.007702354994402938,
        0.0913399152164013,
        0.04732502118090908,
        0.0858858024316285,
        0.005652153013978845,
        0.07733987668148104,
        0.021668922761059962,
        0.09351627965864584,
        0.0058309059101008705,
        0.025471837853326962,
        0.0409786123433089,
        0.010364379890044684,
        0.07890611568291805,
        0.09418831031810475,
        0.015584827913898813,
        0.0564690503504675,
        0.08126192574521407,
        0.013770155784748507,
        0.04263970397580196,
        0.013994448526399628,
        0.04717251314903094,
        0.015790491713737087,
        0.007025483312212322,
        0.017862928852803252,
        0.018346191323118887,
        0.004727662324087401,
        0.08756782723383821,
        0.07004195896313734,
        0.009338179441185568,
        0.021988387260979438,
        0.03275272233683251,
        0.023539833343551697,
        0.003966705768183487,
        0.0020402932244374394,
        0.0830281002250463,
        0.09432927522859806,
        0.03738375279447991,
        0.07599661854419616,
        0.05126164099282188,
        0.016360681147116054,
        0.017048794100579225,
        0.06594380934690611,
        0.08824341756162753,
        0.07312967712091224
      ]
    },
    {
      "content": "export interface CustomPrompt {\n    name: string;\n    content: string;\n    dateAdded: string;\n}\nexport declare function loadPrompts(): CustomPrompt[];\nexport declare function savePrompts(prompts: CustomPrompt[]): void;\nexport declare function addPrompt(name: string, content: string): void;\nexport declare function deletePrompt(name: string): boolean;\nexport declare function getAllPrompts(): CustomPrompt[];\nexport declare function getPromptByName(name: string): CustomPrompt | undefined;\nexport declare function isPromptExists(name: string): boolean;\nexport declare function getPromptsAsSystemPrompt(): string;\n",
      "filePath": "../dist/utils/prompts.d.ts",
      "embedding": [
        0.61,
        0.8,
        0,
        0,
        0.9,
        0.03325417115996634,
        0.017030367513920498,
        0.05466493318262675,
        0.005660089016058945,
        0.055434966478388775,
        0.0034597461722297054,
        0.006707973225068076,
        0.08794555630678445,
        0.04969949197050878,
        0.0498901114652229,
        0.05363925145319512,
        0.055205827751562325,
        0.02618820998032112,
        0.060246388073291204,
        0.09787328409728877,
        0.004283504665751792,
        0.05815983287081422,
        0.028920469624701607,
        0.037693306737527243,
        0.003673078262519658,
        0.03851400667356417,
        0.08154378809249946,
        0.05194236294494778,
        0.030775309863515378,
        0.022758661190558607,
        0.06314201018907062,
        0.03212125049268806,
        0.07557575939707224,
        0.0940222309876039,
        0.0012368225903089392,
        0.07847930469737541,
        0.05034326664794075,
        0.09747780195974488,
        0.06895888791825863,
        0.023234992589371985,
        0.04236111526882901,
        0.023923270879639615,
        0.08029367461621642,
        0.057256130973110865,
        0.0312671787609917,
        0.09334528653099017,
        0.07777639003003425,
        0.004291369163772285,
        0.08292614341152135,
        0.07053292291930532,
        0.028107335007793856,
        0.0015593879204209627,
        0.07454782700480277,
        0.09417358991915437,
        0.06088295970663829,
        0.05875201209825714,
        0.030977061528904084,
        0.07361855978894254,
        0.07242369998064746,
        0.07692988821690355,
        0.03927401421205862,
        0.037594935310377824,
        0.0487229403136972,
        0.06656651156593955,
        0.0638172085188232,
        0.09012105388165347,
        0.0467569970685969,
        0.06269196502300309,
        0.05119990505578569,
        0.09886147819822418,
        0.016994098831306204,
        0.016604125317347264,
        0.06036916503424331,
        0.03823518538478318,
        0.04756638420205962,
        0.008781827165440393,
        0.0014187624735556128,
        0.07465943894245262,
        0.03710645299857457,
        0.009450447277023667,
        0.09896497407879119,
        0.02125879316672983,
        0.09982925898620548,
        0.0480440819174848,
        0.06036201864056465,
        0.04853610527791152,
        0.06756103384304518,
        0.01076651565886826,
        0.05337490140675582,
        0.015146228201460022,
        0.008998128465584444,
        0.014598191742006474,
        0.08695592790853057,
        0.07763225632020104,
        0.03951637385343561,
        0.0999601407183614,
        0.05429024771864778,
        0.07014721364500909,
        0.027585655449105517,
        0.00581966619513854
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPromptsAsSystemPrompt = exports.isPromptExists = exports.getPromptByName = exports.getAllPrompts = exports.deletePrompt = exports.addPrompt = exports.savePrompts = exports.loadPrompts = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst os = __importStar(require(\"os\"));\nconst getStorageFile = () => {\n    const homeDir = os.homedir();\n    const gigaDir = path.join(homeDir, '.giga');\n    // Create .giga directory if it doesn't exist\n    if (!fs.existsSync(gigaDir)) {\n        fs.mkdirSync(gigaDir, { mode: 0o700 });\n    }\n    return path.join(gigaDir, 'prompts.json');\n};\nfunction loadPrompts() {\n    try {\n        const storageFile = getStorageFile();\n        if (!fs.existsSync(storageFile)) {\n            return [];\n        }\n        const data = JSON.parse(fs.readFileSync(storageFile, 'utf8'));\n        return data.prompts || [];\n    }\n    catch (error) {\n        console.error('Error loading prompts:', error);\n        return [];\n    }\n}\nexports.loadPrompts = loadPrompts;\nfunction savePrompts(prompts) {\n    try {\n        const storageFile = getStorageFile();\n        const data = { prompts };\n        fs.writeFileSync(storageFile, JSON.stringify(data, null, 2), { mode: 0o600 });\n    }\n    catch (error) {\n        console.error('Error saving prompts:', error);\n    }\n}\nexports.savePrompts = savePrompts;\nfunction addPrompt(name, content) {\n    const prompts = loadPrompts();\n    // Check if prompt already exists\n    const exists = prompts.some(p => p.name === name);\n    if (!exists) {\n        const newPrompt = {\n            name,\n            content,\n            dateAdded: new Date().toISOString(),\n        };\n        prompts.push(newPrompt);\n        savePrompts(prompts);\n    }\n}\nexports.addPrompt = addPrompt;\nfunction deletePrompt(name) {\n    const prompts = loadPrompts();\n    const initialLength = prompts.length;\n    const filteredPrompts = prompts.filter(p => p.name !== name);\n    if (filteredPrompts.length < initialLength) {\n        savePrompts(filteredPrompts);\n        return true;\n    }\n    return false;\n}\nexports.deletePrompt = deletePrompt;\nfunction getAllPrompts() {\n    return loadPrompts();\n}\nexports.getAllPrompts = getAllPrompts;\nfunction getPromptByName(name) {\n    const prompts = loadPrompts();\n    return prompts.find(p => p.name === name);\n}\nexports.getPromptByName = getPromptByName;\nfunction isPromptExists(name) {\n    const prompts = loadPrompts();\n    return prompts.some(p => p.name === name);\n}\nexports.isPromptExists = isPromptExists;\nfunction getPromptsAsSystemPrompt() {\n    const prompts = loadPrompts();\n    if (prompts.length === 0) {\n        return '';\n    }\n    return prompts.map(prompt => prompt.content).join('\\n\\n');\n}\nexports.getPromptsAsSystemPrompt = getPromptsAsSystemPrompt;\n//# sourceMappingURL=prompts.js.map",
      "filePath": "../dist/utils/prompts.js",
      "embedding": [
        4.39,
        1.4,
        0,
        0.5,
        1.7,
        0.03976907942929232,
        0.08358205253362695,
        0.04861122128909626,
        0.007293519151103056,
        0.07285489832722773,
        0.00017585346261462799,
        0.03348550718660758,
        0.0667351007049728,
        0.03668016952147253,
        0.023312816611546817,
        0.09771916402423159,
        0.09470454696393078,
        0.006214106441046319,
        0.026864859153228216,
        0.044251468516970184,
        0.06131872727843199,
        0.028090830629047436,
        0.03377478781158382,
        0.05058458526039808,
        0.06475215492722233,
        0.04976218174430402,
        0.08950277862736256,
        0.05872525032951741,
        0.002092080850989275,
        0.022452600787799884,
        0.014896465559112615,
        0.0783308010488024,
        0.039425844433250694,
        0.06242312433406094,
        0.0292313420197286,
        0.01573529230968118,
        0.06750800378202958,
        0.017210777503589236,
        0.031109950666948695,
        0.06218863709813643,
        0.03233161579473109,
        0.09810304897030057,
        0.021929592721354054,
        0.08716770541528616,
        0.09582932080797557,
        0.0639270608232707,
        0.03220863363274192,
        0.07803297294607713,
        0.07764697463444617,
        0.03455270945296347,
        0.026134715803554,
        0.012172532348400256,
        0.05209852273431386,
        0.004050809897465158,
        0.0008058256036122425,
        0.07792484533027953,
        0.02566323899045744,
        0.07180046071318849,
        0.09944163602483969,
        0.06991245726326488,
        0.07886166002301775,
        0.017266098743252144,
        0.06820469823698122,
        0.08026315831587538,
        0.016720202992669655,
        0.0690508883187708,
        0.010552293110811262,
        0.019545335779516983,
        0.04815793420464879,
        0.07529638453923598,
        0.0016624420786394258,
        0.014402352290490174,
        0.05880156411292858,
        0.0010822378367384645,
        0.03439206836157332,
        0.08063164449495348,
        0.052025640909803585,
        0.04382295885201513,
        0.06626732780802659,
        0.0812438260037624,
        0.08959662332221723,
        0.08278655974628868,
        0.059615679745426156,
        0.09638573815104386,
        0.048256016786722804,
        0.045784616098429,
        0.07328123697769225,
        0.09952478634150418,
        0.0007002862453795999,
        0.00970998889999254,
        0.07233384401729419,
        0.05390469022269573,
        0.012085010769509819,
        0.07688724193038408,
        0.010149285377673579,
        0.045324524173374584,
        0.09206678300622231,
        0.04220290126929338,
        0.041057967330750206,
        0.09294913899549291
      ]
    },
    {
      "content": "export declare const PROVIDER_MODELS: {\n    openrouter: string[];\n    anthropic: string[];\n    google: string[];\n    xai: string[];\n    groq: string[];\n    cerebras: string[];\n    perplexity: string[];\n    openai: string[];\n    ollama: string[];\n};\nexport type ProviderName = keyof typeof PROVIDER_MODELS;\n",
      "filePath": "../dist/utils/provider-models.d.ts",
      "embedding": [
        0.32,
        0,
        0,
        0,
        0.2,
        0.030481216818034673,
        0.08634498710458965,
        0.06636557853311634,
        0.0793786376649192,
        0.05183691859186554,
        0.06774842603663173,
        0.09830978896645022,
        0.016129404284843753,
        0.0781148324312895,
        0.00903279751874656,
        0.040314396835120725,
        0.043960797816149415,
        0.07067005202771946,
        0.0731724798305149,
        0.025746277641349614,
        0.04762806311896253,
        0.01975545932482388,
        0.0838613822037982,
        0.05465890689822988,
        0.011015954680877293,
        0.033267817038726964,
        0.09310859028529338,
        0.023944014600862054,
        0.09867296440251011,
        0.04919038695455455,
        0.006782443084290879,
        0.03300142358230299,
        0.05885142518282939,
        0.012385223685061187,
        0.09342958210952423,
        0.08136373911115076,
        0.043016699770666134,
        0.06585033045959533,
        0.07480240436018666,
        0.0033164992725966294,
        0.09131582224652557,
        0.09455605836866302,
        0.07630082184922671,
        0.04157594866918379,
        0.06334377578807106,
        0.029323059475883664,
        0.04698408327510232,
        0.055394920641595694,
        0.028192981967748488,
        0.03066194707606651,
        0.07198742321265723,
        0.07102847415416409,
        0.09130096305860663,
        0.07786899335766326,
        0.08867305283821747,
        0.016559386916323606,
        0.023548316451412768,
        0.030443481903734228,
        0.03570215901164871,
        0.045169453563175546,
        0.007496335914649832,
        0.017280164951448573,
        0.016133476339988774,
        0.07455817142908176,
        0.04870533846487988,
        0.06618110440283922,
        0.04774746522168171,
        0.08120473756963095,
        0.044779572239251456,
        0.05809648232437421,
        0.04002792240942338,
        0.09734574612054149,
        0.09610667718880447,
        0.0822822197152198,
        0.010009172428464864,
        0.06629246932260359,
        0.088782159396746,
        0.03728379111548964,
        0.04239283580041554,
        0.04243323054794021,
        0.024708107086041344,
        0.0727648605430168,
        0.002059811365722908,
        0.06654735903119009,
        0.04946628593534056,
        0.07483449482490502,
        0.09426316248166106,
        0.03921764095544925,
        0.08021756822395931,
        0.029540847364382863,
        0.08672492917408953,
        0.08436079334589197,
        0.06148611999036846,
        0.0689521429167877,
        0.08586502029567948,
        0.023930952072372825,
        0.03996155697609369,
        0.09663061705972352,
        0.06063435125033667,
        0.09383103383364527
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PROVIDER_MODELS = void 0;\n// Available models for each provider\nexports.PROVIDER_MODELS = {\n    openrouter: [\n        // OpenAI models on OpenRouter\n        \"openai/gpt-4o\",\n        \"openai/gpt-4o-mini\",\n        \"openai/gpt-4-turbo\",\n        \"openai/gpt-4\",\n        \"openai/gpt-3.5-turbo\",\n        \"openai/o1-preview\",\n        \"openai/o1-mini\",\n        // Anthropic models on OpenRouter\n        \"anthropic/claude-3.5-sonnet\",\n        \"anthropic/claude-3-opus\",\n        \"anthropic/claude-3-sonnet\",\n        \"anthropic/claude-3-haiku\",\n        // Google models on OpenRouter\n        \"google/gemini-pro-1.5\",\n        \"google/gemini-flash-1.5\",\n        \"google/gemini-2.0-flash-exp\",\n        // Meta models\n        \"meta-llama/llama-3.3-70b-instruct\",\n        \"meta-llama/llama-3.1-70b-instruct\",\n        \"meta-llama/llama-3.1-8b-instruct\",\n        \"meta-llama/llama-3.2-90b-vision-instruct\",\n        \"meta-llama/llama-3.2-11b-vision-instruct\",\n        \"meta-llama/llama-3.2-3b-instruct\",\n        \"meta-llama/llama-3.2-1b-instruct\",\n        // Qwen models\n        \"qwen/qwen-2.5-72b-instruct\",\n        \"qwen/qwen-2.5-32b-instruct\",\n        \"qwen/qwen-2.5-14b-instruct\",\n        \"qwen/qwen-2.5-7b-instruct\",\n        \"qwen/qwen2-vl-72b-instruct\",\n        \"qwen/qwen2-vl-7b-instruct\",\n        \"qwen/qwen3-235b-a22b-07-25\",\n        \"qwen/qwen3-coder\",\n        // DeepSeek models\n        \"deepseek/deepseek-chat\",\n        \"deepseek/deepseek-coder\",\n        \"deepseek/deepseek-r1-0528\",\n        // Mistral models\n        \"mistralai/mistral-large\",\n        \"mistralai/mistral-medium\",\n        \"mistralai/mistral-small\",\n        \"mistralai/codestral-mamba\",\n        // Other popular models\n        \"microsoft/wizardlm-2-8x22b\",\n        \"databricks/dbrx-instruct\",\n        \"cohere/command-r-plus\",\n        \"cohere/command-r\",\n        \"z-ai/glm-4.5\",\n    ],\n    anthropic: [\n        \"claude-3-5-sonnet-20241022\",\n        \"claude-3-5-sonnet-20240620\",\n        \"claude-3-opus-20240229\",\n        \"claude-3-sonnet-20240229\",\n        \"claude-3-haiku-20240307\",\n        \"claude-sonnet-4-20250514\",\n    ],\n    google: [\n        \"gemini-2.0-flash-exp\",\n        \"gemini-1.5-pro-latest\",\n        \"gemini-1.5-pro\",\n        \"gemini-1.5-flash-latest\",\n        \"gemini-1.5-flash\",\n        \"gemini-1.5-flash-8b\",\n        \"gemini-1.0-pro\",\n        \"gemini-pro-vision\",\n        \"gemini-2.0-flash\",\n        \"gemini-2.5-flash\",\n    ],\n    xai: [\n        \"grok-beta\",\n        \"grok-4-latest\",\n        \"grok-3-latest\",\n        \"grok-3-fast\",\n        \"grok-3-mini-fast\",\n        \"grok-2-1212\",\n        \"grok-2-latest\",\n    ],\n    groq: [\n        \"llama-3.3-70b-versatile\",\n        \"llama-3.1-70b-versatile\",\n        \"llama-3.1-8b-instant\",\n        \"llama-3.2-90b-vision-preview\",\n        \"llama-3.2-11b-vision-preview\",\n        \"llama-3.2-3b-preview\",\n        \"llama-3.2-1b-preview\",\n        \"llama3-groq-70b-8192-tool-use-preview\",\n        \"llama3-groq-8b-8192-tool-use-preview\",\n        \"llama3-70b-8192\",\n        \"llama3-8b-8192\",\n        \"mixtral-8x7b-32768\",\n        \"gemma-7b-it\",\n        \"gemma2-9b-it\",\n        \"moonshotai/kimi-k2-instruct\",\n    ],\n    cerebras: [\n        \"llama3.1-8b\",\n        \"llama3.1-70b\",\n        \"llama-3.3-70b\",\n        \"llama-4-scout-17b-16e-instruct\",\n        \"qwen-3-32b\",\n        \"qwen-3-235b-a22b-instruct-2507\",\n        \"qwen2.5-7b-instruct\",\n        \"qwen2.5-14b-instruct\",\n        \"qwen2.5-32b-instruct\",\n        \"qwen2.5-72b-instruct\",\n    ],\n    perplexity: [\n        \"llama-3.1-sonar-small-128k-online\",\n        \"llama-3.1-sonar-large-128k-online\",\n        \"llama-3.1-sonar-huge-128k-online\",\n        \"llama-3.1-sonar-small-128k-chat\",\n        \"llama-3.1-sonar-large-128k-chat\",\n        \"llama-3.1-8b-instruct\",\n        \"llama-3.1-70b-instruct\",\n        \"sonar-small-online\",\n        \"sonar-medium-online\",\n        \"sonar-small-chat\",\n        \"sonar-medium-chat\",\n        \"sonar\",\n        \"sonar-pro\",\n        \"sonar-deep-research\",\n    ],\n    openai: [\n        \"gpt-4o\",\n        \"gpt-4o-mini\",\n        \"gpt-4-turbo\",\n        \"gpt-4-turbo-preview\",\n        \"gpt-4\",\n        \"gpt-3.5-turbo\",\n        \"gpt-3.5-turbo-16k\",\n        \"o1-preview\",\n        \"o1-mini\",\n        \"text-davinci-003\",\n        \"text-davinci-002\",\n        \"code-davinci-002\",\n    ],\n    ollama: [\n        // Popular Ollama models - models will be fetched dynamically\n        \"llama3.2:3b\",\n        \"llama3.2:1b\",\n        \"llama3.1:8b\",\n        \"llama3.1:70b\",\n        \"llama3:8b\",\n        \"llama3:70b\",\n        \"qwen2.5:7b\",\n        \"qwen2.5:14b\",\n        \"qwen2.5:32b\",\n        \"mistral:7b\",\n        \"gemma2:9b\",\n        \"gemma2:27b\",\n        \"phi3:3.8b\",\n        \"phi3:14b\",\n        \"deepseek-coder:6.7b\",\n        \"codellama:7b\",\n        \"codellama:13b\",\n        \"neural-chat:7b\",\n        \"tinyllama:1.1b\",\n    ],\n};\n//# sourceMappingURL=provider-models.js.map",
      "filePath": "../dist/utils/provider-models.js",
      "embedding": [
        2.26,
        0,
        0,
        0,
        0.3,
        0.08541172378083385,
        0.016254031800483747,
        0.03395287570609875,
        0.051101148019187616,
        0.02485130930510404,
        0.05329036960085242,
        0.056868626475598316,
        0.005412853701704157,
        0.022071476504560674,
        0.028183454158313182,
        0.022040883115917165,
        0.008781127919801113,
        0.08401555982454925,
        0.04321851356897702,
        0.08933580354869324,
        0.06602981253995109,
        0.07758736066276777,
        0.08533998382894606,
        0.08946213693746458,
        0.022149229413145878,
        0.05386506711714922,
        0.0009438717382076911,
        0.09071583020055612,
        0.04117640867921161,
        0.020495625825897503,
        0.09763210587577734,
        0.05625609595075956,
        0.006364029353674894,
        0.08551541988897986,
        0.09820844166831595,
        0.09565868179203073,
        0.07004125997282762,
        0.03672678590110443,
        0.03771721784820903,
        0.08991780098213537,
        0.006187338075040472,
        0.08422147326591456,
        0.06180284351485024,
        0.03573528615945644,
        0.06947699135934396,
        0.02462278407469263,
        0.05450999761802832,
        0.08605403196113533,
        0.03513203925540087,
        0.008076674540847607,
        0.019159322805607407,
        0.026235585218947068,
        0.026001133802790358,
        0.08711939895279945,
        0.02696413810225704,
        0.04557678618818439,
        0.09889484404150525,
        0.07351404678572977,
        0.05611212024160807,
        0.07993941303330408,
        0.030177045532083325,
        0.022371479525620287,
        0.07726382845106486,
        0.06200241307803411,
        0.017243524779202823,
        0.03655085387715619,
        0.0033729371190964644,
        0.0398731374707294,
        0.0645819878157413,
        0.03356414542864267,
        0.08910988665440758,
        0.09078795135010684,
        0.0422994896879845,
        0.03419989141090259,
        0.046668914553575316,
        0.030011277465733247,
        0.07356321252859639,
        0.09345642475995072,
        0.06125871910468499,
        0.008166592150006646,
        0.017088170513339697,
        0.00838642316791044,
        0.05809970695897926,
        0.0673860094172153,
        0.02110071248510873,
        0.02560001439705725,
        0.05260808398609926,
        0.08828531676677732,
        0.08186057457924582,
        0.01574883590287677,
        0.04075203619762574,
        0.009725837079103695,
        0.022812739518141247,
        0.03969997498838175,
        0.07499776930670672,
        0.02825009310888149,
        0.030965861348295445,
        0.04181234147946716,
        0.09816901530720241,
        0.06984803837658347
      ]
    },
    {
      "content": "export interface ModelProviderPreference {\n    modelId: string;\n    preferredProvider: string;\n    providerName: string;\n    dateAdded: string;\n    lastUsed: string;\n}\nexport interface ProviderPreferences {\n    instanceId: string;\n    modelProviderMap: ModelProviderPreference[];\n    lastUpdated: string;\n}\nexport declare function loadProviderPreferences(): ProviderPreferences;\nexport declare function saveProviderPreferences(preferences: ProviderPreferences): void;\nexport declare function setModelProviderPreference(modelId: string, providerId: string, providerName: string): void;\nexport declare function getModelProviderPreference(modelId: string): ModelProviderPreference | null;\nexport declare function updateModelProviderLastUsed(modelId: string): void;\nexport declare function removeModelProviderPreference(modelId: string): void;\nexport declare function getAllModelProviderPreferences(): ModelProviderPreference[];\n",
      "filePath": "../dist/utils/provider-preferences.d.ts",
      "embedding": [
        0.73,
        0.7,
        0,
        0,
        0.9,
        0.0512432669612242,
        0.09484073832493217,
        0.05634753563713923,
        0.09459517676676528,
        0.09834377289892934,
        0.007476939019287643,
        0.002641533973990329,
        0.07280070407897503,
        0.039307365950238676,
        0.014564394751203115,
        0.04631994028978769,
        0.07367894571557777,
        0.07794537607117782,
        0.05912203697052522,
        0.07092229003900902,
        0.0835283871275683,
        0.0053280523966257156,
        0.04015794688519239,
        0.07062109558104034,
        0.052406386480778104,
        0.02634889416352354,
        0.07607313431256485,
        0.01662885748572437,
        0.01353186120011345,
        0.035336128727107376,
        0.03444492970524426,
        0.09739068723461214,
        0.002542825415371275,
        0.023780943715574144,
        0.02991951818372687,
        0.07899882468728459,
        0.044837402758325456,
        0.08283340246305651,
        0.06190232302706994,
        0.08226599213304447,
        0.04337085652627568,
        0.06927852690067747,
        0.059124020162208385,
        0.03419732384108535,
        0.09407489523373899,
        0.04363341075016258,
        0.053392697488064626,
        0.0821718002321237,
        0.010846784767600703,
        0.06456857234358962,
        0.07091227821191036,
        0.0930477499469756,
        0.05615062508807515,
        0.07382631141006545,
        0.09186358267538579,
        0.009468130017986643,
        0.0823813096597724,
        0.09337461170834715,
        0.07058191939069745,
        0.000008551577930482335,
        0.09111232001051751,
        0.058488303260006314,
        0.0116352722654134,
        0.08738456181157706,
        0.0328969787009884,
        0.0958654581993206,
        0.004652019343814174,
        0.026111969181897312,
        0.0630513657047128,
        0.03276639805705075,
        0.012906298949862295,
        0.05542929168106402,
        0.010576650127714072,
        0.04984134330551217,
        0.00291185844687627,
        0.05770217084133883,
        0.09056656896611891,
        0.09195671822071604,
        0.031312016984491466,
        0.00538984195089921,
        0.08134253685573628,
        0.02409543843817621,
        0.0056508408809647255,
        0.08146052226976805,
        0.07197702409395214,
        0.08444033492738622,
        0.06550419069115927,
        0.05720752393421607,
        0.04529427616930812,
        0.07365018562642915,
        0.04781506904821441,
        0.08284567682834065,
        0.07583302764034174,
        0.09277141072287814,
        0.07844130879095236,
        0.0208469756383614,
        0.06699579162872135,
        0.04705548058651049,
        0.09201847598403032,
        0.03756567182940514
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAllModelProviderPreferences = exports.removeModelProviderPreference = exports.updateModelProviderLastUsed = exports.getModelProviderPreference = exports.setModelProviderPreference = exports.saveProviderPreferences = exports.loadProviderPreferences = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst session_manager_1 = require(\"./session-manager\");\nconst getProviderPreferencesPath = () => {\n    const sessionInfo = session_manager_1.sessionManager.getSessionInfo();\n    if (!sessionInfo) {\n        throw new Error('No active session found');\n    }\n    const homeDir = require('os').homedir();\n    const sessionDir = path.join(homeDir, '.giga', 'sessions', sessionInfo.instanceId);\n    // Ensure session directory exists\n    if (!fs.existsSync(sessionDir)) {\n        fs.mkdirSync(sessionDir, { recursive: true, mode: 0o700 });\n    }\n    return path.join(sessionDir, 'provider-preferences.json');\n};\nfunction loadProviderPreferences() {\n    try {\n        const preferencesPath = getProviderPreferencesPath();\n        const sessionInfo = session_manager_1.sessionManager.getSessionInfo();\n        if (!sessionInfo) {\n            throw new Error('No active session found');\n        }\n        if (!fs.existsSync(preferencesPath)) {\n            // Return default preferences for new session\n            return {\n                instanceId: sessionInfo.instanceId,\n                modelProviderMap: [],\n                lastUpdated: new Date().toISOString()\n            };\n        }\n        const data = JSON.parse(fs.readFileSync(preferencesPath, 'utf8'));\n        return data;\n    }\n    catch (error) {\n        console.error('Error loading provider preferences:', error);\n        const sessionInfo = session_manager_1.sessionManager.getSessionInfo();\n        return {\n            instanceId: sessionInfo?.instanceId || 'unknown',\n            modelProviderMap: [],\n            lastUpdated: new Date().toISOString()\n        };\n    }\n}\nexports.loadProviderPreferences = loadProviderPreferences;\nfunction saveProviderPreferences(preferences) {\n    try {\n        const preferencesPath = getProviderPreferencesPath();\n        preferences.lastUpdated = new Date().toISOString();\n        fs.writeFileSync(preferencesPath, JSON.stringify(preferences, null, 2), { mode: 0o600 });\n    }\n    catch (error) {\n        console.error('Error saving provider preferences:', error);\n    }\n}\nexports.saveProviderPreferences = saveProviderPreferences;\nfunction setModelProviderPreference(modelId, providerId, providerName) {\n    try {\n        const preferences = loadProviderPreferences();\n        const now = new Date().toISOString();\n        // Remove existing preference for this model\n        preferences.modelProviderMap = preferences.modelProviderMap.filter(p => p.modelId !== modelId);\n        // Add new preference\n        preferences.modelProviderMap.push({\n            modelId,\n            preferredProvider: providerId,\n            providerName,\n            dateAdded: now,\n            lastUsed: now\n        });\n        saveProviderPreferences(preferences);\n    }\n    catch (error) {\n        console.error('Error setting model provider preference:', error);\n    }\n}\nexports.setModelProviderPreference = setModelProviderPreference;\nfunction getModelProviderPreference(modelId) {\n    try {\n        const preferences = loadProviderPreferences();\n        return preferences.modelProviderMap.find(p => p.modelId === modelId) || null;\n    }\n    catch (error) {\n        console.error('Error getting model provider preference:', error);\n        return null;\n    }\n}\nexports.getModelProviderPreference = getModelProviderPreference;\nfunction updateModelProviderLastUsed(modelId) {\n    try {\n        const preferences = loadProviderPreferences();\n        const preference = preferences.modelProviderMap.find(p => p.modelId === modelId);\n        if (preference) {\n            preference.lastUsed = new Date().toISOString();\n            saveProviderPreferences(preferences);\n        }\n    }\n    catch (error) {\n        console.error('Error updating model provider last used:', error);\n    }\n}\nexports.updateModelProviderLastUsed = updateModelProviderLastUsed;\nfunction removeModelProviderPreference(modelId) {\n    try {\n        const preferences = loadProviderPreferences();\n        preferences.modelProviderMap = preferences.modelProviderMap.filter(p => p.modelId !== modelId);\n        saveProviderPreferences(preferences);\n    }\n    catch (error) {\n        console.error('Error removing model provider preference:', error);\n    }\n}\nexports.removeModelProviderPreference = removeModelProviderPreference;\nfunction getAllModelProviderPreferences() {\n    try {\n        const preferences = loadProviderPreferences();\n        return preferences.modelProviderMap.sort((a, b) => new Date(b.lastUsed).getTime() - new Date(a.lastUsed).getTime());\n    }\n    catch (error) {\n        console.error('Error getting all model provider preferences:', error);\n        return [];\n    }\n}\nexports.getAllModelProviderPreferences = getAllModelProviderPreferences;\n//# sourceMappingURL=provider-preferences.js.map",
      "filePath": "../dist/utils/provider-preferences.js",
      "embedding": [
        5.55,
        1.3,
        0,
        0.4,
        1.5,
        0.07919413154138287,
        0.011278184795937875,
        0.020772491549531303,
        0.06537761160579639,
        0.08944225863233665,
        0.00524404415803198,
        0.05844984632960309,
        0.013171037727901569,
        0.05702462372965425,
        0.054455259217497554,
        0.012079584805192202,
        0.09975618621898151,
        0.05968996851049072,
        0.07145468971046147,
        0.041833201293270075,
        0.042302306820072515,
        0.03377598902072733,
        0.08031936844969831,
        0.09403774046034553,
        0.09669588555844372,
        0.013211478613864826,
        0.005794940542083749,
        0.01771590720706546,
        0.03866483277906452,
        0.029831814952124548,
        0.07956756228022929,
        0.03787616375361137,
        0.0202598166002279,
        0.007999566538147396,
        0.002684368261685788,
        0.04948682096037748,
        0.08688239632676296,
        0.08312724176985652,
        0.02357380646211217,
        0.014081296911755704,
        0.09699464887878555,
        0.0015127166925665626,
        0.07779677196989482,
        0.08250503650658177,
        0.07184574175384821,
        0.05859159162008949,
        0.04680356186644952,
        0.06522742830360982,
        0.05764730287365303,
        0.03175385464617216,
        0.05057608204085944,
        0.04002185716661806,
        0.050651209366247035,
        0.07195991724323307,
        0.04176254661087754,
        0.05344268502931147,
        0.017684266692285667,
        0.045587668620597044,
        0.02470319749782709,
        0.04123264709618786,
        0.014703589076686664,
        0.04440906334308804,
        0.06974737525565707,
        0.02898719949137323,
        0.04442094010581137,
        0.04100246818084477,
        0.033276223362793005,
        0.05403598318261017,
        0.03271544634970437,
        0.08761643440689267,
        0.09571640819863639,
        0.02704693453734617,
        0.06663243894611957,
        0.05063980138120151,
        0.07982187156729496,
        0.027777886898526408,
        0.026015946728331563,
        0.07546885929587921,
        0.02819376939584857,
        0.09032938993192685,
        0.08926045054444702,
        0.08237123272286911,
        0.021228718758921284,
        0.07715810691017827,
        0.006980823073655773,
        0.0024147846951123823,
        0.001502848610219365,
        0.005542326521821917,
        0.052801710868692356,
        0.0671975749127852,
        0.08714822475810353,
        0.009532373187713572,
        0.07260836952458083,
        0.07430620341305952,
        0.08766928798126855,
        0.03164620470855012,
        0.09388572281276591,
        0.06396905195902607,
        0.041629996571415306,
        0.06889278260306796
      ]
    },
    {
      "content": "export interface SessionConfig {\n    instanceId: string;\n    currentModel: string;\n    temperature?: number;\n    createdAt: string;\n    lastUsed: string;\n}\ndeclare class SessionManager {\n    private instanceId;\n    private sessionDir;\n    constructor();\n    private getGigaDir;\n    private getSessionDir;\n    private ensureSessionDir;\n    private getSessionConfigPath;\n    private saveSessionConfig;\n    getInstanceId(): string;\n    getCurrentModel(): string;\n    setCurrentModel(modelName: string): void;\n    getTemperature(): number;\n    setTemperature(temperature: number): void;\n    getSessionInfo(): SessionConfig | null;\n    static cleanupOldSessions(olderThanDays?: number): void;\n}\nexport declare const sessionManager: SessionManager;\nexport {};\n",
      "filePath": "../dist/utils/session-manager.d.ts",
      "embedding": [
        0.63,
        0,
        0.1,
        0,
        0.3,
        0.09603491048731995,
        0.0862648081649705,
        0.015621460180099512,
        0.04440537144088498,
        0.09787809461147916,
        0.06486284943241835,
        0.03216402599551704,
        0.024579498670858804,
        0.017290869400477037,
        0.054277510585339056,
        0.033252798931823105,
        0.08709341292963527,
        0.023100598946342178,
        0.053688209348154714,
        0.02412353230537269,
        0.07292856043253519,
        0.021624799826471953,
        0.08389064498126486,
        0.06502830124920225,
        0.05775322780891623,
        0.012640644143882851,
        0.060985960792925537,
        0.008482213782070236,
        0.012077791581791742,
        0.035527471531332434,
        0.016081433612822094,
        0.02804786209401581,
        0.09245011221109879,
        0.009523173561347777,
        0.06836281250275157,
        0.028887425401055836,
        0.005160789831320356,
        0.040260078191476534,
        0.08013835730993779,
        0.0997540752129002,
        0.08495263955614632,
        0.024922300591672133,
        0.04151917160450698,
        0.0221236637396552,
        0.011670390471511027,
        0.04537164351866654,
        0.02520280076465764,
        0.06866679915315893,
        0.0661127719304747,
        0.028141561848322606,
        0.024326299105356344,
        0.02198242312497071,
        0.02375506436510502,
        0.03956631877742071,
        0.08423627085267746,
        0.05866543225740261,
        0.034717441788896165,
        0.0390030226248117,
        0.03981395209358163,
        0.04665289453024429,
        0.08061112001874784,
        0.08813165839211995,
        0.07965963949337798,
        0.059781571639573684,
        0.09851672271398446,
        0.03353166808064641,
        0.0012935956320081821,
        0.0018051662496353484,
        0.06707604734223996,
        0.029209386088589563,
        0.020055864106668944,
        0.06304040965395863,
        0.02403137309895305,
        0.00958285948425839,
        0.08020379433278536,
        0.08879115835664238,
        0.045922283622303606,
        0.05788458599399293,
        0.011691105193506059,
        0.04822974143122351,
        0.08540410679859904,
        0.02267620097136064,
        0.06267048422027315,
        0.04928468336762634,
        0.08670842664975882,
        0.0836425240060059,
        0.09554411170266153,
        0.008326175429199624,
        0.05244994645518497,
        0.02048079555302015,
        0.056673611851525765,
        0.08949200214756066,
        0.045939099862602695,
        0.05080672589013416,
        0.02627768166407283,
        0.0694481663689722,
        0.07643105020496854,
        0.06712611735413972,
        0.006877428008939435,
        0.0820126448119821
      ]
    },
    {
      "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sessionManager = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst os = __importStar(require(\"os\"));\nconst crypto_1 = require(\"crypto\");\nclass SessionManager {\n    constructor() {\n        this.instanceId = (0, crypto_1.randomUUID)();\n        this.sessionDir = this.getSessionDir();\n        this.ensureSessionDir();\n        this.saveSessionConfig();\n    }\n    getGigaDir() {\n        const homeDir = os.homedir();\n        const gigaDir = path.join(homeDir, '.giga');\n        if (!fs.existsSync(gigaDir)) {\n            fs.mkdirSync(gigaDir, { mode: 0o700 });\n        }\n        return gigaDir;\n    }\n    getSessionDir() {\n        const gigaDir = this.getGigaDir();\n        return path.join(gigaDir, 'sessions', this.instanceId);\n    }\n    ensureSessionDir() {\n        if (!fs.existsSync(this.sessionDir)) {\n            fs.mkdirSync(this.sessionDir, { recursive: true, mode: 0o700 });\n        }\n    }\n    getSessionConfigPath() {\n        return path.join(this.sessionDir, 'config.json');\n    }\n    saveSessionConfig() {\n        try {\n            const config = {\n                instanceId: this.instanceId,\n                currentModel: 'moonshotai/kimi-k2-instruct',\n                createdAt: new Date().toISOString(),\n                lastUsed: new Date().toISOString()\n            };\n            fs.writeFileSync(this.getSessionConfigPath(), JSON.stringify(config, null, 2), { mode: 0o600 });\n        }\n        catch (error) {\n            console.error('Error saving session config:', error);\n        }\n    }\n    getInstanceId() {\n        return this.instanceId;\n    }\n    getCurrentModel() {\n        try {\n            const configPath = this.getSessionConfigPath();\n            if (!fs.existsSync(configPath)) {\n                return 'moonshotai/kimi-k2-instruct'; // default fallback\n            }\n            const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n            return config.currentModel || 'moonshotai/kimi-k2-instruct';\n        }\n        catch (error) {\n            console.error('Error loading current model:', error);\n            return 'moonshotai/kimi-k2-instruct';\n        }\n    }\n    setCurrentModel(modelName) {\n        try {\n            const configPath = this.getSessionConfigPath();\n            let config;\n            if (fs.existsSync(configPath)) {\n                config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n            }\n            else {\n                config = {\n                    instanceId: this.instanceId,\n                    currentModel: modelName,\n                    createdAt: new Date().toISOString(),\n                    lastUsed: new Date().toISOString()\n                };\n            }\n            config.currentModel = modelName;\n            config.lastUsed = new Date().toISOString();\n            fs.writeFileSync(configPath, JSON.stringify(config, null, 2), { mode: 0o600 });\n        }\n        catch (error) {\n            console.error('Error saving current model:', error);\n        }\n    }\n    getTemperature() {\n        try {\n            const configPath = this.getSessionConfigPath();\n            if (!fs.existsSync(configPath)) {\n                return 0.7; // default temperature\n            }\n            const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n            return config.temperature ?? 0.7;\n        }\n        catch (error) {\n            console.error('Error loading temperature:', error);\n            return 0.7;\n        }\n    }\n    setTemperature(temperature) {\n        try {\n            const configPath = this.getSessionConfigPath();\n            let config;\n            if (fs.existsSync(configPath)) {\n                config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n            }\n            else {\n                config = {\n                    instanceId: this.instanceId,\n                    currentModel: 'moonshotai/kimi-k2-instruct',\n                    temperature: temperature,\n                    createdAt: new Date().toISOString(),\n                    lastUsed: new Date().toISOString()\n                };\n            }\n            config.temperature = temperature;\n            config.lastUsed = new Date().toISOString();\n            fs.writeFileSync(configPath, JSON.stringify(config, null, 2), { mode: 0o600 });\n        }\n        catch (error) {\n            console.error('Error saving temperature:', error);\n        }\n    }\n    getSessionInfo() {\n        try {\n            const configPath = this.getSessionConfigPath();\n            if (!fs.existsSync(configPath)) {\n                return null;\n            }\n            return JSON.parse(fs.readFileSync(configPath, 'utf8'));\n        }\n        catch (error) {\n            console.error('Error loading session info:', error);\n            return null;\n        }\n    }\n    // Cleanup old sessions (optional - called periodically)\n    static cleanupOldSessions(olderThanDays = 7) {\n        try {\n            const homeDir = os.homedir();\n            const sessionsDir = path.join(homeDir, '.giga', 'sessions');\n            if (!fs.existsSync(sessionsDir)) {\n                return;\n            }\n            const cutoffDate = new Date();\n            cutoffDate.setDate(cutoffDate.getDate() - olderThanDays);\n            const sessionDirs = fs.readdirSync(sessionsDir);\n            for (const sessionDir of sessionDirs) {\n                const sessionPath = path.join(sessionsDir, sessionDir);\n                const configPath = path.join(sessionPath, 'config.json');\n                if (fs.existsSync(configPath)) {\n                    try {\n                        const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n                        const lastUsed = new Date(config.lastUsed);\n                        if (lastUsed < cutoffDate) {\n                            fs.rmSync(sessionPath, { recursive: true, force: true });\n                        }\n                    }\n                    catch (error) {\n                        // If we can't read the config, consider it for cleanup\n                        const stats = fs.statSync(sessionPath);\n                        if (stats.mtime < cutoffDate) {\n                            fs.rmSync(sessionPath, { recursive: true, force: true });\n                        }\n                    }\n                }\n            }\n        }\n        catch (error) {\n            console.error('Error cleaning up old sessions:', error);\n        }\n    }\n}\n// Export singleton instance\nexports.sessionManager = new SessionManager();\n//# sourceMappingURL=session-manager.js.map",
      "filePath": "../dist/utils/session-manager.js",
      "embedding": [
        6.6,
        0.6,
        0.1,
        0.5,
        0.3,
        0.060326244936943586,
        0.006552772007659968,
        0.0122522900792153,
        0.08541549244876591,
        0.0698403294777795,
        0.06470851664271375,
        0.08952815469182344,
        0.07055933420626267,
        0.036706758123344896,
        0.08994554351577715,
        0.07322101596672602,
        0.04611222945325508,
        0.03282536982846251,
        0.00010358254794496925,
        0.03343197116016463,
        0.01997679951415169,
        0.08924102200012997,
        0.015230798053890538,
        0.05233518217925958,
        0.02610357859314906,
        0.028059548185438946,
        0.09124315886642304,
        0.08766801721327323,
        0.046712225602521674,
        0.0460099564024974,
        0.0728658762216863,
        0.07118687003332254,
        0.03670930048932585,
        0.02051215019426571,
        0.0961469247635169,
        0.03258562766918573,
        0.04286089879179488,
        0.02360563290934562,
        0.0568644970782763,
        0.012155159697215524,
        0.06943697032089051,
        0.02129425519943269,
        0.07399868043991417,
        0.08924508614496479,
        0.048412944514650995,
        0.07178386637757021,
        0.07120957944428088,
        0.055839783674405875,
        0.010315670204118855,
        0.09432937381219222,
        0.013940868183991496,
        0.011298809114552211,
        0.04832153641193541,
        0.06195311517247812,
        0.014029071050744524,
        0.07821989605689492,
        0.04266991051417057,
        0.001630432958836703,
        0.02547952123765397,
        0.08397194835729258,
        0.09513117541882282,
        0.07726151797487026,
        0.07767743992617822,
        0.06788632491831008,
        0.0029744318013767423,
        0.0715030683831604,
        0.05013835657371636,
        0.01620109221830427,
        0.0743715079207143,
        0.024667009189621527,
        0.027755019361960932,
        0.06723606382578089,
        0.005071698497687494,
        0.03885032849224897,
        0.052090310065053026,
        0.0426510875583904,
        0.09063241483865943,
        0.0974435029725763,
        0.007844972861686339,
        0.012620971220698508,
        0.0946936938068349,
        0.0897187258835937,
        0.07461057495177628,
        0.02158518349404276,
        0.0458705304741957,
        0.004466942383613115,
        0.012297932872283935,
        0.06470197074667769,
        0.07741559133715875,
        0.01602973092905058,
        0.024663589150778143,
        0.08716486436586574,
        0.006022774401344466,
        0.060352758076607664,
        0.028100202326487703,
        0.04387366386328239,
        0.07604291388230766,
        0.026113509393251,
        0.047651254830678495,
        0.04702720955371767
      ]
    },
    {
      "content": "export declare class TokenCounter {\n    private encoder;\n    constructor(model?: string);\n    /**\n     * Count tokens in a string\n     */\n    countTokens(text: string): number;\n    /**\n     * Count tokens in messages array (for chat completions)\n     */\n    countMessageTokens(messages: Array<{\n        role: string;\n        content: string | null;\n        [key: string]: any;\n    }>): number;\n    /**\n     * Estimate tokens for streaming content\n     * This is an approximation since we don't have the full response yet\n     */\n    estimateStreamingTokens(accumulatedContent: string): number;\n    /**\n     * Clean up resources\n     */\n    dispose(): void;\n}\n/**\n * Create a token counter instance\n */\nexport declare function createTokenCounter(model?: string): TokenCounter;\n",
      "filePath": "../dist/utils/token-counter.d.ts",
      "embedding": [
        0.92,
        0.1,
        0.1,
        0,
        0.2,
        0.022462167969155067,
        0.09234710547820507,
        0.04569334541768814,
        0.06470870064626709,
        0.04274077099764126,
        0.05465456560048663,
        0.0046925892361935565,
        0.03055498347712217,
        0.09773684405065966,
        0.01866415272447023,
        0.003594682959516893,
        0.06071144033334729,
        0.015685507399024867,
        0.04620587551132485,
        0.07721641789003036,
        0.048819754231803986,
        0.022670120157867114,
        0.07806286221110734,
        0.034782441185447203,
        0.05956913263711899,
        0.07534533746476046,
        0.017291503625424264,
        0.07932551092031374,
        0.0891936065169739,
        0.059451755483578055,
        0.045250750318535454,
        0.02443353931475031,
        0.013804369329177592,
        0.051919825057885755,
        0.09214729426185822,
        0.09051430862032889,
        0.04956946907169416,
        0.05769331822106341,
        0.07814491159484892,
        0.0505264145737274,
        0.08887717327222544,
        0.0682374811000686,
        0.04661431584456184,
        0.0626182493593944,
        0.014861904879916744,
        0.01808598824028238,
        0.05081995177868745,
        0.09406167699955642,
        0.09906523895010927,
        0.01525439221190893,
        0.04007117431667484,
        0.01275067782198478,
        0.08998434098562308,
        0.01246912298152797,
        0.026309439303755757,
        0.05114153466963045,
        0.041377981396206125,
        0.01960272608262611,
        0.050085829011320526,
        0.024856228275068448,
        0.07942818947188465,
        0.038272495058106815,
        0.09212595529310338,
        0.07146526858538706,
        0.019099264487177414,
        0.05826628297776999,
        0.07384349223134454,
        0.09754040025135391,
        0.024290352806712448,
        0.06155640306224522,
        0.02468139662306932,
        0.037406515957311474,
        0.0013588951709894493,
        0.0376074104101243,
        0.0071579866780296045,
        0.057904421079989526,
        0.0009359182808432843,
        0.005091435989301985,
        0.07986551239615242,
        0.05965911568023511,
        0.011355033976556607,
        0.01974875587718089,
        0.0385912573583629,
        0.0314103245816311,
        0.07167088416610655,
        0.04941019534274859,
        0.08787207798831173,
        0.04306718040286483,
        0.038044952593598094,
        0.009360409939078463,
        0.022471467362912445,
        0.038388637277035544,
        0.08887438440071702,
        0.05014829643253563,
        0.0800228319710115,
        0.09166748104942606,
        0.029063146379156836,
        0.06846201492279959,
        0.025898500131952454,
        0.07840504821950671
      ]
    },
    {
      "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createTokenCounter = exports.TokenCounter = void 0;\nconst tiktoken_1 = require(\"tiktoken\");\nclass TokenCounter {\n    constructor(model = 'gpt-4') {\n        try {\n            // Try to get encoding for specific model\n            this.encoder = (0, tiktoken_1.encoding_for_model)(model);\n        }\n        catch {\n            // Fallback to cl100k_base (used by GPT-4 and most modern models)\n            this.encoder = (0, tiktoken_1.get_encoding)('cl100k_base');\n        }\n    }\n    /**\n     * Count tokens in a string\n     */\n    countTokens(text) {\n        if (!text)\n            return 0;\n        return this.encoder.encode(text).length;\n    }\n    /**\n     * Count tokens in messages array (for chat completions)\n     */\n    countMessageTokens(messages) {\n        let totalTokens = 0;\n        for (const message of messages) {\n            // Every message follows <|start|>{role/name}\\n{content}<|end|\\>\\n\n            totalTokens += 3; // Base tokens per message\n            if (message.content && typeof message.content === 'string') {\n                totalTokens += this.countTokens(message.content);\n            }\n            if (message.role) {\n                totalTokens += this.countTokens(message.role);\n            }\n            // Add extra tokens for tool calls if present\n            if (message.tool_calls) {\n                totalTokens += this.countTokens(JSON.stringify(message.tool_calls));\n            }\n        }\n        totalTokens += 3; // Every reply is primed with <|start|>assistant<|message|>\n        return totalTokens;\n    }\n    /**\n     * Estimate tokens for streaming content\n     * This is an approximation since we don't have the full response yet\n     */\n    estimateStreamingTokens(accumulatedContent) {\n        return this.countTokens(accumulatedContent);\n    }\n    /**\n     * Clean up resources\n     */\n    dispose() {\n        this.encoder.free();\n    }\n}\nexports.TokenCounter = TokenCounter;\n/**\n * Create a token counter instance\n */\nfunction createTokenCounter(model) {\n    return new TokenCounter(model);\n}\nexports.createTokenCounter = createTokenCounter;\n//# sourceMappingURL=token-counter.js.map",
      "filePath": "../dist/utils/token-counter.js",
      "embedding": [
        2.21,
        0.1,
        0.1,
        0,
        0.5,
        0.02091927227861362,
        0.0682502519229464,
        0.08282341869129657,
        0.09835097200560598,
        0.010210862284965162,
        0.02862083505024401,
        0.05653817373600639,
        0.03188069501867482,
        0.08946854044551483,
        0.04268642486166285,
        0.0312104318135811,
        0.0014514819296488459,
        0.026169431893401887,
        0.0351484667836522,
        0.02072533583450699,
        0.03468067889262616,
        0.0647958729486073,
        0.05855721723068796,
        0.007013847026258535,
        0.010201330390077347,
        0.0014504078949561074,
        0.08828450421154632,
        0.05846280400273111,
        0.08596355522625439,
        0.026926780367947812,
        0.08192633731612041,
        0.08645717240894621,
        0.08674840717517746,
        0.016116561462305123,
        0.03350218099418433,
        0.04326380576253213,
        0.09631137612962092,
        0.004967386507064864,
        0.06581044580089428,
        0.004226788045462094,
        0.08414574217786727,
        0.0906246093225499,
        0.0681661798660612,
        0.04012702925963332,
        0.0985104942736989,
        0.042841720172602515,
        0.05190632442872062,
        0.055987279402016234,
        0.03453601989222486,
        0.02762183628729016,
        0.04637953529108654,
        0.0018032217661467344,
        0.014995864977573348,
        0.03232473657666712,
        0.051292240243718284,
        0.03855582118215931,
        0.05070814342133664,
        0.04672699668382671,
        0.017048416934941746,
        0.010057726759367858,
        0.009673883525885019,
        0.08710630980812357,
        0.08792503062449168,
        0.08583823313631453,
        0.04244143171491308,
        0.07730506001942394,
        0.0745786081845473,
        0.06797069111126659,
        0.07850687317856597,
        0.008402984751194031,
        0.09515274954963593,
        0.09321417560963786,
        0.00527722913355665,
        0.0763705626422822,
        0.053655961498559085,
        0.09560898235570718,
        0.08314581705562483,
        0.060433551421300094,
        0.016797988369825125,
        0.009579976331414908,
        0.00819616501640188,
        0.04142426729502938,
        0.051827883457993155,
        0.07566791992065311,
        0.0697944875670039,
        0.012144928241887088,
        0.013042015435473044,
        0.031336384187483315,
        0.0948406757585605,
        0.05887961631112614,
        0.02689372453181789,
        0.06739186639457412,
        0.003071068949099776,
        0.01828466083790482,
        0.017143559592760704,
        0.01357101386272025,
        0.04870380712387715,
        0.030298579647789536,
        0.03945292633747706,
        0.013092875895969903
      ]
    },
    {
      "content": "import { SimpleRAG } from './simple-rag';\n\nasync function main() {\n  const rag = new SimpleRAG();\n  await rag.indexDocuments('../');\n}\n\nmain().catch(console.error);",
      "filePath": "../giga-rag-test/index-simple.ts",
      "embedding": [
        0.19,
        0.1,
        0,
        0.1,
        0,
        0.011874608468011673,
        0.07374467268454647,
        0.034963691010301,
        0.09282048981806833,
        0.09250792678481004,
        0.09950982331973375,
        0.07153230483825088,
        0.06198810148362802,
        0.06174542567432828,
        0.04028581862808698,
        0.0726543695110121,
        0.006426212874867021,
        0.0639863972675441,
        0.08313248639109837,
        0.013243846174887464,
        0.09725954596846614,
        0.06996374623857152,
        0.0798868719208202,
        0.02230476469271754,
        0.037774140628036725,
        0.03224306158389502,
        0.013342047488316723,
        0.049700701962668216,
        0.02625416657715687,
        0.013946069764932668,
        0.021051136655022784,
        0.09527227756080413,
        0.018497132200642984,
        0.07690017336913577,
        0.07760086269990885,
        0.058678419341356605,
        0.009393230480082716,
        0.018299539428700395,
        0.05923378027224824,
        0.016957450623272308,
        0.05342908169682518,
        0.061092844595972834,
        0.017128017520650487,
        0.031622933190549034,
        0.0307355905656993,
        0.010603297012575697,
        0.052083275507808224,
        0.09104911644900282,
        0.09113017940173646,
        0.09609861329041544,
        0.06003662976320956,
        0.0668877693142481,
        0.07875424600614601,
        0.03771616230559054,
        0.04118678273547749,
        0.09864582966347551,
        0.06433588495925505,
        0.05739329805778948,
        0.09661738579331959,
        0.08960437182563791,
        0.04168421591204444,
        0.040372299056447375,
        0.04151834732132969,
        0.03992876313362029,
        0.06817342801821658,
        0.00006760100909306566,
        0.0035526830561940395,
        0.013394286273629109,
        0.03467789234505884,
        0.058511912044005666,
        0.07376848989303075,
        0.05071066211732982,
        0.039579705538151905,
        0.09773926877921008,
        0.06659498462093112,
        0.04176273619019652,
        0.08653471605304365,
        0.08386004426285684,
        0.02813022449455066,
        0.062379980139120765,
        0.08199822932220077,
        0.08278437395178044,
        0.06439446987901881,
        0.043360258275914956,
        0.07682263923106986,
        0.037772676865289415,
        0.06325244931317513,
        0.08836041853866261,
        0.058970008285625534,
        0.02492953888515731,
        0.08373323080531589,
        0.012447559383769725,
        0.0968688517105574,
        0.0033153996036919043,
        0.09119944679536639,
        0.04380459269287404,
        0.09372456626527376,
        0.010976201474387237,
        0.0829715270371312,
        0.09133166231879317
      ]
    },
    {
      "content": "import {\n  Document,\n  VectorStoreIndex,\n  storageContextFromDefaults,\n  Settings,\n  OpenAIEmbedding,\n} from \"llamaindex\";\nimport * as dotenv from \"dotenv\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\ndotenv.config();\n\n// Set up embedding model - try OpenAI first\nSettings.embedModel = new OpenAIEmbedding({\n  model: \"text-embedding-3-small\",\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nfunction readDirectoryRecursively(dir: string): Document[] {\n  const documents: Document[] = [];\n  const files = fs.readdirSync(dir);\n  \n  for (const file of files) {\n    const filePath = path.join(dir, file);\n    const stat = fs.statSync(filePath);\n    \n    if (stat.isDirectory()) {\n      if (!file.startsWith('.') && file !== 'node_modules') {\n        documents.push(...readDirectoryRecursively(filePath));\n      }\n    } else if (file.endsWith('.ts') || file.endsWith('.js') || file.endsWith('.tsx') || file.endsWith('.jsx')) {\n      const content = fs.readFileSync(filePath, 'utf-8');\n      documents.push(new Document({ text: content, metadata: { file_path: filePath } }));\n    }\n  }\n  \n  return documents;\n}\n\nasync function createIndex() {\n  console.log(\"🚀 Starting the indexing process...\");\n\n  const documents = readDirectoryRecursively(\"../\");\n  console.log(`📚 Found ${documents.length} files to index.`);\n\n  const storageContext = await storageContextFromDefaults({\n    persistDir: \"./storage\",\n  });\n\n  const index = await VectorStoreIndex.fromDocuments(documents, {\n    storageContext,\n  });\n  \n  console.log(\"✅ Index created and saved successfully to ./storage\");\n}\n\ncreateIndex().catch(console.error);",
      "filePath": "../giga-rag-test/index.ts",
      "embedding": [
        1.64,
        0.2,
        0,
        0.4,
        0,
        0.06933129489694777,
        0.005184940526265447,
        0.08432966972921,
        0.03562516522495185,
        0.060732244148054594,
        0.03045772973902261,
        0.07171388124547722,
        0.08265840010532242,
        0.053273009342529654,
        0.08816746148781728,
        0.045089806371044205,
        0.07837135021006285,
        0.08518168189903831,
        0.062139231601440775,
        0.0966384851562723,
        0.05669287412118218,
        0.05780422639734473,
        0.02619388410071495,
        0.002426884638211868,
        0.09349971611005464,
        0.09363853963350442,
        0.0024396422704435097,
        0.00545371642774416,
        0.002848220454032613,
        0.08496793300003642,
        0.07453347891571709,
        0.015717474346182626,
        0.019806011220227328,
        0.06056651480109396,
        0.08599695514975306,
        0.06572868746770381,
        0.05795612187269009,
        0.08091491401311815,
        0.03224757956187554,
        0.09193019228963795,
        0.02772374149131155,
        0.06222216127933229,
        0.04888727239272311,
        0.06049217547761071,
        0.06399683077731944,
        0.05046649837048964,
        0.011813869925942423,
        0.02047799431672236,
        0.05727715161393794,
        0.056488373424731037,
        0.0324569263109698,
        0.09219688398525766,
        0.03710093358148935,
        0.09860083230724002,
        0.026511691571727104,
        0.07427563674585726,
        0.02040115342271953,
        0.008422858992541415,
        0.0020139592026383493,
        0.023007800165523996,
        0.03746061772828085,
        0.016216698871653955,
        0.025795509872219947,
        0.02174909543970757,
        0.011490922086283363,
        0.0674372974034526,
        0.03659962324758281,
        0.014362070981306286,
        0.06396825139958755,
        0.0031468100395391167,
        0.07468398907162978,
        0.06058564391707852,
        0.05284744178039144,
        0.01970923785603428,
        0.09725803498984084,
        0.069866495967371,
        0.038614120007458314,
        0.04577571922826134,
        0.06263949534310709,
        0.08902005211288955,
        0.08341742261310812,
        0.055456468259165496,
        0.05496618546550133,
        0.08632608492625443,
        0.09664499345842707,
        0.06602906596948516,
        0.06248397536489621,
        0.06750125410912126,
        0.03612043183804577,
        0.05466040947144061,
        0.03645802190523484,
        0.04146437331171726,
        0.08168054699945344,
        0.06953548236026923,
        0.044630385252848986,
        0.025827795377130536,
        0.01935547598744669,
        0.0702944725938048,
        0.040347622576990254,
        0.01716190573375509
      ]
    },
    {
      "content": "import { SimpleRAG } from './simple-rag';\n\nasync function main() {\n  const query = process.argv[2];\n  if (!query) {\n    console.error(\"Please provide a query. Usage: npx ts-node query-simple.ts 'Your question here'\");\n    process.exit(1);\n  }\n\n  const rag = new SimpleRAG();\n  await rag.query(query);\n}\n\nmain().catch(console.error);",
      "filePath": "../giga-rag-test/query-simple.ts",
      "embedding": [
        0.39,
        0.1,
        0,
        0.1,
        0,
        0.014727072840947198,
        0.0342142981379032,
        0.09503847963232231,
        0.05675057422242385,
        0.06462924217180425,
        0.03906708137228594,
        0.06556172848914006,
        0.02745656397237798,
        0.03883729590806845,
        0.019797135495870078,
        0.0003716625829066733,
        0.03570989860292957,
        0.06469244947761463,
        0.0669251958669341,
        0.09682058063710736,
        0.00967728217628523,
        0.017836210257356877,
        0.060924585843289185,
        0.02394831828136487,
        0.046869847982725844,
        0.048052813936666584,
        0.011289895330548562,
        0.028180708724840933,
        0.0816652360289446,
        0.02545362525227566,
        0.011965901339290253,
        0.03306620173077268,
        0.08670590631373698,
        0.0924150037471104,
        0.08982304132386558,
        0.09961235478522357,
        0.07214293043871597,
        0.05822319773203685,
        0.07241765953386138,
        0.0041422266025995524,
        0.014231295492166186,
        0.042959341142166124,
        0.09500830852511612,
        0.027383957470629185,
        0.056964816384209166,
        0.0749007392879711,
        0.09356581875724146,
        0.06472976159072531,
        0.0003411804758327697,
        0.00874352096737331,
        0.05855179444646813,
        0.0016823116588757126,
        0.061995292414110816,
        0.014363214291898319,
        0.021552771952088736,
        0.018704905921865057,
        0.018477215967794346,
        0.06736956447568408,
        0.0972289023858625,
        0.09147226506535634,
        0.08966052491656401,
        0.03555615342533815,
        0.06882525750860541,
        0.08261957432671596,
        0.0036921550874945753,
        0.0850424529648321,
        0.08214737188730972,
        0.05833404803065531,
        0.08544879693769024,
        0.013588946179508177,
        0.04656617116488121,
        0.0494741460009148,
        0.07566640116970408,
        0.04243011267635371,
        0.08106439573099244,
        0.04092671628409994,
        0.08154029212847293,
        0.04701233804841603,
        0.0225596972342502,
        0.0679410806142682,
        0.006012649614670762,
        0.028933738572957047,
        0.03541202693339929,
        0.06088290863728127,
        0.06426040409029062,
        0.050732693017511925,
        0.053365632052781456,
        0.05075457732075368,
        0.07389750128464082,
        0.07392895824777469,
        0.027335360906342723,
        0.03163654395716164,
        0.0244884034486639,
        0.09365746386147804,
        0.03512679974650778,
        0.05455149698708326,
        0.0421998112582664,
        0.08133805056987217,
        0.03301563154471191,
        0.0015710533002582516
      ]
    },
    {
      "content": "import {\n  VectorStoreIndex,\n  storageContextFromDefaults,\n} from \"llamaindex\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nasync function queryIndex(query: string) {\n  console.log(`🔎 Querying index with: \"${query}\"`);\n\n  const storageContext = await storageContextFromDefaults({ persistDir: \"./storage\" });\n  \n  const index = await VectorStoreIndex.init({\n    storageContext,\n  });\n\n  const queryEngine = index.asQueryEngine();\n\n  const response = await queryEngine.query({ query });\n\n  console.log(\"\\n💬 Response:\");\n  console.log(response.toString());\n\n  console.log(\"\\n🔍 Source Nodes:\");\n  response.sourceNodes?.forEach((node, index) => {\n    console.log(`\\n--- Node ${index + 1} (Score: ${node.score?.toFixed(4)}) ---`);\n    console.log(`File: ${node.metadata.file_path}`);\n    console.log(`Content:\\n${node.text?.substring(0, 250)}...`);\n  });\n}\n\nconst userQuery = process.argv[2];\nif (!userQuery) {\n  console.error(\"Please provide a query. Usage: npx ts-node query.ts 'Your question here'\");\n  process.exit(1);\n}\n\nqueryIndex(userQuery).catch(console.error);",
      "filePath": "../giga-rag-test/query.ts",
      "embedding": [
        0.95,
        0.1,
        0,
        0.2,
        0,
        0.05492199492164301,
        0.036039743799383565,
        0.06648491001274735,
        0.023804757488024,
        0.0004462193652266855,
        0.014674987063181821,
        0.022942495694382604,
        0.017031946251699792,
        0.030984501468559425,
        0.0541648260494707,
        0.02220841632835563,
        0.058083190338728746,
        0.04442964633178129,
        0.0904523373819113,
        0.020717592687743893,
        0.05086480754853872,
        0.0024763428331476822,
        0.06354261817381239,
        0.08602163162047385,
        0.004756086444948782,
        0.08877617359974188,
        0.05502405630910501,
        0.08015185159905232,
        0.09666572467435242,
        0.0973924131637451,
        0.01760044261671503,
        0.00012376103782564264,
        0.08778029446986924,
        0.06249032612530706,
        0.00473864616062798,
        0.0623214250580744,
        0.08836950592574619,
        0.030563845650842216,
        0.05086190915663933,
        0.055047181289649395,
        0.02504223951924377,
        0.03452113367087958,
        0.0735207038209188,
        0.01349017354111478,
        0.013436326238208741,
        0.05826190215517473,
        0.04422239989342554,
        0.040823895324360863,
        0.08561714601706841,
        0.04503043596253703,
        0.08805039268950789,
        0.040823185196172875,
        0.08416709148417512,
        0.07424507149976343,
        0.08861773664726741,
        0.018700640791631196,
        0.019758117180009915,
        0.05440040333357715,
        0.03962842061406038,
        0.020447371639815606,
        0.03534072690277732,
        0.06040329879639707,
        0.020365392648779138,
        0.056639113951697476,
        0.013679868348257296,
        0.0028579676834126545,
        0.08161812967820314,
        0.07800586298403209,
        0.05774672648772375,
        0.04853788801209008,
        0.0532209921474875,
        0.09693982658593868,
        0.08465661595912742,
        0.005884125060921553,
        0.005046074629246023,
        0.045248920148715246,
        0.024525442810484868,
        0.05501655050487142,
        0.03081932053805604,
        0.022825276495995084,
        0.09334876064427494,
        0.02523744795693802,
        0.012574476670498403,
        0.035679760388384885,
        0.06708459634599778,
        0.03631790485572766,
        0.08341753644803947,
        0.06649079487013256,
        0.08794304870999155,
        0.02351419288449118,
        0.06552156781185774,
        0.044345234801618096,
        0.04786367028676002,
        0.07412347452490343,
        0.04979369306216255,
        0.034366709984115895,
        0.06530820800438523,
        0.03845787731575809,
        0.0864284407351979,
        0.05658157094938822
      ]
    },
    {
      "content": "import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as dotenv from \"dotenv\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\ndotenv.config();\n\ninterface Document {\n  content: string;\n  filePath: string;\n  embedding?: number[];\n}\n\nclass SimpleRAG {\n  private documents: Document[] = [];\n  private genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);\n\n  // Simple embedding using text characteristics\n  private createSimpleEmbedding(text: string): number[] {\n    const words = text.toLowerCase().split(/\\s+/);\n    const embedding = new Array(100).fill(0);\n    \n    // Create a simple feature vector based on text characteristics\n    embedding[0] = words.length / 100; // Document length\n    embedding[1] = (text.match(/function/g) || []).length / 10; // Function count\n    embedding[2] = (text.match(/class/g) || []).length / 10; // Class count\n    embedding[3] = (text.match(/import/g) || []).length / 10; // Import count\n    embedding[4] = (text.match(/export/g) || []).length / 10; // Export count\n    \n    // Add some randomness for variety\n    for (let i = 5; i < 100; i++) {\n      embedding[i] = Math.random() * 0.1;\n    }\n    \n    return embedding;\n  }\n\n  private cosineSimilarity(a: number[], b: number[]): number {\n    const dotProduct = a.reduce((sum, val, i) => sum + val * b[i], 0);\n    const magnitudeA = Math.sqrt(a.reduce((sum, val) => sum + val * val, 0));\n    const magnitudeB = Math.sqrt(b.reduce((sum, val) => sum + val * val, 0));\n    return dotProduct / (magnitudeA * magnitudeB);\n  }\n\n  private readDirectoryRecursively(dir: string): void {\n    const files = fs.readdirSync(dir);\n    \n    for (const file of files) {\n      const filePath = path.join(dir, file);\n      const stat = fs.statSync(filePath);\n      \n      if (stat.isDirectory()) {\n        if (!file.startsWith('.') && file !== 'node_modules' && file !== 'storage') {\n          this.readDirectoryRecursively(filePath);\n        }\n      } else if (file.endsWith('.ts') || file.endsWith('.js') || file.endsWith('.tsx') || file.endsWith('.jsx')) {\n        try {\n          const content = fs.readFileSync(filePath, 'utf-8');\n          if (content.trim().length > 0) {\n            this.documents.push({\n              content,\n              filePath,\n              embedding: this.createSimpleEmbedding(content)\n            });\n          }\n        } catch (error) {\n          console.warn(`Could not read file ${filePath}:`, error);\n        }\n      }\n    }\n  }\n\n  async indexDocuments(directory: string): Promise<void> {\n    console.log(\"🚀 Starting the indexing process...\");\n    this.readDirectoryRecursively(directory);\n    console.log(`📚 Indexed ${this.documents.length} files.`);\n    \n    // Save index to file\n    const indexData = {\n      documents: this.documents.map(doc => ({\n        content: doc.content,\n        filePath: doc.filePath,\n        embedding: doc.embedding\n      }))\n    };\n    \n    fs.writeFileSync('./index.json', JSON.stringify(indexData, null, 2));\n    console.log(\"✅ Index saved to ./index.json\");\n  }\n\n  loadIndex(): void {\n    if (fs.existsSync('./index.json')) {\n      const indexData = JSON.parse(fs.readFileSync('./index.json', 'utf-8'));\n      this.documents = indexData.documents;\n      console.log(`📚 Loaded ${this.documents.length} documents from index.`);\n    } else {\n      console.log(\"❌ No index found. Please run indexing first.\");\n    }\n  }\n\n  async query(queryText: string): Promise<void> {\n    console.log(`🔎 Querying: \"${queryText}\"`);\n    \n    if (this.documents.length === 0) {\n      this.loadIndex();\n    }\n    \n    if (this.documents.length === 0) {\n      console.log(\"❌ No documents found. Please index first.\");\n      return;\n    }\n\n    // Create embedding for query\n    const queryEmbedding = this.createSimpleEmbedding(queryText);\n    \n    // Find most similar documents\n    const similarities = this.documents.map(doc => ({\n      doc,\n      similarity: this.cosineSimilarity(queryEmbedding, doc.embedding!)\n    }));\n    \n    // Sort by similarity\n    similarities.sort((a, b) => b.similarity - a.similarity);\n    \n    // Get top 3 results\n    const topResults = similarities.slice(0, 3);\n    \n    // Create context from top results\n    const context = topResults.map(result => \n      `File: ${result.doc.filePath}\\nContent:\\n${result.doc.content.substring(0, 800)}...\\n`\n    ).join('\\n---\\n');\n    \n    // Use Gemini to generate answer\n    try {\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n      const prompt = `Based on the following code context, answer the question: \"${queryText}\"\\n\\nContext:\\n${context}\\n\\nAnswer:`;\n      \n      const result = await model.generateContent(prompt);\n      const response = result.response.text();\n      \n      console.log(\"\\n💬 AI Response:\");\n      console.log(response);\n      \n    } catch (error) {\n      console.warn(\"AI generation failed, showing raw context instead:\", error);\n      console.log(\"\\n📄 Raw Context:\");\n    }\n    \n    console.log(\"\\n🔍 Top Matching Files:\");\n    topResults.forEach((result, index) => {\n      console.log(`\\n--- Match ${index + 1} (Similarity: ${result.similarity.toFixed(4)}) ---`);\n      console.log(`File: ${result.doc.filePath}`);\n      console.log(`Content preview:\\n${result.doc.content.substring(0, 200)}...`);\n    });\n  }\n}\n\nexport { SimpleRAG };",
      "filePath": "../giga-rag-test/simple-rag.ts",
      "embedding": [
        5.39,
        0.1,
        0.2,
        0.5,
        0.2,
        0.006889431003192382,
        0.09414903449351239,
        0.03883683103102214,
        0.09199680657672377,
        0.06193374499630379,
        0.008332733826531135,
        0.01951843175043737,
        0.001984132906211511,
        0.06762681724434888,
        0.0749882947631217,
        0.09597271566000924,
        0.06105931801849446,
        0.0257511634414221,
        0.06723247104065128,
        0.08365057985437835,
        0.004340367817527635,
        0.004299173793755273,
        0.05336806217715826,
        0.038350950260637666,
        0.09193905600982188,
        0.003307968425939301,
        0.0009967670615049884,
        0.007516075381031973,
        0.06270382037420909,
        0.05318695584154285,
        0.02838192433218696,
        0.06802138605324062,
        0.0001497733829259107,
        0.05960374133826915,
        0.013514980414526102,
        0.09966574037251279,
        0.06375530355346647,
        0.08181803884912661,
        0.031256176637336854,
        0.003737062629277599,
        0.09770956801800057,
        0.011826311701937021,
        0.00949745160555815,
        0.003782127974809524,
        0.046409955257657336,
        0.014453093503533888,
        0.06876250366782988,
        0.08316430151772895,
        0.006660526520050725,
        0.028317124284160045,
        0.0006750863414054509,
        0.02013904425729417,
        0.08793474227000997,
        0.05022312784583997,
        0.06281621163977348,
        0.049798290392004396,
        0.06238953173215156,
        0.04455122438979753,
        0.020012591709661964,
        0.031742585471617825,
        0.08121753547223558,
        0.03793075083275417,
        0.04979531548624322,
        0.057665116246237186,
        0.08762909233089357,
        0.012307780063164853,
        0.08156887511833691,
        0.013195943022319601,
        0.02095033846464286,
        0.07277392959931687,
        0.06390712468227615,
        0.09619864148908314,
        0.014275055440879003,
        0.05575876666435484,
        0.0821875389817063,
        0.022320120315251903,
        0.006925570731813747,
        0.08015882846338851,
        0.09554796405507211,
        0.0968172407921052,
        0.01572159731280892,
        0.0021954638177401732,
        0.01041708248876131,
        0.06115005629824513,
        0.06327339596375912,
        0.0828031770201804,
        0.09261528994454381,
        0.05055117306920979,
        0.0665292832130915,
        0.068965799906606,
        0.08576779073574022,
        0.016544225871612316,
        0.0786461856505892,
        0.05452899227813332,
        0.08639071732262299,
        0.07701955528950297,
        0.02427468477511098,
        0.05193844437476124,
        0.005438157507414998,
        0.09658387295728793
      ]
    },
    {
      "content": "import { GigaClient, GrokMessage, GrokToolCall } from \"../giga/client\";\nimport { GROK_TOOLS, getAllTools } from \"../giga/tools\";\nimport { TextEditorTool, BashTool, TodoTool, ConfirmationTool, McpTool, PerplexityTool } from \"../tools\";\nimport { ToolResult } from \"../types\";\nimport { EventEmitter } from \"events\";\nimport { createTokenCounter, TokenCounter } from \"../utils/token-counter\";\nimport { loadCustomInstructions } from \"../utils/custom-instructions\";\nimport { loadApiKeys } from \"../utils/api-keys\";\nimport { McpManager } from \"../mcp/mcp-manager\";\nimport { sessionManager } from \"../utils/session-manager\";\nimport { expertModelsManager, ExpertModelsConfig } from \"../utils/expert-models-manager\";\nimport { modeManager } from \"../utils/mode-manager\";\nimport { AgentMode } from \"../types\";\n\nexport interface ChatEntry {\n  type: \"user\" | \"assistant\" | \"tool_result\";\n  content: string;\n  timestamp: Date;\n  toolCalls?: GrokToolCall[];\n  toolCall?: GrokToolCall;\n  toolResult?: { success: boolean; output?: string; error?: string; metadata?: { userSummary?: string; query?: string; [key: string]: any; } };\n  isStreaming?: boolean;\n  metrics?: {\n    prefillTimeMs: number;\n    decodeTimeMs: number;\n    outputTokens: number;\n    tokensPerSecond: number;\n  };\n}\n\nexport interface StreamingChunk {\n  type: \"content\" | \"tool_calls\" | \"tool_result\" | \"done\" | \"token_count\";\n  content?: string;\n  toolCalls?: GrokToolCall[];\n  toolCall?: GrokToolCall;\n  toolResult?: ToolResult;\n  tokenCount?: number;\n}\n\nexport class GigaAgent extends EventEmitter {\n  private gigaClient: GigaClient;\n  private textEditor: TextEditorTool;\n  private bash: BashTool;\n  private todoTool: TodoTool;\n  private confirmationTool: ConfirmationTool;\n  private mcpTool: McpTool;\n  private perplexityTool: PerplexityTool;\n  private mcpManager: McpManager;\n  private chatHistory: ChatEntry[] = [];\n  private messages: GrokMessage[] = [];\n  private tokenCounter: TokenCounter;\n  private abortController: AbortController | null = null;\n  private selectedCustomPrompt: string | null = null;\n  private async getBaseSystemPrompt(): Promise<string> {\n    const directoryStructure = await this.getDirectoryStructure();\n    const directoryContents = await this.getDirectoryContents();\n    \n    return `You are GIGA, an AI assistant that helps with file editing, coding tasks, and system operations.\n\nYou have access to these tools:\n- view_file: View file contents or directory listings\n- create_file: Create new files with content (ONLY use this for files that don't exist yet)\n- str_replace_editor: Replace text in existing files (ALWAYS use this to edit or update existing files)\n- bash: Execute bash commands (use for searching, file discovery, navigation, and system operations)\n- perplexity_search: Search the web for current information, documentation, and research using Perplexity\n- create_todo_list: Create a visual todo list for planning and tracking tasks\n- update_todo_list: Update existing todos in your todo list\n\nIMPORTANT TOOL USAGE RULES:\n- NEVER use create_file on files that already exist - this will overwrite them completely\n- ALWAYS use str_replace_editor to modify existing files, even for small changes\n- Before editing a file, use view_file to see its current contents\n- Use create_file ONLY when creating entirely new files that don't exist\n\nSEARCHING AND EXPLORATION:\n- Use bash with commands like 'find', 'grep', 'rg' (ripgrep), 'ls', etc. for searching files and content\n- Examples: 'find . -name \"*.js\"', 'grep -r \"function\" src/', 'rg \"import.*react\"'\n- Use bash for directory navigation, file discovery, and content searching\n- view_file is best for reading specific files you already know exist\n\nWhen a user asks you to edit, update, modify, or change an existing file:\n1. First use view_file to see the current contents\n2. Then use str_replace_editor to make the specific changes\n3. Never use create_file for existing files\n\nWhen a user asks you to create a new file that doesn't exist:\n1. Use create_file with the full content\n\nTASK PLANNING WITH TODO LISTS:\n- For complex requests with multiple steps, ALWAYS create a todo list first to plan your approach\n- Use create_todo_list to break down tasks into manageable items with priorities\n- Mark tasks as 'in_progress' when you start working on them (only one at a time)\n- Mark tasks as 'completed' immediately when finished\n- Use update_todo_list to track your progress throughout the task\n- Todo lists provide visual feedback with colors: ✅ Green (completed), 🔄 Cyan (in progress), ⏳ Yellow (pending)\n- Always create todos with priorities: 'high' (🔴), 'medium' (🟡), 'low' (🟢)\n\nUSER CONFIRMATION SYSTEM:\nFile operations (create_file, str_replace_editor) and bash commands will automatically request user confirmation before execution. The confirmation system will show users the actual content or command before they decide. Users can choose to approve individual operations or approve all operations of that type for the session.\n\nIf a user rejects an operation, the tool will return an error and you should not proceed with that specific operation.\n\nBe helpful, direct, and efficient. Always explain what you're doing and show the results.\n\nIMPORTANT RESPONSE GUIDELINES:\n- After using tools, do NOT respond with pleasantries like \"Thanks for...\" or \"Great!\"\n- Only provide necessary explanations or next steps if relevant to the task\n- Keep responses concise and focused on the actual work being done\n- If a tool execution completes the user's request, you can remain silent or give a brief confirmation\n\nCurrent working directory: ${process.cwd()}\n\nCONTEXT COMMANDS (run these at start of each request):\nCurrent directory: ${process.cwd()}\nDirectory structure: ${directoryStructure}\nDirectory contents: ${directoryContents}`;\n  }\n\n  constructor(apiKey: string, groqApiKey?: string) {\n    super();\n    \n    // Load all API keys from settings file and environment variables\n    const savedKeys = loadApiKeys();\n    const xaiKey = apiKey || savedKeys.xaiApiKey || process.env.XAI_API_KEY;\n    const groqKey = groqApiKey || savedKeys.groqApiKey || process.env.GROQ_API_KEY;\n    const anthropicKey = savedKeys.anthropicApiKey || process.env.ANTHROPIC_API_KEY;\n    const openRouterKey = savedKeys.openRouterApiKey || process.env.OPENROUTER_API_KEY;\n    const googleKey = savedKeys.googleApiKey || process.env.GOOGLE_API_KEY;\n    const cerebrasKey = savedKeys.cerebrasApiKey || process.env.CEREBRAS_API_KEY;\n    const perplexityKey = savedKeys.perplexityApiKey || process.env.PERPLEXITY_API_KEY;\n    const openaiKey = savedKeys.openaiApiKey || process.env.OPENAI_API_KEY;\n    \n    if (!xaiKey) {\n      throw new Error('XAI API key is required. Please configure it in /providers or set XAI_API_KEY environment variable.');\n    }\n    \n    this.gigaClient = new GigaClient(\n      xaiKey,\n      undefined,\n      groqKey,\n      anthropicKey,\n      openRouterKey,\n      googleKey,\n      cerebrasKey,\n      perplexityKey,\n      openaiKey,\n      savedKeys.ollamaBaseUrl\n    );\n    this.textEditor = new TextEditorTool();\n    this.bash = new BashTool();\n    this.todoTool = new TodoTool();\n    this.confirmationTool = new ConfirmationTool();\n    this.mcpTool = new McpTool();\n    this.perplexityTool = new PerplexityTool();\n    this.mcpManager = McpManager.getInstance();\n    this.tokenCounter = createTokenCounter(\"grok-4-latest\");\n\n    // Initialize MCP connections\n    this.initializeMcpConnections();\n\n    // Attempt to migrate expert models config from sessions if needed\n    expertModelsManager.migrateFromAllSessions();\n\n    // Initialize with system message\n    this.updateSystemPrompt().catch(console.error);\n  }\n\n  private async initializeMcpConnections(): Promise<void> {\n    try {\n      await this.mcpManager.initializeAllServers();\n    } catch (error) {\n      console.warn('Failed to initialize some MCP servers:', error);\n    }\n  }\n\n  async refreshMcpConnections(): Promise<void> {\n    try {\n      await this.mcpManager.refreshConnections();\n    } catch (error) {\n      console.warn('Failed to refresh MCP connections:', error);\n    }\n  }\n\n  async processUserMessage(message: string): Promise<ChatEntry[]> {\n    // Add user message to conversation\n    const userEntry: ChatEntry = {\n      type: \"user\",\n      content: message,\n      timestamp: new Date(),\n    };\n    this.chatHistory.push(userEntry);\n    this.messages.push({ role: \"user\", content: message });\n\n    const newEntries: ChatEntry[] = [userEntry];\n    const maxToolRounds = 20; // Prevent infinite loops\n    let toolRounds = 0;\n\n    try {\n      // For initial response, always use the main model - expert routing happens at tool level\n      let currentResponse = await this.gigaClient.chat(\n        this.messages,\n        getAllTools()\n      );\n\n      // Agent loop - continue until no more tool calls or max rounds reached\n      while (toolRounds < maxToolRounds) {\n        const assistantMessage = currentResponse.choices[0]?.message;\n\n        if (!assistantMessage) {\n          throw new Error(\"No response from Grok\");\n        }\n\n        // Handle tool calls\n        if (\n          assistantMessage.tool_calls &&\n          assistantMessage.tool_calls.length > 0\n        ) {\n          toolRounds++;\n\n          // Add assistant message with tool calls\n          const assistantEntry: ChatEntry = {\n            type: \"assistant\",\n            content: assistantMessage.content || \"Using tools to help you...\",\n            timestamp: new Date(),\n            toolCalls: assistantMessage.tool_calls,\n          };\n          this.chatHistory.push(assistantEntry);\n          newEntries.push(assistantEntry);\n\n          // Add assistant message to conversation\n          this.messages.push({\n            role: \"assistant\",\n            content: assistantMessage.content || \"\",\n            tool_calls: assistantMessage.tool_calls,\n          } as any);\n\n          // Execute tool calls\n          for (const toolCall of assistantMessage.tool_calls) {\n            const result = await this.executeTool(toolCall);\n            \n            // Log expert model usage for debugging\n            const expertModel = this.getExpertModelForTool(toolCall.function.name);\n            if (expertModel) {\n              console.log(`DEBUG: Used expert model ${expertModel} for tool ${toolCall.function.name}`);\n            }\n\n            const toolResultEntry: ChatEntry = {\n              type: \"tool_result\",\n              content: result.success\n                ? result.output || \"Success\"\n                : result.error || \"Error occurred\",\n              timestamp: new Date(),\n              toolCall: toolCall,\n              toolResult: result,\n            };\n            this.chatHistory.push(toolResultEntry);\n            newEntries.push(toolResultEntry);\n\n            // Add tool result to messages with proper format (needed for AI context)\n            this.messages.push({\n              role: \"tool\",\n              content: result.success\n                ? result.output || \"Success\"\n                : result.error || \"Error\",\n              tool_call_id: toolCall.id,\n            });\n          }\n\n          // Get next response - this might contain more tool calls\n          // Use the main model for coordinating between tools\n          currentResponse = await this.gigaClient.chat(\n            this.messages,\n            getAllTools()\n          );\n        } else {\n          // No more tool calls, add final response\n          const finalEntry: ChatEntry = {\n            type: \"assistant\",\n            content:\n              assistantMessage.content ||\n              \"I understand, but I don't have a specific response.\",\n            timestamp: new Date(),\n            metrics: currentResponse.metrics,\n          };\n          this.chatHistory.push(finalEntry);\n          this.messages.push({\n            role: \"assistant\",\n            content: assistantMessage.content || \"\",\n          });\n          newEntries.push(finalEntry);\n          break; // Exit the loop\n        }\n      }\n\n      if (toolRounds >= maxToolRounds) {\n        const warningEntry: ChatEntry = {\n          type: \"assistant\",\n          content:\n            \"Maximum tool execution rounds reached. Stopping to prevent infinite loops.\",\n          timestamp: new Date(),\n        };\n        this.chatHistory.push(warningEntry);\n        newEntries.push(warningEntry);\n      }\n\n      return newEntries;\n    } catch (error: any) {\n      const errorEntry: ChatEntry = {\n        type: \"assistant\",\n        content: `Sorry, I encountered an error: ${error.message}`,\n        timestamp: new Date(),\n      };\n      this.chatHistory.push(errorEntry);\n      return [userEntry, errorEntry];\n    }\n  }\n\n  private messageReducer(previous: any, item: any): any {\n    const reduce = (acc: any, delta: any) => {\n      acc = { ...acc };\n      for (const [key, value] of Object.entries(delta)) {\n        if (acc[key] === undefined || acc[key] === null) {\n          acc[key] = value;\n          // Clean up index properties from tool calls\n          if (Array.isArray(acc[key])) {\n            for (const arr of acc[key]) {\n              delete arr.index;\n            }\n          }\n        } else if (typeof acc[key] === \"string\" && typeof value === \"string\") {\n          (acc[key] as string) += value;\n        } else if (Array.isArray(acc[key]) && Array.isArray(value)) {\n          const accArray = acc[key] as any[];\n          for (let i = 0; i < value.length; i++) {\n            if (!accArray[i]) accArray[i] = {};\n            accArray[i] = reduce(accArray[i], value[i]);\n          }\n        } else if (typeof acc[key] === \"object\" && typeof value === \"object\") {\n          acc[key] = reduce(acc[key], value);\n        }\n      }\n      return acc;\n    };\n\n    return reduce(previous, item.choices[0]?.delta || {});\n  }\n\n  async *processUserMessageStream(\n    message: string\n  ): AsyncGenerator<StreamingChunk, void, unknown> {\n    // Create new abort controller for this request\n    this.abortController = new AbortController();\n    \n    // Add user message to conversation\n    const userEntry: ChatEntry = {\n      type: \"user\",\n      content: message,\n      timestamp: new Date(),\n    };\n    this.chatHistory.push(userEntry);\n    this.messages.push({ role: \"user\", content: message });\n\n    // Calculate input tokens\n    const inputTokens = this.tokenCounter.countMessageTokens(\n      this.messages as any\n    );\n    yield {\n      type: \"token_count\",\n      tokenCount: inputTokens,\n    };\n\n    const maxToolRounds = 30; // Prevent infinite loops\n    let toolRounds = 0;\n    let totalOutputTokens = 0;\n\n    try {\n      // Agent loop - continue until no more tool calls or max rounds reached\n      while (toolRounds < maxToolRounds) {\n        // Check if operation was cancelled\n        if (this.abortController?.signal.aborted) {\n          yield {\n            type: \"content\",\n            content: \"\\n\\n[Operation cancelled by user]\",\n          };\n          yield { type: \"done\" };\n          return;\n        }\n\n        // Stream response and accumulate\n        // Use the main model for conversation flow - expert routing happens at tool level\n        const stream = this.gigaClient.chatStream(this.messages, getAllTools());\n        let accumulatedMessage: any = {};\n        let accumulatedContent = \"\";\n        let toolCallsYielded = false;\n\n        for await (const chunk of stream) {\n          // Check for cancellation in the streaming loop\n          if (this.abortController?.signal.aborted) {\n            yield {\n              type: \"content\",\n              content: \"\\n\\n[Operation cancelled by user]\",\n            };\n            yield { type: \"done\" };\n            return;\n          }\n\n          if (!chunk.choices?.[0]) continue;\n\n          // Accumulate the message using reducer\n          accumulatedMessage = this.messageReducer(accumulatedMessage, chunk);\n\n          // Check for tool calls - yield when we have complete tool calls with function names\n          if (!toolCallsYielded && accumulatedMessage.tool_calls?.length > 0) {\n            // Check if we have at least one complete tool call with a function name\n            const hasCompleteTool = accumulatedMessage.tool_calls.some(\n              (tc: any) => tc.function?.name\n            );\n            if (hasCompleteTool) {\n              yield {\n                type: \"tool_calls\",\n                toolCalls: accumulatedMessage.tool_calls,\n              };\n              toolCallsYielded = true;\n            }\n          }\n\n          // Stream content as it comes\n          if (chunk.choices[0].delta?.content) {\n            accumulatedContent += chunk.choices[0].delta.content;\n\n            // Update token count in real-time\n            const currentOutputTokens =\n              this.tokenCounter.estimateStreamingTokens(accumulatedContent);\n            totalOutputTokens = currentOutputTokens;\n\n            yield {\n              type: \"content\",\n              content: chunk.choices[0].delta.content,\n            };\n\n            // Emit token count update\n            yield {\n              type: \"token_count\",\n              tokenCount: inputTokens + totalOutputTokens,\n            };\n          }\n        }\n\n        // Add assistant entry to history\n        const assistantEntry: ChatEntry = {\n          type: \"assistant\",\n          content: accumulatedMessage.content || \"Using tools to help you...\",\n          timestamp: new Date(),\n          toolCalls: accumulatedMessage.tool_calls || undefined,\n        };\n        this.chatHistory.push(assistantEntry);\n\n        // Add accumulated message to conversation\n        this.messages.push({\n          role: \"assistant\",\n          content: accumulatedMessage.content || \"\",\n          tool_calls: accumulatedMessage.tool_calls,\n        } as any);\n\n        // Handle tool calls if present\n        if (accumulatedMessage.tool_calls?.length > 0) {\n          toolRounds++;\n\n          // Only yield tool_calls if we haven't already yielded them during streaming\n          if (!toolCallsYielded) {\n            yield {\n              type: \"tool_calls\",\n              toolCalls: accumulatedMessage.tool_calls,\n            };\n          }\n\n          // Execute tools\n          for (const toolCall of accumulatedMessage.tool_calls) {\n            // Check for cancellation before executing each tool\n            if (this.abortController?.signal.aborted) {\n              yield {\n                type: \"content\",\n                content: \"\\n\\n[Operation cancelled by user]\",\n              };\n              yield { type: \"done\" };\n              return;\n            }\n\n            const result = await this.executeTool(toolCall);\n            \n            // Log expert model usage for debugging\n            const expertModel = this.getExpertModelForTool(toolCall.function.name);\n            if (expertModel) {\n              console.log(`DEBUG: Used expert model ${expertModel} for tool ${toolCall.function.name}`);\n            }\n\n            const toolResultEntry: ChatEntry = {\n              type: \"tool_result\",\n              content: result.success\n                ? result.output || \"Success\"\n                : result.error || \"Error occurred\",\n              timestamp: new Date(),\n              toolCall: toolCall,\n              toolResult: result,\n            };\n            this.chatHistory.push(toolResultEntry);\n\n            yield {\n              type: \"tool_result\",\n              toolCall,\n              toolResult: result,\n            };\n\n            // Add tool result with proper format (needed for AI context)\n            this.messages.push({\n              role: \"tool\",\n              content: result.success\n                ? result.output || \"Success\"\n                : result.error || \"Error\",\n              tool_call_id: toolCall.id,\n            });\n          }\n\n          // Continue the loop to get the next response (which might have more tool calls)\n        } else {\n          // No tool calls, we're done - add metrics to the last assistant entry\n          const lastAssistantEntry = this.chatHistory\n            .slice()\n            .reverse()\n            .find(entry => entry.type === \"assistant\");\n          \n          if (lastAssistantEntry) {\n            const streamingMetrics = this.gigaClient.getLastStreamingMetrics();\n            if (streamingMetrics) {\n              lastAssistantEntry.metrics = streamingMetrics;\n            }\n          }\n          break;\n        }\n      }\n\n      if (toolRounds >= maxToolRounds) {\n        yield {\n          type: \"content\",\n          content:\n            \"\\n\\nMaximum tool execution rounds reached. Stopping to prevent infinite loops.\",\n        };\n      }\n\n      yield { type: \"done\" };\n    } catch (error: any) {\n      // Check if this was a cancellation\n      if (this.abortController?.signal.aborted) {\n        yield {\n          type: \"content\",\n          content: \"\\n\\n[Operation cancelled by user]\",\n        };\n        yield { type: \"done\" };\n        return;\n      }\n\n      const errorEntry: ChatEntry = {\n        type: \"assistant\",\n        content: `Sorry, I encountered an error: ${error.message}`,\n        timestamp: new Date(),\n      };\n      this.chatHistory.push(errorEntry);\n      yield {\n        type: \"content\",\n        content: errorEntry.content,\n      };\n      yield { type: \"done\" };\n    } finally {\n      // Clean up abort controller\n      this.abortController = null;\n    }\n  }\n\n  private getExpertModelForTool(toolName: string): string | null {\n    const expertConfig = expertModelsManager.getExpertModelsConfig();\n    \n    // Check if current mode allows expert models\n    if (!modeManager.shouldAllowExpertModels() || !expertConfig.enabled) {\n      return null;\n    }\n\n    // Fast operations (file navigation, simple commands)\n    const fastTools = [\n      'view_file',\n      'bash'  // Only simple bash commands - complex ones should use reasoning\n    ];\n\n    // Code-specific operations\n    const codeTools = [\n      'str_replace_editor',\n      'create_file'\n    ];\n\n    // Reasoning-heavy operations  \n    const reasoningTools = [\n      'create_todo_list',\n      'update_todo_list'\n    ];\n\n    // Tool orchestration and complex workflows\n    const toolsTools = [\n      'list_mcp_tools',\n      'call_mcp_tool',\n      'perplexity_search'\n    ];\n\n    if (fastTools.includes(toolName)) {\n      return expertConfig.fastModel;\n    } else if (codeTools.includes(toolName)) {\n      return expertConfig.codeModel;\n    } else if (reasoningTools.includes(toolName)) {\n      return expertConfig.reasoningModel;\n    } else if (toolsTools.includes(toolName) || toolName.startsWith('mcp_')) {\n      return expertConfig.toolsModel;\n    }\n\n    return null;\n  }\n\n  private async executeTool(toolCall: GrokToolCall): Promise<ToolResult> {\n    try {\n      const args = JSON.parse(toolCall.function.arguments);\n\n      switch (toolCall.function.name) {\n        case \"view_file\":\n          const range: [number, number] | undefined =\n            args.start_line && args.end_line\n              ? [args.start_line, args.end_line]\n              : undefined;\n          return await this.textEditor.view(args.path, range);\n\n        case \"create_file\":\n          return await this.textEditor.create(args.path, args.content);\n\n        case \"str_replace_editor\":\n          return await this.textEditor.strReplace(\n            args.path,\n            args.old_str,\n            args.new_str\n          );\n\n        case \"bash\":\n          return await this.bash.execute(args.command);\n\n        case \"create_todo_list\":\n          return await this.todoTool.createTodoList(args.todos);\n\n        case \"update_todo_list\":\n          return await this.todoTool.updateTodoList(args.updates);\n\n        case \"perplexity_search\":\n          return await this.perplexityTool.search(args.query, args.max_results, args.summarize);\n\n        case \"list_mcp_tools\":\n          return await this.mcpTool.listMcpTools();\n\n        case \"call_mcp_tool\":\n          return await this.mcpTool.callMcpTool(args.tool_name, args.arguments || {});\n\n        default:\n          // Check if it's a dynamic MCP tool\n          if (toolCall.function.name.startsWith(\"mcp_\")) {\n            const parts = toolCall.function.name.split(\"_\");\n            if (parts.length >= 3) {\n              const serverName = parts[1];\n              const toolName = parts.slice(2).join(\"_\");\n              return await this.mcpTool.callMcpTool(toolName, args);\n            }\n          }\n          \n          return {\n            success: false,\n            error: `Unknown tool: ${toolCall.function.name}`,\n          };\n      }\n    } catch (error: any) {\n      return {\n        success: false,\n        error: `Tool execution error: ${error.message}`,\n      };\n    }\n  }\n\n  getChatHistory(): ChatEntry[] {\n    return [...this.chatHistory];\n  }\n\n  getCurrentDirectory(): string {\n    return this.bash.getCurrentDirectory();\n  }\n\n  async executeBashCommand(command: string): Promise<ToolResult> {\n    return await this.bash.execute(command);\n  }\n\n  getCurrentModel(): string {\n    return this.gigaClient.getCurrentModel();\n  }\n\n  setModel(model: string): void {\n    this.gigaClient.setModel(model);\n    // Update token counter for new model\n    this.tokenCounter.dispose();\n    this.tokenCounter = createTokenCounter(model);\n  }\n\n  abortCurrentOperation(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n  }\n\n  setSelectedCustomPrompt(promptName: string | null): void {\n    this.selectedCustomPrompt = promptName;\n    this.updateSystemPrompt().catch(console.error);\n  }\n\n  getSelectedCustomPrompt(): string | null {\n    return this.selectedCustomPrompt;\n  }\n\n  // Method to restore conversation state when switching conversations\n  restoreConversation(chatEntries: ChatEntry[]): void {\n    // Clear current messages (but keep system prompt)\n    const systemMessage = this.messages.find(m => m.role === 'system');\n    this.messages = systemMessage ? [systemMessage] : [];\n    this.chatHistory = [];\n\n    // Convert ChatEntry[] back to GrokMessage[] format\n    for (const entry of chatEntries) {\n      if (entry.type === 'user') {\n        this.messages.push({\n          role: 'user',\n          content: entry.content\n        });\n      } else if (entry.type === 'assistant') {\n        this.messages.push({\n          role: 'assistant',\n          content: entry.content,\n          tool_calls: entry.toolCalls\n        } as any);\n      } else if (entry.type === 'tool_result' && entry.toolCall) {\n        this.messages.push({\n          role: 'tool',\n          content: entry.content,\n          tool_call_id: entry.toolCall.id\n        });\n      }\n    }\n\n    // Restore chat history\n    this.chatHistory = [...chatEntries];\n  }\n\n  updateMode(mode: AgentMode): void {\n    modeManager.setMode(mode);\n  }\n\n  getCurrentMode(): AgentMode {\n    return modeManager.getCurrentMode();\n  }\n\n  getModeConfig() {\n    return modeManager.getCurrentModeConfig();\n  }\n\n  private async getDirectoryStructure(): Promise<string> {\n    try {\n      const result = await this.bash.execute('tree -L 2');\n      return result.success ? result.output : 'tree command not available';\n    } catch {\n      return 'tree command not available';\n    }\n  }\n\n  private async getDirectoryContents(): Promise<string> {\n    try {\n      const result = await this.bash.execute('ls -la');\n      return result.success ? result.output : 'ls command failed';\n    } catch {\n      return 'ls command failed';\n    }\n  }\n\n  private async updateSystemPrompt(): Promise<void> {\n    let systemContent = '';\n    \n    // If a custom prompt is selected, use ONLY that prompt\n    if (this.selectedCustomPrompt) {\n      const { getPromptByName } = require('../utils/prompts');\n      const customPrompt = getPromptByName(this.selectedCustomPrompt);\n      if (customPrompt) {\n        systemContent = customPrompt.content;\n      } else {\n        // Fallback to base system prompt if custom prompt not found\n        systemContent = await this.getBaseSystemPrompt();\n      }\n    } else {\n      // Use base GIGA system prompt when no custom prompt is selected\n      systemContent = await this.getBaseSystemPrompt();\n    }\n    \n    // Add mode-specific instructions\n    const currentMode = modeManager.getCurrentMode();\n    if (currentMode !== AgentMode.GIGA) {\n      systemContent += `\\n\\nCURRENT MODE: ${modeManager.getModeDisplayName()}\\n${modeManager.getModeDescription()}`;\n      \n      if (currentMode === AgentMode.PLAN) {\n        systemContent += '\\n\\nIn PLAN MODE: Focus on planning and analysis. Avoid complex tool usage - prefer thinking through problems step by step.';\n      } else if (currentMode === AgentMode.CHILL) {\n        systemContent += '\\n\\nIn CHILL MODE: All capabilities available but ask for permission before making changes to files or running potentially impactful commands.';\n      }\n    }\n    \n    // Update or add system message\n    if (this.messages.length > 0 && this.messages[0].role === 'system') {\n      this.messages[0].content = systemContent;\n    } else {\n      this.messages.unshift({\n        role: 'system',\n        content: systemContent\n      });\n    }\n  }\n}\n",
      "filePath": "../src/agent/giga-agent.ts",
      "embedding": [
        29.41,
        1.3,
        0.1,
        1.4,
        0.3,
        0.02267555895489115,
        0.06397997655515086,
        0.00004784585223279736,
        0.0491711600782194,
        0.08170908302189958,
        0.05674807119834128,
        0.09616059913557277,
        0.04651293949278304,
        0.011345354917829342,
        0.015320793405662015,
        0.028407602875587558,
        0.008083396925969556,
        0.08576402103187569,
        0.02470747160258049,
        0.05491471776524316,
        0.057674683651082664,
        0.059889966546362056,
        0.06135539523766712,
        0.09100065141511776,
        0.009935801314768533,
        0.06765413715766147,
        0.07751027877442206,
        0.0017001918995412592,
        0.02879584485214807,
        0.06563283083535147,
        0.04666575895465357,
        0.021540736050427656,
        0.01453274960626776,
        0.08537223081171103,
        0.08975139979641009,
        0.04979770482559809,
        0.03586984581414928,
        0.049972168880974235,
        0.07806231844744144,
        0.0541968846004332,
        0.019242721617477657,
        0.008169718789365411,
        0.01998474702738047,
        0.031574242892249374,
        0.07199083397691951,
        0.05505295267510344,
        0.08509741935358962,
        0.08951909170098195,
        0.06490506654854172,
        0.04588673368477996,
        0.0304709984603362,
        0.08676249857046173,
        0.012032014821460157,
        0.02415550933347621,
        0.06376345754394236,
        0.04492484246933834,
        0.06213792931215087,
        0.034133347656927604,
        0.05442474200985945,
        0.01877884772273153,
        0.025246512697955137,
        0.08428519551934469,
        0.062372613362168164,
        0.014854185955360012,
        0.07275717276646253,
        0.05491097051831911,
        0.01165120801960542,
        0.08495328762719244,
        0.04595927824538945,
        0.04307203007026176,
        0.032873038191577254,
        0.05628728468372046,
        0.06258306969135762,
        0.0722702090244686,
        0.06765528563554143,
        0.027860168525497588,
        0.09273947597095882,
        0.09390689151824909,
        0.05297749762252673,
        0.027788593659753183,
        0.01926084691412269,
        0.05970352807675525,
        0.0349022858194752,
        0.08713989400323699,
        0.06367761070397258,
        0.07964437864507178,
        0.01514994269980574,
        0.039080137439474416,
        0.08505634793500844,
        0.04841133087676274,
        0.015867966916849663,
        0.08917787928264025,
        0.04497315585419651,
        0.04836138396718779,
        0.08575588257071687,
        0.08000160961154186,
        0.09344176018800363,
        0.059793528677709845,
        0.04271164068196606,
        0.007692991567477281
      ]
    },
    {
      "content": "import { TextEditorTool, BashTool } from '../tools';\nimport { ToolResult, AgentState } from '../types';\n\nexport class Agent {\n  private textEditor: TextEditorTool;\n  private bash: BashTool;\n  private state: AgentState;\n\n  constructor() {\n    this.textEditor = new TextEditorTool();\n    this.bash = new BashTool();\n    this.state = {\n      currentDirectory: process.cwd(),\n      editHistory: [],\n      tools: []\n    };\n  }\n\n  async processCommand(input: string): Promise<ToolResult> {\n    const trimmedInput = input.trim();\n    \n    if (trimmedInput.startsWith('view ')) {\n      const args = this.parseViewCommand(trimmedInput);\n      return this.textEditor.view(args.path, args.range);\n    }\n    \n    if (trimmedInput.startsWith('str_replace ')) {\n      const args = this.parseStrReplaceCommand(trimmedInput);\n      if (!args) {\n        return { success: false, error: 'Invalid str_replace command format' };\n      }\n      return this.textEditor.strReplace(args.path, args.oldStr, args.newStr);\n    }\n    \n    if (trimmedInput.startsWith('create ')) {\n      const args = this.parseCreateCommand(trimmedInput);\n      if (!args) {\n        return { success: false, error: 'Invalid create command format' };\n      }\n      return this.textEditor.create(args.path, args.content);\n    }\n    \n    if (trimmedInput.startsWith('insert ')) {\n      const args = this.parseInsertCommand(trimmedInput);\n      if (!args) {\n        return { success: false, error: 'Invalid insert command format' };\n      }\n      return this.textEditor.insert(args.path, args.line, args.content);\n    }\n    \n    if (trimmedInput === 'undo_edit') {\n      return this.textEditor.undoEdit();\n    }\n    \n    if (trimmedInput.startsWith('bash ') || trimmedInput.startsWith('$ ')) {\n      const command = trimmedInput.startsWith('bash ') \n        ? trimmedInput.substring(5) \n        : trimmedInput.substring(2);\n      return this.bash.execute(command);\n    }\n    \n    if (trimmedInput === 'pwd') {\n      return {\n        success: true,\n        output: this.bash.getCurrentDirectory()\n      };\n    }\n    \n    if (trimmedInput === 'history') {\n      const history = this.textEditor.getEditHistory();\n      return {\n        success: true,\n        output: history.length > 0 \n          ? JSON.stringify(history, null, 2)\n          : 'No edit history'\n      };\n    }\n    \n    if (trimmedInput === 'help') {\n      return this.getHelp();\n    }\n    \n    return this.bash.execute(trimmedInput);\n  }\n\n  private parseViewCommand(input: string): { path: string; range?: [number, number] } {\n    const parts = input.split(' ');\n    const path = parts[1];\n    \n    if (parts.length > 2) {\n      const rangePart = parts[2];\n      if (rangePart.includes('-')) {\n        const [start, end] = rangePart.split('-').map(Number);\n        return { path, range: [start, end] };\n      }\n    }\n    \n    return { path };\n  }\n\n  private parseStrReplaceCommand(input: string): { path: string; oldStr: string; newStr: string } | null {\n    const match = input.match(/str_replace\\s+(\\S+)\\s+\"([^\"]+)\"\\s+\"([^\"]*)\"/);\n    if (!match) return null;\n    \n    return {\n      path: match[1],\n      oldStr: match[2],\n      newStr: match[3]\n    };\n  }\n\n  private parseCreateCommand(input: string): { path: string; content: string } | null {\n    const match = input.match(/create\\s+(\\S+)\\s+\"([^\"]*)\"/);\n    if (!match) return null;\n    \n    return {\n      path: match[1],\n      content: match[2]\n    };\n  }\n\n  private parseInsertCommand(input: string): { path: string; line: number; content: string } | null {\n    const match = input.match(/insert\\s+(\\S+)\\s+(\\d+)\\s+\"([^\"]*)\"/);\n    if (!match) return null;\n    \n    return {\n      path: match[1],\n      line: parseInt(match[2]),\n      content: match[3]\n    };\n  }\n\n  private getHelp(): ToolResult {\n    return {\n      success: true,\n      output: `Available commands:\n  view <path> [start-end]     - View file contents or directory\n  str_replace <path> \"old\" \"new\" - Replace text in file\n  create <path> \"content\"     - Create new file with content\n  insert <path> <line> \"text\" - Insert text at specific line\n  undo_edit                   - Undo last edit operation\n  bash <command>              - Execute bash command\n  $ <command>                 - Execute bash command (shorthand)\n  pwd                         - Show current directory\n  history                     - Show edit history\n  help                        - Show this help message`\n    };\n  }\n\n  getCurrentState(): AgentState {\n    return {\n      ...this.state,\n      currentDirectory: this.bash.getCurrentDirectory(),\n      editHistory: this.textEditor.getEditHistory()\n    };\n  }\n}",
      "filePath": "../src/agent/index.ts",
      "embedding": [
        4.68,
        0,
        0.1,
        0.2,
        0.1,
        0.06300748436088326,
        0.04512273974228453,
        0.03746184767981075,
        0.025570826841307615,
        0.07857894709915685,
        0.04975407081691438,
        0.028689312889426756,
        0.02110090256531626,
        0.06958632233168759,
        0.05483540334972453,
        0.07557922598198236,
        0.04831620709370785,
        0.07552567103771687,
        0.004365810089338662,
        0.05435134476692424,
        0.05764398666202615,
        0.06097049138765116,
        0.09296831947208307,
        0.010510878777581091,
        0.01714941099938666,
        0.09611047241006392,
        0.07891436926597693,
        0.01083408779004731,
        0.09660822334265828,
        0.07526126114068893,
        0.013757968915596976,
        0.00151824804231242,
        0.027287690574622516,
        0.011420707172728362,
        0.048795546779982324,
        0.024358336606610964,
        0.030744731985967434,
        0.009379701731910517,
        0.050275502633925995,
        0.009059340484773836,
        0.06657566120463873,
        0.055770423431350136,
        0.03258762917357708,
        0.04274664748355346,
        0.020195282143300054,
        0.012787192121302082,
        0.0165991432268071,
        0.08096528973095485,
        0.008672081820285527,
        0.08893143212704518,
        0.014858637171156453,
        0.019236742919978324,
        0.005138291142129903,
        0.08895460216458874,
        0.037412425193323606,
        0.019406396794080596,
        0.00011100089764085608,
        0.0911732655254614,
        0.03952049668944457,
        0.013480623755009292,
        0.08565861717353772,
        0.029391797769832674,
        0.09261408436010936,
        0.03040603306127664,
        0.04909770327823174,
        0.025603955328842166,
        0.07803727369718745,
        0.09481734582049264,
        0.07205374897616858,
        0.017038385631207454,
        0.04193737472946412,
        0.003454807778019986,
        0.03148881434908956,
        0.06144714080900633,
        0.011613259484106565,
        0.03360576438440004,
        0.016610090491429485,
        0.04850273135393134,
        0.09432411975417151,
        0.09868919187978607,
        0.07705534438687844,
        0.07639673922482065,
        0.06843415097694278,
        0.07188921965048072,
        0.020206417353279705,
        0.06808618484057581,
        0.04328204333934537,
        0.03587738998928441,
        0.07555370277242421,
        0.093667870269591,
        0.06014147658546919,
        0.05773117421030453,
        0.022351589194421685,
        0.0721283444357546,
        0.06290053280979527,
        0.0006271969635127106,
        0.08029534132574476,
        0.034955639644194014,
        0.03592366944148467,
        0.008962656021263482
      ]
    },
    {
      "content": "import OpenAI from 'openai';\nimport type { ChatCompletionMessageParam } from 'openai/resources/chat';\nimport Cerebras from '@cerebras/cerebras_cloud_sdk';\nimport { sessionManager } from '../utils/session-manager';\nimport { getOpenRouterProvider } from '../utils/added-models';\nimport { createTokenCounter } from '../utils/token-counter';\n\nexport type GrokMessage = ChatCompletionMessageParam;\n\nexport interface GrokTool {\n  type: 'function';\n  function: {\n    name: string;\n    description: string;\n    parameters: {\n      type: 'object';\n      properties: Record<string, any>;\n      required: string[];\n    };\n  };\n}\n\nexport interface GrokToolCall {\n  id: string;\n  type: 'function';\n  function: {\n    name: string;\n    arguments: string;\n  };\n}\n\nexport interface GrokResponse {\n  choices: Array<{\n    message: {\n      role: string;\n      content: string | null;\n      tool_calls?: GrokToolCall[];\n    };\n    finish_reason: string;\n  }>;\n  usage?: {\n    prompt_tokens?: number;\n    completion_tokens?: number;\n    total_tokens?: number;\n  };\n  metrics?: {\n    prefillTimeMs: number;\n    decodeTimeMs: number;\n    outputTokens: number;\n    tokensPerSecond: number;\n  };\n}\n\nexport interface ApiCallMetrics {\n  model: string;\n  inputTokens: number;\n  outputTokens: number;\n  totalTokens: number;\n  durationMs: number;\n  tokensPerSecond: number;\n}\n\ninterface APIConfig {\n  baseURL: string;\n  apiKey: string;\n}\n\nexport class GigaClient {\n  private xaiClient: OpenAI;\n  private groqClient: OpenAI;\n  private anthropicClient: OpenAI;\n  private openRouterClient: OpenAI;\n  private googleClient: OpenAI;\n  private cerebrasClient: Cerebras;\n  private perplexityClient: OpenAI;\n  private openaiClient: OpenAI;\n  private ollamaClient: OpenAI;\n  // Remove instance-level currentModel - now managed by sessionManager\n  private groqApiKey?: string;\n  private anthropicApiKey?: string;\n  private openRouterApiKey?: string;\n  private googleApiKey?: string;\n  private cerebrasApiKey?: string;\n  private perplexityApiKey?: string;\n  private openaiApiKey?: string;\n  private ollamaBaseUrl?: string;\n  private lastStreamingMetrics?: {\n    prefillTimeMs: number;\n    decodeTimeMs: number;\n    outputTokens: number;\n    tokensPerSecond: number;\n  };\n\n  constructor(\n    apiKey: string, \n    model?: string, \n    groqApiKey?: string, \n    anthropicApiKey?: string, \n    openRouterApiKey?: string,\n    googleApiKey?: string,\n    cerebrasApiKey?: string,\n    perplexityApiKey?: string,\n    openaiApiKey?: string,\n    ollamaBaseUrl?: string\n  ) {\n    this.xaiClient = new OpenAI({\n      apiKey,\n      baseURL: 'https://api.x.ai/v1',\n      timeout: 360000,\n    });\n    \n    this.groqApiKey = groqApiKey;\n    if (groqApiKey) {\n      this.groqClient = new OpenAI({\n        apiKey: groqApiKey,\n        baseURL: 'https://api.groq.com/openai/v1',\n        timeout: 360000,\n      });\n    }\n    \n    this.anthropicApiKey = anthropicApiKey;\n    if (anthropicApiKey) {\n      this.anthropicClient = new OpenAI({\n        apiKey: anthropicApiKey,\n        baseURL: 'https://api.anthropic.com/v1',\n        timeout: 360000,\n      });\n    }\n    \n    this.openRouterApiKey = openRouterApiKey;\n    if (openRouterApiKey) {\n      this.openRouterClient = new OpenAI({\n        apiKey: openRouterApiKey,\n        baseURL: 'https://openrouter.ai/api/v1',\n        timeout: 360000\n      });\n    }\n    \n    this.googleApiKey = googleApiKey;\n    if (googleApiKey) {\n      this.googleClient = new OpenAI({\n        apiKey: googleApiKey,\n        baseURL: 'https://generativelanguage.googleapis.com/v1beta/openai',\n        timeout: 360000,\n      });\n    }\n    \n    this.cerebrasApiKey = cerebrasApiKey;\n    if (cerebrasApiKey) {\n      this.cerebrasClient = new Cerebras({\n        apiKey: cerebrasApiKey,\n        timeout: 360000,\n      });\n    }\n    \n    this.perplexityApiKey = perplexityApiKey;\n    if (perplexityApiKey) {\n      this.perplexityClient = new OpenAI({\n        apiKey: perplexityApiKey,\n        baseURL: 'https://api.perplexity.ai',\n        timeout: 360000,\n      });\n    }\n    \n    this.openaiApiKey = openaiApiKey;\n    if (openaiApiKey) {\n      this.openaiClient = new OpenAI({\n        apiKey: openaiApiKey,\n        baseURL: 'https://api.openai.com/v1',\n        timeout: 360000,\n      });\n    }\n    \n    this.ollamaBaseUrl = ollamaBaseUrl || 'http://localhost:11434';\n    \n    // Ensure Ollama base URL has proper protocol\n    let cleanOllamaUrl = this.ollamaBaseUrl;\n    if (!cleanOllamaUrl.startsWith('http://') && !cleanOllamaUrl.startsWith('https://')) {\n      cleanOllamaUrl = `http://${cleanOllamaUrl}`;\n    }\n    \n    this.ollamaClient = new OpenAI({\n      apiKey: 'ollama', // Ollama doesn't require a real API key\n      baseURL: cleanOllamaUrl + '/v1',\n      timeout: 360000,\n    });\n    \n    if (model) {\n      sessionManager.setCurrentModel(model);\n    }\n  }\n\n  private getClientForModel(model: string): OpenAI | Cerebras {\n    // First check added models to get the correct provider\n    const addedModels = require('../utils/added-models').loadAddedModels();\n    const addedModel = addedModels.find((m: any) => m.modelName === model);\n    \n    if (addedModel) {\n      const providerName = addedModel.providerName.toLowerCase();\n      switch (providerName) {\n        case 'openrouter':\n          if (!this.openRouterClient) {\n            throw new Error('OpenRouter API key not provided. Please configure it in /providers.');\n          }\n          return this.openRouterClient;\n        case 'anthropic':\n          if (!this.anthropicClient) {\n            throw new Error('Anthropic API key not provided. Please configure it in /providers.');\n          }\n          return this.anthropicClient;\n        case 'google':\n          if (!this.googleClient) {\n            throw new Error('Google API key not provided. Please configure it in /providers.');\n          }\n          return this.googleClient;\n        case 'xai':\n          return this.xaiClient;\n        case 'groq':\n          if (!this.groqClient) {\n            throw new Error('Groq API key not provided. Please configure it in /providers.');\n          }\n          return this.groqClient;\n        case 'cerebras':\n          if (!this.cerebrasClient) {\n            throw new Error('Cerebras API key not provided. Please configure it in /providers.');\n          }\n          return this.cerebrasClient;\n        case 'perplexity':\n          if (!this.perplexityClient) {\n            throw new Error('Perplexity API key not provided. Please configure it in /providers.');\n          }\n          return this.perplexityClient;\n        case 'openai':\n          if (!this.openaiClient) {\n            throw new Error('OpenAI API key not provided. Please configure it in /providers.');\n          }\n          return this.openaiClient;\n        case 'ollama':\n          return this.ollamaClient;\n      }\n    }\n    // OpenRouter models (access to multiple providers through one API)\n    const openRouterModels = [\n      'qwen/qwen3-235b-a22b-07-25',\n      'openai/gpt-4.1',\n      'qwen/qwen3-coder',\n      'deepseek/deepseek-r1-0528',\n      'deepseek/deepseek-chat',\n      'deepseek/deepseek-coder',\n      'z-ai/glm-4.5',\n      'meta-llama/llama-3.2-1b-instruct',\n      'anthropic/claude-3.5-sonnet',\n      'openai/gpt-4o',\n      'openai/gpt-3.5-turbo'\n    ];\n    \n    // Anthropic models\n    const anthropicModels = [\n      'claude-sonnet-4-20250514',\n      'claude-3-5-sonnet-20241022',\n      'claude-3-opus-20240229'\n    ];\n    \n    // Google models\n    const googleModels = [\n      'gemini-2.0-flash',\n      'gemini-2.5-flash',\n      'gemini-1.5-pro'\n    ];\n    \n    // xAI models (Grok)\n    const xaiModels = [\n      'grok-4-latest',\n      'grok-3-latest',\n      'grok-3-fast',\n      'grok-3-mini-fast',\n      'grok-beta'\n    ];\n    \n    // Groq models\n    const groqModels = [\n      'moonshotai/kimi-k2-instruct',\n      'llama-3.3-70b-versatile',\n      'llama3-8b-8192',\n      'llama3-70b-8192',\n      'llama-3.1-8b-instant',\n      'gemma2-9b-it'\n    ];\n    \n    // Cerebras models\n    const cerebrasModels = [\n      'llama3.1-8b',\n      'llama-4-scout-17b-16e-instruct',\n      'llama-3.3-70b',\n      'qwen-3-32b',\n      'qwen-3-235b-a22b-instruct-2507'\n    ];\n    \n    // Perplexity models\n    const perplexityModels = [\n      'sonar',\n      'sonar-pro',\n      'sonar-deep-research',\n      'llama-3.1-sonar-small-128k-online'\n    ];\n    \n    // OpenAI models\n    const openaiModels = [\n      'gpt-4o',\n      'gpt-4o-mini',\n      'gpt-3.5-turbo',\n      'gpt-4'\n    ];\n    \n    // Ollama models (dynamic - check by model format or known models)\n    const isOllamaModel = (modelName: string): boolean => {\n      // Check if it's a known Ollama model format or common Ollama models\n      const commonOllamaModels = [\n        'llama2', 'llama2:7b', 'llama2:13b', 'llama2:70b',\n        'llama3', 'llama3:8b', 'llama3:70b', 'llama3.1', 'llama3.1:8b', 'llama3.1:70b', 'llama3.1:405b',\n        'llama3.2', 'llama3.2:3b', 'llama3.2:11b', 'llama3.2:90b',\n        'codellama', 'codellama:7b', 'codellama:13b', 'codellama:34b',\n        'mistral', 'mistral:7b', 'mistral:instruct',\n        'mixtral', 'mixtral:8x7b', 'mixtral:8x22b',\n        'qwen', 'qwen:4b', 'qwen:7b', 'qwen:14b', 'qwen:32b', 'qwen:72b',\n        'qwen2', 'qwen2:0.5b', 'qwen2:1.5b', 'qwen2:7b', 'qwen2:72b',\n        'qwen2.5', 'qwen2.5:0.5b', 'qwen2.5:1.5b', 'qwen2.5:3b', 'qwen2.5:7b', 'qwen2.5:14b', 'qwen2.5:32b', 'qwen2.5:72b',\n        'deepseek-coder', 'deepseek-coder:6.7b', 'deepseek-coder:33b',\n        'gemma', 'gemma:2b', 'gemma:7b', 'gemma2', 'gemma2:9b', 'gemma2:27b',\n        'phi', 'phi3', 'phi3:3.8b', 'phi3:14b',\n        'vicuna', 'vicuna:7b', 'vicuna:13b', 'vicuna:33b',\n        'orca-mini', 'orca-mini:3b', 'orca-mini:7b', 'orca-mini:13b',\n        'neural-chat', 'neural-chat:7b',\n        'starling-lm', 'starling-lm:7b',\n        'tinyllama', 'tinyllama:1.1b',\n        'wizard-vicuna-uncensored', 'wizard-vicuna-uncensored:7b', 'wizard-vicuna-uncensored:13b',\n        'nous-hermes', 'nous-hermes:7b', 'nous-hermes:13b', 'nous-hermes2',\n        'dolphin-mistral', 'dolphin-mistral:7b',\n        'solar', 'solar:10.7b'\n      ];\n      \n      if (commonOllamaModels.includes(modelName.toLowerCase())) {\n        return true;\n      }\n      \n      // Check for Ollama model format patterns (model:tag or model/variant)\n      return /^[a-zA-Z0-9._-]+:[a-zA-Z0-9._-]+$/.test(modelName) || \n             /^[a-zA-Z0-9._-]+\\/[a-zA-Z0-9._-]+$/.test(modelName) ||\n             // Simple heuristic: if it doesn't match other providers and contains certain patterns\n             (modelName.includes('llama') || modelName.includes('qwen') || modelName.includes('mistral') || \n              modelName.includes('gemma') || modelName.includes('phi') || modelName.includes('deepseek')) &&\n             !openRouterModels.includes(modelName) && \n             !anthropicModels.includes(modelName) &&\n             !googleModels.includes(modelName) &&\n             !xaiModels.includes(modelName) &&\n             !groqModels.includes(modelName) &&\n             !cerebrasModels.includes(modelName) &&\n             !perplexityModels.includes(modelName) &&\n             !openaiModels.includes(modelName);\n    };\n    \n    if (openRouterModels.includes(model)) {\n      if (!this.openRouterClient) {\n        throw new Error('OpenRouter API key not provided. Please configure it in /providers.');\n      }\n      return this.openRouterClient;\n    } else if (anthropicModels.includes(model)) {\n      if (!this.anthropicClient) {\n        throw new Error('Anthropic API key not provided. Please configure it in /providers.');\n      }\n      return this.anthropicClient;\n    } else if (googleModels.includes(model)) {\n      if (!this.googleClient) {\n        throw new Error('Google API key not provided. Please configure it in /providers.');\n      }\n      return this.googleClient;\n    } else if (xaiModels.includes(model)) {\n      return this.xaiClient; // Default xAI client\n    } else if (groqModels.includes(model)) {\n      if (!this.groqClient) {\n        throw new Error('Groq API key not provided. Please configure it in /providers.');\n      }\n      return this.groqClient;\n    } else if (cerebrasModels.includes(model)) {\n      if (!this.cerebrasClient) {\n        throw new Error('Cerebras API key not provided. Please configure it in /providers.');\n      }\n      return this.cerebrasClient;\n    } else if (perplexityModels.includes(model)) {\n      if (!this.perplexityClient) {\n        throw new Error('Perplexity API key not provided. Please configure it in /providers.');\n      }\n      return this.perplexityClient;\n    } else if (openaiModels.includes(model)) {\n      if (!this.openaiClient) {\n        throw new Error('OpenAI API key not provided. Please configure it in /providers.');\n      }\n      return this.openaiClient;\n    } else if (isOllamaModel(model)) {\n      return this.ollamaClient;\n    }\n    \n    // Default to XAI for unknown models or grok models\n    return this.xaiClient;\n  }\n\n  setModel(model: string): void {\n    sessionManager.setCurrentModel(model);\n  }\n\n  getCurrentModel(): string {\n    return sessionManager.getCurrentModel();\n  }\n\n  getLastStreamingMetrics(): { prefillTimeMs: number; decodeTimeMs: number; outputTokens: number; tokensPerSecond: number; } | undefined {\n    return this.lastStreamingMetrics;\n  }\n\n  async chat(\n    messages: GrokMessage[],\n    tools?: GrokTool[],\n    model?: string\n  ): Promise<GrokResponse> {\n    const startTime = Date.now();\n    const targetModel = model || sessionManager.getCurrentModel();\n    \n    try {\n      // Check if no model is configured\n      if (!targetModel) {\n        throw new Error('No model selected. Please configure a model first:\\n\\n1. Set up API keys: /providers\\n2. Add models: /add-model\\n3. Select a model: /models\\n\\nFor a quick start, try:\\n• /providers → Add your API keys\\n• /add-model → Add models from your providers\\n• /models → Select the current model');\n      }\n      \n      const tokenCounter = createTokenCounter(targetModel);\n      const inputTokens = tokenCounter.countMessageTokens(messages as any);\n      const client = this.getClientForModel(targetModel);\n      \n      // Check if this is a Cerebras client\n      if (client === this.cerebrasClient) {\n        const requestBody: any = {\n          model: targetModel,\n          messages,\n          temperature: sessionManager.getTemperature(),\n          max_completion_tokens: 4000,\n          top_p: 0.95,\n        };\n        \n        console.log(`DEBUG: Using Cerebras model: ${targetModel}`);\n        console.log(`DEBUG: Cerebras API Key present: ${this.cerebrasApiKey ? 'Yes' : 'No'}`);\n        \n        const response = await client.chat.completions.create(requestBody);\n        const endTime = Date.now();\n        const durationMs = endTime - startTime;\n        \n        // Calculate tokens and throughput for Cerebras\n        let outputTokens = 0;\n        if ((response as any).usage?.completion_tokens) {\n          outputTokens = (response as any).usage.completion_tokens;\n        } else {\n          // Fallback: estimate from response content\n          const content = response.choices[0]?.message?.content || '';\n          outputTokens = tokenCounter.countTokens(content);\n        }\n        \n        const totalTokens = inputTokens + outputTokens;\n        const outputTokensPerSecond = outputTokens / (durationMs / 1000);\n        \n        // Add metrics to response (console display handled by streaming or agent)\n        // For non-streaming, estimate prefill as 30% of total time or max 1s\n        const prefillTime = Math.min(1000, Math.round(durationMs * 0.3));\n        const decodeTime = durationMs - prefillTime;\n        const decodeTokensPerSecond = decodeTime > 0 ? outputTokens / (decodeTime / 1000) : 0;\n        (response as any).metrics = {\n          prefillTimeMs: prefillTime,\n          decodeTimeMs: decodeTime,\n          outputTokens: outputTokens,\n          tokensPerSecond: Math.round(decodeTokensPerSecond)\n        };\n        \n        tokenCounter.dispose();\n        return response as GrokResponse;\n      }\n      \n      // Handle OpenAI-compatible clients\n      const openRouterProvider = getOpenRouterProvider(targetModel);\n      const requestBody: any = {\n        model: targetModel,\n        messages,\n        tools: tools || [],\n        tool_choice: tools ? 'auto' : undefined,\n        temperature: sessionManager.getTemperature(),\n        max_tokens: 4000,\n      };\n\n      // If using OpenRouter client and have a provider preference, add provider routing\n      if (client === this.openRouterClient && openRouterProvider) {\n        requestBody.provider = {\n          order: [openRouterProvider],\n          allow_fallbacks: true\n        };\n        \n        console.log(`DEBUG: Using preferred OpenRouter provider: ${openRouterProvider} for model: ${targetModel}`);\n      }\n      \n      // Debug logging\n      console.log(`DEBUG: Using model: ${targetModel}`);\n      console.log(`DEBUG: Client type: ${client === this.openRouterClient ? 'OpenRouter' : client === this.groqClient ? 'Groq' : client === this.xaiClient ? 'XAI' : 'Other'}`);\n      console.log(`DEBUG: API Key present: ${this.openRouterApiKey ? 'Yes' : 'No'}`);\n      console.log(`DEBUG: Request payload:`, {\n        model: targetModel,\n        messages: messages.slice(0, 1), // Only show first message for brevity\n        provider: requestBody.provider,\n      });\n      \n      const response = await (client as OpenAI).chat.completions.create(requestBody);\n      const endTime = Date.now();\n      const durationMs = endTime - startTime;\n      \n      // Calculate tokens and throughput\n      let outputTokens = 0;\n      if ((response as any).usage?.completion_tokens) {\n        outputTokens = (response as any).usage.completion_tokens;\n      } else {\n        // Fallback: estimate from response content\n        const content = response.choices[0]?.message?.content || '';\n        outputTokens = tokenCounter.countTokens(content);\n      }\n      \n      const totalTokens = inputTokens + outputTokens;\n      const outputTokensPerSecond = outputTokens / (durationMs / 1000);\n      \n      // Add metrics to response (console display handled by streaming or agent)\n      // For non-streaming, estimate prefill as 30% of total time or max 1s\n      const prefillTime = Math.min(1000, Math.round(durationMs * 0.3));\n      const decodeTime = durationMs - prefillTime;\n      const decodeTokensPerSecond = decodeTime > 0 ? outputTokens / (decodeTime / 1000) : 0;\n      (response as any).metrics = {\n        prefillTimeMs: prefillTime,\n        decodeTimeMs: decodeTime,\n        outputTokens: outputTokens,\n        tokensPerSecond: Math.round(decodeTokensPerSecond)\n      };\n      \n      tokenCounter.dispose();\n      return response as GrokResponse;\n    } catch (error: any) {\n      const endTime = Date.now();\n      const durationMs = endTime - startTime;\n      console.log(`DEBUG: API Error for model ${targetModel} after ${(durationMs/1000).toFixed(1)}s:`, error.message);\n      throw new Error(`API error: ${error.message}`);\n    }\n  }\n\n  async *chatStream(\n    messages: GrokMessage[],\n    tools?: GrokTool[],\n    model?: string\n  ): AsyncGenerator<any, void, unknown> {\n    const startTime = Date.now();\n    const targetModel = model || sessionManager.getCurrentModel();\n    let accumulatedContent = '';\n    let firstTokenTime: number | null = null;\n    \n    try {\n      // Check if no model is configured\n      if (!targetModel) {\n        throw new Error('No model selected. Please configure a model first:\\n\\n1. Set up API keys: /providers\\n2. Add models: /add-model\\n3. Select a model: /models\\n\\nFor a quick start, try:\\n• /providers → Add your API keys\\n• /add-model → Add models from your providers\\n• /models → Select the current model');\n      }\n      \n      const tokenCounter = createTokenCounter(targetModel);\n      const inputTokens = tokenCounter.countMessageTokens(messages as any);\n      const client = this.getClientForModel(targetModel);\n      \n      // Check if this is a Cerebras client\n      if (client === this.cerebrasClient) {\n        const requestBody: any = {\n          model: targetModel,\n          messages,\n          temperature: sessionManager.getTemperature(),\n          max_completion_tokens: 4000,\n          top_p: 0.95,\n          stream: true,\n        };\n        \n        console.log(`DEBUG: Streaming with Cerebras model: ${targetModel}`);\n        \n        const stream = await client.chat.completions.create(requestBody) as any;\n\n        for await (const chunk of stream) {\n          if (chunk.choices?.[0]?.delta?.content) {\n            if (firstTokenTime === null) {\n              firstTokenTime = Date.now();\n            }\n            accumulatedContent += chunk.choices[0].delta.content;\n          }\n          yield chunk;\n        }\n        \n        // Calculate and display metrics for Cerebras streaming\n        const endTime = Date.now();\n        const durationMs = endTime - startTime;\n        const outputTokens = tokenCounter.countTokens(accumulatedContent);\n        const totalTokens = inputTokens + outputTokens;\n        const outputTokensPerSecond = outputTokens / (durationMs / 1000);\n        \n        // Calculate actual prefill and decode times\n        const prefillTime = firstTokenTime ? firstTokenTime - startTime : Math.round(durationMs * 0.3);\n        const decodeTime = firstTokenTime ? endTime - firstTokenTime : durationMs - prefillTime;\n        const decodeTokensPerSecond = decodeTime > 0 ? outputTokens / (decodeTime / 1000) : 0;\n        \n        console.log(`\\x1b[34mprefill - ${prefillTime}ms\\x1b[0m | \\x1b[33mdecode - ${Math.round(decodeTokensPerSecond)} toks/sec (${outputTokens} out / ${decodeTime}ms)\\x1b[0m`);\n        this.lastStreamingMetrics = {\n          prefillTimeMs: prefillTime,\n          decodeTimeMs: decodeTime,\n          outputTokens: outputTokens,\n          tokensPerSecond: Math.round(decodeTokensPerSecond)\n        };\n        tokenCounter.dispose();\n        return;\n      }\n      \n      // Handle OpenAI-compatible clients\n      const openRouterProvider = getOpenRouterProvider(targetModel);\n      const requestBody: any = {\n        model: targetModel,\n        messages,\n        tools: tools || [],\n        tool_choice: tools ? 'auto' : undefined,\n        temperature: sessionManager.getTemperature(),\n        max_tokens: 4000,\n        stream: true,\n      };\n\n      // If using OpenRouter client and have a provider preference, add provider routing\n      if (client === this.openRouterClient && openRouterProvider) {\n        requestBody.provider = {\n          order: [openRouterProvider],\n          allow_fallbacks: true\n        };\n        \n        console.log(`DEBUG: Streaming with preferred OpenRouter provider: ${openRouterProvider} for model: ${targetModel}`);\n      }\n      \n      const stream = await (client as OpenAI).chat.completions.create(requestBody) as any;\n\n      for await (const chunk of stream) {\n        if (chunk.choices?.[0]?.delta?.content) {\n          if (firstTokenTime === null) {\n            firstTokenTime = Date.now();\n          }\n          accumulatedContent += chunk.choices[0].delta.content;\n        }\n        yield chunk;\n      }\n      \n      // Calculate and display metrics for streaming\n      const endTime = Date.now();\n      const durationMs = endTime - startTime;\n      const outputTokens = tokenCounter.countTokens(accumulatedContent);\n      const totalTokens = inputTokens + outputTokens;\n      const outputTokensPerSecond = outputTokens / (durationMs / 1000);\n      \n      // Calculate actual prefill and decode times\n      const prefillTime = firstTokenTime ? firstTokenTime - startTime : Math.round(durationMs * 0.3);\n      const decodeTime = firstTokenTime ? endTime - firstTokenTime : durationMs - prefillTime;\n      const decodeTokensPerSecond = decodeTime > 0 ? outputTokens / (decodeTime / 1000) : 0;\n      \n      console.log(`\\x1b[34mprefill - ${prefillTime}ms\\x1b[0m | \\x1b[33mdecode - ${Math.round(decodeTokensPerSecond)} toks/sec (${outputTokens} out / ${decodeTime}ms)\\x1b[0m`);\n      this.lastStreamingMetrics = {\n        prefillTimeMs: prefillTime,\n        decodeTimeMs: decodeTime,\n        outputTokens: outputTokens,\n        tokensPerSecond: Math.round(decodeTokensPerSecond)\n      };\n      tokenCounter.dispose();\n    } catch (error: any) {\n      const endTime = Date.now();\n      const durationMs = endTime - startTime;\n      console.log(`DEBUG: Streaming API Error for model ${targetModel} after ${(durationMs/1000).toFixed(1)}s:`, error.message);\n      throw new Error(`API error: ${error.message}`);\n    }\n  }\n}\n",
      "filePath": "../src/giga/client.ts",
      "embedding": [
        22.38,
        0.4,
        0.1,
        0.6,
        0.6,
        0.04072978670076386,
        0.016015283311311312,
        0.022512334264118472,
        0.05954570217031682,
        0.02380300299876701,
        0.011263629437188939,
        0.012716043028868508,
        0.09155635639225251,
        0.01200566088440047,
        0.09668353665483799,
        0.04495838750089211,
        0.0911921552336214,
        0.09589010994506764,
        0.004106391525805053,
        0.010518633065773575,
        0.05999522851637293,
        0.09434642135122122,
        0.05718578074408229,
        0.011524575873605315,
        0.06707090308594467,
        0.06879862575673139,
        0.03795446727991936,
        0.06490933257675421,
        0.02359155395092377,
        0.06734876884874151,
        0.0634458446130934,
        0.06052891709665718,
        0.04752534931573084,
        0.004302417131451209,
        0.07618642680466181,
        0.05321792663138042,
        0.08082779077195093,
        0.013042407096679733,
        0.08313117303634562,
        0.07853507086390733,
        0.08034928815575132,
        0.06352679310910146,
        0.015518716381337939,
        0.005248636401175788,
        0.039949039209922745,
        0.08741316445768733,
        0.0027927845083556726,
        0.06819875791979978,
        0.08977458832705734,
        0.014106517254718077,
        0.04481856466488793,
        0.044495000284319075,
        0.08292892980829919,
        0.08039983997422825,
        0.060194987223068014,
        0.03196632890593072,
        0.058909587422850684,
        0.038154740944262015,
        0.04905600002799082,
        0.07064939331694904,
        0.06559763469993674,
        0.005886365293440588,
        0.07949208484498795,
        0.01582263619342905,
        0.004454349381769318,
        0.07594022609092138,
        0.02764352037539604,
        0.0244014111747091,
        0.05764259002814492,
        0.03682515563614115,
        0.06739135241675744,
        0.03522557806813128,
        0.07710495236297896,
        0.00195999863974633,
        0.08001482545840125,
        0.0983505749182609,
        0.03092237078687903,
        0.0016643129603178598,
        0.0196524297603497,
        0.0030472264949131913,
        0.02137857690556585,
        0.02310713577622563,
        0.06298160164848066,
        0.032017919976340174,
        0.0229457949494454,
        0.08297185595781176,
        0.05889742933556851,
        0.020693689134823546,
        0.03743779649553215,
        0.0066520270967248335,
        0.07709814959952116,
        0.0825592878744089,
        0.02903402281639457,
        0.09113562629924754,
        0.0664963607280299,
        0.08646077654036927,
        0.09572495829262782,
        0.001967277253051547,
        0.02656770590767238,
        0.09475346447937821
      ]
    },
    {
      "content": "import { GrokTool } from './client';\nimport { McpManager } from '../mcp/mcp-manager';\n\nexport const GROK_TOOLS: GrokTool[] = [\n  {\n    type: 'function',\n    function: {\n      name: 'view_file',\n      description: 'View contents of a file or list directory contents',\n      parameters: {\n        type: 'object',\n        properties: {\n          path: {\n            type: 'string',\n            description: 'Path to file or directory to view'\n          },\n          start_line: {\n            type: 'number',\n            description: 'Starting line number for partial file view (optional)'\n          },\n          end_line: {\n            type: 'number',\n            description: 'Ending line number for partial file view (optional)'\n          }\n        },\n        required: ['path']\n      }\n    }\n  },\n  {\n    type: 'function',\n    function: {\n      name: 'create_file',\n      description: 'Create a new file with specified content',\n      parameters: {\n        type: 'object',\n        properties: {\n          path: {\n            type: 'string',\n            description: 'Path where the file should be created'\n          },\n          content: {\n            type: 'string',\n            description: 'Content to write to the file'\n          }\n        },\n        required: ['path', 'content']\n      }\n    }\n  },\n  {\n    type: 'function',\n    function: {\n      name: 'str_replace_editor',\n      description: 'Replace specific text in a file',\n      parameters: {\n        type: 'object',\n        properties: {\n          path: {\n            type: 'string',\n            description: 'Path to the file to edit'\n          },\n          old_str: {\n            type: 'string',\n            description: 'Text to replace (must match exactly)'\n          },\n          new_str: {\n            type: 'string',\n            description: 'Text to replace with'\n          }\n        },\n        required: ['path', 'old_str', 'new_str']\n      }\n    }\n  },\n  {\n    type: 'function',\n    function: {\n      name: 'bash',\n      description: 'Execute a bash command',\n      parameters: {\n        type: 'object',\n        properties: {\n          command: {\n            type: 'string',\n            description: 'The bash command to execute'\n          }\n        },\n        required: ['command']\n      }\n    }\n  },\n  {\n    type: 'function',\n    function: {\n      name: 'create_todo_list',\n      description: 'Create a new todo list for planning and tracking tasks',\n      parameters: {\n        type: 'object',\n        properties: {\n          todos: {\n            type: 'array',\n            description: 'Array of todo items',\n            items: {\n              type: 'object',\n              properties: {\n                id: {\n                  type: 'string',\n                  description: 'Unique identifier for the todo item'\n                },\n                content: {\n                  type: 'string',\n                  description: 'Description of the todo item'\n                },\n                status: {\n                  type: 'string',\n                  enum: ['pending', 'in_progress', 'completed'],\n                  description: 'Current status of the todo item'\n                },\n                priority: {\n                  type: 'string',\n                  enum: ['high', 'medium', 'low'],\n                  description: 'Priority level of the todo item'\n                }\n              },\n              required: ['id', 'content', 'status', 'priority']\n            }\n          }\n        },\n        required: ['todos']\n      }\n    }\n  },\n  {\n    type: 'function',\n    function: {\n      name: 'update_todo_list',\n      description: 'Update existing todos in the todo list',\n      parameters: {\n        type: 'object',\n        properties: {\n          updates: {\n            type: 'array',\n            description: 'Array of todo updates',\n            items: {\n              type: 'object',\n              properties: {\n                id: {\n                  type: 'string',\n                  description: 'ID of the todo item to update'\n                },\n                status: {\n                  type: 'string',\n                  enum: ['pending', 'in_progress', 'completed'],\n                  description: 'New status for the todo item'\n                },\n                content: {\n                  type: 'string',\n                  description: 'New content for the todo item'\n                },\n                priority: {\n                  type: 'string',\n                  enum: ['high', 'medium', 'low'],\n                  description: 'New priority for the todo item'\n                }\n              },\n              required: ['id']\n            }\n          }\n        },\n        required: ['updates']\n      }\n    }\n  },\n  {\n    type: 'function',\n    function: {\n      name: 'perplexity_search',\n      description: 'Search the web using Perplexity for current information, documentation, and research',\n      parameters: {\n        type: 'object',\n        properties: {\n          query: {\n            type: 'string',\n            description: 'The search query to look up'\n          },\n          max_results: {\n            type: 'number',\n            description: 'Maximum number of results to return (default: 10)'\n          },\n          summarize: {\n            type: 'boolean',\n            description: 'Whether to summarize results for concise output (default: true)'\n          }\n        },\n        required: ['query']\n      }\n    }\n  },\n  {\n    type: 'function',\n    function: {\n      name: 'list_mcp_tools',\n      description: 'List all available MCP tools from connected servers',\n      parameters: {\n        type: 'object',\n        properties: {},\n        required: []\n      }\n    }\n  },\n  {\n    type: 'function',\n    function: {\n      name: 'call_mcp_tool',\n      description: 'Call an MCP tool with specified arguments',\n      parameters: {\n        type: 'object',\n        properties: {\n          tool_name: {\n            type: 'string',\n            description: 'Name of the MCP tool to call'\n          },\n          arguments: {\n            type: 'object',\n            description: 'Arguments to pass to the MCP tool'\n          }\n        },\n        required: ['tool_name']\n      }\n    }\n  }\n];\n\nexport function getAllTools(): GrokTool[] {\n  const mcpManager = McpManager.getInstance();\n  const mcpTools = mcpManager.getAllTools();\n  \n  // Convert MCP tools to Grok tools\n  const dynamicMcpTools: GrokTool[] = mcpTools.map(tool => ({\n    type: 'function',\n    function: {\n      name: `mcp_${tool.serverName}_${tool.name}`,\n      description: `[MCP: ${tool.serverName}] ${tool.description || tool.name}`,\n      parameters: tool.inputSchema || {\n        type: 'object',\n        properties: {},\n        required: []\n      }\n    }\n  }));\n\n  return [...GROK_TOOLS, ...dynamicMcpTools];\n}",
      "filePath": "../src/giga/tools.ts",
      "embedding": [
        6.59,
        2.1,
        0,
        0.2,
        0.2,
        0.0239643996486595,
        0.08253319396180646,
        0.009090375589718659,
        0.043447466716380216,
        0.01100048293987348,
        0.028762081018294618,
        0.029312063683957723,
        0.004861927724073967,
        0.08996061837370978,
        0.04025201262943297,
        0.0575000533114496,
        0.06357568907410471,
        0.07874222958477309,
        0.07191819936416365,
        0.02035569276571906,
        0.030153963025432964,
        0.03174491116835289,
        0.03533132402360013,
        0.010660374932288219,
        0.07019981083264769,
        0.0548651354635651,
        0.042934636127748706,
        0.013225993526878966,
        0.027716041112164993,
        0.09534338206217058,
        0.09501579114477536,
        0.058837408652127846,
        0.035689118457805445,
        0.07290349562553705,
        0.024929819916225417,
        0.05999800101417482,
        0.054600050186247175,
        0.07845320527156108,
        0.055624375373824225,
        0.01225812853439684,
        0.002537555596025598,
        0.04318566879089473,
        0.08416883645295234,
        0.0394786579953098,
        0.0570667043559735,
        0.044951421212432285,
        0.04039508730297914,
        0.002378029914978275,
        0.008414506237173136,
        0.05838000210625443,
        0.04499891939546026,
        0.07379930441620201,
        0.01037088433871476,
        0.018825049247386275,
        0.07053855201988235,
        0.09704309090946067,
        0.08994232019080273,
        0.06771564127204918,
        0.03727010583751688,
        0.058539002013127506,
        0.040765877203647605,
        0.028448089460208492,
        0.09352288022143533,
        0.0886119755626109,
        0.06856247942023734,
        0.07245408241397132,
        0.03512854944334078,
        0.04851085677041316,
        0.08316878011476427,
        0.020580930843210665,
        0.02086956301572326,
        0.0648397522162847,
        0.05971428194577624,
        0.03193653136891698,
        0.06534587658657114,
        0.06731751388246171,
        0.055298656530184155,
        0.02550883742676129,
        0.04684852041304791,
        0.08121764628614091,
        0.010085626031927543,
        0.031285113383652176,
        0.06039209157972828,
        0.03739205101531473,
        0.044031056277820384,
        0.06860410574027247,
        0.04027650021083015,
        0.09849930054390112,
        0.02601291954715993,
        0.08083044813575274,
        0.057546485921777,
        0.09183503047780682,
        0.04353770125822605,
        0.0003823938122923143,
        0.015402356203484003,
        0.0028196826874520966,
        0.03469466532270648,
        0.07139838827444898,
        0.02602361051985537,
        0.09749770228537691
      ]
    },
    {
      "content": "import { useState, useRef, useEffect, useCallback } from \"react\";\nimport { useInput, useApp } from \"ink\";\nimport { GigaAgent, ChatEntry } from \"../agent/giga-agent\";\nimport { ConfirmationService } from \"../utils/confirmation-service\";\nimport { loadAddedModels } from \"../utils/added-models\";\nimport { loadAddedMcpServers, AddedMcpServer } from \"../utils/added-mcp-servers\";\nimport { fuzzySearch } from \"../utils/fuzzy-search\";\nimport { getInstanceAvailableModels, onModelSelected } from \"../utils/instance-models\";\nimport { getAllFiles, extractFileQuery, replaceFileQuery, getFilteredItems, FileInfo } from \"../utils/file-finder\";\nimport { OpenRouterProvider, isOpenRouterModel } from \"../utils/openrouter-providers\";\nimport { setOpenRouterProvider, getOpenRouterProvider } from \"../utils/added-models\";\nimport { sessionManager } from \"../utils/session-manager\";\nimport { modeManager } from \"../utils/mode-manager\";\nimport { AgentMode } from \"../types\";\n\n// Helper function to get OpenRouter models consistently\nconst getOpenRouterModels = (models: ModelOption[]): ModelOption[] => {\n  return models.filter(model => model.description.includes('(OpenRouter)'));\n};\n\ninterface UseInputHandlerProps {\n  agent: GigaAgent;\n  chatHistory: ChatEntry[];\n  setChatHistory: React.Dispatch<React.SetStateAction<ChatEntry[]>>;\n  setIsProcessing: (processing: boolean) => void;\n  setIsStreaming: (streaming: boolean) => void;\n  setTokenCount: (count: number) => void;\n  setProcessingTime: (time: number) => void;\n  processingStartTime: React.MutableRefObject<number>;\n  isProcessing: boolean;\n  isStreaming: boolean;\n  isConfirmationActive?: boolean;\n  onModeChange?: (mode: AgentMode) => void;\n}\n\ninterface CommandSuggestion {\n  command: string;\n  description: string;\n}\n\ninterface ModelOption {\n  model: string;\n  description: string;\n}\n\ninterface Provider {\n  name: string;\n  keyName: string;\n  description: string;\n}\n\nexport function useInputHandler({\n  agent,\n  chatHistory,\n  setChatHistory,\n  setIsProcessing,\n  setIsStreaming,\n  setTokenCount,\n  setProcessingTime,\n  processingStartTime,\n  isProcessing,\n  isStreaming,\n  isConfirmationActive = false,\n  onModeChange,\n}: UseInputHandlerProps) {\n  const [input, setInput] = useState(\"\");\n  const [showCommandSuggestions, setShowCommandSuggestions] = useState(false);\n  const [selectedCommandIndex, setSelectedCommandIndex] = useState(0);\n  const [showModelSelection, setShowModelSelection] = useState(false);\n  const [selectedModelIndex, setSelectedModelIndex] = useState(0);\n  const [showProviderSettings, setShowProviderSettings] = useState(false);\n  const [selectedProviderIndex, setSelectedProviderIndex] = useState(0);\n  const [showAddModel, setShowAddModel] = useState(false);\n  const [showDeleteModel, setShowDeleteModel] = useState(false);\n  const [showPromptsList, setShowPromptsList] = useState(false);\n  const [showAddPrompt, setShowAddPrompt] = useState(false);\n  const [showDeletePrompt, setShowDeletePrompt] = useState(false);\n  const [showMcpServers, setShowMcpServers] = useState(false);\n  const [showAddMcpServer, setShowAddMcpServer] = useState(false);\n  const [showDeleteMcpServer, setShowDeleteMcpServer] = useState(false);\n  const [selectedMcpServerIndex, setSelectedMcpServerIndex] = useState(0);\n  const [dynamicModels, setDynamicModels] = useState<ModelOption[]>([]);\n  const [mcpServers, setMcpServers] = useState<AddedMcpServer[]>([]);\n  const [showConversationHistory, setShowConversationHistory] = useState(false);\n  const [showTemperatureSelector, setShowTemperatureSelector] = useState(false);\n  const [currentTemperature, setCurrentTemperature] = useState(0.7);\n  const [showExpertModels, setShowExpertModels] = useState(false);\n  \n  // Route selection state\n  const [showRouteSelection, setShowRouteSelection] = useState(false);\n  const [routeViewMode, setRouteViewMode] = useState<'models' | 'providers'>('models');\n  const [selectedRouteModelIndex, setSelectedRouteModelIndex] = useState(0);\n  const [selectedRouteProviderIndex, setSelectedRouteProviderIndex] = useState(0);\n  const [currentSelectedModel, setCurrentSelectedModel] = useState<string>('');\n  const [routeProviders, setRouteProviders] = useState<OpenRouterProvider[]>([]);\n  const [isLoadingProviders, setIsLoadingProviders] = useState(false);\n  \n  // Command history state\n  const [commandHistory, setCommandHistory] = useState<string[]>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  const [temporaryInput, setTemporaryInput] = useState(\"\");\n  \n  // File finder state\n  const [showFileFinder, setShowFileFinder] = useState(false);\n  const [selectedFileIndex, setSelectedFileIndex] = useState(0);\n  const [availableFiles, setAvailableFiles] = useState<FileInfo[]>([]);\n  const [filteredFiles, setFilteredFiles] = useState<string[]>([]);\n  const [fileQuery, setFileQuery] = useState(\"\");\n  \n  // Streaming content batching state\n  const streamingBufferRef = useRef<string>(\"\");\n  const batchTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  \n  // Double Ctrl+C detection as fallback\n  const lastCtrlCRef = useRef<number>(0);\n  const ctrlCTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Batched state update for streaming content\n  const flushStreamingBuffer = useCallback(() => {\n    if (streamingBufferRef.current) {\n      const content = streamingBufferRef.current;\n      streamingBufferRef.current = \"\";\n      \n      setChatHistory((prev) =>\n        prev.map((entry, idx) =>\n          idx === prev.length - 1 && entry.isStreaming\n            ? { ...entry, content: entry.content + content }\n            : entry\n        )\n      );\n    }\n    \n    if (batchTimeoutRef.current) {\n      clearTimeout(batchTimeoutRef.current);\n      batchTimeoutRef.current = null;\n    }\n  }, [setChatHistory]);\n\n  // Debounced streaming content update\n  const addStreamingContent = useCallback((content: string) => {\n    streamingBufferRef.current += content;\n    \n    if (batchTimeoutRef.current) {\n      clearTimeout(batchTimeoutRef.current);\n    }\n    \n    batchTimeoutRef.current = setTimeout(() => {\n      setImmediate(flushStreamingBuffer);\n    }, 16); // 16ms debounce for ~60fps updates\n  }, [flushStreamingBuffer]);\n\n  // Helper function to add command to history\n  const addToHistory = (command: string) => {\n    if (command.trim() && command !== commandHistory[commandHistory.length - 1]) {\n      setCommandHistory(prev => [...prev, command.trim()]);\n    }\n    setHistoryIndex(-1);\n    setTemporaryInput(\"\");\n  };\n\n  const closeProviderSettings = () => {\n    setShowProviderSettings(false);\n    setSelectedProviderIndex(0);\n  };\n\n  const closeAddModel = () => {\n    setShowAddModel(false);\n  };\n\n  const closeDeleteModel = () => {\n    setShowDeleteModel(false);\n  };\n\n  const closePromptsList = () => {\n    setShowPromptsList(false);\n  };\n\n  const closeAddPrompt = () => {\n    setShowAddPrompt(false);\n  };\n\n  const closeDeletePrompt = () => {\n    setShowDeletePrompt(false);\n  };\n\n  const closeMcpServers = () => {\n    setShowMcpServers(false);\n    setSelectedMcpServerIndex(0);\n  };\n\n  const closeAddMcpServer = () => {\n    setShowAddMcpServer(false);\n  };\n\n  const closeDeleteMcpServer = () => {\n    setShowDeleteMcpServer(false);\n  };\n\n  const closeRouteSelection = () => {\n    setShowRouteSelection(false);\n    setRouteViewMode('models');\n    setSelectedRouteModelIndex(0);\n    setSelectedRouteProviderIndex(0);\n    setCurrentSelectedModel('');\n    setRouteProviders([]);\n    setIsLoadingProviders(false);\n  };\n\n  const closeConversationHistory = () => {\n    setShowConversationHistory(false);\n  };\n\n  const closeTemperatureSelector = () => {\n    setShowTemperatureSelector(false);\n  };\n\n  const closeExpertModels = () => {\n    setShowExpertModels(false);\n  };\n\n  const closeFileFinder = () => {\n    setShowFileFinder(false);\n    setSelectedFileIndex(0);\n    setFilteredFiles([]);\n    setFileQuery(\"\");\n  };\n\n  const updateFileFinder = (currentInput: string) => {\n    const queryInfo = extractFileQuery(currentInput);\n    if (queryInfo) {\n      const { query, isDirectory } = queryInfo;\n      setFileQuery(query);\n      \n      if (isDirectory) {\n        // Handle directory search - use simple filtering\n        const filtered = getFilteredItems(availableFiles, query, true);\n        setFilteredFiles(filtered);\n        setShowFileFinder(true); // Always show when @ query is active\n        setSelectedFileIndex(0);\n      } else {\n        // Handle file search\n        if (query === '') {\n          // Just @ typed, show recent/common files\n          const recentFiles = availableFiles\n            .filter(file => !file.isDirectory)\n            .map(file => file.relativePath)\n            .sort()\n            .slice(0, 10);\n          setFilteredFiles(recentFiles);\n        } else {\n          // Use fuzzy search for better matching\n          const filtered = fuzzySearch(\n            query,\n            availableFiles.filter(file => !file.isDirectory),\n            (file) => file.relativePath,\n            10\n          ).map(file => file.relativePath);\n          setFilteredFiles(filtered);\n        }\n        \n        setShowFileFinder(true); // Always show when @ query is active\n        setSelectedFileIndex(0);\n      }\n    } else {\n      setShowFileFinder(false);\n      setFilteredFiles([]);\n      setFileQuery(\"\");\n    }\n  };\n\n  const refreshModels = () => {\n    const instanceModels = getInstanceAvailableModels();\n    const modelOptions: ModelOption[] = instanceModels.map(model => ({\n      model: model.model,\n      description: `${model.description}${model.isFavorite ? ' ⭐' : ''}${model.isRecentlyUsed ? ' 🕒' : ''}`\n    }));\n    \n    setDynamicModels(modelOptions);\n  };\n\n  const refreshMcpServers = () => {\n    const addedServers = loadAddedMcpServers();\n    setMcpServers(addedServers);\n  };\n\n  // Helper function to get current filtered suggestions based on input\n  const getFilteredSuggestions = (currentInput: string): CommandSuggestion[] => {\n    return currentInput.startsWith(\"/\")\n      ? fuzzySearch(\n          currentInput.substring(1), // Remove the \"/\" for fuzzy matching\n          commandSuggestions.filter(s => s.command.startsWith(\"/\")),\n          (suggestion) => suggestion.command.substring(1), // Remove \"/\" for matching\n          8\n        )\n      : fuzzySearch(\n          currentInput,\n          commandSuggestions,\n          (suggestion) => suggestion.command,\n          8\n        );\n  };\n\n  useEffect(() => {\n    refreshModels();\n    refreshMcpServers();\n    setCurrentTemperature(sessionManager.getTemperature());\n    \n    // Load available files\n    try {\n      const files = getAllFiles();\n      setAvailableFiles(files);\n    } catch (error) {\n      console.error('Failed to load files:', error);\n    }\n    \n    // Cleanup function to clear any pending timeouts\n    return () => {\n      if (batchTimeoutRef.current) {\n        clearTimeout(batchTimeoutRef.current);\n        batchTimeoutRef.current = null;\n      }\n      if (ctrlCTimeoutRef.current) {\n        clearTimeout(ctrlCTimeoutRef.current);\n        ctrlCTimeoutRef.current = null;\n      }\n    };\n  }, []);\n\n  const { exit } = useApp();\n\n  const commandSuggestions: CommandSuggestion[] = [\n    { command: \"/help\", description: \"Show help information\" },\n    { command: \"/clear\", description: \"Clear chat history\" },\n    { command: \"/history\", description: \"Browse conversation history\" },\n    { command: \"/models\", description: \"Switch Grok Model\" },\n    { command: \"/route\", description: \"Configure model provider routing\" },\n    { command: \"/add-model\", description: \"Add models from providers\" },\n    { command: \"/delete-model\", description: \"Delete added models\" },\n    { command: \"/prompts\", description: \"View custom prompts\" },\n    { command: \"/add-prompt\", description: \"Add custom prompt\" },\n    { command: \"/delete-prompt\", description: \"Delete custom prompt\" },\n    { command: \"/mcps\", description: \"View MCP servers\" },\n    { command: \"/add-mcp\", description: \"Add MCP server\" },\n    { command: \"/delete-mcp\", description: \"Delete MCP server\" },\n    { command: \"/sampling\", description: \"Adjust sampling temperature\" },\n    { command: \"/experts\", description: \"Configure expert model routing\" },\n    { command: \"/providers\", description: \"Configure API Keys\" },\n    { command: \"/exit\", description: \"Exit the application\" },\n  ];\n\n  const availableModels: ModelOption[] = [];\n\n  const providerList: Provider[] = [\n    { name: \"OpenRouter\", keyName: \"openRouterApiKey\", description: \"OpenRouter API (Multi-model access)\" },\n    { name: \"Anthropic\", keyName: \"anthropicApiKey\", description: \"Claude models\" },\n    { name: \"Google\", keyName: \"googleApiKey\", description: \"Gemini models\" },\n    { name: \"xAI\", keyName: \"xaiApiKey\", description: \"Grok models\" },\n    { name: \"Groq\", keyName: \"groqApiKey\", description: \"Fast inference\" },\n    { name: \"Cerebras\", keyName: \"cerebrasApiKey\", description: \"Cerebras models\" },\n    { name: \"Perplexity\", keyName: \"perplexityApiKey\", description: \"Perplexity models\" },\n    { name: \"OpenAI\", keyName: \"openaiApiKey\", description: \"GPT models\" },\n    { name: \"Ollama\", keyName: \"ollamaBaseUrl\", description: \"Local Ollama models\" },\n  ];\n\n  const handleDirectCommand = async (input: string): Promise<boolean> => {\n    const trimmedInput = input.trim();\n\n    if (trimmedInput === \"/clear\") {\n      // Reset chat history\n      setChatHistory([]);\n      \n      // Reset processing states\n      setIsProcessing(false);\n      setIsStreaming(false);\n      setTokenCount(0);\n      setProcessingTime(0);\n      processingStartTime.current = 0;\n      \n      // Reset confirmation service session flags\n      const confirmationService = ConfirmationService.getInstance();\n      confirmationService.resetSession();\n      \n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/help\") {\n      const helpEntry: ChatEntry = {\n        type: \"assistant\",\n        content: `GIGA Help:\n\nBuilt-in Commands:\n  /clear        - Clear chat history\n  /help         - Show this help\n  /history      - Browse conversation history (Ctrl+H)\n  /models       - Switch models\n  /route        - Configure model provider routing\n  /add-model    - Add models from providers\n  /delete-model - Delete added models\n  /prompts      - View custom prompts\n  /add-prompt   - Add custom prompt\n  /delete-prompt- Delete custom prompt\n  /mcps         - View MCP servers\n  /add-mcp      - Add MCP server\n  /delete-mcp   - Delete MCP server\n  /sampling     - Adjust sampling temperature\n  /experts      - Configure expert model routing\n  /providers    - Configure API keys\n  /exit         - Exit application\n  exit, quit    - Exit application\n\nDirect Commands (executed immediately):\n  ls [path]   - List directory contents\n  pwd         - Show current directory  \n  cd <path>   - Change directory\n  cat <file>  - View file contents\n  mkdir <dir> - Create directory\n  touch <file>- Create empty file\n\nFor complex operations, just describe what you want in natural language.\nExamples:\n  \"edit package.json and add a new script\"\n  \"create a new React component called Header\"\n  \"show me all TypeScript files in this project\"`,\n        timestamp: new Date(),\n      };\n      setChatHistory((prev) => [...prev, helpEntry]);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/history\") {\n      setShowConversationHistory(true);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/models\") {\n      setShowModelSelection(true);\n      setSelectedModelIndex(0);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/providers\") {\n      setShowProviderSettings(true);\n      setSelectedProviderIndex(0);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/add-model\") {\n      setShowAddModel(true);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/delete-model\") {\n      setShowDeleteModel(true);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/mcps\") {\n      setShowMcpServers(true);\n      setSelectedMcpServerIndex(0);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/add-mcp\") {\n      setShowAddMcpServer(true);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/delete-mcp\") {\n      setShowDeleteMcpServer(true);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/prompts\") {\n      setShowPromptsList(true);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/add-prompt\") {\n      setShowAddPrompt(true);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/delete-prompt\") {\n      setShowDeletePrompt(true);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/route\") {\n      setShowRouteSelection(true);\n      setRouteViewMode('models');\n      setSelectedRouteModelIndex(0);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/sampling\") {\n      setShowTemperatureSelector(true);\n      setCurrentTemperature(sessionManager.getTemperature());\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput === \"/experts\") {\n      setShowExpertModels(true);\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    if (trimmedInput.startsWith(\"/models \")) {\n      const modelArg = trimmedInput.split(\" \")[1];\n      const modelNames = dynamicModels.map(m => m.model);\n\n      if (modelNames.includes(modelArg)) {\n        onModelSelected(modelArg);\n        agent.setModel(modelArg);\n        const confirmEntry: ChatEntry = {\n          type: \"assistant\",\n          content: `✓ Switched to model: ${modelArg}`,\n          timestamp: new Date(),\n        };\n        setChatHistory((prev) => [...prev, confirmEntry]);\n      } else {\n        const errorEntry: ChatEntry = {\n          type: \"assistant\",\n          content: `Invalid model: ${modelArg}\n\nAvailable models: ${modelNames.join(\", \")}`,\n          timestamp: new Date(),\n        };\n        setChatHistory((prev) => [...prev, errorEntry]);\n      }\n\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    const directBashCommands = [\n      \"ls\", \"pwd\", \"cd\", \"cat\", \"mkdir\", \"touch\", \"echo\", \"grep\", \"find\", \"cp\", \"mv\", \"rm\",\n    ];\n    const firstWord = trimmedInput.split(\" \")[0];\n\n    if (directBashCommands.includes(firstWord)) {\n      const userEntry: ChatEntry = {\n        type: \"user\",\n        content: trimmedInput,\n        timestamp: new Date(),\n      };\n      setChatHistory((prev) => [...prev, userEntry]);\n\n      try {\n        const result = await agent.executeBashCommand(trimmedInput);\n\n        const commandEntry: ChatEntry = {\n          type: \"tool_result\",\n          content: result.success\n            ? result.output || \"Command completed\"\n            : result.error || \"Command failed\",\n          timestamp: new Date(),\n          toolCall: {\n            id: `bash_${Date.now()}`,\n            type: \"function\",\n            function: {\n              name: \"bash\",\n              arguments: JSON.stringify({ command: trimmedInput }),\n            },\n          },\n          toolResult: result,\n        };\n        setChatHistory((prev) => [...prev, commandEntry]);\n      } catch (error: any) {\n        const errorEntry: ChatEntry = {\n          type: \"assistant\",\n          content: `Error executing command: ${error.message}`,\n          timestamp: new Date(),\n        };\n        setChatHistory((prev) => [...prev, errorEntry]);\n      }\n\n      addToHistory(trimmedInput);\n      setInput(\"\");\n      return true;\n    }\n\n    return false;\n  };\n\n  const processUserMessage = async (userInput: string) => {\n    const userEntry: ChatEntry = {\n      type: \"user\",\n      content: userInput,\n      timestamp: new Date(),\n    };\n    setChatHistory((prev) => [...prev, userEntry]);\n    addToHistory(userInput);\n\n    setIsProcessing(true);\n    setInput(\"\");\n\n    try {\n      setIsStreaming(true);\n      let streamingEntry: ChatEntry | null = null;\n\n      for await (const chunk of agent.processUserMessageStream(userInput)) {\n        switch (chunk.type) {\n          case \"content\":\n            if (chunk.content) {\n              if (!streamingEntry) {\n                const newStreamingEntry = {\n                  type: \"assistant\" as const,\n                  content: chunk.content,\n                  timestamp: new Date(),\n                  isStreaming: true,\n                };\n                setChatHistory((prev) => [...prev, newStreamingEntry]);\n                streamingEntry = newStreamingEntry;\n              } else {\n                // Use batched streaming content update\n                addStreamingContent(chunk.content);\n              }\n            }\n            break;\n\n          case \"token_count\":\n            if (chunk.tokenCount !== undefined) {\n              setTokenCount(chunk.tokenCount);\n            }\n            break;\n\n          case \"tool_calls\":\n            if (chunk.toolCalls) {\n              // Stop streaming for the current assistant message\n              setChatHistory((prev) =>\n                prev.map((entry) =>\n                  entry.isStreaming ? { ...entry, isStreaming: false, toolCalls: chunk.toolCalls } : entry\n                )\n              );\n              streamingEntry = null;\n            }\n            break;\n\n          case \"tool_result\":\n            if (chunk.toolCall && chunk.toolResult) {\n              setChatHistory((prev) =>\n                prev.map((entry) =>\n                  entry.isStreaming ? { ...entry, isStreaming: false } : entry\n                )\n              );\n\n              const toolResultEntry: ChatEntry = {\n                type: \"tool_result\",\n                content: chunk.toolResult.success\n                  ? chunk.toolResult.output || \"Success\"\n                  : chunk.toolResult.error || \"Error occurred\",\n                timestamp: new Date(),\n                toolCall: chunk.toolCall,\n                toolResult: chunk.toolResult,\n              };\n              setChatHistory((prev) => [...prev, toolResultEntry]);\n              streamingEntry = null;\n            }\n            break;\n\n          case \"done\":\n            // Flush any remaining buffered content\n            flushStreamingBuffer();\n            \n            if (streamingEntry) {\n              setChatHistory((prev) =>\n                prev.map((entry) =>\n                  entry.isStreaming ? { ...entry, isStreaming: false } : entry\n                )\n              );\n            }\n            setIsStreaming(false);\n            break;\n        }\n      }\n    } catch (error: any) {\n      const errorEntry: ChatEntry = {\n        type: \"assistant\",\n        content: `Error: ${error.message}`,\n        timestamp: new Date(),\n      };\n      setChatHistory((prev) => [...prev, errorEntry]);\n      setIsStreaming(false);\n    }\n\n    setIsProcessing(false);\n    processingStartTime.current = 0;\n  };\n\n  const handleRouteSelectionInput = async (inputChar: string, key: any) => {\n    if (key.escape) {\n      if (routeViewMode === 'providers') {\n        // Go back to models view\n        setRouteViewMode('models');\n        setSelectedRouteProviderIndex(0);\n        setCurrentSelectedModel('');\n        setRouteProviders([]);\n        setIsLoadingProviders(false);\n      } else {\n        // Close route selection entirely\n        closeRouteSelection();\n      }\n      return;\n    }\n\n    if (routeViewMode === 'models') {\n      // Filter to only show OpenRouter models (same as the component filter)\n      const openRouterModels = getOpenRouterModels(dynamicModels);\n      \n      if (key.upArrow) {\n        setSelectedRouteModelIndex((prev) =>\n          prev === 0 ? openRouterModels.length - 1 : prev - 1\n        );\n        return;\n      }\n      if (key.downArrow) {\n        setSelectedRouteModelIndex((prev) => (prev + 1) % openRouterModels.length);\n        return;\n      }\n      if (key.return || key.tab) {\n        const selectedModel = openRouterModels[selectedRouteModelIndex];\n        console.log(`DEBUG: Selected model index: ${selectedRouteModelIndex}, Model: ${selectedModel?.model}`);\n        if (selectedModel) {\n          // Move to provider selection\n          setCurrentSelectedModel(selectedModel.model);\n          setRouteViewMode('providers');\n          setSelectedRouteProviderIndex(0);\n          setIsLoadingProviders(true);\n          setRouteProviders([]);\n\n          try {\n            const { loadApiKeys } = await import('../utils/api-keys');\n            const { getModelProvidersWithFallback } = await import('../utils/openrouter-providers');\n            \n            const apiKeys = loadApiKeys();\n            const openRouterKey = apiKeys.openRouterApiKey;\n            \n            if (openRouterKey) {\n              const modelProviders = await getModelProvidersWithFallback(selectedModel.model, openRouterKey);\n              setRouteProviders(modelProviders);\n            } else {\n              // Show error message\n              const errorEntry: ChatEntry = {\n                type: \"assistant\",\n                content: \"OpenRouter API key is required to fetch providers. Please configure it in /providers.\",\n                timestamp: new Date(),\n              };\n              setChatHistory((prev) => [...prev, errorEntry]);\n              closeRouteSelection();\n            }\n          } catch (error) {\n            console.error('Error fetching providers:', error);\n            setRouteProviders([]);\n          } finally {\n            setIsLoadingProviders(false);\n          }\n        }\n        return;\n      }\n    } else if (routeViewMode === 'providers') {\n      if (key.upArrow) {\n        setSelectedRouteProviderIndex((prev) =>\n          prev === 0 ? routeProviders.length - 1 : prev - 1\n        );\n        return;\n      }\n      if (key.downArrow) {\n        setSelectedRouteProviderIndex((prev) => (prev + 1) % routeProviders.length);\n        return;\n      }\n      if (key.return || key.tab) {\n        const selectedProvider = routeProviders[selectedRouteProviderIndex];\n        console.log(`DEBUG: Setting provider ${selectedProvider?.id} for model ${currentSelectedModel}`);\n        if (selectedProvider && currentSelectedModel) {\n          // Save OpenRouter provider preference to the global models file\n          const success = setOpenRouterProvider(currentSelectedModel, selectedProvider.id);\n          console.log(`DEBUG: setOpenRouterProvider result: ${success}`);\n          \n          if (success) {\n            // Show confirmation message\n            const confirmEntry: ChatEntry = {\n              type: \"assistant\",\n              content: `✓ Set OpenRouter provider for ${currentSelectedModel}: ${selectedProvider.name}`,\n              timestamp: new Date(),\n            };\n            setChatHistory((prev) => [...prev, confirmEntry]);\n          } else {\n            const errorEntry: ChatEntry = {\n              type: \"assistant\",\n              content: `❌ Failed to set provider for ${currentSelectedModel} - model not found in OpenRouter`,\n              timestamp: new Date(),\n            };\n            setChatHistory((prev) => [...prev, errorEntry]);\n          }\n\n          closeRouteSelection();\n        }\n        return;\n      }\n    }\n  };\n\n  useInput(async (inputChar: string, key: any) => {\n    // Don't handle input if confirmation dialog or prompt dialogs are active\n    if (isConfirmationActive || showAddPrompt || showDeletePrompt || showPromptsList || showRouteSelection || showConversationHistory || showTemperatureSelector || showExpertModels) {\n      // Special handling for route selection\n      if (showRouteSelection) {\n        await handleRouteSelectionInput(inputChar, key);\n      }\n      // Special handling for temperature selector\n      if (showTemperatureSelector) {\n        if (key.escape) {\n          closeTemperatureSelector();\n          return;\n        }\n        if (key.leftArrow) {\n          const newTemp = Math.max(0.0, currentTemperature - 0.1);\n          setCurrentTemperature(Math.round(newTemp * 10) / 10);\n          return;\n        }\n        if (key.rightArrow) {\n          const newTemp = Math.min(1.0, currentTemperature + 0.1);\n          setCurrentTemperature(Math.round(newTemp * 10) / 10);\n          return;\n        }\n        if (key.return) {\n          sessionManager.setTemperature(currentTemperature);\n          const confirmEntry: ChatEntry = {\n            type: \"assistant\",\n            content: `✓ Temperature set to ${currentTemperature.toFixed(1)}`,\n            timestamp: new Date(),\n          };\n          setChatHistory((prev) => [...prev, confirmEntry]);\n          closeTemperatureSelector();\n          return;\n        }\n      }\n      return;\n    }\n    \n    // Fallback double Ctrl+C detection in case process-level handler doesn't work\n    if (key.ctrl && inputChar === \"c\") {\n      const now = Date.now();\n      const timeSinceLastCtrlC = now - lastCtrlCRef.current;\n      \n      if (timeSinceLastCtrlC < 1000 && lastCtrlCRef.current > 0) {\n        // Second Ctrl+C within 1 second - exit immediately\n        if (ctrlCTimeoutRef.current) {\n          clearTimeout(ctrlCTimeoutRef.current);\n          ctrlCTimeoutRef.current = null;\n        }\n        console.log('\\n👋 Goodbye! (from useInput)');\n        exit();\n        return;\n      } else {\n        // First Ctrl+C or too late - show message and start timer\n        lastCtrlCRef.current = now;\n        console.log('\\nPress Ctrl+C again within 1 second to exit (useInput)');\n        \n        // Clear any existing timeout\n        if (ctrlCTimeoutRef.current) {\n          clearTimeout(ctrlCTimeoutRef.current);\n        }\n        \n        // Reset the timer after 1 second\n        ctrlCTimeoutRef.current = setTimeout(() => {\n          lastCtrlCRef.current = 0;\n          ctrlCTimeoutRef.current = null;\n        }, 1000);\n        \n        return;\n      }\n    }\n\n    // Handle Shift+Tab for mode cycling\n    if (key.shift && key.tab) {\n      const newMode = modeManager.cycleMode();\n      agent.updateMode(newMode);\n      if (onModeChange) {\n        onModeChange(newMode);\n      }\n      \n      const modeEntry: ChatEntry = {\n        type: \"assistant\",\n        content: `🔄 Mode switched to: **${modeManager.getModeDisplayName()}** - ${modeManager.getModeDescription()}`,\n        timestamp: new Date(),\n      };\n      setChatHistory((prev) => [...prev, modeEntry]);\n      return;\n    }\n\n    if (key.ctrl && inputChar === \"h\") {\n      setShowConversationHistory(true);\n      return;\n    }\n\n    if (key.escape) {\n      if (showCommandSuggestions) {\n        setShowCommandSuggestions(false);\n        setSelectedCommandIndex(0);\n        return;\n      }\n      if (showModelSelection) {\n        setShowModelSelection(false);\n        setSelectedModelIndex(0);\n        return;\n      }\n      if (showProviderSettings) {\n        setShowProviderSettings(false);\n        setSelectedProviderIndex(0);\n        return;\n      }\n      if (showAddModel) {\n        setShowAddModel(false);\n        return;\n      }\n      if (showDeleteModel) {\n        setShowDeleteModel(false);\n        return;\n      }\n      if (showPromptsList) {\n        setShowPromptsList(false);\n        return;\n      }\n      if (showAddPrompt) {\n        setShowAddPrompt(false);\n        return;\n      }\n      if (showDeletePrompt) {\n        setShowDeletePrompt(false);\n        return;\n      }\n      if (showConversationHistory) {\n        setShowConversationHistory(false);\n        return;\n      }\n      if (showTemperatureSelector) {\n        setShowTemperatureSelector(false);\n        return;\n      }\n      if (showExpertModels) {\n        setShowExpertModels(false);\n        return;\n      }\n      if (showMcpServers) {\n        setShowMcpServers(false);\n        setSelectedMcpServerIndex(0);\n        return;\n      }\n      if (showAddMcpServer) {\n        setShowAddMcpServer(false);\n        return;\n      }\n      if (showDeleteMcpServer) {\n        setShowDeleteMcpServer(false);\n        return;\n      }\n      if (isProcessing || isStreaming) {\n        agent.abortCurrentOperation();\n        setIsProcessing(false);\n        setIsStreaming(false);\n        setTokenCount(0);\n        setProcessingTime(0);\n        processingStartTime.current = 0;\n        return;\n      }\n    }\n\n    if (showCommandSuggestions) {\n      const filteredSuggestions = getFilteredSuggestions(input);\n      \n      if (key.upArrow) {\n        setSelectedCommandIndex((prev) =>\n          prev === 0 ? filteredSuggestions.length - 1 : prev - 1\n        );\n        return;\n      }\n      if (key.downArrow) {\n        setSelectedCommandIndex((prev) => (prev + 1) % filteredSuggestions.length);\n        return;\n      }\n      if (key.tab || key.return) {\n        const selectedCommand = filteredSuggestions[selectedCommandIndex];\n        if (selectedCommand) {\n          setInput(selectedCommand.command + \" \");\n          setShowCommandSuggestions(false);\n          setSelectedCommandIndex(0);\n        }\n        return;\n      }\n    }\n\n    if (showModelSelection) {\n      if (key.upArrow) {\n        setSelectedModelIndex((prev) =>\n          prev === 0 ? dynamicModels.length - 1 : prev - 1\n        );\n        return;\n      }\n      if (key.downArrow) {\n        setSelectedModelIndex((prev) => (prev + 1) % dynamicModels.length);\n        return;\n      }\n      if (key.tab || key.return) {\n        const selectedModel = dynamicModels[selectedModelIndex];\n        onModelSelected(selectedModel.model);\n        agent.setModel(selectedModel.model);\n        const confirmEntry: ChatEntry = {\n          type: \"assistant\",\n          content: `✓ Switched to model: ${selectedModel.model}`,\n          timestamp: new Date(),\n        };\n        setChatHistory((prev) => [...prev, confirmEntry]);\n        setShowModelSelection(false);\n        setSelectedModelIndex(0);\n        return;\n      }\n    }\n\n    if (showMcpServers) {\n      if (key.upArrow) {\n        setSelectedMcpServerIndex((prev) =>\n          prev === 0 ? mcpServers.length - 1 : prev - 1\n        );\n        return;\n      }\n      if (key.downArrow) {\n        setSelectedMcpServerIndex((prev) => (prev + 1) % mcpServers.length);\n        return;\n      }\n      if (key.tab || key.return) {\n        const selectedServer = mcpServers[selectedMcpServerIndex];\n        if (selectedServer) {\n          const serverInfo: ChatEntry = {\n            type: \"assistant\",\n            content: `MCP Server: ${selectedServer.name}\nCommand: ${selectedServer.command}\n${selectedServer.args ? `Args: ${selectedServer.args.join(' ')}` : ''}\n${selectedServer.env ? `Environment: ${Object.entries(selectedServer.env).map(([k, v]) => `${k}=${v}`).join(' ')}` : ''}\n${selectedServer.description ? `Description: ${selectedServer.description}` : ''}\nAdded: ${new Date(selectedServer.dateAdded).toLocaleDateString()}`,\n            timestamp: new Date(),\n          };\n          setChatHistory((prev) => [...prev, serverInfo]);\n        }\n        setShowMcpServers(false);\n        setSelectedMcpServerIndex(0);\n        return;\n      }\n    }\n\n    if (showAddModel || showDeleteModel || showAddMcpServer || showDeleteMcpServer) {\n      return;\n    }\n\n    if (showProviderSettings) {\n      return;\n    }\n\n    // Handle file finder navigation when active (takes precedence over history)\n    if (showFileFinder && filteredFiles.length > 0) {\n      if (key.upArrow) {\n        setSelectedFileIndex((prev) =>\n          prev === 0 ? filteredFiles.length - 1 : prev - 1\n        );\n        return;\n      }\n      if (key.downArrow) {\n        setSelectedFileIndex((prev) => (prev + 1) % filteredFiles.length);\n        return;\n      }\n      if (key.return || key.tab) {\n        const selectedFile = filteredFiles[selectedFileIndex];\n        if (selectedFile) {\n          const newInput = replaceFileQuery(input, selectedFile);\n          setInput(newInput);\n          closeFileFinder();\n        }\n        return;\n      }\n    }\n\n    // Handle command history navigation with up/down arrows\n    if (key.upArrow && !showCommandSuggestions && !showModelSelection && !showMcpServers) {\n      if (commandHistory.length > 0) {\n        if (historyIndex === -1) {\n          // Store current input before navigating history\n          setTemporaryInput(input);\n          setHistoryIndex(commandHistory.length - 1);\n          setInput(commandHistory[commandHistory.length - 1]);\n        } else if (historyIndex > 0) {\n          setHistoryIndex(historyIndex - 1);\n          setInput(commandHistory[historyIndex - 1]);\n        }\n      }\n      return;\n    }\n\n    if (key.downArrow && !showCommandSuggestions && !showModelSelection && !showMcpServers) {\n      if (commandHistory.length > 0 && historyIndex !== -1) {\n        if (historyIndex < commandHistory.length - 1) {\n          setHistoryIndex(historyIndex + 1);\n          setInput(commandHistory[historyIndex + 1]);\n        } else {\n          // Return to original input\n          setHistoryIndex(-1);\n          setInput(temporaryInput);\n        }\n      }\n      return;\n    }\n\n    if (key.return) {\n      const userInput = input.trim();\n      if (userInput === \"exit\" || userInput === \"quit\") {\n        exit();\n        return;\n      }\n\n      if (userInput) {\n        const directCommandResult = await handleDirectCommand(userInput);\n        if (!directCommandResult) {\n          await processUserMessage(userInput);\n        }\n      }\n      return;\n    }\n\n    if (key.backspace || key.delete) {\n      const newInput = input.slice(0, -1);\n      setInput(newInput);\n      \n      // Reset history navigation when user edits input\n      if (historyIndex !== -1) {\n        setHistoryIndex(-1);\n        setTemporaryInput(\"\");\n      }\n\n      // Update file finder\n      updateFileFinder(newInput);\n\n      if (!newInput.startsWith(\"/\")) {\n        setShowCommandSuggestions(false);\n        setSelectedCommandIndex(0);\n      } else if (showCommandSuggestions) {\n        // Reset selected index when input changes to avoid out-of-bounds\n        setSelectedCommandIndex(0);\n      }\n      return;\n    }\n\n    if (inputChar && !key.ctrl && !key.meta) {\n      const newInput = input + inputChar;\n      setInput(newInput);\n      \n      // Reset history navigation when user types new input\n      if (historyIndex !== -1) {\n        setHistoryIndex(-1);\n        setTemporaryInput(\"\");\n      }\n\n      // Update file finder based on @ symbol\n      updateFileFinder(newInput);\n\n      if (\n        newInput === \"/\" ||\n        [\"ls\", \"pwd\", \"cd\", \"cat\", \"mkdir\", \"touch\"].some((cmd) =>\n          cmd.startsWith(newInput)\n        )\n      ) {\n        setShowCommandSuggestions(true);\n        setSelectedCommandIndex(0);\n      } else if (\n        !newInput.startsWith(\"/\") &&\n        ![\"ls\", \"pwd\", \"cd\", \"cat\", \"mkdir\", \"touch\"].some((cmd) =>\n          cmd.startsWith(newInput)\n        )\n      ) {\n        setShowCommandSuggestions(false);\n        setSelectedCommandIndex(0);\n      } else if (showCommandSuggestions) {\n        // Reset selected index when input changes to avoid out-of-bounds\n        setSelectedCommandIndex(0);\n      }\n    }\n  });\n\n  return {\n    input,\n    showCommandSuggestions,\n    selectedCommandIndex,\n    showModelSelection,\n    selectedModelIndex,\n    showProviderSettings,\n    selectedProviderIndex,\n    showAddModel,\n    showDeleteModel,\n    showPromptsList,\n    showAddPrompt,\n    showDeletePrompt,\n    showMcpServers,\n    showAddMcpServer,\n    showDeleteMcpServer,\n    selectedMcpServerIndex,\n    showConversationHistory,\n    showTemperatureSelector,\n    currentTemperature,\n    showExpertModels,\n    showRouteSelection,\n    routeViewMode,\n    selectedRouteModelIndex,\n    selectedRouteProviderIndex,\n    currentSelectedModel,\n    routeProviders,\n    isLoadingProviders,\n    showFileFinder,\n    selectedFileIndex,\n    filteredFiles,\n    fileQuery,\n    commandSuggestions,\n    availableModels: dynamicModels,\n    mcpServers,\n    providerList,\n    closeProviderSettings,\n    closeAddModel,\n    closeDeleteModel,\n    closePromptsList,\n    closeAddPrompt,\n    closeDeletePrompt,\n    closeMcpServers,\n    closeAddMcpServer,\n    closeDeleteMcpServer,\n    closeConversationHistory,\n    closeTemperatureSelector,\n    closeExpertModels,\n    closeRouteSelection,\n    closeFileFinder,\n    refreshModels,\n    refreshMcpServers,\n    openRouterModels: getOpenRouterModels(dynamicModels),\n    agent,\n  };\n}",
      "filePath": "../src/hooks/use-input-handler.ts",
      "embedding": [
        35.17,
        0.7,
        0,
        1.6,
        0.1,
        0.02924504214180893,
        0.0020089234405241576,
        0.056470106514927065,
        0.0018656798380711215,
        0.09395850174448732,
        0.0945227744851067,
        0.022048881324578107,
        0.03786630227622104,
        0.09985394064016206,
        0.06834497682986573,
        0.08405762344609587,
        0.001323252712941203,
        0.049289678382487524,
        0.05508557484892007,
        0.011932980159785878,
        0.012814959291180095,
        0.05771957251727912,
        0.02366525603436749,
        0.029322038789985183,
        0.051377212443109194,
        0.09608295249898063,
        0.05244913027768905,
        0.06448602483875858,
        0.09018029894434554,
        0.0925728164245162,
        0.009591449176848134,
        0.09835356547152639,
        0.03726414125998819,
        0.0886902246452846,
        0.09757836189342117,
        0.08253432258667232,
        0.011057582069021521,
        0.09570923121707725,
        0.06189251501257788,
        0.02116381364617136,
        0.02390388946186687,
        0.013004293029045945,
        0.06603053461041251,
        0.07846936288448327,
        0.03877586138778295,
        0.09011406065346522,
        0.020152994542551417,
        0.0279403754803257,
        0.09694475588584857,
        0.04373805300906672,
        0.01842838195023988,
        0.0657899249681857,
        0.06485394394399109,
        0.030269125247934903,
        0.03995109262135546,
        0.05181247813610758,
        0.007879793215013087,
        0.06459567797481795,
        0.019789558828122767,
        0.03674189792859937,
        0.017404392368996692,
        0.07253771774474543,
        0.034653160606549875,
        0.07531064906215537,
        0.0666219615815519,
        0.03557003966012878,
        0.008622394854465022,
        0.044467177837907004,
        0.03256323582469358,
        0.036959725436346756,
        0.09951382814909913,
        0.08566822386698901,
        0.07155767170461101,
        0.06617803299265453,
        0.044602422996249974,
        0.09932032995970179,
        0.04049528743026748,
        0.00255142000391565,
        0.04984740161911125,
        0.08832445866711014,
        0.0385525513352787,
        0.039763279125731146,
        0.07646761856656059,
        0.04876746958234306,
        0.05063780838250964,
        0.0798528932540387,
        0.031018960599097624,
        0.022131618655952326,
        0.027581157598449826,
        0.05941234706769891,
        0.058461133165581006,
        0.0546467366781376,
        0.04926400633157212,
        0.04249037025709165,
        0.013417699211766554,
        0.04388127619335933,
        0.09559061111523184,
        0.06489666862228718,
        0.035142338805990284,
        0.030977662680691367
      ]
    },
    {
      "content": "#!/usr/bin/env node\n\nimport React from \"react\";\nimport { render } from \"ink\";\nimport { program } from \"commander\";\nimport * as dotenv from \"dotenv\";\nimport { GigaAgent } from \"./agent/giga-agent\";\nimport ChatInterface from \"./ui/components/chat-interface\";\nimport { ConfirmationService } from \"./utils/confirmation-service\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as os from \"os\";\n\n// Load environment variables\ndotenv.config();\n\nimport { loadApiKeys } from \"./utils/api-keys\";\n\n// We'll set up the double Ctrl+C handler after Ink starts\n\n// Check if any API keys are available from environment variables, shell files, or settings\nfunction hasAnyApiKey(): boolean {\n  const apiKeys = loadApiKeys();\n  const availableKeys = Object.values(apiKeys).filter(Boolean);\n  return availableKeys.length > 0;\n}\n\nprogram\n  .name(\"giga\")\n  .description(\n    \"A conversational AI CLI tool powered by Grok-3 with text editor capabilities\"\n  )\n  .version(\"1.0.0\")\n  .option(\"-p, --prompt <prompt>\", \"run a single prompt in headless mode\")\n  .option(\"-d, --directory <dir>\", \"set working directory\", process.cwd())\n  .action(async (options) => {\n    if (options.directory) {\n      try {\n        process.chdir(options.directory);\n      } catch (error: any) {\n        console.error(\n          `❌ Error changing directory to ${options.directory}:`,\n          error.message\n        );\n        process.exit(1);\n      }\n    }\n\n    // If prompt is provided, run in headless mode\n    if (options.prompt) {\n      try {\n        // Enable headless mode in confirmation service\n        const confirmationService = ConfirmationService.getInstance();\n        confirmationService.setHeadlessMode(true);\n\n        // Check if any API keys are available\n        const hasKeys = hasAnyApiKey();\n        \n        if (!hasKeys) {\n          console.error(\"❌ Error: API key is required. Set environment variables or configure in settings\");\n          process.exit(1);\n        }\n\n        const agent = new GigaAgent('', '');\n        \n        // Check if a model is configured\n        const currentModel = agent.getCurrentModel();\n        if (!currentModel) {\n          console.error(\"❌ No model configured. Please set up giga first:\");\n          console.error(\"1. Run 'giga' to enter interactive mode\");\n          console.error(\"2. Configure API keys: /providers\");\n          console.error(\"3. Add models: /add-model\");\n          console.error(\"4. Select a model: /models\");\n          process.exit(1);\n        }\n        \n        console.log(`🤖 Processing prompt: ${options.prompt}`);\n        console.log(`📁 Working directory: ${process.cwd()}\\n`);\n\n        // Process the prompt and stream results\n        for await (const chunk of agent.processUserMessageStream(options.prompt)) {\n          if (chunk.type === 'content') {\n            process.stdout.write(chunk.content || '');\n          } else if (chunk.type === 'tool_calls') {\n            console.log(`\\n🔧 Using tools: ${chunk.toolCalls?.map(tc => tc.function.name).join(', ')}`);\n          } else if (chunk.type === 'tool_result') {\n            if (!chunk.toolResult?.success) {\n              console.log(`\\n❌ Tool error: ${chunk.toolResult?.error}`);\n            }\n          } else if (chunk.type === 'done') {\n            console.log('\\n\\n✅ Done');\n            break;\n          }\n        }\n      } catch (error: any) {\n        console.error(\"❌ Error executing prompt:\", error.message);\n        process.exit(1);\n      }\n    } else {\n      // Run in interactive mode\n      try {\n        // Check if any API keys are available\n        const hasKeys = hasAnyApiKey();\n        const agent = hasKeys ? new GigaAgent('', '') : undefined;\n\n        console.log(\"🤖 Starting GIGA Conversational Assistant...\\n\");\n\n        const app = render(React.createElement(ChatInterface, { agent }));\n\n        // Set up double Ctrl+C handler after Ink is running\n        let lastCtrlCTime = 0;\n        let ctrlCTimeout: NodeJS.Timeout | null = null;\n\n        // Remove any existing SIGINT listeners first\n        process.removeAllListeners('SIGINT');\n\n        process.on('SIGINT', () => {\n          const now = Date.now();\n          const timeSinceLastCtrlC = now - lastCtrlCTime;\n          \n          if (timeSinceLastCtrlC < 1000 && lastCtrlCTime > 0) {\n            // Second Ctrl+C within 1 second - exit immediately\n            if (ctrlCTimeout) {\n              clearTimeout(ctrlCTimeout);\n              ctrlCTimeout = null;\n            }\n            console.log('\\n👋 Goodbye!');\n            app.unmount();\n            process.exit(0);\n          } else {\n            // First Ctrl+C or too late - show message and start timer\n            lastCtrlCTime = now;\n            console.log('\\nPress Ctrl+C again within 1 second to exit');\n            \n            // Clear any existing timeout\n            if (ctrlCTimeout) {\n              clearTimeout(ctrlCTimeout);\n            }\n            \n            // Reset the timer after 1 second\n            ctrlCTimeout = setTimeout(() => {\n              lastCtrlCTime = 0;\n              ctrlCTimeout = null;\n            }, 1000);\n          }\n        });\n      } catch (error: any) {\n        console.error(\"❌ Error initializing GIGA:\", error.message);\n        process.exit(1);\n      }\n    }\n  });\n\nprogram.parse();\n",
      "filePath": "../src/index.ts",
      "embedding": [
        5.55,
        0.2,
        0,
        1.1,
        0,
        0.021797193654935022,
        0.049625158661163044,
        0.04274285015063304,
        0.05799852041969614,
        0.09688472752823281,
        0.0836479035374868,
        0.016855919594621828,
        0.08884945057540235,
        0.09867760188934391,
        0.042365675587997115,
        0.012499494063102634,
        0.09569073354299974,
        0.045522136963220265,
        0.01128769650154251,
        0.03231461322091196,
        0.025526190503440495,
        0.016469505139697537,
        0.09383103378431977,
        0.022103403626839005,
        0.04584675719942327,
        0.052720460819052885,
        0.041079874081084836,
        0.090600872420462,
        0.019118365560101616,
        0.0002675991357003915,
        0.0075753347589374576,
        0.07936900672002717,
        0.09043745099601042,
        0.08577825982318238,
        0.09644622555721599,
        0.025472407614292182,
        0.09710791480239903,
        0.043769202084869535,
        0.05392396462264725,
        0.07223314358520994,
        0.07943645686505801,
        0.023928395609300424,
        0.017350123563693278,
        0.0924735425768349,
        0.0870018973204581,
        0.035704403063164226,
        0.07033516400555616,
        0.08863174978398916,
        0.06021642446506425,
        0.07979707264949092,
        0.08387838871951725,
        0.03204158884392327,
        0.02974995116617494,
        0.05445912579388134,
        0.0003338668306403059,
        0.061376930339452906,
        0.09290112778959492,
        0.07309157605361706,
        0.045805885063161945,
        0.08688554839230048,
        0.09300339544295845,
        0.0394051352798556,
        0.0423860895659065,
        0.025802723058723023,
        0.04988559862707026,
        0.005584802663182531,
        0.0780664290360941,
        0.006891737514779273,
        0.041462370583326885,
        0.06557379795087474,
        0.03297215223182174,
        0.024253509083143044,
        0.022740856571386716,
        0.0996438977874567,
        0.004945633259311255,
        0.09868780444881484,
        0.09742711826194156,
        0.05283561360839131,
        0.07494008252161537,
        0.0266145525836479,
        0.04992001672241003,
        0.08858116684370548,
        0.09828272343543659,
        0.05039467328983197,
        0.04396940516739997,
        0.02725089435956575,
        0.09709141020451165,
        0.06235903664150312,
        0.035178032383595396,
        0.022185921547947643,
        0.018445149715536825,
        0.09309525460141216,
        0.0031834576884637424,
        0.005530761571657572,
        0.0238497523126648,
        0.038988343668814165,
        0.07681780580427684,
        0.07370995412837412,
        0.05111411785761022,
        0.06591821418416968
      ]
    },
    {
      "content": "import { spawn, ChildProcess } from 'child_process';\nimport { AddedMcpServer } from '../utils/added-mcp-servers';\n\nexport interface McpTool {\n  name: string;\n  description?: string;\n  inputSchema: any;\n}\n\nexport interface McpResource {\n  uri: string;\n  name: string;\n  description?: string;\n  mimeType?: string;\n}\n\nexport interface McpServerInfo {\n  name: string;\n  version: string;\n  tools?: McpTool[];\n  resources?: McpResource[];\n}\n\nexport interface McpToolCall {\n  name: string;\n  arguments: any;\n}\n\nexport interface McpToolResult {\n  content?: Array<{\n    type: string;\n    text?: string;\n    data?: string;\n    mimeType?: string;\n  }>;\n  isError?: boolean;\n  _meta?: any;\n}\n\nexport class McpClient {\n  private process: ChildProcess | null = null;\n  private server: AddedMcpServer;\n  private messageId = 0;\n  private pendingRequests = new Map<number, { resolve: Function; reject: Function }>();\n  private isConnected = false;\n  private serverInfo: McpServerInfo | null = null;\n\n  constructor(server: AddedMcpServer) {\n    this.server = server;\n  }\n\n  async connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        // Parse command and args\n        const commandParts = this.server.command.split(' ');\n        const command = commandParts[0];\n        const args = [...commandParts.slice(1), ...(this.server.args || [])];\n\n        // Spawn the MCP server process\n        this.process = spawn(command, args, {\n          stdio: ['pipe', 'pipe', 'pipe'],\n          env: { ...process.env, ...this.server.env },\n        });\n\n        this.process.on('error', (error) => {\n          reject(new Error(`Failed to start MCP server: ${error.message}`));\n        });\n\n        // Set up message handling\n        let buffer = '';\n        this.process.stdout?.on('data', (data) => {\n          buffer += data.toString();\n          \n          // Process complete JSON-RPC messages\n          let newlineIndex;\n          while ((newlineIndex = buffer.indexOf('\\n')) !== -1) {\n            const line = buffer.slice(0, newlineIndex).trim();\n            buffer = buffer.slice(newlineIndex + 1);\n            \n            if (line) {\n              try {\n                const message = JSON.parse(line);\n                this.handleMessage(message);\n              } catch (error) {\n                console.error('Failed to parse MCP message:', error, 'Line:', line);\n              }\n            }\n          }\n        });\n\n        this.process.stderr?.on('data', (data) => {\n          console.error(`MCP server stderr: ${data}`);\n        });\n\n        this.process.on('close', (code) => {\n          this.isConnected = false;\n          if (code !== 0) {\n            console.error(`MCP server exited with code ${code}`);\n          }\n        });\n\n        // Initialize the connection\n        this.initialize().then(() => {\n          this.isConnected = true;\n          resolve();\n        }).catch(reject);\n\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  private async initialize(): Promise<void> {\n    // Send initialize request\n    const initResponse = await this.sendRequest('initialize', {\n      protocolVersion: '2024-11-05',\n      capabilities: {\n        tools: {},\n      },\n      clientInfo: {\n        name: 'giga-code',\n        version: '1.0.0',\n      },\n    });\n\n    this.serverInfo = {\n      name: initResponse.serverInfo?.name || this.server.name,\n      version: initResponse.serverInfo?.version || '1.0.0',\n    };\n\n    // Send initialized notification\n    this.sendNotification('initialized', {});\n\n    // Get available tools\n    try {\n      const toolsResponse = await this.sendRequest('tools/list', {});\n      if (toolsResponse.tools) {\n        this.serverInfo.tools = toolsResponse.tools;\n      }\n    } catch (error) {\n      console.warn('Failed to get tools list:', error);\n      this.serverInfo.tools = [];\n    }\n\n    // Get available resources\n    try {\n      const resourcesResponse = await this.sendRequest('resources/list', {});\n      if (resourcesResponse.resources) {\n        this.serverInfo.resources = resourcesResponse.resources;\n      }\n    } catch (error) {\n      console.warn('Failed to get resources list:', error);\n      this.serverInfo.resources = [];\n    }\n  }\n\n  private handleMessage(message: any): void {\n    if (message.id !== undefined && this.pendingRequests.has(message.id)) {\n      // This is a response to a request\n      const { resolve, reject } = this.pendingRequests.get(message.id)!;\n      this.pendingRequests.delete(message.id);\n\n      if (message.error) {\n        reject(new Error(message.error.message || 'MCP error'));\n      } else {\n        resolve(message.result);\n      }\n    } else {\n      // This is a notification or request from the server\n      console.log('Received MCP message:', message);\n    }\n  }\n\n  private sendRequest(method: string, params: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      if (!this.process || !this.isConnected) {\n        reject(new Error('MCP client not connected'));\n        return;\n      }\n\n      const id = ++this.messageId;\n      const message = {\n        jsonrpc: '2.0',\n        id,\n        method,\n        params,\n      };\n\n      this.pendingRequests.set(id, { resolve, reject });\n\n      const messageStr = JSON.stringify(message) + '\\n';\n      this.process.stdin?.write(messageStr);\n\n      // Set timeout for requests\n      setTimeout(() => {\n        if (this.pendingRequests.has(id)) {\n          this.pendingRequests.delete(id);\n          reject(new Error('MCP request timeout'));\n        }\n      }, 30000); // 30 second timeout\n    });\n  }\n\n  private sendNotification(method: string, params: any): void {\n    if (!this.process || !this.isConnected) {\n      return;\n    }\n\n    const message = {\n      jsonrpc: '2.0',\n      method,\n      params,\n    };\n\n    const messageStr = JSON.stringify(message) + '\\n';\n    this.process.stdin?.write(messageStr);\n  }\n\n  async callTool(name: string, arguments_: any): Promise<McpToolResult> {\n    try {\n      const response = await this.sendRequest('tools/call', {\n        name,\n        arguments: arguments_,\n      });\n\n      return {\n        content: response.content || [],\n        isError: response.isError || false,\n        _meta: response._meta,\n      };\n    } catch (error) {\n      return {\n        content: [{\n          type: 'text',\n          text: `Error calling tool: ${error instanceof Error ? error.message : String(error)}`,\n        }],\n        isError: true,\n      };\n    }\n  }\n\n  getServerInfo(): McpServerInfo | null {\n    return this.serverInfo;\n  }\n\n  getTools(): McpTool[] {\n    return this.serverInfo?.tools || [];\n  }\n\n  getResources(): McpResource[] {\n    return this.serverInfo?.resources || [];\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.process) {\n      this.process.kill();\n      this.process = null;\n    }\n    this.isConnected = false;\n    this.pendingRequests.clear();\n  }\n\n  isConnectedToServer(): boolean {\n    return this.isConnected;\n  }\n}\n",
      "filePath": "../src/mcp/mcp-client.ts",
      "embedding": [
        6.97,
        0,
        0.1,
        0.2,
        0.6,
        0.017639494277342706,
        0.039438818447305915,
        0.06081115987393603,
        0.07837707065025477,
        0.03825302361031511,
        0.09950362853457201,
        0.08664970707718414,
        0.01710848848531137,
        0.0688362511875348,
        0.04150571756578974,
        0.09396501979593816,
        0.06216866997625978,
        0.06029174281043927,
        0.05218435909868442,
        0.029407306643676735,
        0.08108453756651848,
        0.061468316312025595,
        0.04324220700572073,
        0.08453389608776969,
        0.08605454464413614,
        0.08634508667447072,
        0.0021190883670769048,
        0.023018144189448933,
        0.0223936441736598,
        0.04932441105992416,
        0.022059065077038732,
        0.07551310693051512,
        0.02641091024056417,
        0.08071166632354447,
        0.012897189521685004,
        0.03597802759641651,
        0.05185068816101743,
        0.06304890484343849,
        0.04222997770423499,
        0.07786773490578072,
        0.056178297317438355,
        0.0007543836444061981,
        0.03676280752479101,
        0.01447927331968668,
        0.0356324806907385,
        0.06409724774998864,
        0.05218192910457641,
        0.07482739230868461,
        0.017205024793010726,
        0.016680869143997978,
        0.021844699295731407,
        0.021969153237733942,
        0.06875891386666858,
        0.046148276240931076,
        0.022404527640361806,
        0.07164843045522407,
        0.035119519747819496,
        0.01492739658475032,
        0.04648366017182454,
        0.07520979122492466,
        0.07741933391792405,
        0.03775066612810205,
        0.0887162956191801,
        0.02369252141183641,
        0.06658518862952206,
        0.04942188152766748,
        0.0951418060518471,
        0.019333407116059444,
        0.06052123717984656,
        0.010845311746133224,
        0.06805004100781469,
        0.07536219903774326,
        0.048573351768055634,
        0.03580663088327133,
        0.03329917727056886,
        0.034961203815489374,
        0.05525348790910485,
        0.08976266613325917,
        0.09597528712080833,
        0.05754620447586544,
        0.04451414454231274,
        0.013684353310587406,
        0.09411748093566366,
        0.0920389076988823,
        0.03651850549840836,
        0.06755205514144473,
        0.08615219803157431,
        0.07685873157466078,
        0.061283403852606125,
        0.010339084376651054,
        0.05567271746996086,
        0.09588329054025028,
        0.026858034692518663,
        0.016492505164822015,
        0.09763421523540577,
        0.05635997371308809,
        0.09740541655959621,
        0.05019118680774053,
        0.07013716449364284,
        0.03795174746051885
      ]
    },
    {
      "content": "import { McpClient, McpTool, McpToolResult } from './mcp-client';\nimport { loadAddedMcpServers, AddedMcpServer } from '../utils/added-mcp-servers';\n\nexport interface McpToolWithServer extends McpTool {\n  serverName: string;\n}\n\nexport class McpManager {\n  private clients = new Map<string, McpClient>();\n  private static instance: McpManager | null = null;\n\n  static getInstance(): McpManager {\n    if (!McpManager.instance) {\n      McpManager.instance = new McpManager();\n    }\n    return McpManager.instance;\n  }\n\n  async initializeAllServers(): Promise<void> {\n    const servers = loadAddedMcpServers();\n    const connectionPromises = servers.map(server => this.connectToServer(server));\n    \n    // Connect to all servers, but don't fail if some connections fail\n    const results = await Promise.allSettled(connectionPromises);\n    \n    results.forEach((result, index) => {\n      if (result.status === 'rejected') {\n        console.error(`Failed to connect to MCP server ${servers[index].name}:`, result.reason);\n      }\n    });\n  }\n\n  async connectToServer(server: AddedMcpServer): Promise<McpClient> {\n    const existingClient = this.clients.get(server.name);\n    if (existingClient && existingClient.isConnectedToServer()) {\n      return existingClient;\n    }\n\n    const client = new McpClient(server);\n    try {\n      await client.connect();\n      this.clients.set(server.name, client);\n      console.log(`Connected to MCP server: ${server.name}`);\n      return client;\n    } catch (error) {\n      console.error(`Failed to connect to MCP server ${server.name}:`, error);\n      throw error;\n    }\n  }\n\n  async disconnectFromServer(serverName: string): Promise<void> {\n    const client = this.clients.get(serverName);\n    if (client) {\n      await client.disconnect();\n      this.clients.delete(serverName);\n      console.log(`Disconnected from MCP server: ${serverName}`);\n    }\n  }\n\n  async disconnectAll(): Promise<void> {\n    const disconnectPromises = Array.from(this.clients.keys()).map(serverName => \n      this.disconnectFromServer(serverName)\n    );\n    await Promise.all(disconnectPromises);\n  }\n\n  getAllTools(): McpToolWithServer[] {\n    const tools: McpToolWithServer[] = [];\n    \n    for (const [serverName, client] of this.clients) {\n      if (client.isConnectedToServer()) {\n        const serverTools = client.getTools();\n        serverTools.forEach(tool => {\n          tools.push({\n            ...tool,\n            serverName,\n          });\n        });\n      }\n    }\n    \n    return tools;\n  }\n\n  getToolsByServer(serverName: string): McpTool[] {\n    const client = this.clients.get(serverName);\n    if (client && client.isConnectedToServer()) {\n      return client.getTools();\n    }\n    return [];\n  }\n\n  async callTool(serverName: string, toolName: string, arguments_: any): Promise<McpToolResult> {\n    const client = this.clients.get(serverName);\n    if (!client) {\n      return {\n        content: [{\n          type: 'text',\n          text: `MCP server '${serverName}' not found or not connected`,\n        }],\n        isError: true,\n      };\n    }\n\n    if (!client.isConnectedToServer()) {\n      return {\n        content: [{\n          type: 'text',\n          text: `MCP server '${serverName}' is not connected`,\n        }],\n        isError: true,\n      };\n    }\n\n    return await client.callTool(toolName, arguments_);\n  }\n\n  findToolByName(toolName: string): McpToolWithServer | null {\n    const allTools = this.getAllTools();\n    return allTools.find(tool => tool.name === toolName) || null;\n  }\n\n  getConnectedServers(): string[] {\n    const connectedServers: string[] = [];\n    for (const [serverName, client] of this.clients) {\n      if (client.isConnectedToServer()) {\n        connectedServers.push(serverName);\n      }\n    }\n    return connectedServers;\n  }\n\n  getServerInfo(serverName: string) {\n    const client = this.clients.get(serverName);\n    if (client && client.isConnectedToServer()) {\n      return client.getServerInfo();\n    }\n    return null;\n  }\n\n  isServerConnected(serverName: string): boolean {\n    const client = this.clients.get(serverName);\n    return client ? client.isConnectedToServer() : false;\n  }\n\n  async refreshConnections(): Promise<void> {\n    // Reload servers from storage and connect to any new ones\n    const servers = loadAddedMcpServers();\n    const currentServers = new Set(this.clients.keys());\n    const newServers = servers.filter(server => !currentServers.has(server.name));\n    \n    // Connect to new servers\n    const connectionPromises = newServers.map(server => this.connectToServer(server));\n    const results = await Promise.allSettled(connectionPromises);\n    \n    results.forEach((result, index) => {\n      if (result.status === 'rejected') {\n        console.error(`Failed to connect to new MCP server ${newServers[index].name}:`, result.reason);\n      }\n    });\n\n    // Disconnect from servers that are no longer in the configuration\n    const configuredServerNames = new Set(servers.map(s => s.name));\n    for (const serverName of currentServers) {\n      if (!configuredServerNames.has(serverName)) {\n        await this.disconnectFromServer(serverName);\n      }\n    }\n  }\n}",
      "filePath": "../src/mcp/mcp-manager.ts",
      "embedding": [
        4.86,
        0,
        0.1,
        0.2,
        0.2,
        0.02136398423834414,
        0.02906392952398461,
        0.0024482426499243706,
        0.06308987055119318,
        0.04958307562200825,
        0.023294399902448526,
        0.05879300626952745,
        0.03711526329337803,
        0.05382323564421233,
        0.06755837771218497,
        0.0599311916314077,
        0.056130215254764027,
        0.0656713812967725,
        0.009302153461484565,
        0.0766629515011431,
        0.01411510667303908,
        0.07263517796853702,
        0.058556056405231184,
        0.021722449154444746,
        0.01903529850567494,
        0.018410577253862116,
        0.06715310460168514,
        0.013883908430998005,
        0.0807973656200549,
        0.003629253995251658,
        0.07952892836280837,
        0.07401060460353254,
        0.029870488988005508,
        0.07859339975747902,
        0.018442173788768734,
        0.07060492423978285,
        0.045381366444880035,
        0.014539610113258229,
        0.06533827736597252,
        0.06286324423617022,
        0.03458676781171086,
        0.01903183203467712,
        0.0251831788704773,
        0.03173084417279024,
        0.08661011219881604,
        0.04483809463176578,
        0.06455274867781201,
        0.0005033831464655636,
        0.06533771768650334,
        0.0704102405481554,
        0.03892037200883424,
        0.057871174891541824,
        0.011924407524111825,
        0.06490262954146188,
        0.040784559435380244,
        0.027408975753655675,
        0.07575844450388186,
        0.032691953536970235,
        0.07933892427721925,
        0.08114686417817851,
        0.019498958685507318,
        0.09941065312214468,
        0.04030512164920935,
        0.004028768232750768,
        0.08751438322784524,
        0.01722016065836317,
        0.01861818897122115,
        0.014071907463006862,
        0.011902249876573368,
        0.0933960656356241,
        0.08625028346083163,
        0.066227777040313,
        0.09905470054722156,
        0.07595024809445422,
        0.01398188007033936,
        0.004080747619400494,
        0.08461863925455107,
        0.00712241832337025,
        0.006794570188607807,
        0.04633800340803834,
        0.05782006921949067,
        0.0995386971373991,
        0.0010703493099017748,
        0.016600225403767467,
        0.015342677362155423,
        0.0763111806654086,
        0.08947206740588864,
        0.07711390122975621,
        0.059281512706295315,
        0.08636034204370359,
        0.06755813239822635,
        0.02773272055658992,
        0.09211391218773081,
        0.02356247386789926,
        0.03369664558506846,
        0.07097000925502535,
        0.04416238753542121,
        0.018157743423055452,
        0.07691990861777388,
        0.02573836648124427
      ]
    },
    {
      "content": "import { exec } from 'child_process';\nimport { promisify } from 'util';\nimport { ToolResult } from '../types';\nimport { ConfirmationService } from '../utils/confirmation-service';\n\nconst execAsync = promisify(exec);\n\nexport class BashTool {\n  private currentDirectory: string = process.cwd();\n  private confirmationService = ConfirmationService.getInstance();\n\n\n  async execute(command: string, timeout: number = 30000): Promise<ToolResult> {\n    try {\n      // Check if user has already accepted bash commands for this session\n      const sessionFlags = this.confirmationService.getSessionFlags();\n      if (!sessionFlags.bashCommands && !sessionFlags.allOperations) {\n        // Request confirmation showing the command\n        const confirmationResult = await this.confirmationService.requestConfirmation({\n          operation: 'Run bash command',\n          filename: command,\n          showVSCodeOpen: false,\n          content: `Command: ${command}\\nWorking directory: ${this.currentDirectory}`\n        }, 'bash');\n\n        if (!confirmationResult.confirmed) {\n          return {\n            success: false,\n            error: confirmationResult.feedback || 'Command execution cancelled by user'\n          };\n        }\n      }\n\n      if (command.startsWith('cd ')) {\n        const newDir = command.substring(3).trim();\n        try {\n          process.chdir(newDir);\n          this.currentDirectory = process.cwd();\n          return {\n            success: true,\n            output: `Changed directory to: ${this.currentDirectory}`\n          };\n        } catch (error: any) {\n          return {\n            success: false,\n            error: `Cannot change directory: ${error.message}`\n          };\n        }\n      }\n\n      const { stdout, stderr } = await execAsync(command, {\n        cwd: this.currentDirectory,\n        timeout,\n        maxBuffer: 1024 * 1024\n      });\n\n      const output = stdout + (stderr ? `\\nSTDERR: ${stderr}` : '');\n      \n      return {\n        success: true,\n        output: output.trim() || 'Command executed successfully (no output)'\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: `Command failed: ${error.message}`\n      };\n    }\n  }\n\n  getCurrentDirectory(): string {\n    return this.currentDirectory;\n  }\n\n  async listFiles(directory: string = '.'): Promise<ToolResult> {\n    return this.execute(`ls -la ${directory}`);\n  }\n\n  async findFiles(pattern: string, directory: string = '.'): Promise<ToolResult> {\n    return this.execute(`find ${directory} -name \"${pattern}\" -type f`);\n  }\n\n  async grep(pattern: string, files: string = '.'): Promise<ToolResult> {\n    return this.execute(`grep -r \"${pattern}\" ${files}`);\n  }\n}",
      "filePath": "../src/tools/bash.ts",
      "embedding": [
        2.66,
        0,
        0.1,
        0.4,
        0.1,
        0.03543301670524477,
        0.09053190930652923,
        0.04823096720781968,
        0.09449747117829115,
        0.081151023748338,
        0.06112520257845663,
        0.03270200493054605,
        0.019624054335897725,
        0.0009023474420558509,
        0.05176233895788473,
        0.04998096196185109,
        0.011329649688912681,
        0.07684112369421574,
        0.03056622257170948,
        0.02180131363102781,
        0.0859258713131023,
        0.03367275828728277,
        0.03489612138917353,
        0.03644638444161913,
        0.022366443153093076,
        0.05790066645538958,
        0.02395673469578279,
        0.07358493902965671,
        0.05226994776076858,
        0.013677109529897447,
        0.001518042626823113,
        0.09155660618619849,
        0.059909539710213816,
        0.0655815342847542,
        0.015853692132836317,
        0.07181374098326947,
        0.07510400260914411,
        0.01457769064043899,
        0.0973199619079229,
        0.06020361513025853,
        0.06036450833578114,
        0.009147239848571498,
        0.023130496909343115,
        0.06329521603570391,
        0.03609847749300549,
        0.04019735569738323,
        0.032727925911295024,
        0.043325666886606364,
        0.04383536936194791,
        0.06150965111608169,
        0.03341388370816702,
        0.05785297587973065,
        0.09807628665653234,
        0.05924029316197485,
        0.049883557252081705,
        0.09643632317692123,
        0.0002597992296085816,
        0.062103967774384365,
        0.08313712228605706,
        0.0953859894581499,
        0.05405337412465552,
        0.03598758142628596,
        0.09784051385796637,
        0.03039879703617661,
        0.057991196395529736,
        0.002575944329053104,
        0.086793557408322,
        0.09125244846554008,
        0.0964474172007489,
        0.09122624355204291,
        0.03840581761840916,
        0.07521549814097914,
        0.04619725740614953,
        0.007084043553218356,
        0.07938104492320089,
        0.06983590628123329,
        0.012448863973032732,
        0.07691743867201116,
        0.06163776251421582,
        0.03147547290165631,
        0.07419132519122,
        0.08480031734416688,
        0.08223714486201152,
        0.027763906703885066,
        0.06057189353240844,
        0.005678648053015523,
        0.058470511446396256,
        0.043050169436109315,
        0.02475361548215297,
        0.0029638926959922097,
        0.09359540749908243,
        0.011024736809050374,
        0.06180911574497634,
        0.045365428464900485,
        0.056239359354530144,
        0.03568014654092882,
        0.05226214311055586,
        0.024107287971730274,
        0.05153436938157592,
        0.03175710360945443
      ]
    },
    {
      "content": "import { ToolResult } from '../types';\nimport { ConfirmationService, ConfirmationOptions } from '../utils/confirmation-service';\n\nexport interface ConfirmationRequest {\n  operation: string;\n  filename: string;\n  description?: string;\n  showVSCodeOpen?: boolean;\n  autoAccept?: boolean;\n}\n\nexport class ConfirmationTool {\n  private confirmationService: ConfirmationService;\n\n  constructor() {\n    this.confirmationService = ConfirmationService.getInstance();\n  }\n\n  async requestConfirmation(request: ConfirmationRequest): Promise<ToolResult> {\n    try {\n      // If autoAccept is true, skip the confirmation dialog\n      if (request.autoAccept) {\n        return {\n          success: true,\n          output: `Auto-accepted: ${request.operation}(${request.filename})${request.description ? ` - ${request.description}` : ''}`\n        };\n      }\n\n      const options: ConfirmationOptions = {\n        operation: request.operation,\n        filename: request.filename,\n        showVSCodeOpen: request.showVSCodeOpen || false\n      };\n\n      // Determine operation type based on operation name\n      const operationType = request.operation.toLowerCase().includes('bash') ? 'bash' : 'file';\n      const result = await this.confirmationService.requestConfirmation(options, operationType);\n\n      if (result.confirmed) {\n        return {\n          success: true,\n          output: `User confirmed: ${request.operation}(${request.filename})${request.description ? ` - ${request.description}` : ''}${result.dontAskAgain ? ' (Don\\'t ask again enabled)' : ''}`\n        };\n      } else {\n        return {\n          success: false,\n          error: result.feedback || `User rejected: ${request.operation}(${request.filename})`\n        };\n      }\n    } catch (error: any) {\n      return {\n        success: false,\n        error: `Confirmation error: ${error.message}`\n      };\n    }\n  }\n\n  async checkSessionAcceptance(): Promise<ToolResult> {\n    try {\n      const sessionFlags = this.confirmationService.getSessionFlags();\n      // Return structured data without JSON output to avoid displaying raw JSON\n      return {\n        success: true,\n        data: {\n          fileOperationsAccepted: sessionFlags.fileOperations,\n          bashCommandsAccepted: sessionFlags.bashCommands,\n          allOperationsAccepted: sessionFlags.allOperations,\n          hasAnyAcceptance: sessionFlags.fileOperations || sessionFlags.bashCommands || sessionFlags.allOperations\n        }\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: `Error checking session acceptance: ${error.message}`\n      };\n    }\n  }\n\n  resetSession(): void {\n    this.confirmationService.resetSession();\n  }\n\n  isPending(): boolean {\n    return this.confirmationService.isPending();\n  }\n}",
      "filePath": "../src/tools/confirmation-tool.ts",
      "embedding": [
        2.4,
        0,
        0.1,
        0.2,
        0.2,
        0.04097070369228078,
        0.04957239959785718,
        0.0456625030783699,
        0.018511928868493833,
        0.02002774964854949,
        0.06769727102519305,
        0.0053745934640486714,
        0.02280840403104293,
        0.03820329114915877,
        0.003663710635463913,
        0.09806074591556885,
        0.0016477341937796487,
        0.03140127283360246,
        0.012107065816722763,
        0.057065068024406584,
        0.06310152026747257,
        0.09237893670241684,
        0.049828460182642156,
        0.0025231788646572387,
        0.05887517851120977,
        0.03298644743559808,
        0.07635283478292162,
        0.018496462347499177,
        0.09202848708827345,
        0.06385502106104037,
        0.0795540155507166,
        0.06290297256066424,
        0.05485241295768058,
        0.05049318876829544,
        0.09399241198298103,
        0.05546503048978873,
        0.08719002764404979,
        0.07997507594792155,
        0.07650140302126841,
        0.05461601636973375,
        0.04214860367946244,
        0.09707718010528588,
        0.05012896150416272,
        0.06483024196479469,
        0.025779514217981383,
        0.046389741580139976,
        0.064690060291556,
        0.04889769174465275,
        0.08007197474603635,
        0.003848489748647566,
        0.03398074600193079,
        0.04058666493537375,
        0.024913204408308232,
        0.08121459661226943,
        0.09826670339658522,
        0.06284368730157044,
        0.004325834679908558,
        0.08467760622547942,
        0.0513558782950591,
        0.016172032935795756,
        0.00225332602185383,
        0.08821003201655375,
        0.04227646031355469,
        0.014852722544805763,
        0.06463895958263531,
        0.05339115913121122,
        0.05814358857738458,
        0.08251013529066775,
        0.09711452422160842,
        0.09703691992020158,
        0.04203691982760652,
        0.06397490725823683,
        0.022136282219542603,
        0.07626083308562281,
        0.06618287949760746,
        0.09648613470321989,
        0.09264374614132716,
        0.008116150597410455,
        0.04752312303839726,
        0.08003667153154975,
        0.039676282595327066,
        0.06306225098792617,
        0.011567924613882742,
        0.02876486728461332,
        0.05826788847701595,
        0.010951969050838907,
        0.08983743697618984,
        0.005573892207437193,
        0.06275486103700735,
        0.0779699970724074,
        0.003852444090059637,
        0.07086116648881945,
        0.06461842180417847,
        0.0835406872369215,
        0.023530701387108832,
        0.09511255149785701,
        0.047545966085133076,
        0.06584457318620905,
        0.05483205753381181,
        0.06658185192543276
      ]
    },
    {
      "content": "export { TextEditorTool } from './text-editor';\nexport { BashTool } from './bash';\nexport { TodoTool } from './todo-tool';\nexport { ConfirmationTool } from './confirmation-tool';\nexport { McpTool } from './mcp-tool';\nexport { PerplexityTool } from './perplexity-tool';",
      "filePath": "../src/tools/index.ts",
      "embedding": [
        0.36,
        0,
        0,
        0,
        0.6,
        0.002162029018895495,
        0.008553799712987465,
        0.007254612585406772,
        0.09856667495970955,
        0.014865932277504068,
        0.055951205892493694,
        0.08351097688922911,
        0.0026430292145744553,
        0.06629894351138375,
        0.09626367506908012,
        0.027761758527627214,
        0.02642657695543973,
        0.06651926855502861,
        0.08459130755532841,
        0.03680886239688177,
        0.02351090584535598,
        0.007721131379226709,
        0.007559875895826851,
        0.054145133524885175,
        0.07437898105412176,
        0.037603727947575785,
        0.0657524998520053,
        0.024815451707239002,
        0.07134792960466473,
        0.07615362758912704,
        0.07450541010648049,
        0.004414361296784286,
        0.057625057103417844,
        0.01310273079481843,
        0.07103284633893042,
        0.06292646179283641,
        0.004615034122231576,
        0.013627940795525817,
        0.03627523732992965,
        0.06267796597876249,
        0.005249976452812733,
        0.02127480038667493,
        0.005795660140594228,
        0.08886502812930581,
        0.0998470791708464,
        0.045961909429168946,
        0.06321337427390407,
        0.0558703941986651,
        0.06464954071344858,
        0.08045986776664409,
        0.0801242547758389,
        0.020888152234934888,
        0.017900691447062446,
        0.027507142664625752,
        0.0923596326160889,
        0.09774858132715007,
        0.04442937858138583,
        0.08403972818736992,
        0.005088647251213519,
        0.08218362369826972,
        0.008353826870658543,
        0.00592519976969439,
        0.07357451496939577,
        0.010481854232752209,
        0.09514382281878395,
        0.0071915266652315514,
        0.05057926627408548,
        0.08920739252572818,
        0.0391237259400942,
        0.02657805404099155,
        0.025735132478399182,
        0.04006197915385983,
        0.08702114790957889,
        0.07427551776277223,
        0.04813171754734894,
        0.09588150011371312,
        0.05790584210737357,
        0.0660333130629491,
        0.049448254873423685,
        0.050921682536429404,
        0.05861447354683004,
        0.037834828558510905,
        0.03178795164968449,
        0.08916629357263359,
        0.034093020967680965,
        0.07447228495244067,
        0.08124845623504083,
        0.03802840676074151,
        0.02370794499690687,
        0.03835572301679116,
        0.037206733307915844,
        0.0070489428480006834,
        0.053819129101355605,
        0.046129583467388914,
        0.020317432834934968,
        0.07766039990163183,
        0.028104361390932288,
        0.05486003222407515,
        0.07737975183783202,
        0.010040883152904911
      ]
    },
    {
      "content": "import { McpManager } from '../mcp/mcp-manager';\nimport { ToolResult } from '../types';\n\nexport class McpTool {\n  private mcpManager: McpManager;\n\n  constructor() {\n    this.mcpManager = McpManager.getInstance();\n  }\n\n  async listMcpServers(): Promise<ToolResult> {\n    try {\n      const connectedServers = this.mcpManager.getConnectedServers();\n      \n      if (connectedServers.length === 0) {\n        return {\n          success: true,\n          output: 'No MCP servers are currently connected.',\n        };\n      }\n\n      let output = 'Connected MCP Servers:\\n\\n';\n      \n      for (const serverName of connectedServers) {\n        const serverInfo = this.mcpManager.getServerInfo(serverName);\n        const tools = this.mcpManager.getToolsByServer(serverName);\n        \n        output += `📡 ${serverName}\\n`;\n        if (serverInfo) {\n          output += `   Version: ${serverInfo.version}\\n`;\n        }\n        output += `   Tools: ${tools.length}\\n`;\n        \n        if (tools.length > 0) {\n          output += `   Available tools:\\n`;\n          tools.forEach(tool => {\n            output += `     • ${tool.name}`;\n            if (tool.description) {\n              output += ` - ${tool.description}`;\n            }\n            output += '\\n';\n          });\n        }\n        output += '\\n';\n      }\n\n      return {\n        success: true,\n        output,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to list MCP servers: ${error instanceof Error ? error.message : String(error)}`,\n      };\n    }\n  }\n\n  async listMcpTools(): Promise<ToolResult> {\n    try {\n      const allTools = this.mcpManager.getAllTools();\n      \n      if (allTools.length === 0) {\n        return {\n          success: true,\n          output: 'No MCP tools are currently available.',\n        };\n      }\n\n      let output = 'Available MCP Tools:\\n\\n';\n      \n      const toolsByServer = new Map<string, typeof allTools>();\n      allTools.forEach(tool => {\n        if (!toolsByServer.has(tool.serverName)) {\n          toolsByServer.set(tool.serverName, []);\n        }\n        toolsByServer.get(tool.serverName)!.push(tool);\n      });\n\n      for (const [serverName, tools] of toolsByServer) {\n        output += `📡 ${serverName}:\\n`;\n        tools.forEach(tool => {\n          output += `   🔧 ${tool.name}`;\n          if (tool.description) {\n            output += ` - ${tool.description}`;\n          }\n          output += '\\n';\n        });\n        output += '\\n';\n      }\n\n      return {\n        success: true,\n        output,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to list MCP tools: ${error instanceof Error ? error.message : String(error)}`,\n      };\n    }\n  }\n\n  async callMcpTool(toolName: string, arguments_: any): Promise<ToolResult> {\n    try {\n      const tool = this.mcpManager.findToolByName(toolName);\n      \n      if (!tool) {\n        const availableTools = this.mcpManager.getAllTools();\n        const toolNames = availableTools.map(t => t.name).join(', ');\n        return {\n          success: false,\n          error: `MCP tool '${toolName}' not found. Available tools: ${toolNames}`,\n        };\n      }\n\n      const result = await this.mcpManager.callTool(tool.serverName, toolName, arguments_);\n      \n      if (result.isError) {\n        const errorMessage = result.content?.find(c => c.type === 'text')?.text || 'Unknown error';\n        return {\n          success: false,\n          error: `MCP tool error: ${errorMessage}`,\n        };\n      }\n\n      // Convert MCP result to tool result\n      let output = '';\n      if (result.content) {\n        for (const content of result.content) {\n          if (content.type === 'text' && content.text) {\n            output += content.text + '\\n';\n          } else if (content.type === 'resource' && content.data) {\n            output += `[Resource: ${content.mimeType || 'unknown'}]\\n${content.data}\\n`;\n          }\n        }\n      }\n\n      return {\n        success: true,\n        output: output.trim() || 'Tool executed successfully (no output)',\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to call MCP tool: ${error instanceof Error ? error.message : String(error)}`,\n      };\n    }\n  }\n\n  async refreshMcpConnections(): Promise<ToolResult> {\n    try {\n      await this.mcpManager.refreshConnections();\n      return {\n        success: true,\n        output: 'MCP server connections refreshed successfully.',\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to refresh MCP connections: ${error instanceof Error ? error.message : String(error)}`,\n      };\n    }\n  }\n}",
      "filePath": "../src/tools/mcp-tool.ts",
      "embedding": [
        4.8,
        0,
        0.1,
        0.2,
        0.1,
        0.08262915667806642,
        0.07073215838188349,
        0.08805080093372095,
        0.030706764519011467,
        0.06476461935080151,
        0.06023120216099418,
        0.031987815262742414,
        0.05016696805826039,
        0.06175074948013459,
        0.0803553322235876,
        0.06569708565044094,
        0.08392196536546935,
        0.04918015017732377,
        0.04809382931257266,
        0.088162289899352,
        0.07357944431451478,
        0.07863451934586752,
        0.039383412234479914,
        0.002413352378505729,
        0.035713162719007464,
        0.005329159689026986,
        0.08395444751444552,
        0.02490912548036872,
        0.015925511807398474,
        0.09294553971563048,
        0.018285202047849936,
        0.04672156221435761,
        0.054863844306907786,
        0.03747405577567119,
        0.013427137665460154,
        0.07901502512214839,
        0.058083993041016614,
        0.025071503168208376,
        0.042653628889480835,
        0.07134112844899997,
        0.048055918542176015,
        0.01630715001821943,
        0.04176923298931262,
        0.040405287041139284,
        0.03152386384001341,
        0.08919123204382134,
        0.02695275471064399,
        0.07976717262644886,
        0.062298442036327555,
        0.04097513238275568,
        0.08490554312108417,
        0.08966720496297315,
        0.05929760537595139,
        0.08147365613033468,
        0.05991936764825582,
        0.059722041262246665,
        0.01405402610551061,
        0.0047808136391547795,
        0.0596326317375469,
        0.019959695988918558,
        0.01570401804119892,
        0.0479529426392198,
        0.06603742819276685,
        0.009692022717276972,
        0.019918447883551595,
        0.02120942009966721,
        0.030855778339112294,
        0.09892641929732088,
        0.0912976306872727,
        0.029560749201550086,
        0.028846262944853696,
        0.01956650244016638,
        0.000861209350829506,
        0.009755684847568214,
        0.03683890423338403,
        0.019694345670907498,
        0.06430856923200987,
        0.04432281142736654,
        0.09638049767484129,
        0.06788299279487973,
        0.0869048299744453,
        0.05532711735525828,
        0.09680486489250942,
        0.05054188943799451,
        0.03030929840871557,
        0.09106582579336307,
        0.038206562654563805,
        0.03856543201647076,
        0.04839765394878203,
        0.08312232259574448,
        0.09976715223344315,
        0.031589323070164814,
        0.058055844677104965,
        0.03820269878742536,
        0.09067096846659248,
        0.02259381637085536,
        0.09252206371495489,
        0.027195496138832112,
        0.06011860597110792,
        0.09261845580249657
      ]
    },
    {
      "content": "import { ToolResult } from '../types';\nimport { loadApiKeys } from '../utils/api-keys';\n\nexport class PerplexityTool {\n  private openRouterApiKey: string | null;\n\n  constructor() {\n    const apiKeys = loadApiKeys();\n    this.openRouterApiKey = apiKeys.openRouterApiKey || process.env.OPENROUTER_API_KEY || null;\n  }\n\n  async search(query: string, maxResults: number = 10, summarize: boolean = true): Promise<ToolResult> {\n    if (!this.openRouterApiKey) {\n      return {\n        success: false,\n        error: 'OpenRouter API key is required for Perplexity search. Please configure it in /providers.'\n      };\n    }\n\n    try {\n      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.openRouterApiKey}`,\n          'Content-Type': 'application/json',\n          'HTTP-Referer': 'https://giga-code.dev',\n          'X-Title': 'GIGA Code'\n        },\n        body: JSON.stringify({\n          model: 'perplexity/sonar-pro',\n          messages: [\n            {\n              role: 'system',\n              content: `You are a helpful research assistant. Provide comprehensive, accurate, and up-to-date information based on web search results. Include relevant links and sources when possible. Structure your response clearly with headings and bullet points where appropriate.`\n            },\n            {\n              role: 'user',\n              content: query\n            }\n          ],\n          max_tokens: 2000,\n          temperature: 0.1,\n          stream: false\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        return {\n          success: false,\n          error: `Perplexity search failed: ${response.status} ${response.statusText}\\n${errorText}`\n        };\n      }\n\n      const data = await response.json() as any;\n      const searchResult = data.choices?.[0]?.message?.content;\n\n      if (!searchResult) {\n        return {\n          success: false,\n          error: 'No search results returned from Perplexity'\n        };\n      }\n\n      // Create summary for user display\n      let userSummary = '';\n      try {\n        const summaryResponse = await fetch('https://api.groq.com/openai/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${loadApiKeys().groqApiKey || process.env.GROQ_API_KEY}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: 'llama-3.3-70b-versatile',\n            messages: [\n              {\n                role: 'system',\n                content: 'Create a single concise sentence (max 100 chars) that captures the key finding from the search results. Be direct and actionable.'\n              },\n              {\n                role: 'user',\n                content: `Query: \"${query}\"\\n\\nSearch Results:\\n${searchResult}\\n\\nOne-line summary:`\n              }\n            ],\n            max_tokens: 50,\n            temperature: 0.1\n          })\n        });\n\n        if (summaryResponse.ok) {\n          const summaryData = await summaryResponse.json() as any;\n          userSummary = summaryData.choices?.[0]?.message?.content?.trim() || '';\n        }\n      } catch (error) {\n        userSummary = 'Search completed successfully';\n      }\n\n      // Return structured result with both summary and full content\n      return {\n        success: true,\n        output: `🔍 **Search Results for: \"${query}\"**\\n\\n${searchResult}`, // Full results for model context\n        data: {\n          userSummary: userSummary || `Found information about: ${query}`,\n          query: query\n        }\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: `Perplexity search error: ${error.message}`\n      };\n    }\n  }\n}\n",
      "filePath": "../src/tools/perplexity-tool.ts",
      "embedding": [
        3.64,
        0,
        0.1,
        0.2,
        0.1,
        0.013116518659997868,
        0.013255189982175864,
        0.03938340417383838,
        0.059320721909337376,
        0.035006912544573936,
        0.012339112992893598,
        0.011065284645010288,
        0.03179309753010978,
        0.09439087792206202,
        0.08334038805301802,
        0.09629528310505613,
        0.0311163833578748,
        0.05333632461959013,
        0.03660007242875326,
        0.08503575383386261,
        0.0032470410828921107,
        0.09025262850144428,
        0.09002090735309665,
        0.03375986027880368,
        0.018758024728180722,
        0.0719678283711093,
        0.01840471807598132,
        0.0036118700224008096,
        0.091487238374183,
        0.06626897205941983,
        0.08367632132233764,
        0.08446259087237212,
        0.0006384737638791771,
        0.043676480200648585,
        0.03225556896041592,
        0.03316112056940418,
        0.03969674575652196,
        0.09957231057860354,
        0.09621198685875641,
        0.04383273686343462,
        0.022447749928025798,
        0.05058601837395904,
        0.08376837291388768,
        0.04428487004131426,
        0.07146697127467634,
        0.0723673402755334,
        0.03498115941101184,
        0.05527279887756789,
        0.057454279433206516,
        0.09996967173769386,
        0.09495915918987108,
        0.07477354647705985,
        0.019831687152187305,
        0.09798108895699306,
        0.08509880387177306,
        0.038934055000842696,
        0.0957474507123785,
        0.06280064836384801,
        0.006151239313368606,
        0.03977869500800249,
        0.01998125730547481,
        0.06673558932457813,
        0.060667240747637845,
        0.04358281335066867,
        0.09875273742117008,
        0.06128966881559786,
        0.07968167866716513,
        0.008519032729555277,
        0.04027415184124958,
        0.03336807674372351,
        0.029218619723295716,
        0.027584771497157448,
        0.06774153268094325,
        0.09661440982666683,
        0.03485382809445551,
        0.0032108145919865997,
        0.04347418836749008,
        0.045642150364297654,
        0.007625985522279855,
        0.0817770327449757,
        0.09465599286140806,
        0.06226535720899008,
        0.032193258375244116,
        0.03245847961435307,
        0.05431590724941272,
        0.06116676649792833,
        0.08950486121390609,
        0.05765606063339586,
        0.06930070603149845,
        0.005643822010593891,
        0.06934142180717978,
        0.05602282512016189,
        0.07002720300472319,
        0.004741360994611288,
        0.09846664981251813,
        0.06984553649050886,
        0.04773627766020863,
        0.0833421840162918,
        0.06338107647287343,
        0.03636568980344621
      ]
    },
    {
      "content": "import * as fs from \"fs-extra\";\nimport * as path from \"path\";\nimport { ToolResult, EditorCommand } from \"../types\";\nimport { ConfirmationService } from \"../utils/confirmation-service\";\n\nexport class TextEditorTool {\n  private editHistory: EditorCommand[] = [];\n  private confirmationService = ConfirmationService.getInstance();\n\n  async view(\n    filePath: string,\n    viewRange?: [number, number]\n  ): Promise<ToolResult> {\n    try {\n      const resolvedPath = path.resolve(filePath);\n\n      if (await fs.pathExists(resolvedPath)) {\n        const stats = await fs.stat(resolvedPath);\n\n        if (stats.isDirectory()) {\n          const files = await fs.readdir(resolvedPath);\n          return {\n            success: true,\n            output: `Directory contents of ${filePath}:\\n${files.join(\"\\n\")}`,\n          };\n        }\n\n        const content = await fs.readFile(resolvedPath, \"utf-8\");\n        const lines = content.split(\"\\n\");\n\n        if (viewRange) {\n          const [start, end] = viewRange;\n          const selectedLines = lines.slice(start - 1, end);\n          const numberedLines = selectedLines\n            .map((line, idx) => `${start + idx}: ${line}`)\n            .join(\"\\n\");\n\n          return {\n            success: true,\n            output: `Lines ${start}-${end} of ${filePath}:\\n${numberedLines}`,\n          };\n        }\n\n        const totalLines = lines.length;\n        const displayLines = totalLines > 10 ? lines.slice(0, 10) : lines;\n        const numberedLines = displayLines\n          .map((line, idx) => `${idx + 1}: ${line}`)\n          .join(\"\\n\");\n        const additionalLinesMessage =\n          totalLines > 10 ? `\\n... +${totalLines - 10} lines` : \"\";\n\n        return {\n          success: true,\n          output: `Contents of ${filePath}:\\n${numberedLines}${additionalLinesMessage}`,\n        };\n      } else {\n        return {\n          success: false,\n          error: `File or directory not found: ${filePath}`,\n        };\n      }\n    } catch (error: any) {\n      return {\n        success: false,\n        error: `Error viewing ${filePath}: ${error.message}`,\n      };\n    }\n  }\n\n  async strReplace(\n    filePath: string,\n    oldStr: string,\n    newStr: string\n  ): Promise<ToolResult> {\n    try {\n      const resolvedPath = path.resolve(filePath);\n\n      if (!(await fs.pathExists(resolvedPath))) {\n        return {\n          success: false,\n          error: `File not found: ${filePath}`,\n        };\n      }\n\n      const content = await fs.readFile(resolvedPath, \"utf-8\");\n\n      if (!content.includes(oldStr)) {\n        return {\n          success: false,\n          error: `String not found in file: \"${oldStr}\"`,\n        };\n      }\n\n      // Check if user has already accepted file operations for this session\n      const sessionFlags = this.confirmationService.getSessionFlags();\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\n        // Create a proper diff preview showing the change\n        const newContent = content.replace(oldStr, newStr);\n        const oldLines = content.split(\"\\n\");\n        const newLines = newContent.split(\"\\n\");\n        const diffContent = this.generateDiff(oldLines, newLines, filePath);\n\n        const confirmationResult =\n          await this.confirmationService.requestConfirmation(\n            {\n              operation: \"Edit file\",\n              filename: filePath,\n              showVSCodeOpen: false,\n              content: diffContent,\n            },\n            \"file\"\n          );\n\n        if (!confirmationResult.confirmed) {\n          return {\n            success: false,\n            error: confirmationResult.feedback || \"File edit cancelled by user\",\n          };\n        }\n      }\n\n      const newContent = content.replace(oldStr, newStr);\n      await fs.writeFile(resolvedPath, newContent, \"utf-8\");\n\n      this.editHistory.push({\n        command: \"str_replace\",\n        path: filePath,\n        old_str: oldStr,\n        new_str: newStr,\n      });\n\n      // Generate diff output\n      const oldLines = content.split(\"\\n\");\n      const newLines = newContent.split(\"\\n\");\n      const diff = this.generateDiff(oldLines, newLines, filePath);\n\n      return {\n        success: true,\n        output: diff,\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: `Error replacing text in ${filePath}: ${error.message}`,\n      };\n    }\n  }\n\n  async create(filePath: string, content: string): Promise<ToolResult> {\n    try {\n      const resolvedPath = path.resolve(filePath);\n\n      // Check if user has already accepted file operations for this session\n      const sessionFlags = this.confirmationService.getSessionFlags();\n      if (!sessionFlags.fileOperations && !sessionFlags.allOperations) {\n        // Create a diff-style preview for file creation\n        const contentLines = content.split(\"\\n\");\n        const diffContent = [\n          `Created ${filePath}`,\n          `--- /dev/null`,\n          `+++ b/${filePath}`,\n          `@@ -0,0 +1,${contentLines.length} @@`,\n          ...contentLines.map((line) => `+${line}`),\n        ].join(\"\\n\");\n\n        const confirmationResult =\n          await this.confirmationService.requestConfirmation(\n            {\n              operation: \"Write\",\n              filename: filePath,\n              showVSCodeOpen: false,\n              content: diffContent,\n            },\n            \"file\"\n          );\n\n        if (!confirmationResult.confirmed) {\n          return {\n            success: false,\n            error:\n              confirmationResult.feedback || \"File creation cancelled by user\",\n          };\n        }\n      }\n\n      const dir = path.dirname(resolvedPath);\n      await fs.ensureDir(dir);\n      await fs.writeFile(resolvedPath, content, \"utf-8\");\n\n      this.editHistory.push({\n        command: \"create\",\n        path: filePath,\n        content,\n      });\n\n      // Generate diff output using the same method as str_replace\n      const oldLines: string[] = []; // Empty for new files\n      const newLines = content.split(\"\\n\");\n      const diff = this.generateDiff(oldLines, newLines, filePath);\n\n      return {\n        success: true,\n        output: diff,\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: `Error creating ${filePath}: ${error.message}`,\n      };\n    }\n  }\n\n  async insert(\n    filePath: string,\n    insertLine: number,\n    content: string\n  ): Promise<ToolResult> {\n    try {\n      const resolvedPath = path.resolve(filePath);\n\n      if (!(await fs.pathExists(resolvedPath))) {\n        return {\n          success: false,\n          error: `File not found: ${filePath}`,\n        };\n      }\n\n      const fileContent = await fs.readFile(resolvedPath, \"utf-8\");\n      const lines = fileContent.split(\"\\n\");\n\n      lines.splice(insertLine - 1, 0, content);\n      const newContent = lines.join(\"\\n\");\n\n      await fs.writeFile(resolvedPath, newContent, \"utf-8\");\n\n      this.editHistory.push({\n        command: \"insert\",\n        path: filePath,\n        insert_line: insertLine,\n        content,\n      });\n\n      return {\n        success: true,\n        output: `Successfully inserted content at line ${insertLine} in ${filePath}`,\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: `Error inserting content in ${filePath}: ${error.message}`,\n      };\n    }\n  }\n\n  async undoEdit(): Promise<ToolResult> {\n    if (this.editHistory.length === 0) {\n      return {\n        success: false,\n        error: \"No edits to undo\",\n      };\n    }\n\n    const lastEdit = this.editHistory.pop()!;\n\n    try {\n      switch (lastEdit.command) {\n        case \"str_replace\":\n          if (lastEdit.path && lastEdit.old_str && lastEdit.new_str) {\n            const content = await fs.readFile(lastEdit.path, \"utf-8\");\n            const revertedContent = content.replace(\n              lastEdit.new_str,\n              lastEdit.old_str\n            );\n            await fs.writeFile(lastEdit.path, revertedContent, \"utf-8\");\n          }\n          break;\n\n        case \"create\":\n          if (lastEdit.path) {\n            await fs.remove(lastEdit.path);\n          }\n          break;\n\n        case \"insert\":\n          if (lastEdit.path && lastEdit.insert_line) {\n            const content = await fs.readFile(lastEdit.path, \"utf-8\");\n            const lines = content.split(\"\\n\");\n            lines.splice(lastEdit.insert_line - 1, 1);\n            await fs.writeFile(lastEdit.path, lines.join(\"\\n\"), \"utf-8\");\n          }\n          break;\n      }\n\n      return {\n        success: true,\n        output: `Successfully undid ${lastEdit.command} operation`,\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: `Error undoing edit: ${error.message}`,\n      };\n    }\n  }\n\n  private generateDiff(\n    oldLines: string[],\n    newLines: string[],\n    filePath: string\n  ): string {\n    // Count actual changes\n    let addedLines = 0;\n    let removedLines = 0;\n    let i = 0,\n      j = 0;\n\n    // Simple algorithm to detect changes\n    while (i < oldLines.length || j < newLines.length) {\n      if (\n        i < oldLines.length &&\n        j < newLines.length &&\n        oldLines[i] === newLines[j]\n      ) {\n        i++;\n        j++;\n      } else if (\n        i < oldLines.length &&\n        (j >= newLines.length || oldLines[i] !== newLines[j])\n      ) {\n        removedLines++;\n        i++;\n      } else if (j < newLines.length) {\n        addedLines++;\n        j++;\n      }\n    }\n\n    let summary = `Updated ${filePath}`;\n    if (addedLines > 0 && removedLines > 0) {\n      summary += ` with ${addedLines} addition${\n        addedLines !== 1 ? \"s\" : \"\"\n      } and ${removedLines} removal${removedLines !== 1 ? \"s\" : \"\"}`;\n    } else if (addedLines > 0) {\n      summary += ` with ${addedLines} addition${addedLines !== 1 ? \"s\" : \"\"}`;\n    } else if (removedLines > 0) {\n      summary += ` with ${removedLines} removal${\n        removedLines !== 1 ? \"s\" : \"\"\n      }`;\n    } else {\n      summary += \" with changes\";\n    }\n\n    // Generate proper git-style diff format\n    let diff = summary + \"\\n\";\n    diff += `--- a/${filePath}\\n`;\n    diff += `+++ b/${filePath}\\n`;\n    diff += `@@ -1,${oldLines.length} +1,${newLines.length} @@\\n`;\n\n    // Generate unified diff\n    i = 0;\n    j = 0;\n    const CONTEXT_LINES = 3;\n\n    while (i < oldLines.length || j < newLines.length) {\n      const oldLine = i < oldLines.length ? oldLines[i] : null;\n      const newLine = j < newLines.length ? newLines[j] : null;\n\n      if (oldLine === newLine && oldLine !== null) {\n        // Context line\n        diff += ` ${oldLine}\\n`;\n        i++;\n        j++;\n      } else {\n        // Show removed lines\n        if (oldLine !== null) {\n          diff += `-${oldLine}\\n`;\n          i++;\n        }\n        // Show added lines\n        if (newLine !== null) {\n          diff += `+${newLine}\\n`;\n          j++;\n        }\n      }\n    }\n\n    return diff.trim();\n  }\n\n  getEditHistory(): EditorCommand[] {\n    return [...this.editHistory];\n  }\n}\n",
      "filePath": "../src/tools/text-editor.ts",
      "embedding": [
        11.12,
        0,
        0.1,
        0.4,
        0.1,
        0.03382742003317293,
        0.07007587817012509,
        0.07574409414557602,
        0.07205064049638414,
        0.08741817056995732,
        0.061134767309738984,
        0.09633513343670211,
        0.010572951336204495,
        0.07012517890151312,
        0.022457022308857044,
        0.07957113093210241,
        0.03946091643514496,
        0.03389427626716718,
        0.07375502060493076,
        0.061200362011883516,
        0.03515397876085522,
        0.05556455009726463,
        0.08228452230793953,
        0.05225475846650009,
        0.07578496436509924,
        0.03592851293469539,
        0.05850168523531201,
        0.05949637100390796,
        0.020625379367477693,
        0.06786749368756416,
        0.05614389287267357,
        0.008071758909167226,
        0.06756689808889264,
        0.07229361539999105,
        0.08249540062876777,
        0.00016134280231091538,
        0.049439378724751515,
        0.006329625044095755,
        0.01756387065727717,
        0.09627321710413927,
        0.04498493269384997,
        0.03153680366949193,
        0.01514159465760171,
        0.09412614733710115,
        0.0502971212829625,
        0.08964757422425912,
        0.013957014960621395,
        0.04604824423586227,
        0.06415815290064816,
        0.09725860548925033,
        0.006656709956483153,
        0.025872643841010314,
        0.06607892485776411,
        0.0680076869691103,
        0.05621288459939383,
        0.0576448642845393,
        0.05397771104968944,
        0.04819122303827758,
        0.09862533808875783,
        0.010048504109115453,
        0.07884458508735684,
        0.026181084821397083,
        0.0138558585970325,
        0.07378877236490096,
        0.032643101180669425,
        0.09668622133084578,
        0.07016093840507956,
        0.031635476131559474,
        0.0721762342213133,
        0.010137235456607597,
        0.0787827540468492,
        0.07148864750601965,
        0.09208791950138555,
        0.0571015096535718,
        0.07412199696120596,
        0.08774320853152084,
        0.08330709375949935,
        0.004580846353428681,
        0.053954557556789046,
        0.09979620570657265,
        0.004857486162384928,
        0.0899271259615117,
        0.017734334210382664,
        0.013438748252458645,
        0.08318060468597138,
        0.003913378555963388,
        0.042809542426096185,
        0.06780260549861399,
        0.028655606944705727,
        0.08347833387025401,
        0.01936158749729231,
        0.024146841184891757,
        0.015446676863067355,
        0.03184384460889641,
        0.049952388272319403,
        0.08597128328180353,
        0.01663451834522729,
        0.06544063468553327,
        0.08692450912570543,
        0.06983066554056531
      ]
    },
    {
      "content": "import { ToolResult } from '../types';\n\ninterface TodoItem {\n  id: string;\n  content: string;\n  status: 'pending' | 'in_progress' | 'completed';\n  priority: 'high' | 'medium' | 'low';\n}\n\nexport class TodoTool {\n  private todos: TodoItem[] = [];\n\n  formatTodoList(): string {\n    if (this.todos.length === 0) {\n      return 'No todos created yet';\n    }\n\n    const getCheckbox = (status: string): string => {\n      switch (status) {\n        case 'completed':\n          return '●';\n        case 'in_progress':\n          return '◐';\n        case 'pending':\n          return '○';\n        default:\n          return '○';\n      }\n    };\n\n    const getStatusColor = (status: string): string => {\n      switch (status) {\n        case 'completed':\n          return '\\x1b[32m'; // Green\n        case 'in_progress':\n          return '\\x1b[36m'; // Cyan\n        case 'pending':\n          return '\\x1b[37m'; // White/default\n        default:\n          return '\\x1b[0m'; // Reset\n      }\n    };\n\n    const reset = '\\x1b[0m';\n    let output = '';\n\n    this.todos.forEach((todo, index) => {\n      const checkbox = getCheckbox(todo.status);\n      const statusColor = getStatusColor(todo.status);\n      const strikethrough = todo.status === 'completed' ? '\\x1b[9m' : '';\n      const indent = index === 0 ? '' : '  ';\n      \n      output += `${indent}${statusColor}${strikethrough}${checkbox} ${todo.content}${reset}\\n`;\n    });\n\n    return output;\n  }\n\n  async createTodoList(todos: TodoItem[]): Promise<ToolResult> {\n    try {\n      // Validate todos\n      for (const todo of todos) {\n        if (!todo.id || !todo.content || !todo.status || !todo.priority) {\n          return {\n            success: false,\n            error: 'Each todo must have id, content, status, and priority fields'\n          };\n        }\n\n        if (!['pending', 'in_progress', 'completed'].includes(todo.status)) {\n          return {\n            success: false,\n            error: `Invalid status: ${todo.status}. Must be pending, in_progress, or completed`\n          };\n        }\n\n        if (!['high', 'medium', 'low'].includes(todo.priority)) {\n          return {\n            success: false,\n            error: `Invalid priority: ${todo.priority}. Must be high, medium, or low`\n          };\n        }\n      }\n\n      this.todos = todos;\n      \n      return {\n        success: true,\n        output: this.formatTodoList()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Error creating todo list: ${error instanceof Error ? error.message : String(error)}`\n      };\n    }\n  }\n\n  async updateTodoList(updates: { id: string; status?: string; content?: string; priority?: string }[]): Promise<ToolResult> {\n    try {\n      const updatedIds: string[] = [];\n\n      for (const update of updates) {\n        const todoIndex = this.todos.findIndex(t => t.id === update.id);\n        \n        if (todoIndex === -1) {\n          return {\n            success: false,\n            error: `Todo with id ${update.id} not found`\n          };\n        }\n\n        const todo = this.todos[todoIndex];\n\n        if (update.status && !['pending', 'in_progress', 'completed'].includes(update.status)) {\n          return {\n            success: false,\n            error: `Invalid status: ${update.status}. Must be pending, in_progress, or completed`\n          };\n        }\n\n        if (update.priority && !['high', 'medium', 'low'].includes(update.priority)) {\n          return {\n            success: false,\n            error: `Invalid priority: ${update.priority}. Must be high, medium, or low`\n          };\n        }\n\n        if (update.status) todo.status = update.status as any;\n        if (update.content) todo.content = update.content;\n        if (update.priority) todo.priority = update.priority as any;\n\n        updatedIds.push(update.id);\n      }\n\n      return {\n        success: true,\n        output: this.formatTodoList()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Error updating todo list: ${error instanceof Error ? error.message : String(error)}`\n      };\n    }\n  }\n\n  async viewTodoList(): Promise<ToolResult> {\n    return {\n      success: true,\n      output: this.formatTodoList()\n    };\n  }\n}",
      "filePath": "../src/tools/todo-tool.ts",
      "embedding": [
        4.47,
        0,
        0.1,
        0.1,
        0.1,
        0.0554355964836894,
        0.042389968953434665,
        0.08719349197811377,
        0.09331182676016819,
        0.05303809298509739,
        0.05292537130203721,
        0.06917544238621195,
        0.07022724773919484,
        0.045387357051367705,
        0.04738857441877789,
        0.02229675298840258,
        0.06199716175663107,
        0.04555222779733549,
        0.02468991079947267,
        0.0667256579488211,
        0.07089184674522424,
        0.07854616449893814,
        0.009569029699329068,
        0.006816253070492684,
        0.05206225571668086,
        0.06478102439472391,
        0.051277721092254286,
        0.08422058067887703,
        0.06965287805361213,
        0.05781975918535688,
        0.083225559595636,
        0.07650370014946879,
        0.00046538225855213833,
        0.07771179695134572,
        0.03063563749546382,
        0.037439725886418466,
        0.07645281339304534,
        0.0563221460352708,
        0.049419500542885,
        0.004428623895177531,
        0.09361532453663152,
        0.06637988449640499,
        0.06727405686135587,
        0.017502262121760637,
        0.04903613317271724,
        0.07269376420274849,
        0.029002398889796277,
        0.023992905639911535,
        0.03770563713369557,
        0.09324881673576062,
        0.08179892745514994,
        0.01576684823027972,
        0.012511072737917817,
        0.009200073771159735,
        0.042932347691773724,
        0.0035814577390519743,
        0.08668800262547283,
        0.08686574746984792,
        0.07936217527044748,
        0.023635568180788803,
        0.021026405807176907,
        0.0397724798188148,
        0.09987712724501285,
        0.027231858660676678,
        0.07600282991929323,
        0.023870750993263523,
        0.05392380307915136,
        0.05075282114510909,
        0.05163827612258436,
        0.09054522375067967,
        0.03947209152215767,
        0.09056050055990175,
        0.004730445834446007,
        0.08225698738135226,
        0.022500478061252105,
        0.036454900649818954,
        0.004443662598166076,
        0.057399973494950365,
        0.08556034875092511,
        0.021266704775926272,
        0.04236126546895476,
        0.05449223301849548,
        0.00045740487300257595,
        0.07109366950252484,
        0.01027878143434482,
        0.06772999776519623,
        0.017788429312768885,
        0.03148250358395112,
        0.021390072061968093,
        0.052771531104013884,
        0.001743346869825635,
        0.08132751310822424,
        0.08833005681442492,
        0.05991329752395033,
        0.0619911658485772,
        0.034540800738417886,
        0.0699057633135886,
        0.007444917857120548,
        0.05466066794839698,
        0.08216309895348628
      ]
    },
    {
      "content": "export interface ToolResult {\n  success: boolean;\n  output?: string;\n  error?: string;\n  data?: any;\n  metadata?: {\n    userSummary?: string;\n    query?: string;\n    [key: string]: any;\n  };\n}\n\nexport interface Tool {\n  name: string;\n  description: string;\n  execute: (...args: any[]) => Promise<ToolResult>;\n}\n\nexport interface EditorCommand {\n  command: 'view' | 'str_replace' | 'create' | 'insert' | 'undo_edit';\n  path?: string;\n  old_str?: string;\n  new_str?: string;\n  content?: string;\n  insert_line?: number;\n  view_range?: [number, number];\n}\n\nexport interface AgentState {\n  currentDirectory: string;\n  editHistory: EditorCommand[];\n  tools: Tool[];\n}\n\nexport interface ConfirmationState {\n  skipThisSession: boolean;\n  pendingOperation: boolean;\n}\n\nexport enum AgentMode {\n  PLAN = 'plan',\n  CHILL = 'chill', \n  GIGA = 'giga'\n}\n\nexport interface ModeConfig {\n  mode: AgentMode;\n  allowExpertModels: boolean;\n  requireConfirmation: boolean;\n  displayName: string;\n  description: string;\n}",
      "filePath": "../src/types/index.ts",
      "embedding": [
        1.14,
        0,
        0,
        0,
        0.7,
        0.05932262904925928,
        0.021169262553049642,
        0.09847807129664775,
        0.07934081560074692,
        0.0345303468121641,
        0.0337888928608045,
        0.005404102979724912,
        0.04686345068366933,
        0.05872900394994257,
        0.057022696004942176,
        0.004503155320336439,
        0.029595015279206216,
        0.05986244499126785,
        0.03649558497450466,
        0.018970083666969707,
        0.0798799947609192,
        0.020543846882719298,
        0.018046508303668687,
        0.025727359739866396,
        0.006472390866805711,
        0.045807530173866434,
        0.09701382655459517,
        0.04910308051237289,
        0.03834911471984838,
        0.08677429862948463,
        0.08260309023289852,
        0.0678953722405442,
        0.05360619982280854,
        0.08985130502557258,
        0.01175221731726962,
        0.0612711238114156,
        0.03206320781536844,
        0.010709128791569135,
        0.060888264450701314,
        0.00852180222963692,
        0.03153391921463551,
        0.018287127266066874,
        0.07986021871251495,
        0.03809509888085915,
        0.07307791816478945,
        0.028886348911465666,
        0.02063169210304913,
        0.008449499705343222,
        0.0219561946239081,
        0.019812513849321145,
        0.08370400503138668,
        0.015425071285538862,
        0.07628104921664998,
        0.03233580249299211,
        0.05474439997435204,
        0.025591011316624602,
        0.06623437871042132,
        0.05402129154083405,
        0.004119171635764196,
        0.07747506480337757,
        0.09992601888032264,
        0.03545009360405286,
        0.06359349525371724,
        0.007054161001598791,
        0.02323092872891739,
        0.08883580910567722,
        0.05893609891422796,
        0.057040976339583084,
        0.08185518781731153,
        0.054807469983003926,
        0.04020291842340278,
        0.05512847190356526,
        0.019539366374141876,
        0.08450878148184712,
        0.01350594501742104,
        0.06551151710758671,
        0.0764362964102312,
        0.04335619261932075,
        0.098246161212305,
        0.030198631817213717,
        0.05603343517253315,
        0.05148829528840543,
        0.028519800573114665,
        0.0013502930162608508,
        0.05414389078174056,
        0.03911925469476864,
        0.06461404915163309,
        0.04221316191196152,
        0.0745769079577226,
        0.02702199927719262,
        0.06897939794320156,
        0.06070597687854301,
        0.04219141341683831,
        0.07679957393301151,
        0.09739104890243781,
        0.011468757716164901,
        0.03688149128080168,
        0.06631586453630649,
        0.05773383846434227,
        0.07686872476479306
      ]
    },
    {
      "content": "import React, { useState, useEffect } from 'react';\nimport { Box, Text, useInput, useApp } from 'ink';\nimport { Agent } from '../agent';\nimport { ToolResult, AgentMode } from '../types';\nimport { ConfirmationService, ConfirmationOptions } from '../utils/confirmation-service';\nimport ConfirmationDialog from './components/confirmation-dialog';\nimport { modeManager } from '../utils/mode-manager';\nimport chalk from 'chalk';\n\ninterface Props {\n  agent: Agent;\n}\n\nexport default function App({ agent }: Props) {\n  const [input, setInput] = useState('');\n  const [history, setHistory] = useState<Array<{ command: string; result: ToolResult }>>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [confirmationOptions, setConfirmationOptions] = useState<ConfirmationOptions | null>(null);\n  const [currentMode, setCurrentMode] = useState<AgentMode>(modeManager.getCurrentMode());\n  const { exit } = useApp();\n  \n  const confirmationService = ConfirmationService.getInstance();\n\n  useEffect(() => {\n    const handleConfirmationRequest = (options: ConfirmationOptions) => {\n      setConfirmationOptions(options);\n    };\n\n    confirmationService.on('confirmation-requested', handleConfirmationRequest);\n\n    return () => {\n      confirmationService.off('confirmation-requested', handleConfirmationRequest);\n    };\n  }, [confirmationService]);\n\n  // Reset confirmation service session on app start\n  useEffect(() => {\n    confirmationService.resetSession();\n  }, []);\n\n  useInput(async (inputChar: string, key: any) => {\n    // If confirmation dialog is open, don't handle normal input\n    if (confirmationOptions) {\n      return;\n    }\n    \n    // Handle Shift+Tab for mode cycling (Note: This is handled in ChatInterface now)\n    if (key.shift && key.tab) {\n      return;\n    }\n    \n    if (key.ctrl && inputChar === 'c') {\n      exit();\n      return;\n    }\n\n    if (key.return) {\n      if (input.trim() === 'exit' || input.trim() === 'quit') {\n        exit();\n        return;\n      }\n\n      if (input.trim()) {\n        setIsProcessing(true);\n        const result = await agent.processCommand(input.trim());\n        setHistory(prev => [...prev, { command: input.trim(), result }]);\n        setInput('');\n        setIsProcessing(false);\n      }\n      return;\n    }\n\n    if (key.backspace || key.delete) {\n      setInput(prev => prev.slice(0, -1));\n      return;\n    }\n\n    if (inputChar && !key.ctrl && !key.meta) {\n      setInput(prev => prev + inputChar);\n    }\n  });\n\n  const renderResult = (result: ToolResult) => {\n    if (result.success) {\n      return (\n        <Box flexDirection=\"column\" marginBottom={1}>\n          <Text color=\"green\">✓ Success</Text>\n          {result.output && (\n            <Box marginLeft={2}>\n              <Text>{result.output}</Text>\n            </Box>\n          )}\n        </Box>\n      );\n    } else {\n      return (\n        <Box flexDirection=\"column\" marginBottom={1}>\n          <Text color=\"red\">✗ Error</Text>\n          {result.error && (\n            <Box marginLeft={2}>\n              <Text color=\"red\">{result.error}</Text>\n            </Box>\n          )}\n        </Box>\n      );\n    }\n  };\n\n  const handleConfirmation = (dontAskAgain?: boolean) => {\n    confirmationService.confirmOperation(true, dontAskAgain);\n    setConfirmationOptions(null);\n  };\n\n  const handleRejection = (feedback?: string) => {\n    confirmationService.rejectOperation(feedback);\n    setConfirmationOptions(null);\n  };\n\n  if (confirmationOptions) {\n    return (\n      <ConfirmationDialog\n        operation={confirmationOptions.operation}\n        filename={confirmationOptions.filename}\n        showVSCodeOpen={confirmationOptions.showVSCodeOpen}\n        onConfirm={handleConfirmation}\n        onReject={handleRejection}\n      />\n    );\n  }\n\n  return (\n    <Box flexDirection=\"column\" padding={1}>\n      <Box marginBottom={1} flexDirection=\"column\">\n        <Text bold color=\"cyan\">\n          🔧 Grok CLI - Text Editor Agent\n        </Text>\n        <Box marginTop={1}>\n          <Text bold color={currentMode === AgentMode.GIGA ? 'yellow' : currentMode === AgentMode.CHILL ? 'green' : 'blue'}>\n            {modeManager.getModeDisplayName()}\n          </Text>\n          <Text dimColor> - {modeManager.getModeDescription()}</Text>\n        </Box>\n      </Box>\n      \n      <Box flexDirection=\"column\" marginBottom={1}>\n        <Text dimColor>\n          Available commands: view, str_replace, create, insert, undo_edit, bash, help\n        </Text>\n        <Text dimColor>\n          Type 'help' for detailed usage, 'exit' or Ctrl+C to quit, Shift+Tab to cycle modes\n        </Text>\n      </Box>\n\n      <Box flexDirection=\"column\" marginBottom={1}>\n        {history.slice(-10).map((entry, index) => (\n          <Box key={index} flexDirection=\"column\" marginBottom={1}>\n            <Box>\n              <Text color=\"blue\">$ </Text>\n              <Text>{entry.command}</Text>\n            </Box>\n            {renderResult(entry.result)}\n          </Box>\n        ))}\n      </Box>\n\n      <Box>\n        <Text color=\"blue\">$ </Text>\n        <Text>\n          {input}\n          {!isProcessing && <Text color=\"white\">█</Text>}\n        </Text>\n        {isProcessing && <Text color=\"yellow\"> (processing...)</Text>}\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/app.tsx",
      "embedding": [
        4.63,
        0.1,
        0,
        0.8,
        0.1,
        0.0000574867767413112,
        0.07811357989374211,
        0.03748470061267587,
        0.07869615934239499,
        0.017194005592251628,
        0.08172025923964914,
        0.033975358856351716,
        0.08261698878809114,
        0.07171451086530384,
        0.0044153384698093715,
        0.09280649802213109,
        0.058908634636855896,
        0.0823350031679827,
        0.03572359231670798,
        0.08855506680119409,
        0.0924863139638849,
        0.08784652867247518,
        0.08045338102768289,
        0.04102511722901058,
        0.07518066635927996,
        0.03788118108819088,
        0.011555704339636808,
        0.056675719305743756,
        0.08938353543187266,
        0.0405256663860456,
        0.0627832071778085,
        0.024658298127008416,
        0.03735208213453657,
        0.024044577646948895,
        0.08901395210756052,
        0.036635703017971144,
        0.06863833747905883,
        0.05107740688784959,
        0.052407225005534776,
        0.09936659310686628,
        0.05230799902380401,
        0.035173596512153196,
        0.051312033679365425,
        0.07113402408041102,
        0.04951651447963776,
        0.06340791483128706,
        0.0990890876032256,
        0.03354219245486352,
        0.03532667095329004,
        0.027152935145463644,
        0.008572090142954281,
        0.04322806889447772,
        0.033599009241779866,
        0.045938102025572636,
        0.08819575022742654,
        0.042838239388257884,
        0.06964760115979952,
        0.061276188643329614,
        0.03051501962180746,
        0.0016477088887957292,
        0.08094432973849552,
        0.09008021567040551,
        0.06756226445301843,
        0.05107552747642633,
        0.08009435996645237,
        0.027874386709593725,
        0.08934258739003141,
        0.040493938525837714,
        0.030773994970854337,
        0.007708647607424813,
        0.03701412694977174,
        0.0632037392219793,
        0.08226634476282738,
        0.03765662997934543,
        0.019205540597322192,
        0.028045929526009872,
        0.04342806459382762,
        0.0030684612334512143,
        0.056277179387335174,
        0.047477471002210114,
        0.019559703559533605,
        0.08716546989682464,
        0.04624229200840732,
        0.07355510094364244,
        0.05405435861562086,
        0.014477528032858601,
        0.034203111793954764,
        0.025474658036464527,
        0.001421309500296486,
        0.07329684464341067,
        0.05299806891346573,
        0.022687626169419873,
        0.0070362633905938,
        0.06830568251855226,
        0.0653098238600553,
        0.022802164577678787,
        0.018796356648270552,
        0.03437066514687548,
        0.08485231096196165,
        0.05745508809639308
      ]
    },
    {
      "content": "import React, { useState } from \"react\";\nimport { Box, Text, useInput } from \"ink\";\n\ninterface AddMcpServerProps {\n  onClose: () => void;\n  onAddServer: (name: string, command: string, args?: string[], env?: Record<string, string>, description?: string) => void;\n}\n\ntype FormField = 'name' | 'command' | 'args' | 'env' | 'description';\n\nexport default function AddMcpServer({ onClose, onAddServer }: AddMcpServerProps) {\n  const [currentField, setCurrentField] = useState<FormField>('name');\n  const [formData, setFormData] = useState({\n    name: '',\n    command: '',\n    args: '',\n    env: '',\n    description: ''\n  });\n\n  const fields: { key: FormField; label: string; placeholder: string; required: boolean }[] = [\n    { key: 'name', label: 'Server Name', placeholder: 'my-server', required: true },\n    { key: 'command', label: 'Command', placeholder: 'npx @modelcontextprotocol/server-filesystem', required: true },\n    { key: 'args', label: 'Arguments', placeholder: '/path/to/directory (space-separated)', required: false },\n    { key: 'env', label: 'Environment', placeholder: 'KEY1=value1 KEY2=value2', required: false },\n    { key: 'description', label: 'Description', placeholder: 'Optional description', required: false }\n  ];\n\n  const currentFieldIndex = fields.findIndex(f => f.key === currentField);\n\n  useInput((inputChar, key) => {\n    if (key.ctrl && inputChar === \"c\") {\n      onClose();\n      return;\n    }\n\n    if (key.escape) {\n      onClose();\n      return;\n    }\n\n    if (key.upArrow) {\n      const newIndex = currentFieldIndex === 0 ? fields.length - 1 : currentFieldIndex - 1;\n      setCurrentField(fields[newIndex].key);\n      return;\n    }\n\n    if (key.downArrow) {\n      const newIndex = (currentFieldIndex + 1) % fields.length;\n      setCurrentField(fields[newIndex].key);\n      return;\n    }\n\n    if (key.tab) {\n      const newIndex = (currentFieldIndex + 1) % fields.length;\n      setCurrentField(fields[newIndex].key);\n      return;\n    }\n\n    if (key.return) {\n      // If we're on the last field or have required fields filled, submit\n      if (currentFieldIndex === fields.length - 1 || \n          (formData.name.trim() && formData.command.trim())) {\n        handleSubmit();\n      } else {\n        // Move to next field\n        const newIndex = (currentFieldIndex + 1) % fields.length;\n        setCurrentField(fields[newIndex].key);\n      }\n      return;\n    }\n\n    if (key.backspace || key.delete) {\n      setFormData(prev => ({\n        ...prev,\n        [currentField]: prev[currentField].slice(0, -1)\n      }));\n      return;\n    }\n\n    if (inputChar && !key.ctrl && !key.meta) {\n      setFormData(prev => ({\n        ...prev,\n        [currentField]: prev[currentField] + inputChar\n      }));\n      return;\n    }\n  });\n\n  const handleSubmit = () => {\n    if (!formData.name.trim() || !formData.command.trim()) {\n      return; // Don't submit if required fields are empty\n    }\n\n    const args = formData.args.trim() ? formData.args.trim().split(' ') : undefined;\n    const env = formData.env.trim() ? parseEnvString(formData.env.trim()) : undefined;\n    const description = formData.description.trim() || undefined;\n\n    onAddServer(formData.name.trim(), formData.command.trim(), args, env, description);\n  };\n\n  const parseEnvString = (envStr: string): Record<string, string> => {\n    const env: Record<string, string> = {};\n    const pairs = envStr.split(' ');\n    \n    for (const pair of pairs) {\n      const [key, ...valueParts] = pair.split('=');\n      if (key && valueParts.length > 0) {\n        env[key] = valueParts.join('=');\n      }\n    }\n    \n    return env;\n  };\n\n  const canSubmit = formData.name.trim() && formData.command.trim();\n\n  return (\n    <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n      <Text color=\"yellow\">➕ Add MCP Server</Text>\n      <Box marginBottom={1}>\n        <Text color=\"gray\">Fill in the server configuration:</Text>\n      </Box>\n      \n      <Box flexDirection=\"column\" marginBottom={1}>\n        {fields.map((field) => {\n          const isSelected = field.key === currentField;\n          const value = formData[field.key];\n          \n          return (\n            <Box \n              key={field.key}\n              borderStyle=\"round\" \n              borderColor={isSelected ? \"blue\" : \"gray\"} \n              paddingX={1} \n              marginBottom={1}\n            >\n              <Box width={15}>\n                <Text color={isSelected ? \"blue\" : \"white\"}>\n                  {field.label}{field.required ? \"*\" : \"\"}:\n                </Text>\n              </Box>\n              <Box flexGrow={1}>\n                <Text color={value ? \"white\" : \"gray\"}>\n                  {value || field.placeholder}\n                  {isSelected ? \"█\" : \"\"}\n                </Text>\n              </Box>\n            </Box>\n          );\n        })}\n      </Box>\n\n      <Box marginBottom={1}>\n        <Text color={canSubmit ? \"green\" : \"red\"}>\n          {canSubmit ? \"✓ Ready to add server\" : \"❌ Name and command are required\"}\n        </Text>\n      </Box>\n\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"gray\" dimColor>• Use ↑/↓ arrows or Tab to navigate fields</Text>\n        <Text color=\"gray\" dimColor>• Type to edit current field</Text>\n        <Text color=\"gray\" dimColor>• Press Enter to {canSubmit ? \"add server\" : \"go to next field\"}</Text>\n        <Text color=\"gray\" dimColor>• Press Esc to cancel</Text>\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/add-mcp-server.tsx",
      "embedding": [
        5.67,
        0.1,
        0,
        0.2,
        0.1,
        0.03272453667222256,
        0.05056605644659197,
        0.06980755776200953,
        0.07705181792977696,
        0.07352739329497485,
        0.00314167074112961,
        0.060269012231169365,
        0.05774304874089447,
        0.004426539075101266,
        0.04940166356702032,
        0.04836695263854505,
        0.011659861751730583,
        0.05507862470272824,
        0.06933163561122761,
        0.039187566571596624,
        0.03955895530123791,
        0.044845836789050714,
        0.0029549010148887224,
        0.09190163156494104,
        0.02027910795264556,
        0.0528443857981631,
        0.08912127392920569,
        0.016191176051075486,
        0.05919161265814959,
        0.03713604071635553,
        0.08378970763126367,
        0.026335570727330962,
        0.011114007681462368,
        0.0858419957035352,
        0.014184712054464078,
        0.0887651218414456,
        0.06342808478754217,
        0.07276318050482296,
        0.005728722668622177,
        0.08926448004357827,
        0.07233101516113792,
        0.04577546308314785,
        0.09907427065273036,
        0.09793817336735534,
        0.003680790144005042,
        0.029024263918440152,
        0.035199571831103685,
        0.03463224512409931,
        0.09981439100568543,
        0.08887462935717727,
        0.08105038197238125,
        0.002711107304113514,
        0.0034376115191368964,
        0.0029128794225278254,
        0.039215247885339435,
        0.08048226447282052,
        0.010124012246941962,
        0.0476593098545767,
        0.08958091171140328,
        0.028997478886271057,
        0.07873335363812103,
        0.02844836041614758,
        0.020610451165109712,
        0.062074028093822724,
        0.06501216945573775,
        0.09516321174314735,
        0.0718598828662753,
        0.02029491027867937,
        0.034034703072909525,
        0.05401660122968288,
        0.019670890979483026,
        0.06688284963235427,
        0.027279411103201912,
        0.06338831543322412,
        0.037095901062394666,
        0.08883936553551991,
        0.015689821061240086,
        0.0018826223717163693,
        0.02374376134013183,
        0.09689117372399227,
        0.014773617734366152,
        0.09501444319691144,
        0.094823409818071,
        0.07798025338614806,
        0.0036250738590716484,
        0.06403219015535083,
        0.019156034087396925,
        0.03384684046098918,
        0.028909542303494462,
        0.010262167774375264,
        0.08859418269903407,
        0.09235807754590243,
        0.04979342752381425,
        0.0918229516606599,
        0.0951204944365435,
        0.04819949138749603,
        0.03877057934419503,
        0.07016948068174024,
        0.06622673838443814,
        0.07466090494014553
      ]
    },
    {
      "content": "import React, { useState, useEffect } from \"react\";\nimport { Box, Text, useInput } from \"ink\";\nimport { loadApiKeys } from \"../../utils/api-keys\";\nimport { ProviderName } from \"../../utils/provider-models\";\nimport { fetchModelsWithFallback } from \"../../utils/dynamic-model-fetcher\";\nimport { fuzzySearch } from \"../../utils/fuzzy-search\";\n\ninterface Provider {\n  name: string;\n  keyName: string;\n  description: string;\n}\n\ninterface AddModelProps {\n  providers: Provider[];\n  onClose: () => void;\n  onAddModel: (providerName: string, modelName: string) => void;\n}\n\nexport default function AddModel({ \n  providers, \n  onClose,\n  onAddModel \n}: AddModelProps) {\n  const [availableProviders, setAvailableProviders] = useState<Provider[]>([]);\n  const [stage, setStage] = useState<'provider' | 'model'>('provider');\n  const [selectedProviderIndex, setSelectedProviderIndex] = useState(0);\n  const [selectedModelIndex, setSelectedModelIndex] = useState(0);\n  const [currentSearchQuery, setCurrentSearchQuery] = useState(\"\");\n  const [filteredModels, setFilteredModels] = useState<string[]>([]);\n  const [isLoadingModels, setIsLoadingModels] = useState(false);\n  const [allModels, setAllModels] = useState<string[]>([]);\n\n  useEffect(() => {\n    initializeProviders();\n  }, []);\n\n  useEffect(() => {\n    if (stage === 'model' && availableProviders[selectedProviderIndex] && !isLoadingModels) {\n      updateFilteredModels();\n    }\n  }, [stage, selectedProviderIndex, currentSearchQuery, availableProviders, allModels]);\n\n  const initializeProviders = () => {\n    const apiKeys = loadApiKeys();\n    const providersWithKeys: Provider[] = [];\n    \n    for (const provider of providers) {\n      const keyValue = (apiKeys as any)[provider.keyName];\n      // Ollama always has a base URL (defaults to localhost), so it's always available\n      if (keyValue || provider.keyName === 'ollamaBaseUrl') {\n        providersWithKeys.push(provider);\n      }\n    }\n    \n    setAvailableProviders(providersWithKeys);\n  };\n\n  const loadModelsForProvider = async (provider: Provider) => {\n    setIsLoadingModels(true);\n    setAllModels([]);\n    \n    const apiKeys = loadApiKeys();\n    const apiKey = (apiKeys as any)[provider.keyName];\n    const providerName = provider.name.toLowerCase() as ProviderName;\n    \n    try {\n      const models = await fetchModelsWithFallback(providerName, apiKey);\n      setAllModels(models);\n    } catch (error) {\n      console.error(`Failed to load models for ${provider.name}:`, error);\n      setAllModels([]);\n    } finally {\n      setIsLoadingModels(false);\n    }\n  };\n\n  const updateFilteredModels = () => {\n    if (!currentSearchQuery.trim()) {\n      setFilteredModels(allModels);\n      return;\n    }\n    \n    const filtered = fuzzySearch(\n      currentSearchQuery,\n      allModels,\n      (model) => model,\n      50 // Show up to 50 results\n    );\n    \n    setFilteredModels(filtered);\n  };\n\n  useInput((inputChar, key) => {\n    if (key.ctrl && inputChar === \"c\") {\n      onClose();\n      return;\n    }\n\n    if (key.escape) {\n      if (stage === 'model') {\n        // Go back to provider selection\n        setStage('provider');\n        setCurrentSearchQuery(\"\");\n        setSelectedModelIndex(0);\n      } else {\n        onClose();\n      }\n      return;\n    }\n\n    if (stage === 'provider') {\n      if (key.upArrow) {\n        setSelectedProviderIndex(prev => prev === 0 ? availableProviders.length - 1 : prev - 1);\n        return;\n      }\n      if (key.downArrow) {\n        setSelectedProviderIndex(prev => (prev + 1) % availableProviders.length);\n        return;\n      }\n      if (key.return) {\n        if (availableProviders.length > 0) {\n          const selectedProvider = availableProviders[selectedProviderIndex];\n          // Move to model selection stage and load models\n          setStage('model');\n          setCurrentSearchQuery(\"\");\n          setSelectedModelIndex(0);\n          loadModelsForProvider(selectedProvider);\n        }\n        return;\n      }\n    } else if (stage === 'model') {\n      if (key.upArrow) {\n        setSelectedModelIndex(prev => prev === 0 ? Math.max(0, filteredModels.length - 1) : prev - 1);\n        return;\n      }\n      if (key.downArrow) {\n        setSelectedModelIndex(prev => filteredModels.length === 0 ? 0 : (prev + 1) % Math.min(10, filteredModels.length));\n        return;\n      }\n      if (key.return) {\n        if (filteredModels.length > 0 && selectedModelIndex < filteredModels.length) {\n          const selectedModel = filteredModels[selectedModelIndex];\n          const selectedProvider = availableProviders[selectedProviderIndex];\n          onAddModel(selectedProvider.name, selectedModel);\n        }\n        return;\n      }\n      if (key.backspace || key.delete) {\n        setCurrentSearchQuery(prev => prev.slice(0, -1));\n        setSelectedModelIndex(0);\n        return;\n      }\n      if (inputChar && !key.ctrl && !key.meta) {\n        setCurrentSearchQuery(prev => prev + inputChar);\n        setSelectedModelIndex(0);\n        return;\n      }\n    }\n  });\n\n  if (availableProviders.length === 0) {\n    return (\n      <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n        <Text color=\"red\">❌ No API keys found</Text>\n        <Text color=\"gray\">Configure API keys in /providers first</Text>\n        <Box marginTop={1}>\n          <Text color=\"gray\" dimColor>Press Esc to close</Text>\n        </Box>\n      </Box>\n    );\n  }\n\n  if (stage === 'provider') {\n    return (\n      <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n        <Text color=\"yellow\">🔍 Select Provider</Text>\n        <Box marginBottom={1}>\n          <Text color=\"gray\">Choose a provider to browse models from:</Text>\n        </Box>\n        \n        <Box flexDirection=\"column\" marginBottom={1}>\n          {availableProviders.map((provider, index) => {\n            const isSelected = index === selectedProviderIndex;\n            \n            return (\n              <Box \n                key={provider.keyName}\n                borderStyle=\"round\" \n                borderColor={isSelected ? \"blue\" : \"gray\"} \n                paddingX={1} \n                marginBottom={1}\n              >\n                <Box width={12}>\n                  <Text color={isSelected ? \"blue\" : \"white\"}>{provider.name}</Text>\n                </Box>\n                <Box flexGrow={1}>\n                  <Text color=\"green\">✓ API key configured</Text>\n                </Box>\n                <Box width={25}>\n                  <Text color=\"gray\" dimColor>{provider.description}</Text>\n                </Box>\n              </Box>\n            );\n          })}\n        </Box>\n\n        <Box flexDirection=\"column\" marginTop={1}>\n          <Text color=\"gray\" dimColor>• Use ↑/↓ arrows to navigate</Text>\n          <Text color=\"gray\" dimColor>• Press Enter to select provider</Text>\n          <Text color=\"gray\" dimColor>• Press Esc to cancel</Text>\n        </Box>\n      </Box>\n    );\n  }\n\n  // Model selection stage\n  const selectedProvider = availableProviders[selectedProviderIndex];\n  \n  if (isLoadingModels) {\n    return (\n      <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n        <Text color=\"yellow\">🔍 Add Model from {selectedProvider.name}</Text>\n        <Box marginTop={2}>\n          <Text color=\"blue\">🔄 Loading models from {selectedProvider.name}...</Text>\n        </Box>\n        <Box marginTop={1}>\n          <Text color=\"gray\" dimColor>Press Esc to go back</Text>\n        </Box>\n      </Box>\n    );\n  }\n  \n  return (\n    <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n      <Text color=\"yellow\">🔍 Add Model from {selectedProvider.name}</Text>\n      <Box marginBottom={1}>\n        <Text color=\"gray\">Search: </Text>\n        <Text>{currentSearchQuery || \"\"}█</Text>\n      </Box>\n      \n      <Box flexDirection=\"column\" marginBottom={1}>\n        {filteredModels.length === 0 ? (\n          <Box borderStyle=\"round\" borderColor=\"gray\" paddingX={1}>\n            <Text color=\"gray\">\n              {allModels.length === 0 \n                ? \"No models available\" \n                : `No models found matching \"${currentSearchQuery}\"`\n              }\n            </Text>\n          </Box>\n        ) : (\n          filteredModels.slice(0, 10).map((model, index) => {\n            const isSelected = index === selectedModelIndex;\n            \n            return (\n              <Box \n                key={model}\n                borderStyle=\"round\" \n                borderColor={isSelected ? \"blue\" : \"gray\"} \n                paddingX={1} \n                marginBottom={1}\n              >\n                <Text color={isSelected ? \"blue\" : \"white\"}>{model}</Text>\n              </Box>\n            );\n          })\n        )}\n        {filteredModels.length > 10 && (\n          <Box paddingX={1}>\n            <Text color=\"gray\" dimColor>... and {filteredModels.length - 10} more</Text>\n          </Box>\n        )}\n      </Box>\n\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"gray\" dimColor>• Type to search models ({allModels.length} total)</Text>\n        <Text color=\"gray\" dimColor>• Use ↑/↓ arrows to navigate</Text>\n        <Text color=\"gray\" dimColor>• Press Enter to add selected model</Text>\n        <Text color=\"gray\" dimColor>• Press Esc to go back</Text>\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/add-model.tsx",
      "embedding": [
        8.19,
        0.1,
        0,
        0.6,
        0.1,
        0.05161945310224489,
        0.048477951023603263,
        0.016320953609775323,
        0.03225705657410867,
        0.08171898920127436,
        0.08910968786768368,
        0.04553253956793932,
        0.09917450460735666,
        0.0729044819166793,
        0.03764130059227532,
        0.09373979815409907,
        0.08860251221176944,
        0.00025789800617418427,
        0.032315822725923204,
        0.01656702125802566,
        0.0030750691447515854,
        0.04003299827637239,
        0.0791146000461566,
        0.015108639483743936,
        0.08562960881160692,
        0.08451980528283926,
        0.06889237999959104,
        0.06119478888194927,
        0.08198158727804467,
        0.03061860814159345,
        0.014495993986157953,
        0.04920385421247808,
        0.024817960308196853,
        0.07376685136286547,
        0.05495557859259512,
        0.037187736448530816,
        0.01669864622583426,
        0.06186951305393379,
        0.06309912304089683,
        0.0314204506353711,
        0.06580117165942499,
        0.07039698717051324,
        0.032615236157037035,
        0.027474696985931468,
        0.0527776190180166,
        0.09176466668195837,
        0.08124162713284516,
        0.09654090191279327,
        0.09082165734716133,
        0.09859853851602066,
        0.057748419383894946,
        0.023059825073826513,
        0.0021312198446357014,
        0.006216313763656467,
        0.029153206955475464,
        0.045327415375834484,
        0.05758860920418907,
        0.045233387717024356,
        0.08829046500160886,
        0.013424822109745506,
        0.0601665777326573,
        0.0530161529721494,
        0.02441771194499185,
        0.01577199182261746,
        0.03091004312792526,
        0.08979027879498115,
        0.04052638771296089,
        0.04490548300503458,
        0.07155674260092831,
        0.04153581483090479,
        0.08683360829903444,
        0.05238846773331362,
        0.02954712006942678,
        0.062311295524247724,
        0.048122795627932584,
        0.0013236273004767708,
        0.08410399775546856,
        0.029840297637815285,
        0.04713708029626828,
        0.04433664406234216,
        0.007239199971806398,
        0.016679743385466617,
        0.08869120903396138,
        0.05079826469097194,
        0.06645307294549105,
        0.07625737093287267,
        0.04103305340648893,
        0.06915443070360175,
        0.04829736517970486,
        0.07011926738416377,
        0.04009648181976277,
        0.07947887323458723,
        0.0688477887573125,
        0.053363739869945685,
        0.09494054985786499,
        0.03806307879458263,
        0.0806068820951555,
        0.00321343723082963,
        0.014494382006541429,
        0.04580988103536798
      ]
    },
    {
      "content": "import React, { useState } from \"react\";\nimport { Box, Text, useInput } from \"ink\";\n\ninterface AddPromptProps {\n  onClose: () => void;\n  onAddPrompt: (name: string, content: string) => void;\n}\n\nexport default function AddPrompt({ onClose, onAddPrompt }: AddPromptProps) {\n  const [stage, setStage] = useState<'name' | 'content'>('name');\n  const [promptName, setPromptName] = useState(\"\");\n  const [promptContent, setPromptContent] = useState(\"\");\n  const [currentLine, setCurrentLine] = useState(\"\");\n\n  useInput((inputChar, key) => {\n    if (key.ctrl && inputChar === \"c\") {\n      onClose();\n      return;\n    }\n\n    if (key.escape) {\n      if (stage === 'content') {\n        setStage('name');\n        setPromptContent(\"\");\n        setCurrentLine(\"\");\n      } else {\n        onClose();\n      }\n      return;\n    }\n\n    if (stage === 'name') {\n      if (key.return) {\n        if (promptName.trim()) {\n          setStage('content');\n        }\n        return;\n      }\n      \n      if (key.backspace || key.delete) {\n        setPromptName(prev => prev.slice(0, -1));\n        return;\n      }\n      \n      if (inputChar && !key.ctrl && !key.meta) {\n        setPromptName(prev => prev + inputChar);\n        return;\n      }\n    } else if (stage === 'content') {\n      if (key.ctrl && inputChar === \"s\") {\n        // Save the prompt\n        if (promptName.trim() && (promptContent.trim() || currentLine.trim())) {\n          const finalContent = promptContent + (currentLine ? (promptContent ? '\\n' : '') + currentLine : '');\n          onAddPrompt(promptName.trim(), finalContent.trim());\n        }\n        return;\n      }\n\n      if (key.return) {\n        setPromptContent(prev => prev + (prev ? '\\n' : '') + currentLine);\n        setCurrentLine(\"\");\n        return;\n      }\n      \n      if (key.backspace || key.delete) {\n        if (currentLine) {\n          setCurrentLine(prev => prev.slice(0, -1));\n        } else if (promptContent) {\n          const lines = promptContent.split('\\n');\n          const lastLine = lines.pop() || '';\n          setPromptContent(lines.join('\\n'));\n          setCurrentLine(lastLine);\n        }\n        return;\n      }\n      \n      if (inputChar && !key.ctrl && !key.meta) {\n        setCurrentLine(prev => prev + inputChar);\n        return;\n      }\n    }\n  });\n\n  if (stage === 'name') {\n    return (\n      <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n        <Text color=\"yellow\">➕ Add Custom Prompt</Text>\n        <Box marginBottom={1}>\n          <Text color=\"gray\">Enter prompt name:</Text>\n        </Box>\n        \n        <Box borderStyle=\"round\" borderColor=\"blue\" paddingX={1} marginBottom={1}>\n          <Text>{promptName}█</Text>\n        </Box>\n\n        <Box flexDirection=\"column\" marginTop={1}>\n          <Text color=\"gray\" dimColor>• Type the name for your custom prompt</Text>\n          <Text color=\"gray\" dimColor>• Press Enter to continue to content</Text>\n          <Text color=\"gray\" dimColor>• Press Esc to cancel</Text>\n        </Box>\n      </Box>\n    );\n  }\n\n  // Content stage\n  const displayContent = promptContent + (promptContent && currentLine ? '\\n' : '') + currentLine;\n  const lines = displayContent.split('\\n');\n  const displayLines = lines.slice(-8); // Show last 8 lines\n  const hasMoreLines = lines.length > 8;\n\n  return (\n    <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n      <Text color=\"yellow\">➕ Add Custom Prompt: {promptName}</Text>\n      <Box marginBottom={1}>\n        <Text color=\"gray\">Enter prompt content (markdown supported):</Text>\n      </Box>\n      \n      <Box flexDirection=\"column\" borderStyle=\"round\" borderColor=\"blue\" paddingX={1} marginBottom={1} minHeight={10}>\n        {hasMoreLines && (\n          <Text color=\"gray\" dimColor>... ({lines.length - 8} more lines above)</Text>\n        )}\n        {displayLines.map((line, index) => (\n          <Text key={index}>{line}{index === displayLines.length - 1 ? '█' : ''}</Text>\n        ))}\n        {displayLines.length === 0 && <Text>█</Text>}\n      </Box>\n\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"gray\" dimColor>• Type your prompt content (multi-line supported)</Text>\n        <Text color=\"gray\" dimColor>• Press Enter for new line</Text>\n        <Text color=\"green\" dimColor>• Press Ctrl+S to save prompt</Text>\n        <Text color=\"gray\" dimColor>• Press Esc to go back</Text>\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/add-prompt.tsx",
      "embedding": [
        4.45,
        0.1,
        0,
        0.2,
        0.1,
        0.07824857943017666,
        0.058452906120310934,
        0.06153672637807705,
        0.03925837784397375,
        0.09223158457688493,
        0.013914759970034975,
        0.09879116059244725,
        0.00927569609019594,
        0.027060826780471104,
        0.08690347133694497,
        0.09096923414004937,
        0.02387243562944165,
        0.05598078196406441,
        0.038681731435046655,
        0.001648007726472378,
        0.09721236973479593,
        0.03680864138869416,
        0.0889193090271047,
        0.08897071324086563,
        0.03587956855698773,
        0.05101808582016531,
        0.06498054857819734,
        0.023045016743034087,
        0.06168231970204986,
        0.002839000538036496,
        0.006661230867300816,
        0.06952954119623926,
        0.05898232711726364,
        0.0073185707318934035,
        0.02753702114497375,
        0.03508169711820665,
        0.04916967611904154,
        0.06107115411568296,
        0.025170452981458938,
        0.06829685507969632,
        0.07181681810781866,
        0.037556081691960265,
        0.09731031874548533,
        0.039997911423553446,
        0.023392661130241733,
        0.074868248504586,
        0.014410598607964975,
        0.04912080648100875,
        0.09246927154661885,
        0.0011437604165146942,
        0.05966559010180215,
        0.006359202139037601,
        0.03262399265037189,
        0.07275992601647989,
        0.09115452769273741,
        0.040372731734984894,
        0.0691702752873518,
        0.0912532001650301,
        0.05189180208240016,
        0.03939784809909761,
        0.05081881741442049,
        0.0073852056704456605,
        0.017010792877965832,
        0.057102946111901934,
        0.06228720556831137,
        0.030354014082467674,
        0.0949075594643906,
        0.09013332547616097,
        0.03393503737551697,
        0.06126892774973405,
        0.03820168579934537,
        0.005882155248488963,
        0.04374306207727572,
        0.08559140841980972,
        0.027724623033937825,
        0.00484662733737431,
        0.027154470191819914,
        0.07110081910781797,
        0.07985992729485109,
        0.018105761156100277,
        0.05454413190212868,
        0.028940378871231666,
        0.026608580614632726,
        0.020174530040456575,
        0.099785608462278,
        0.042882080425941986,
        0.05690342202292348,
        0.0979921582488397,
        0.045685388125329275,
        0.005492550141862451,
        0.016528645934149377,
        0.042019955059651504,
        0.03133610570699467,
        0.019365823745072966,
        0.04409806808977578,
        0.022268765813649605,
        0.0008423602117962892,
        0.022605109352369337,
        0.003645911190516671,
        0.0565514519953534
      ]
    },
    {
      "content": "import React, { useState } from \"react\";\nimport { Box, Text, useInput, useApp } from \"ink\";\nimport { GigaAgent } from \"../../agent/giga-agent\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as os from \"os\";\n\ninterface ApiKeyInputProps {\n  onApiKeySet: (agent: GigaAgent) => void;\n}\n\ninterface UserSettings {\n  apiKey?: string;\n  groqApiKey?: string;\n  anthropicApiKey?: string;\n  openRouterApiKey?: string;\n}\n\nexport default function ApiKeyInput({ onApiKeySet }: ApiKeyInputProps) {\n  const [input, setInput] = useState(\"\");\n  const [groqInput, setGroqInput] = useState(\"\");\n  const [anthropicInput, setAnthropicInput] = useState(\"\");\n  const [openRouterInput, setOpenRouterInput] = useState(\"\");\n  const [currentField, setCurrentField] = useState(\"grok\");\n  const [error, setError] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { exit } = useApp();\n\n  useInput((inputChar, key) => {\n    if (isSubmitting) return;\n\n    if (key.ctrl && inputChar === \"c\") {\n      exit();\n      return;\n    }\n\n    if (key.return) {\n      if (currentField === \"grok\") {\n        setCurrentField(\"groq\");\n      } else if (currentField === \"groq\") {\n        setCurrentField(\"anthropic\");\n      } else if (currentField === \"anthropic\") {\n        setCurrentField(\"openrouter\");\n      } else {\n        handleSubmit();\n      }\n      return;\n    }\n\n    if (key.backspace || key.delete) {\n      if (currentField === \"grok\") {\n        setInput((prev) => prev.slice(0, -1));\n      } else if (currentField === \"groq\") {\n        setGroqInput((prev) => prev.slice(0, -1));\n      } else if (currentField === \"anthropic\") {\n        setAnthropicInput((prev) => prev.slice(0, -1));\n      } else if (currentField === \"openrouter\") {\n        setOpenRouterInput((prev) => prev.slice(0, -1));\n      }\n      setError(\"\");\n      return;\n    }\n\n    if (inputChar && !key.ctrl && !key.meta) {\n      if (currentField === \"grok\") {\n        setInput((prev) => prev + inputChar);\n      } else if (currentField === \"groq\") {\n        setGroqInput((prev) => prev + inputChar);\n      } else if (currentField === \"anthropic\") {\n        setAnthropicInput((prev) => prev + inputChar);\n      } else if (currentField === \"openrouter\") {\n        setOpenRouterInput((prev) => prev + inputChar);\n      }\n      setError(\"\");\n    }\n  });\n\n\n  const handleSubmit = async () => {\n    // Check for API keys in input fields or environment variables\n    const xaiKey = input.trim() || process.env.XAI_API_KEY;\n    const groqKey = groqInput.trim() || process.env.GROQ_API_KEY;\n    const anthropicKey = anthropicInput.trim() || process.env.ANTHROPIC_API_KEY || process.env.CLAUDE_API_KEY;\n    const openRouterKey = openRouterInput.trim() || process.env.OPENROUTER_API_KEY;\n    \n    if (!xaiKey && !groqKey && !anthropicKey && !openRouterKey) {\n      setError(\"At least one API key is required (via input or environment variable)\");\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const apiKey = xaiKey;\n      const groqApiKey = groqKey;\n      const agent = new GigaAgent(apiKey, groqApiKey);\n      \n      // Set environment variable for current process\n      process.env.XAI_API_KEY = apiKey;\n      \n      // Save to .grok/user-settings.json\n      try {\n        const homeDir = os.homedir();\n        const gigaDir = path.join(homeDir, '.giga');\n        const settingsFile = path.join(gigaDir, 'user-settings.json');\n        \n        // Create .giga directory if it doesn't exist\n        if (!fs.existsSync(gigaDir)) {\n          fs.mkdirSync(gigaDir, { mode: 0o700 });\n        }\n        \n        // Load existing settings or create new\n        let settings: UserSettings = {};\n        if (fs.existsSync(settingsFile)) {\n          try {\n            settings = JSON.parse(fs.readFileSync(settingsFile, 'utf8'));\n          } catch {\n            settings = {};\n          }\n        }\n        \n        // Update API key\n        settings.apiKey = apiKey;\n        \n        // Save settings\n        fs.writeFileSync(settingsFile, JSON.stringify(settings, null, 2), { mode: 0o600 });\n        \n        console.log(`\\n✅ API key saved to ~/.giga/user-settings.json`);\n      } catch (error) {\n        console.log('\\n⚠️ Could not save API key to settings file');\n        console.log('API key set for current session only');\n      }\n      \n      onApiKeySet(agent);\n    } catch (error: any) {\n      setError(\"Invalid API key format\");\n      setIsSubmitting(false);\n    }\n  };\n\n  const displayText = input.length > 0 ? \n    (isSubmitting ? \"*\".repeat(input.length) : \"*\".repeat(input.length) + \"█\") : \n    (isSubmitting ? \" \" : \"█\");\n\n  return (\n    <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n      <Text color=\"yellow\">🔑 API Keys Required</Text>\n      <Box marginBottom={1}>\n        <Text color=\"gray\">Please enter your API keys to continue:</Text>\n      </Box>\n      \n      <Box flexDirection=\"column\" marginBottom={1}>\n        <Box borderStyle=\"round\" borderColor={currentField === \"grok\" ? \"blue\" : \"gray\"} paddingX={1} marginBottom={1}>\n          <Text color=\"gray\">xAI API Key ❯ </Text>\n          <Text>{input.length > 0 ? (isSubmitting ? \"*\".repeat(input.length) : \"*\".repeat(input.length) + \"█\") : (isSubmitting ? \"...\" : \"█\")}</Text>\n        </Box>\n        <Box borderStyle=\"round\" borderColor={currentField === \"groq\" ? \"blue\" : \"gray\"} paddingX={1} marginBottom={1}>\n          <Text color=\"gray\">Groq API Key ❯ </Text>\n          <Text>{groqInput.length > 0 ? (isSubmitting ? \"*\".repeat(groqInput.length) : \"*\".repeat(groqInput.length) + \"█\") : (isSubmitting ? \"...\" : \"█\")}</Text>\n        </Box>\n        <Box borderStyle=\"round\" borderColor={currentField === \"anthropic\" ? \"blue\" : \"gray\"} paddingX={1} marginBottom={1}>\n          <Text color=\"gray\">Anthropic API Key ❯ </Text>\n          <Text>{anthropicInput.length > 0 ? (isSubmitting ? \"*\".repeat(anthropicInput.length) : \"*\".repeat(anthropicInput.length) + \"█\") : (isSubmitting ? \"...\" : \"█\")}</Text>\n        </Box>\n        <Box borderStyle=\"round\" borderColor={currentField === \"openrouter\" ? \"blue\" : \"gray\"} paddingX={1} marginBottom={1}>\n          <Text color=\"gray\">OpenRouter API Key ❯ </Text>\n          <Text>{openRouterInput.length > 0 ? (isSubmitting ? \"*\".repeat(openRouterInput.length) : \"*\".repeat(openRouterInput.length) + \"█\") : (isSubmitting ? \"...\" : \"█\")}</Text>\n        </Box>\n      </Box>\n\n      {error ? (\n        <Box marginBottom={1}>\n          <Text color=\"red\">❌ {error}</Text>\n        </Box>\n      ) : null}\n\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"gray\" dimColor>• Press Enter to move to next field or submit</Text>\n        <Text color=\"gray\" dimColor>• Press Ctrl+C to exit</Text>\n        <Text color=\"gray\" dimColor>Note: API keys will be saved to ~/.giga/user-settings.json</Text>\n      </Box>\n\n      {isSubmitting ? (\n        <Box marginTop={1}>\n          <Text color=\"yellow\">🔄 Validating API keys...</Text>\n        </Box>\n      ) : null}\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/api-key-input.tsx",
      "embedding": [
        7.34,
        0.1,
        0,
        0.6,
        0.1,
        0.05502684215585268,
        0.014852836454168418,
        0.02553616666785169,
        0.03656649863234975,
        0.07327594344192832,
        0.04970668075649281,
        0.06645138779207181,
        0.027176482262503368,
        0.09482833283494761,
        0.00014471668080195954,
        0.013397882171639508,
        0.08646161552857322,
        0.08070733777844305,
        0.03653041489010095,
        0.02111706310383864,
        0.07068970052002017,
        0.007268387842370683,
        0.08868713702068558,
        0.0803681520830673,
        0.07226893416194478,
        0.04408856650732188,
        0.027790708047409952,
        0.0030179403840098432,
        0.08350511292682378,
        0.005096887025887032,
        0.059369007461257034,
        0.09197507433216047,
        0.06114266853555033,
        0.029213596650127086,
        0.09828921769833471,
        0.007874675351076865,
        0.016532942927208628,
        0.0034816648145533646,
        0.07785066244953032,
        0.04724845547777019,
        0.02082379511407484,
        0.0620168188341005,
        0.05779983068271486,
        0.05960684519433404,
        0.04736059244578013,
        0.020824931045068718,
        0.05652576520905139,
        0.032231926520895474,
        0.06762346546946497,
        0.01889590992392789,
        0.04149832685910724,
        0.04273507851270978,
        0.06122297774447745,
        0.034336586586756014,
        0.08865044311029746,
        0.0017255627313039646,
        0.0008719193109198664,
        0.07327409674278228,
        0.08358076123270348,
        0.02159287152548478,
        0.04418926926736482,
        0.06553423263182721,
        0.05294282815076841,
        0.06416365523150803,
        0.08096737771047752,
        0.03720090632546447,
        0.07630414157972414,
        0.002817363820849994,
        0.040855272717868,
        0.0061102911838683775,
        0.08100652286425808,
        0.0904244083781958,
        0.046990362570690204,
        0.08093705549940167,
        0.014217824633830856,
        0.04169227489840434,
        0.006912820014439037,
        0.058494900852039594,
        0.03315434236666368,
        0.06096369462583943,
        0.007599781245129789,
        0.05957547537520368,
        0.012331075426296979,
        0.07169267165498419,
        0.088472012169332,
        0.04830351091761458,
        0.08008797563726133,
        0.03816703367542277,
        0.08117106424165535,
        0.09772662317103084,
        0.009061052036123052,
        0.008340179560395867,
        0.031253735088445554,
        0.094257637303814,
        0.03254891569336898,
        0.05594835491609715,
        0.032331168053946216,
        0.09344421478681468,
        0.0514274149354965,
        0.058161162978768846
      ]
    },
    {
      "content": "import React from \"react\";\nimport { Box, Text } from \"ink\";\nimport { ChatEntry } from \"../../agent/giga-agent\";\nimport { DiffRenderer } from \"./diff-renderer\";\nimport { MarkdownRenderer } from \"../utils/markdown-renderer\";\n\ninterface ChatHistoryProps {\n  entries: ChatEntry[];\n}\n\nexport function ChatHistory({ entries }: ChatHistoryProps) {\n  const renderDiff = (diffContent: string, filename?: string) => {\n    return (\n      <DiffRenderer\n        diffContent={diffContent}\n        filename={filename}\n        terminalWidth={80}\n      />\n    );\n  };\n\n  const renderFileContent = (content: string) => {\n    const lines = content.split(\"\\n\");\n\n    // Calculate minimum indentation like DiffRenderer does\n    let baseIndentation = Infinity;\n    for (const line of lines) {\n      if (line.trim() === \"\") continue;\n      const firstCharIndex = line.search(/\\S/);\n      const currentIndent = firstCharIndex === -1 ? 0 : firstCharIndex;\n      baseIndentation = Math.min(baseIndentation, currentIndent);\n    }\n    if (!isFinite(baseIndentation)) {\n      baseIndentation = 0;\n    }\n\n    return lines.map((line, index) => {\n      const displayContent = line.substring(baseIndentation);\n      return (\n        <Text key={index} color=\"gray\">\n          {displayContent}\n        </Text>\n      );\n    });\n  };\n\n  const renderChatEntry = (entry: ChatEntry, index: number) => {\n    switch (entry.type) {\n      case \"user\":\n        return (\n          <Box key={index} flexDirection=\"column\" marginTop={1}>\n            <Box>\n              <Text color=\"gray\">\n                {\">\"} {entry.content}\n              </Text>\n            </Box>\n          </Box>\n        );\n\n      case \"assistant\":\n        return (\n          <Box key={index} flexDirection=\"column\" marginTop={1}>\n            <Box flexDirection=\"row\" alignItems=\"flex-start\">\n              <Text color=\"white\">⏺ </Text>\n              <Box flexDirection=\"column\" flexGrow={1}>\n                {entry.toolCalls ? (\n                  // If there are tool calls, just show plain text\n                  <Text color=\"white\">{entry.content.trim()}</Text>\n                ) : (\n                  // If no tool calls, render as markdown\n                  <MarkdownRenderer content={entry.content.trim()} />\n                )}\n                {entry.isStreaming && <Text color=\"cyan\">█</Text>}\n                {entry.metrics && !entry.isStreaming && (\n                  <Box marginTop={1}>\n                    <Text color=\"blue\">prefill - {entry.metrics.prefillTimeMs}ms</Text>\n                    <Text color=\"white\"> | </Text>\n                    <Text color=\"yellow\">decode - {entry.metrics.tokensPerSecond} toks/sec ({entry.metrics.outputTokens} out / {entry.metrics.decodeTimeMs}ms)</Text>\n                  </Box>\n                )}\n              </Box>\n            </Box>\n          </Box>\n        );\n\n      case \"tool_result\":\n        const getToolActionName = (toolName: string) => {\n          switch (toolName) {\n            case \"view_file\":\n              return \"Read\";\n            case \"str_replace_editor\":\n              return \"Update\";\n            case \"create_file\":\n              return \"Create\";\n            case \"bash\":\n              return \"Bash\";\n            case \"create_todo_list\":\n              return \"Created Todo\";\n            case \"update_todo_list\":\n              return \"Updated Todo\";\n            case \"perplexity_search\":\n              return \"Search\";\n            default:\n              return \"Tool\";\n          }\n        };\n\n        const getToolFilePath = (toolCall: any) => {\n          if (toolCall?.function?.arguments) {\n            try {\n              const args = JSON.parse(toolCall.function.arguments);\n              // Handle todo tools and search tools specially - they don't have file paths\n              if (\n                toolCall.function.name === \"create_todo_list\" ||\n                toolCall.function.name === \"update_todo_list\" ||\n                toolCall.function.name === \"perplexity_search\"\n              ) {\n                if (toolCall.function.name === \"perplexity_search\") {\n                  return `\"${args.query || 'unknown query'}\"`;\n                }\n                return \"\";\n              }\n              return args.path || args.file_path || args.command || \"unknown\";\n            } catch {\n              return \"unknown\";\n            }\n          }\n          return \"unknown\";\n        };\n\n        const toolName = entry.toolCall?.function?.name || \"unknown\";\n        const actionName = getToolActionName(toolName);\n        const filePath = getToolFilePath(entry.toolCall);\n\n\n        const shouldShowDiff =\n          toolName === \"str_replace_editor\" || toolName === \"create_file\";\n        const shouldShowFileContent = toolName === \"view_file\";\n        const shouldShowSearchResult = toolName === \"perplexity_search\";\n\n        return (\n          <Box key={index} flexDirection=\"column\" marginTop={1}>\n            <Box>\n              <Text color=\"magenta\">⏺</Text>\n              <Text color=\"white\">\n                {\" \"}\n                {filePath ? `${actionName}(${filePath})` : actionName}\n              </Text>\n            </Box>\n            <Box marginLeft={2} flexDirection=\"column\">\n              {shouldShowFileContent ? (\n                <Box flexDirection=\"column\">\n                  <Text color=\"gray\">⎿ File contents:</Text>\n                  <Box marginLeft={2} flexDirection=\"column\">\n                    {renderFileContent(entry.content)}\n                  </Box>\n                </Box>\n              ) : shouldShowSearchResult ? (\n                <Box flexDirection=\"column\">\n                  <Text color=\"gray\">⎿ {entry.toolResult?.metadata?.userSummary || 'Search completed'}</Text>\n                </Box>\n              ) : shouldShowDiff ? (\n                // For diff results, show only the summary line, not the raw content\n                <Text color=\"gray\">⎿ {entry.content.split('\\n')[0]}</Text>\n              ) : (\n                <Text color=\"gray\">⎿ {entry.content}</Text>\n              )}\n            </Box>\n            {shouldShowDiff && (\n              <Box marginLeft={4} flexDirection=\"column\">\n                {renderDiff(entry.content, filePath)}\n              </Box>\n            )}\n          </Box>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Box flexDirection=\"column\">{entries.slice(-20).map(renderChatEntry)}</Box>\n  );\n}\n",
      "filePath": "../src/ui/components/chat-history.tsx",
      "embedding": [
        5.13,
        0.8,
        0,
        0.5,
        0.1,
        0.0679151264310061,
        0.03931017357879834,
        0.05245361696996721,
        0.08410526763857085,
        0.08124056602805715,
        0.03797499507230512,
        0.022806401023384805,
        0.09548047404879663,
        0.08999630401084396,
        0.05382375250411046,
        0.0871137462863771,
        0.0920783369546232,
        0.010399534467025351,
        0.04557886745495574,
        0.028370274909212945,
        0.02612909669656437,
        0.025465754207551386,
        0.01153334520435413,
        0.02954613077821964,
        0.060738203550940666,
        0.057163766144465084,
        0.04508425566633985,
        0.026465125521086253,
        0.08610209136995776,
        0.09033997622000922,
        0.02218052166987157,
        0.07103108662914785,
        0.07723399739015867,
        0.0512960070394212,
        0.0006486329833014338,
        0.09615103550559424,
        0.015285179795623261,
        0.05211615955603393,
        0.01358074548470899,
        0.011689266295139333,
        0.08094214127027614,
        0.016702115168138378,
        0.09760052096913857,
        0.03160025496026541,
        0.05329373037969984,
        0.009061656134479346,
        0.06103677764138982,
        0.010224790189951094,
        0.005795413662358595,
        0.08278019163120104,
        0.01380037061910413,
        0.008466218648202017,
        0.07855560779034271,
        0.09574454024788256,
        0.07726505965936524,
        0.040262345586419696,
        0.023030145101689284,
        0.001212589395775765,
        0.0357121275046607,
        0.015140110194072532,
        0.08348229714188143,
        0.04603030116465957,
        0.0409118626665431,
        0.059772914853486174,
        0.08018024251753963,
        0.0010345026345929599,
        0.08569625796108293,
        0.06938092002402027,
        0.08448791143988975,
        0.021172396834160046,
        0.07960493740172768,
        0.045738596139778424,
        0.05359592698116861,
        0.03614452633269995,
        0.08347665071490118,
        0.03995371980067417,
        0.002692183345666388,
        0.03743344840915669,
        0.020310907569162352,
        0.07885615406367774,
        0.08173485002996793,
        0.014831355078245512,
        0.024654123738407797,
        0.09415702726109974,
        0.024279081085116574,
        0.07418065605640527,
        0.08555188592354773,
        0.08785638241351713,
        0.08513986925237994,
        0.093532190771215,
        0.07120054367731261,
        0.019704609144000643,
        0.09659734310083305,
        0.09890549443830628,
        0.08585645936879743,
        0.0061254878219435096,
        0.014546465191554692,
        0.05300163837318881,
        0.09796404057923054,
        0.01473477300573608
      ]
    },
    {
      "content": "import React from \"react\";\nimport { Box, Text } from \"ink\";\nimport { NeonText } from \"./neon-text\";\n\ninterface ChatInputProps {\n  input: string;\n  isProcessing: boolean;\n  isStreaming: boolean;\n  currentModel?: string;\n}\n\nexport function ChatInput({ input, isProcessing, isStreaming, currentModel }: ChatInputProps) {\n  return (\n    <Box flexDirection=\"column\">\n      <Box borderStyle=\"round\" borderColor=\"gray\" paddingX={1} marginTop={1}>\n        <Text color=\"gray\">❯ </Text>\n        <Text>\n          {input}\n          {!isProcessing && !isStreaming && <Text color=\"white\">█</Text>}\n        </Text>\n      </Box>\n      {currentModel && (\n        <Box justifyContent=\"flex-end\" marginTop={1}>\n          <NeonText text={currentModel} />\n        </Box>\n      )}\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/chat-input.tsx",
      "embedding": [
        0.75,
        0.1,
        0,
        0.3,
        0.1,
        0.00604116693256036,
        0.04949769175026181,
        0.0943289935928355,
        0.09649621810717157,
        0.002273035220624531,
        0.006957458104023107,
        0.08492840293123174,
        0.0057024809641516355,
        0.057530394415691,
        0.014471622967245946,
        0.025904058856236558,
        0.043089402144554756,
        0.022343839200810414,
        0.0783524110872255,
        0.07152119012281692,
        0.050336301295001565,
        0.04036959785094046,
        0.008369123326020666,
        0.0037523327248540797,
        0.014018002109731554,
        0.0876501654324856,
        0.0502314360389296,
        0.02915789085984607,
        0.04421828663940252,
        0.045073953688137464,
        0.08348380140500886,
        0.01615892125007682,
        0.09865907432891902,
        0.036522788214488476,
        0.02615422471255532,
        0.0267345182813718,
        0.04540298519416024,
        0.08240676982058444,
        0.04424928238335316,
        0.04240334998976905,
        0.02206292327926357,
        0.03666737122260009,
        0.04278854169763843,
        0.05025874008392415,
        0.07732057761474037,
        0.0270442485989148,
        0.07323129455107016,
        0.03933325535370663,
        0.04572962125978386,
        0.0882607571931127,
        0.019679268007626895,
        0.008483800577966527,
        0.09063316359310725,
        0.015085147096560026,
        0.0015450454054210306,
        0.0426441107064534,
        0.011450844423946616,
        0.04970635246807285,
        0.021976618197603694,
        0.056722734416140036,
        0.05989786610619624,
        0.05538111355380182,
        0.007707178926428815,
        0.01956605522044256,
        0.0641815128681362,
        0.07904682587966073,
        0.06279077300267139,
        0.03391404432249062,
        0.047845870818737424,
        0.0018746514050075325,
        0.020664301996002988,
        0.0761839741458809,
        0.09689716174900602,
        0.08411065248578183,
        0.008379688588301916,
        0.0030168506127731033,
        0.0315579087479663,
        0.034029841442897626,
        0.027834668782770657,
        0.05324313156617503,
        0.08927262032029991,
        0.0868820631265282,
        0.09073829439740977,
        0.06756344562586696,
        0.01167618452316669,
        0.09547847832998678,
        0.0170154781095187,
        0.025984103856737162,
        0.03676167983060471,
        0.06003935957191403,
        0.030258089809437297,
        0.07845720183673303,
        0.08706186242868164,
        0.017998900644786764,
        0.027951106032821717,
        0.01803170776488322,
        0.06372420538777183,
        0.09977704819296869,
        0.09197495735579331,
        0.012373997750395894
      ]
    },
    {
      "content": "import React, { useState, useEffect, useRef } from \"react\";\nimport { Box, Text } from \"ink\";\nimport { GigaAgent, ChatEntry } from \"../../agent/giga-agent\";\nimport { useInputHandler } from \"../../hooks/use-input-handler\";\nimport { LoadingSpinner } from \"./loading-spinner\";\nimport { CommandSuggestions } from \"./command-suggestions\";\nimport { ModelSelection } from \"./model-selection\";\nimport { RouteSelection } from \"./route-selection\";\nimport { TemperatureSelector } from \"./temperature-selector\";\nimport { ExpertModels } from \"./expert-models\";\nimport ProviderSettings from \"./provider-settings\";\nimport AddModel from \"./add-model\";\nimport DeleteModel from \"./delete-model\";\nimport AddPrompt from \"./add-prompt\";\nimport DeletePrompt from \"./delete-prompt\";\nimport PromptsList from \"./prompts-list\";\nimport AddMcpServer from \"./add-mcp-server\";\nimport DeleteMcpServer from \"./delete-mcp-server\";\nimport { McpServerSelection } from \"./mcp-server-selection\";\nimport { ChatHistory } from \"./chat-history\";\nimport { ConversationHistory } from \"./conversation-history\";\nimport { ChatInput } from \"./chat-input\";\nimport { FileFinder } from \"./file-finder\";\nimport ConfirmationDialog from \"./confirmation-dialog\";\nimport { ConfirmationService, ConfirmationOptions } from \"../../utils/confirmation-service\";\nimport ApiKeyInput from \"./api-key-input\";\nimport { addModel, deleteModel } from \"../../utils/added-models\";\nimport { addPrompt, deletePrompt } from \"../../utils/prompts\";\nimport { addMcpServer, deleteMcpServer } from \"../../utils/added-mcp-servers\";\nimport { ConversationManager } from \"../../utils/conversation-manager\";\nimport { loadApiKeys } from \"../../utils/api-keys\";\nimport { sessionManager } from \"../../utils/session-manager\";\nimport { modeManager } from \"../../utils/mode-manager\";\nimport { AgentMode } from \"../../types\";\nimport cfonts from \"cfonts\";\n\n// Memoized ChatHistory component to prevent unnecessary re-renders\nconst ChatHistoryMemo = React.memo(ChatHistory);\n\ninterface ChatInterfaceProps {\n  agent?: GigaAgent;\n}\n\n// Component showing session info and API key status\nfunction SessionStatus({ currentModel, currentMode }: { currentModel?: string, currentMode?: AgentMode }) {\n  const apiKeys = loadApiKeys();\n  const sessionInfo = sessionManager.getSessionInfo();\n  const displayModel = currentModel || sessionInfo?.currentModel || '';\n  const noModelConfigured = !displayModel || displayModel.trim() === '';\n  const providers = [\n    { name: \"xAI\", key: apiKeys.xaiApiKey },\n    { name: \"Groq\", key: apiKeys.groqApiKey },\n    { name: \"Anthropic\", key: apiKeys.anthropicApiKey },\n    { name: \"OpenRouter\", key: apiKeys.openRouterApiKey },\n    { name: \"Google\", key: apiKeys.googleApiKey },\n    { name: \"Cerebras\", key: apiKeys.cerebrasApiKey },\n    { name: \"Perplexity\", key: apiKeys.perplexityApiKey },\n    { name: \"OpenAI\", key: apiKeys.openaiApiKey },\n  ];\n\n  return (\n    <Box flexDirection=\"column\" marginBottom={1}>\n      <Box flexDirection=\"row\" marginBottom={1}>\n        <Text bold color=\"green\">Session: </Text>\n        <Text color=\"gray\">{(sessionInfo?.instanceId?.slice(0, 8)) || 'unknown'}</Text>\n        <Text color=\"gray\"> | Model: </Text>\n        {noModelConfigured ? (\n          <Text bold color=\"red\">Not configured</Text>\n        ) : (\n          <Text bold color=\"cyan\">{displayModel || 'Unknown'}</Text>\n        )}\n      </Box>\n      \n      <Box marginBottom={1}>\n        <Text bold color={currentMode === AgentMode.GIGA ? 'yellow' : currentMode === AgentMode.CHILL ? 'green' : 'blue'}>\n          {modeManager.getModeDisplayName()}\n        </Text>\n        <Text dimColor> - {modeManager.getModeDescription()}</Text>\n      </Box>\n      \n      {noModelConfigured && (\n        <Box flexDirection=\"column\" marginBottom={1}>\n          <Text bold color=\"yellow\">⚠️  First-time setup required:</Text>\n          <Text color=\"gray\">1. Configure API keys: /providers</Text>\n          <Text color=\"gray\">2. Add models: /add-model</Text>\n          <Text color=\"gray\">3. Select a model: /models</Text>\n        </Box>\n      )}\n      \n      <Text bold color=\"cyan\">API Key Status:</Text>\n      <Box flexDirection=\"row\">\n        {providers.map((provider, index) => (\n          <Box key={index} marginRight={2}>\n            <Text>\n              {provider.key ? \"✓\" : \"✗\"} {provider.name}\n            </Text>\n          </Box>\n        ))}\n      </Box>\n    </Box>\n  );\n}\n\n// Main chat component that handles input when agent is available\nfunction ChatInterfaceWithAgent({ agent }: { agent: GigaAgent }) {\n  const [chatHistory, setChatHistory] = useState<ChatEntry[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processingTime, setProcessingTime] = useState(0);\n  const [tokenCount, setTokenCount] = useState(0);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const [confirmationOptions, setConfirmationOptions] = useState<ConfirmationOptions | null>(null);\n  const [currentConversationId, setCurrentConversationId] = useState<string | null>(null);\n  const [currentMode, setCurrentMode] = useState<AgentMode>(modeManager.getCurrentMode());\n  const scrollRef = useRef<any>();\n  const processingStartTime = useRef<number>(0);\n  \n  const confirmationService = ConfirmationService.getInstance();\n  const conversationManager = ConversationManager.getInstance();\n\n  const {\n    input,\n    showCommandSuggestions,\n    selectedCommandIndex,\n    showModelSelection,\n    selectedModelIndex,\n    showProviderSettings,\n    selectedProviderIndex,\n    showAddModel,\n    showDeleteModel,\n    showPromptsList,\n    showAddPrompt,\n    showDeletePrompt,\n    showMcpServers,\n    showAddMcpServer,\n    showDeleteMcpServer,\n    selectedMcpServerIndex,\n    showConversationHistory,\n    showTemperatureSelector,\n    currentTemperature,\n    showExpertModels,\n    showRouteSelection,\n    routeViewMode,\n    selectedRouteModelIndex,\n    selectedRouteProviderIndex,\n    currentSelectedModel,\n    routeProviders,\n    isLoadingProviders,\n    showFileFinder,\n    selectedFileIndex,\n    filteredFiles,\n    fileQuery,\n    commandSuggestions,\n    availableModels,\n    mcpServers,\n    providerList,\n    closeProviderSettings,\n    closeAddModel,\n    closeDeleteModel,\n    closePromptsList,\n    closeAddPrompt,\n    closeDeletePrompt,\n    closeMcpServers,\n    closeAddMcpServer,\n    closeDeleteMcpServer,\n    closeConversationHistory,\n    closeTemperatureSelector,\n    closeExpertModels,\n    closeRouteSelection,\n    closeFileFinder,\n    refreshModels,\n    refreshMcpServers,\n    openRouterModels,\n  } = useInputHandler({\n    agent,\n    chatHistory,\n    setChatHistory,\n    setIsProcessing,\n    setIsStreaming,\n    setTokenCount,\n    setProcessingTime,\n    processingStartTime,\n    isProcessing,\n    isStreaming,\n    isConfirmationActive: !!confirmationOptions,\n    onModeChange: setCurrentMode,\n  });\n\n  useEffect(() => {\n    console.clear();\n    cfonts.say(\"GIGA\", {\n      font: \"3d\",\n      align: \"left\",\n      colors: [\"magenta\", \"gray\"],\n      space: true,\n      maxLength: \"0\",\n      gradient: [\"magenta\", \"cyan\"],\n      independentGradient: false,\n      transitionGradient: true,\n      env: \"node\",\n    });\n\n    console.log(\"Getting started:\");\n    console.log(\"1. First time? Configure API keys: /providers\");\n    console.log(\"2. Add models from your providers: /add-model\");\n    console.log(\"3. Select your preferred model: /models\");\n    console.log(\"4. Ask questions, edit files, or run commands!\");\n    console.log(\"\");\n    console.log(\"Need help? Type /help for more information.\");\n    console.log(\"\");\n\n    setChatHistory([]);\n  }, []);\n\n  useEffect(() => {\n    const handleConfirmationRequest = (options: ConfirmationOptions) => {\n      setConfirmationOptions(options);\n    };\n\n    confirmationService.on('confirmation-requested', handleConfirmationRequest);\n\n    return () => {\n      confirmationService.off('confirmation-requested', handleConfirmationRequest);\n    };\n  }, [confirmationService]);\n\n  useEffect(() => {\n    if (!isProcessing && !isStreaming) {\n      setProcessingTime(0);\n      return;\n    }\n\n    if (processingStartTime.current === 0) {\n      processingStartTime.current = Date.now();\n    }\n\n    const interval = setInterval(() => {\n      setProcessingTime(\n        Math.floor((Date.now() - processingStartTime.current) / 1000)\n      );\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isProcessing, isStreaming]);\n\n  const handleConfirmation = (dontAskAgain?: boolean) => {\n    confirmationService.confirmOperation(true, dontAskAgain);\n    setConfirmationOptions(null);\n  };\n\n  const handleRejection = (feedback?: string) => {\n    confirmationService.rejectOperation(feedback);\n    setConfirmationOptions(null);\n    \n    // Reset processing states when operation is cancelled\n    setIsProcessing(false);\n    setIsStreaming(false);\n    setTokenCount(0);\n    setProcessingTime(0);\n    processingStartTime.current = 0;\n  };\n\n  const handleAddModel = (providerName: string, modelName: string) => {\n    // Save the model to storage\n    addModel(modelName, providerName);\n    \n    const confirmEntry: ChatEntry = {\n      type: \"assistant\",\n      content: `✓ Added model: ${modelName} from ${providerName}`,\n      timestamp: new Date(),\n    };\n    setChatHistory((prev) => [...prev, confirmEntry]);\n    refreshModels(); // Refresh the available models list\n    closeAddModel();\n  };\n\n  const handleDeleteModel = (modelName: string, providerName: string) => {\n    // Delete the model from storage\n    const success = deleteModel(modelName, providerName);\n    \n    if (success) {\n      const confirmEntry: ChatEntry = {\n        type: \"assistant\",\n        content: `✓ Deleted model: ${modelName} from ${providerName}`,\n        timestamp: new Date(),\n      };\n      setChatHistory((prev) => [...prev, confirmEntry]);\n      refreshModels(); // Refresh the available models list\n    } else {\n      const errorEntry: ChatEntry = {\n        type: \"assistant\",\n        content: `❌ Failed to delete model: ${modelName}`,\n        timestamp: new Date(),\n      };\n      setChatHistory((prev) => [...prev, errorEntry]);\n    }\n    \n    closeDeleteModel();\n  };\n\n  const handleAddPrompt = (name: string, content: string) => {\n    // Add the prompt\n    addPrompt(name, content);\n\n    const confirmEntry: ChatEntry = {\n      type: \"assistant\",\n      content: `✓ Added custom prompt: ${name}`,\n      timestamp: new Date(),\n    };\n    setChatHistory((prev) => [...prev, confirmEntry]);\n    closeAddPrompt();\n  };\n\n  const handleDeletePrompt = (name: string) => {\n    // Delete the prompt\n    const success = deletePrompt(name);\n\n    if (success) {\n      const confirmEntry: ChatEntry = {\n        type: \"assistant\",\n        content: `✓ Deleted custom prompt: ${name}`,\n        timestamp: new Date(),\n      };\n      setChatHistory((prev) => [...prev, confirmEntry]);\n    } else {\n      const errorEntry: ChatEntry = {\n        type: \"assistant\",\n        content: `❌ Failed to delete prompt: ${name}`,\n        timestamp: new Date(),\n      };\n      setChatHistory((prev) => [...prev, errorEntry]);\n    }\n\n    closeDeletePrompt();\n  };\n\n  const handleAddMcpServer = (\n    name: string, \n    command: string, \n    args?: string[], \n    env?: Record<string, string>,\n    description?: string\n  ) => {\n    // Save the MCP server to storage\n    addMcpServer(name, command, args, env, description);\n    \n    const confirmEntry: ChatEntry = {\n      type: \"assistant\",\n      content: `✓ Added MCP server: ${name}`,\n      timestamp: new Date(),\n    };\n    setChatHistory((prev) => [...prev, confirmEntry]);\n    refreshMcpServers(); // Refresh the available servers list\n    \n    // Refresh MCP connections in the agent\n    agent.refreshMcpConnections();\n    \n    closeAddMcpServer();\n  };\n\n  const handleDeleteMcpServer = (name: string) => {\n    // Delete the MCP server from storage\n    const success = deleteMcpServer(name);\n    \n    if (success) {\n      const confirmEntry: ChatEntry = {\n        type: \"assistant\",\n        content: `✓ Deleted MCP server: ${name}`,\n        timestamp: new Date(),\n      };\n      setChatHistory((prev) => [...prev, confirmEntry]);\n      refreshMcpServers(); // Refresh the available servers list\n      \n      // Refresh MCP connections in the agent\n      agent.refreshMcpConnections();\n    } else {\n      const errorEntry: ChatEntry = {\n        type: \"assistant\",\n        content: `❌ Failed to delete MCP server: ${name}`,\n        timestamp: new Date(),\n      };\n      setChatHistory((prev) => [...prev, errorEntry]);\n    }\n    \n    closeDeleteMcpServer();\n  };\n\n  const handleSelectConversation = async (conversationId: string) => {\n    try {\n      // Save current conversation if there are messages\n      if (chatHistory.length > 0 && currentConversationId) {\n        await conversationManager.saveConversation(\n          chatHistory, \n          agent.getCurrentModel(), \n          currentConversationId\n        );\n      }\n\n      // Load the selected conversation\n      const conversation = await conversationManager.loadConversation(conversationId);\n      if (conversation) {\n        // Update the model if it's different\n        if (conversation.model !== agent.getCurrentModel()) {\n          agent.setModel(conversation.model);\n        }\n\n        // Restore conversation state in the agent (this restores AI context)\n        agent.restoreConversation(conversation.messages);\n        \n        // Update UI state\n        setChatHistory(conversation.messages);\n        setCurrentConversationId(conversationId);\n\n        const switchEntry: ChatEntry = {\n          type: \"assistant\",\n          content: `📚 Switched to conversation: **${conversation.title}**`,\n          timestamp: new Date(),\n        };\n        setChatHistory((prev) => [...prev, switchEntry]);\n      }\n    } catch (error) {\n      console.error('Failed to switch conversation:', error);\n      const errorEntry: ChatEntry = {\n        type: \"assistant\",\n        content: `❌ Failed to load conversation: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        timestamp: new Date(),\n      };\n      setChatHistory((prev) => [...prev, errorEntry]);\n    }\n  };\n\n  // Auto-save current conversation when chat history changes\n  useEffect(() => {\n    if (chatHistory.length > 0) {\n      const saveConversation = async () => {\n        try {\n          const conversationId = await conversationManager.saveConversation(\n            chatHistory,\n            agent.getCurrentModel(),\n            currentConversationId || undefined\n          );\n          \n          if (!currentConversationId) {\n            setCurrentConversationId(conversationId);\n          }\n        } catch (error) {\n          console.error('Failed to auto-save conversation:', error);\n        }\n      };\n\n      // Debounce the save operation\n      const timeoutId = setTimeout(saveConversation, 1000);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [chatHistory, agent, conversationManager, currentConversationId]);\n\n  return (\n    <Box flexDirection=\"column\" padding={1}>\n        <SessionStatus currentModel={agent.getCurrentModel()} currentMode={currentMode} />\n        \n        <Box flexDirection=\"column\" marginBottom={1}>\n          <Text dimColor>\n            Type your request in natural language. Type 'exit' or Ctrl+C to quit. Shift+Tab to cycle modes.\n          </Text>\n        </Box>\n\n        <Box key=\"chat-main\" flexDirection=\"column\" ref={scrollRef}>\n          <ChatHistoryMemo key={`chat-history-${chatHistory.length}`} entries={chatHistory} />\n        </Box>\n\n\n      {!confirmationOptions && (\n        <>\n          <LoadingSpinner\n            isActive={isProcessing || isStreaming}\n            processingTime={processingTime}\n            tokenCount={tokenCount}\n          />\n\n          {!showAddPrompt && !showDeletePrompt && !showPromptsList && (\n            <ChatInput\n              input={input}\n              isProcessing={isProcessing}\n              isStreaming={isStreaming}\n              currentModel={agent.getCurrentModel()}\n            />\n          )}\n\n          {!showAddPrompt && !showDeletePrompt && !showPromptsList && (\n            <CommandSuggestions\n              suggestions={commandSuggestions}\n              input={input}\n              selectedIndex={selectedCommandIndex}\n              isVisible={showCommandSuggestions}\n            />\n          )}\n\n          {!showAddPrompt && !showDeletePrompt && !showPromptsList && (\n            <FileFinder\n              files={filteredFiles}\n              selectedIndex={selectedFileIndex}\n              query={fileQuery}\n              isVisible={showFileFinder}\n            />\n          )}\n\n          {!showAddPrompt && !showDeletePrompt && !showPromptsList && (\n            <ModelSelection\n              models={availableModels}\n              selectedIndex={selectedModelIndex}\n              isVisible={showModelSelection}\n              currentModel={agent.getCurrentModel()}\n            />\n          )}\n\n          {!showAddPrompt && !showDeletePrompt && !showPromptsList && (\n            <RouteSelection\n              models={openRouterModels}\n              selectedModelIndex={selectedRouteModelIndex}\n              selectedProviderIndex={selectedRouteProviderIndex}\n              isVisible={showRouteSelection}\n              currentModel={agent.getCurrentModel()}\n              viewMode={routeViewMode}\n              currentSelectedModel={currentSelectedModel}\n              providers={routeProviders}\n              isLoadingProviders={isLoadingProviders}\n              onModelSelect={() => {}} // Handled internally by input handler\n              onProviderSelect={() => {}} // Handled internally by input handler\n              onBack={() => {}} // Handled internally by input handler\n            />\n          )}\n          <TemperatureSelector\n            temperature={currentTemperature}\n            isVisible={showTemperatureSelector}\n          />\n\n          {showExpertModels && (\n            <ExpertModels\n              onExit={closeExpertModels}\n            />\n          )}\n\n          {showProviderSettings && (\n            <ProviderSettings\n              providers={providerList}\n              selectedIndex={selectedProviderIndex}\n              onClose={closeProviderSettings}\n            />\n          )}\n\n          {showAddModel && (\n            <AddModel\n              providers={providerList}\n              onClose={closeAddModel}\n              onAddModel={handleAddModel}\n            />\n          )}\n\n          {showDeleteModel && (\n            <DeleteModel\n              onClose={closeDeleteModel}\n              onDeleteModel={handleDeleteModel}\n            />\n          )}\n\n          {showPromptsList && (\n            <PromptsList\n              onClose={closePromptsList}\n              onSelectPrompt={(promptName) => {\n                if (agent) {\n                  agent.setSelectedCustomPrompt(promptName);\n                  \n                  // Add a system message to chat history showing the change\n                  const promptDisplayName = promptName || \"GIGA (Default)\";\n                  const systemMessage: ChatEntry = {\n                    type: \"assistant\", \n                    content: `🎯 System prompt changed to: **${promptDisplayName}**`,\n                    timestamp: new Date(),\n                  };\n                  \n                  // Add to chat history\n                  setChatHistory(prev => [...prev, systemMessage]);\n                }\n              }}\n              selectedPrompt={agent?.getSelectedCustomPrompt() || null}\n            />\n          )}\n\n          {showAddPrompt && (\n            <AddPrompt\n              onClose={closeAddPrompt}\n              onAddPrompt={handleAddPrompt}\n            />\n          )}\n\n          {showDeletePrompt && (\n            <DeletePrompt\n              onClose={closeDeletePrompt}\n              onDeletePrompt={handleDeletePrompt}\n            />\n          )}\n\n          {showConversationHistory && (\n            <ConversationHistory\n              isVisible={showConversationHistory}\n              onClose={closeConversationHistory}\n              onSelectConversation={handleSelectConversation}\n            />\n          )}\n\n          <McpServerSelection\n            servers={mcpServers}\n            selectedIndex={selectedMcpServerIndex}\n            isVisible={showMcpServers}\n          />\n\n          {showAddMcpServer && (\n            <AddMcpServer\n              onClose={closeAddMcpServer}\n              onAddServer={handleAddMcpServer}\n            />\n          )}\n\n          {showDeleteMcpServer && (\n            <DeleteMcpServer\n              onClose={closeDeleteMcpServer}\n              onDeleteServer={handleDeleteMcpServer}\n            />\n          )}\n        </>\n      )}\n\n      {/* Show confirmation dialog at the bottom if one is pending */}\n      {confirmationOptions && (\n        <ConfirmationDialog\n          operation={confirmationOptions.operation}\n          filename={confirmationOptions.filename}\n          showVSCodeOpen={confirmationOptions.showVSCodeOpen}\n          content={confirmationOptions.content}\n          onConfirm={handleConfirmation}\n          onReject={handleRejection}\n        />\n      )}\n    </Box>\n  );\n}\n\n// Main component that handles API key input or chat interface\nexport default function ChatInterface({ agent }: ChatInterfaceProps) {\n  const [currentAgent, setCurrentAgent] = useState<GigaAgent | null>(agent || null);\n\n  const handleApiKeySet = (newAgent: GigaAgent) => {\n    setCurrentAgent(newAgent);\n  };\n\n  if (!currentAgent) {\n    return <ApiKeyInput onApiKeySet={handleApiKeySet} />;\n  }\n\n  return <ChatInterfaceWithAgent agent={currentAgent} />;\n}\n",
      "filePath": "../src/ui/components/chat-interface.tsx",
      "embedding": [
        17.36,
        0.3,
        0,
        3.5,
        0.1,
        0.04019509042843932,
        0.07804586582482408,
        0.018443829478459774,
        0.02087665635821713,
        0.02624876915734349,
        0.04479995989022156,
        0.09571996650364549,
        0.07638660986993594,
        0.04281982607677631,
        0.07910562029867656,
        0.014577609407758109,
        0.05674911134780332,
        0.003932353762465835,
        0.008269078214191839,
        0.06599931380758518,
        0.003127631073506521,
        0.013772946769060091,
        0.09527844007429598,
        0.0015756467654494011,
        0.04314038276519401,
        0.03900207325945479,
        0.0702871888074601,
        0.03911187295293259,
        0.05180610806291902,
        0.08796705014785551,
        0.022269765878301186,
        0.07868365130249412,
        0.06013805165871581,
        0.005338005590684336,
        0.017452463179447764,
        0.02122244943525219,
        0.03991985902104093,
        0.04474600716078976,
        0.04440652602699388,
        0.07040108102827419,
        0.09973732506768386,
        0.010605875417121657,
        0.05728532629209441,
        0.08641404308002763,
        0.08944539629810955,
        0.08172578704351491,
        0.03218861108946001,
        0.06518331941008804,
        0.020144674515873,
        0.015826317565947136,
        0.0006278884849274746,
        0.083537924139077,
        0.012886559438840229,
        0.059262149155310556,
        0.09553343373623745,
        0.05893794250575867,
        0.045581687556296206,
        0.04070832181734111,
        0.07807220049937402,
        0.007866427106090201,
        0.022985242733876213,
        0.014207661648829462,
        0.06461263577807584,
        0.08974233141823554,
        0.09292978854852457,
        0.08396092498066582,
        0.09646342759452775,
        0.04446752295184624,
        0.0076156701554052075,
        0.09836676835414652,
        0.03988208243241556,
        0.04186061578242376,
        0.012613334389352927,
        0.04873279592177396,
        0.07799071796108688,
        0.07705095401728965,
        0.012734092888155713,
        0.059690946204871864,
        0.026905774917178805,
        0.0380673258267695,
        0.0008858699278278759,
        0.07797731927864497,
        0.0992282299262937,
        0.01309700124518115,
        0.08679578312210591,
        0.015116141411954533,
        0.08724751658047275,
        0.07706510110894361,
        0.0032258399911264894,
        0.07325631931931881,
        0.07921832171405892,
        0.044879651238746404,
        0.0548898363798959,
        0.026732644162109433,
        0.006961773020345264,
        0.0872248475888121,
        0.05100978967029396,
        0.09915565997523715,
        0.031702437178293574,
        0.07828064433278126
      ]
    },
    {
      "content": "import React from \"react\";\nimport { Box, Text } from \"ink\";\nimport { fuzzySearch } from \"../../utils/fuzzy-search\";\n\ninterface CommandSuggestion {\n  command: string;\n  description: string;\n}\n\ninterface CommandSuggestionsProps {\n  suggestions: CommandSuggestion[];\n  input: string;\n  selectedIndex: number;\n  isVisible: boolean;\n}\n\nexport function CommandSuggestions({\n  suggestions,\n  input,\n  selectedIndex,\n  isVisible,\n}: CommandSuggestionsProps) {\n  if (!isVisible) return null;\n\n  const filteredSuggestions = input.startsWith(\"/\")\n    ? fuzzySearch(\n        input.substring(1), // Remove the \"/\" for fuzzy matching\n        suggestions.filter(s => s.command.startsWith(\"/\")),\n        (suggestion) => suggestion.command.substring(1), // Remove \"/\" for matching\n        8\n      )\n    : fuzzySearch(\n        input,\n        suggestions,\n        (suggestion) => suggestion.command,\n        8\n      );\n\n  return (\n    <Box marginTop={1} flexDirection=\"column\">\n      {filteredSuggestions.map((suggestion, index) => (\n        <Box key={index} paddingLeft={1}>\n          <Text\n            color={index === selectedIndex ? \"black\" : \"white\"}\n            backgroundColor={index === selectedIndex ? \"cyan\" : undefined}\n          >\n            {suggestion.command}\n          </Text>\n          <Box marginLeft={1}>\n            <Text color=\"gray\">{suggestion.description}</Text>\n          </Box>\n        </Box>\n      ))}\n      <Box marginTop={1}>\n        <Text color=\"gray\" dimColor>\n          ↑↓ navigate • Enter/Tab select • Esc cancel\n        </Text>\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/command-suggestions.tsx",
      "embedding": [
        1.42,
        0.1,
        0,
        0.3,
        0.1,
        0.033170137444664925,
        0.024090953223651648,
        0.08799218572765241,
        0.012000641335614827,
        0.01692929066130856,
        0.05396369396690209,
        0.08741242283534284,
        0.02776600210776179,
        0.05496761893845739,
        0.04668742102337157,
        0.0009156104837452551,
        0.08579760410238409,
        0.01671887576536726,
        0.02258102636087328,
        0.08225112862751478,
        0.045661588000456776,
        0.010640582316026492,
        0.09715826024189092,
        0.01922147063019114,
        0.02311674294195828,
        0.0687433916090612,
        0.029821489402439283,
        0.0840074086858389,
        0.00027772914301739117,
        0.09544985461460895,
        0.05727252245167446,
        0.028083123319202874,
        0.03456253469923725,
        0.034718898287796694,
        0.05805360768090743,
        0.08694291202954048,
        0.056882673717885725,
        0.04542399096903857,
        0.026545532333537125,
        0.008209695048871746,
        0.020360319453142983,
        0.0974732738255836,
        0.09662289893275183,
        0.08887762936429716,
        0.09436884994093205,
        0.06231840316244347,
        0.03454063192218056,
        0.08964539927438923,
        0.028425132755070193,
        0.09174400900515134,
        0.005037852329429205,
        0.08119189934247872,
        0.0904960410944873,
        0.05778060832992468,
        0.08928034979882832,
        0.08714608738626492,
        0.09782833763857757,
        0.0033869526238888173,
        0.05922229761508681,
        0.040113746817404816,
        0.08371480886784466,
        0.028588330457633062,
        0.08746856751601699,
        0.02553661873592257,
        0.048418568320462665,
        0.04103761108750599,
        0.06254981397020418,
        0.09008215887926606,
        0.005581930697113647,
        0.025342615331271613,
        0.06079793968493389,
        0.027796597612298704,
        0.08521332771802632,
        0.015025421766573954,
        0.08663182414985691,
        0.07077113756038804,
        0.0485689411284587,
        0.01995497916057323,
        0.08512030349443434,
        0.028921504363150642,
        0.07414981341918706,
        0.08384688056516056,
        0.03396718788494575,
        0.04059793836192667,
        0.05768472713946579,
        0.06575917434339844,
        0.07400545508417561,
        0.009415460248663311,
        0.09357457509684736,
        0.014737651598534886,
        0.022735153884548078,
        0.08041338707889321,
        0.0766914034138636,
        0.04677993647319154,
        0.07153632662805,
        0.015669368626332038,
        0.0241385535781099,
        0.004579104410116697,
        0.05789402286881186,
        0.08356428492723186
      ]
    },
    {
      "content": "import React, { useState } from \"react\";\nimport { Box, Text, useInput } from \"ink\";\nimport { DiffRenderer } from \"./diff-renderer\";\n\ninterface ConfirmationDialogProps {\n  operation: string;\n  filename: string;\n  onConfirm: (dontAskAgain?: boolean) => void;\n  onReject: (feedback?: string) => void;\n  showVSCodeOpen?: boolean;\n  content?: string; // Optional content to show (file content or command)\n}\n\nexport default function ConfirmationDialog({\n  operation,\n  filename,\n  onConfirm,\n  onReject,\n  showVSCodeOpen = false,\n  content,\n}: ConfirmationDialogProps) {\n  const [selectedOption, setSelectedOption] = useState(0);\n  const [feedbackMode, setFeedbackMode] = useState(false);\n  const [feedback, setFeedback] = useState(\"\");\n\n  const options = [\n    \"Yes\",\n    \"Yes, and don't ask again this session\",\n    \"No\",\n    \"No, with feedback\",\n  ];\n\n  useInput((input, key) => {\n    if (feedbackMode) {\n      if (key.return) {\n        onReject(feedback.trim());\n        return;\n      }\n      if (key.backspace || key.delete) {\n        setFeedback((prev) => prev.slice(0, -1));\n        return;\n      }\n      if (input && !key.ctrl && !key.meta) {\n        setFeedback((prev) => prev + input);\n      }\n      return;\n    }\n\n    if (key.upArrow || (key.shift && key.tab)) {\n      setSelectedOption((prev) => (prev > 0 ? prev - 1 : options.length - 1));\n      return;\n    }\n\n    if (key.downArrow || key.tab) {\n      setSelectedOption((prev) => (prev + 1) % options.length);\n      return;\n    }\n\n    if (key.return) {\n      if (selectedOption === 0) {\n        onConfirm(false);\n      } else if (selectedOption === 1) {\n        onConfirm(true);\n      } else if (selectedOption === 2) {\n        onReject(\"Operation cancelled by user\");\n      } else {\n        setFeedbackMode(true);\n      }\n      return;\n    }\n\n    if (key.escape) {\n      if (feedbackMode) {\n        setFeedbackMode(false);\n        setFeedback(\"\");\n      } else {\n        // Cancel the confirmation when escape is pressed from main confirmation\n        onReject(\"Operation cancelled by user (pressed Escape)\");\n      }\n      return;\n    }\n  });\n\n  if (feedbackMode) {\n    return (\n      <Box flexDirection=\"column\" padding={1}>\n        <Box flexDirection=\"column\" marginBottom={1}>\n          <Text color=\"gray\">\n            Type your feedback and press Enter, or press Escape to go back.\n          </Text>\n        </Box>\n\n        <Box\n          borderStyle=\"round\"\n          borderColor=\"yellow\"\n          paddingX={1}\n          marginTop={1}\n        >\n          <Text color=\"gray\">❯ </Text>\n          <Text>\n            {feedback}\n            <Text color=\"white\">█</Text>\n          </Text>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box flexDirection=\"column\" borderStyle=\"round\" borderColor=\"yellow\" padding={1}>\n      {/* Compact header */}\n      <Box marginBottom={1}>\n        <Text color=\"yellow\" bold>⚠️  Confirm: </Text>\n        <Text color=\"white\">{operation}({filename})</Text>\n      </Box>\n\n      {/* Show VSCode notice if applicable */}\n      {showVSCodeOpen && (\n        <Box marginBottom={1}>\n          <Text color=\"gray\">📝 Opened in VS Code</Text>\n        </Box>\n      )}\n\n      {/* Compact content preview - only show first few lines */}\n      {content && (\n        <Box marginBottom={1}>\n          <Text color=\"gray\" wrap=\"truncate\">\n            📄 {content.split('\\n').slice(0, 2).join(' ').substring(0, 60)}...\n          </Text>\n        </Box>\n      )}\n\n      {/* Vertical confirmation options */}\n      <Box flexDirection=\"column\" marginBottom={1}>\n        {options.map((option, index) => (\n          <Box key={index}>\n            <Text\n              color={selectedOption === index ? \"black\" : \"gray\"}\n              backgroundColor={selectedOption === index ? \"cyan\" : undefined}\n            >\n              [{index + 1}] {option}\n            </Text>\n          </Box>\n        ))}\n      </Box>\n\n      <Text color=\"gray\" dimColor>\n        ↑↓/Tab select • Enter confirm • Esc cancel\n      </Text>\n    </Box>\n  );\n}\n",
      "filePath": "../src/ui/components/confirmation-dialog.tsx",
      "embedding": [
        4.08,
        0.1,
        0,
        0.3,
        0.1,
        0.029789314866427143,
        0.08415699751877931,
        0.09957753894140609,
        0.06239211215349491,
        0.06455965955238456,
        0.08078616802458949,
        0.06359604342645471,
        0.012322323936303349,
        0.09594614845024783,
        0.07919720563405762,
        0.007820441347713215,
        0.08237695751475183,
        0.030623168149568936,
        0.0615647078078619,
        0.07264223592510896,
        0.022837068052341848,
        0.07020912395024742,
        0.06385415991498089,
        0.051028329991609216,
        0.06591945332883331,
        0.036779719045254754,
        0.057428603148422276,
        0.004926261387210984,
        0.007210428171165695,
        0.04102552495594908,
        0.016218391944095557,
        0.06918532781418625,
        0.09420203462684353,
        0.09779888067426752,
        0.021478000169475098,
        0.04853992093809594,
        0.057061193542079926,
        0.06059851001211968,
        0.04444327917664529,
        0.037078627387406096,
        0.013001037314423071,
        0.03094703185393598,
        0.03152447039082713,
        0.0716253478471107,
        0.06981243292533916,
        0.01644429191888539,
        0.0303393224741349,
        0.04484802584564284,
        0.07646667941691862,
        0.035363387108610804,
        0.09094203047152723,
        0.07850319718708709,
        0.07902493376564758,
        0.000058019282751531344,
        0.05427292886232237,
        0.014736982408074485,
        0.09122144313532558,
        0.07729084537747319,
        0.09957810429334668,
        0.002492204184729308,
        0.03304841127540836,
        0.08636412098647905,
        0.06681454342449125,
        0.012283938072208879,
        0.023388750087478406,
        0.0978700741249385,
        0.04874381710050338,
        0.047946739056079934,
        0.04356070058221594,
        0.004720573446206789,
        0.05679205158119963,
        0.026075099395220583,
        0.09695571863978857,
        0.08774673167310575,
        0.08381987577329898,
        0.037087135425273365,
        0.0046870412120671445,
        0.09657827178952806,
        0.0675470627920509,
        0.0837732381019359,
        0.0972705663933125,
        0.037603656165700994,
        0.06290594601497711,
        0.020241057248615503,
        0.07557455690764835,
        0.04735762530864718,
        0.09511760826078096,
        0.0793643385900384,
        0.08727238065453075,
        0.042142695171842805,
        0.08954939030650011,
        0.01491720270965995,
        0.05688535360081264,
        0.07985529284886533,
        0.052383421167227474,
        0.004454305818035809,
        0.04627318359180385,
        0.07343948786506785,
        0.05051081530882297,
        0.005578377239055465
      ]
    },
    {
      "content": "import React, { useState, useEffect } from 'react';\nimport { Box, Text, useInput } from 'ink';\nimport { ConversationManager, ConversationSummary } from '../../utils/conversation-manager';\nimport { fuzzySearch } from '../../utils/fuzzy-search';\n\ninterface ConversationHistoryProps {\n  isVisible: boolean;\n  onClose: () => void;\n  onSelectConversation: (conversationId: string) => void;\n}\n\nexport function ConversationHistory({ \n  isVisible, \n  onClose, \n  onSelectConversation \n}: ConversationHistoryProps) {\n  const [conversations, setConversations] = useState<ConversationSummary[]>([]);\n  const [filteredConversations, setFilteredConversations] = useState<ConversationSummary[]>([]);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const conversationManager = ConversationManager.getInstance();\n\n  // Load conversations on mount\n  useEffect(() => {\n    if (isVisible) {\n      loadConversations();\n    }\n  }, [isVisible]);\n\n  // Filter conversations when search query changes\n  useEffect(() => {\n    if (!searchQuery.trim()) {\n      setFilteredConversations(conversations);\n    } else {\n      const filtered = fuzzySearch(\n        searchQuery,\n        conversations,\n        (conv) => `${conv.title} ${conv.preview}`,\n        10\n      );\n      setFilteredConversations(filtered);\n    }\n    setSelectedIndex(0);\n  }, [conversations, searchQuery]);\n\n  const loadConversations = async () => {\n    setIsLoading(true);\n    try {\n      const convList = await conversationManager.listConversations();\n      setConversations(convList);\n    } catch (error) {\n      console.error('Failed to load conversations:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatDate = (date: Date): string => {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 0) {\n      return 'Today';\n    } else if (diffDays === 1) {\n      return 'Yesterday';\n    } else if (diffDays < 7) {\n      return `${diffDays}d ago`;\n    } else if (diffDays < 30) {\n      return `${Math.floor(diffDays / 7)}w ago`;\n    } else {\n      return date.toLocaleDateString();\n    }\n  };\n\n  const handleDeleteConversation = async (conversationId: string) => {\n    try {\n      await conversationManager.deleteConversation(conversationId);\n      await loadConversations();\n    } catch (error) {\n      console.error('Failed to delete conversation:', error);\n    }\n  };\n\n  useInput((input, key) => {\n    if (!isVisible) return;\n\n    if (key.escape) {\n      onClose();\n      return;\n    }\n\n    if (key.return) {\n      if (filteredConversations.length > 0 && selectedIndex < filteredConversations.length) {\n        onSelectConversation(filteredConversations[selectedIndex].id);\n        onClose();\n      }\n      return;\n    }\n\n    if (key.upArrow) {\n      setSelectedIndex(prev => \n        prev > 0 ? prev - 1 : Math.max(0, filteredConversations.length - 1)\n      );\n      return;\n    }\n\n    if (key.downArrow) {\n      setSelectedIndex(prev => \n        prev < filteredConversations.length - 1 ? prev + 1 : 0\n      );\n      return;\n    }\n\n    if (key.delete || key.backspace) {\n      if (searchQuery.length > 0) {\n        setSearchQuery(prev => prev.slice(0, -1));\n      }\n      return;\n    }\n\n    // Handle delete key (d) to delete conversation\n    if (input === 'd' && filteredConversations.length > 0) {\n      const conversation = filteredConversations[selectedIndex];\n      if (conversation) {\n        handleDeleteConversation(conversation.id);\n      }\n      return;\n    }\n\n    // Handle regular character input for search\n    if (input && input.length === 1 && !key.ctrl && !key.meta) {\n      setSearchQuery(prev => prev + input);\n    }\n  });\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <Box \n      flexDirection=\"column\" \n      width=\"100%\" \n      height={20}\n      borderStyle=\"round\" \n      borderColor=\"cyan\"\n      padding={1}\n    >\n      <Box marginBottom={1}>\n        <Text bold color=\"cyan\">📚 Conversation History</Text>\n      </Box>\n\n      <Box marginBottom={1}>\n        <Text color=\"gray\">\n          Search: {searchQuery}\n          {searchQuery && <Text color=\"cyan\">█</Text>}\n        </Text>\n      </Box>\n\n      {isLoading ? (\n        <Box justifyContent=\"center\" alignItems=\"center\" height={10}>\n          <Text color=\"cyan\">Loading conversations...</Text>\n        </Box>\n      ) : filteredConversations.length === 0 ? (\n        <Box justifyContent=\"center\" alignItems=\"center\" height={10}>\n          <Text color=\"gray\">\n            {searchQuery ? 'No matching conversations found' : 'No conversations yet'}\n          </Text>\n        </Box>\n      ) : (\n        <Box flexDirection=\"column\">\n          {filteredConversations.slice(0, 12).map((conversation, index) => {\n            const isSelected = index === selectedIndex;\n            \n            return (\n              <Box key={conversation.id} flexDirection=\"column\" width=\"100%\">\n                <Box flexDirection=\"row\" justifyContent=\"space-between\">\n                  <Text color={isSelected ? 'cyan' : 'white'} bold={isSelected}>\n                    {isSelected ? '> ' : '  '}{conversation.title}\n                  </Text>\n                  <Text color={isSelected ? 'cyan' : 'gray'} dimColor={!isSelected}>\n                    {formatDate(conversation.updatedAt)}\n                  </Text>\n                </Box>\n                \n                <Box flexDirection=\"row\" justifyContent=\"space-between\">\n                  <Text color={isSelected ? 'cyan' : 'gray'} dimColor={!isSelected}>\n                    {isSelected ? '  ' : '  '}{conversation.preview.slice(0, 50)}...\n                  </Text>\n                  <Text color={isSelected ? 'cyan' : 'gray'} dimColor={!isSelected}>\n                    {conversation.messageCount} msgs | {conversation.model}\n                  </Text>\n                </Box>\n              </Box>\n            );\n          })}\n        </Box>\n      )}\n\n      <Box marginTop={1}>\n        <Text color=\"gray\" dimColor>\n          ↑↓ Navigate • Enter Select • d Delete • Esc Close • Type to search\n        </Text>\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/conversation-history.tsx",
      "embedding": [
        5.87,
        0.1,
        0,
        0.4,
        0.1,
        0.03461957982091437,
        0.06030009746209487,
        0.01653072725457515,
        0.07724750590557695,
        0.017971000148180316,
        0.0736968796423953,
        0.007054966718583933,
        0.08687661219179582,
        0.07183168509709864,
        0.04880943398295359,
        0.08288504030782878,
        0.005431862419172984,
        0.04414075206880224,
        0.04810072219783199,
        0.09430383421889676,
        0.048581325546498313,
        0.045115721146427305,
        0.0945099472452557,
        0.03597509705394001,
        0.07898657805605497,
        0.03886866521438303,
        0.005013676238335075,
        0.03242038775534115,
        0.07725452910807251,
        0.07409159143396714,
        0.06039175851970437,
        0.09150091172357955,
        0.06177565970013881,
        0.045763778744134544,
        0.038171023629045446,
        0.09591773604564403,
        0.06824925218479087,
        0.023215787128343914,
        0.004826869469506445,
        0.0053284753741476565,
        0.02540097539196039,
        0.02135826917649829,
        0.06884386276763772,
        0.07406446016584056,
        0.01891808797541862,
        0.052877808113871744,
        0.04402545427528135,
        0.06722379159131632,
        0.09550672959820267,
        0.050049803791635386,
        0.02781081439130413,
        0.08151100984429603,
        0.04872025154182921,
        0.04038506501543997,
        0.02523260541564767,
        0.03353306586552105,
        0.06872343694246266,
        0.019148859903308738,
        0.0050412484467249885,
        0.053586729839337835,
        0.09566555550235195,
        0.022448578697755184,
        0.05434375137817265,
        0.004116329219080494,
        0.03407192037812663,
        0.0960663993084035,
        0.07979918041349766,
        0.022120857286449382,
        0.006014382632201398,
        0.09349285180575723,
        0.06494256586054158,
        0.0982248866179752,
        0.09968554535984,
        0.038759868195651095,
        0.025525449091279153,
        0.02646141507941634,
        0.02265558518011689,
        0.0585095636333323,
        0.0708848845795811,
        0.009589269394145051,
        0.022504408117556496,
        0.09778300352683147,
        0.04247583967880508,
        0.054178191552197844,
        0.08879854704095486,
        0.08941227854305955,
        0.028708533140946048,
        0.0028106292089376318,
        0.02790926737892291,
        0.05313433149228423,
        0.02769941732366521,
        0.005297658004691908,
        0.016168014799259733,
        0.027295534361557818,
        0.09411707652964156,
        0.0602455518750809,
        0.05284280691069937,
        0.031667557937204195,
        0.013709866502568658,
        0.08677062597862825
      ]
    },
    {
      "content": "import React, { useState, useEffect } from \"react\";\nimport { Box, Text, useInput } from \"ink\";\nimport { loadAddedMcpServers, AddedMcpServer } from \"../../utils/added-mcp-servers\";\n\ninterface DeleteMcpServerProps {\n  onClose: () => void;\n  onDeleteServer: (name: string) => void;\n}\n\nexport default function DeleteMcpServer({ onClose, onDeleteServer }: DeleteMcpServerProps) {\n  const [servers, setServers] = useState<AddedMcpServer[]>([]);\n  const [filteredServers, setFilteredServers] = useState<AddedMcpServer[]>([]);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isMounted, setIsMounted] = useState(true);\n\n  useEffect(() => {\n    loadServers();\n    \n    return () => {\n      setIsMounted(false);\n    };\n  }, []);\n\n  useEffect(() => {\n    updateFilteredServers();\n  }, [searchQuery, servers]);\n\n  const loadServers = () => {\n    const loadedServers = loadAddedMcpServers();\n    if (isMounted) {\n      setServers(loadedServers);\n    }\n  };\n\n  const updateFilteredServers = () => {\n    if (!searchQuery.trim()) {\n      setFilteredServers(servers);\n      return;\n    }\n\n    const query = searchQuery.toLowerCase();\n    const filtered = servers.filter(server => \n      server.name.toLowerCase().includes(query) ||\n      server.command.toLowerCase().includes(query) ||\n      (server.description && server.description.toLowerCase().includes(query))\n    ).sort((a, b) => a.name.localeCompare(b.name));\n\n    setFilteredServers(filtered);\n    \n    // Reset selection if current index is out of bounds\n    if (selectedIndex >= filtered.length) {\n      setSelectedIndex(0);\n    }\n  };\n\n  useInput((inputChar, key) => {\n    if (key.ctrl && inputChar === \"c\") {\n      onClose();\n      return;\n    }\n\n    if (key.escape) {\n      onClose();\n      return;\n    }\n\n    if (key.upArrow) {\n      setSelectedIndex(prev => prev === 0 ? Math.max(0, filteredServers.length - 1) : prev - 1);\n      return;\n    }\n\n    if (key.downArrow) {\n      setSelectedIndex(prev => filteredServers.length === 0 ? 0 : (prev + 1) % Math.min(10, filteredServers.length));\n      return;\n    }\n\n    if (key.return) {\n      if (filteredServers.length > 0 && selectedIndex < filteredServers.length) {\n        const selectedServer = filteredServers[selectedIndex];\n        onDeleteServer(selectedServer.name);\n        \n        // Refresh servers after deletion\n        setTimeout(() => {\n          if (isMounted) {\n            loadServers();\n          }\n        }, 100);\n      }\n      return;\n    }\n\n    if (key.backspace || key.delete) {\n      setSearchQuery(prev => prev.slice(0, -1));\n      setSelectedIndex(0);\n      return;\n    }\n\n    if (inputChar && !key.ctrl && !key.meta) {\n      setSearchQuery(prev => prev + inputChar);\n      setSelectedIndex(0);\n      return;\n    }\n  });\n\n  if (servers.length === 0) {\n    return (\n      <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n        <Text color=\"yellow\">🗑️  Delete MCP Server</Text>\n        <Box marginBottom={1}>\n          <Text color=\"gray\">No MCP servers have been added yet.</Text>\n        </Box>\n        <Box flexDirection=\"column\" marginTop={1}>\n          <Text color=\"gray\" dimColor>Use /add-mcp to add servers first</Text>\n          <Text color=\"gray\" dimColor>Press Esc to close</Text>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n      <Text color=\"yellow\">🗑️  Delete MCP Server</Text>\n      <Box marginBottom={1}>\n        <Text color=\"gray\">Search: </Text>\n        <Text>{searchQuery || \"\"}█</Text>\n      </Box>\n      \n      <Box flexDirection=\"column\" marginBottom={1}>\n        {filteredServers.length === 0 ? (\n          <Box borderStyle=\"round\" borderColor=\"gray\" paddingX={1}>\n            <Text color=\"gray\">No servers found matching \"{searchQuery}\"</Text>\n          </Box>\n        ) : (\n          filteredServers.slice(0, 10).map((server, index) => {\n            const isSelected = index === selectedIndex;\n            const dateAdded = new Date(server.dateAdded).toLocaleDateString();\n            \n            return (\n              <Box \n                key={server.name}\n                borderStyle=\"round\" \n                borderColor={isSelected ? \"red\" : \"gray\"} \n                paddingX={1} \n                marginBottom={1}\n              >\n                <Box flexDirection=\"column\">\n                  <Box>\n                    <Box width={20}>\n                      <Text color={isSelected ? \"red\" : \"white\"}>{server.name}</Text>\n                    </Box>\n                    <Box width={40}>\n                      <Text color=\"cyan\">{server.command}</Text>\n                    </Box>\n                    <Box flexGrow={1}>\n                      <Text color=\"gray\" dimColor>Added {dateAdded}</Text>\n                    </Box>\n                  </Box>\n                  {server.description && (\n                    <Box paddingLeft={2}>\n                      <Text color=\"gray\" dimColor>{server.description}</Text>\n                    </Box>\n                  )}\n                </Box>\n              </Box>\n            );\n          })\n        )}\n        {filteredServers.length > 10 && (\n          <Box paddingX={1}>\n            <Text color=\"gray\" dimColor>... and {filteredServers.length - 10} more</Text>\n          </Box>\n        )}\n      </Box>\n\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"gray\" dimColor>• Type to search servers</Text>\n        <Text color=\"gray\" dimColor>• Use ↑/↓ arrows to navigate</Text>\n        <Text color=\"red\" dimColor>• Press Enter to DELETE selected server</Text>\n        <Text color=\"gray\" dimColor>• Press Esc to cancel</Text>\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/delete-mcp-server.tsx",
      "embedding": [
        4.92,
        0.1,
        0,
        0.3,
        0.1,
        0.038543315211946906,
        0.0032828892081676834,
        0.022433538721380087,
        0.004181910319468918,
        0.05217526807886061,
        0.09765399055831812,
        0.015848616743030508,
        0.09589625764982848,
        0.04520183421464698,
        0.032491157478363966,
        0.051454635110577775,
        0.05965923407020887,
        0.051533646552356954,
        0.05476818789679571,
        0.079173991338489,
        0.009364072298083293,
        0.014029037893827812,
        0.07522271818073187,
        0.01464040009326345,
        0.0468926145638247,
        0.008000484529870634,
        0.05556387763041948,
        0.033658621294247695,
        0.049001761032095484,
        0.03140242673557166,
        0.0541763741354305,
        0.04413121539025414,
        0.07096743955727884,
        0.04443812019134735,
        0.022259402115791818,
        0.06399304768624733,
        0.004299468554460395,
        0.07167949824006188,
        0.0546789195163778,
        0.08123331011457952,
        0.05345535040090833,
        0.08438423421091483,
        0.030506183150068547,
        0.09001820610949024,
        0.06306456369847435,
        0.04817931933016917,
        0.06352794731627937,
        0.018794404431916358,
        0.017231592471961966,
        0.0962651004290318,
        0.07652741789456852,
        0.06112945870929585,
        0.058344111348655116,
        0.07287850024586866,
        0.05834332381313367,
        0.022792280725019487,
        0.02677881622500068,
        0.05673546716188678,
        0.03346877694668248,
        0.008706031127400949,
        0.0628487931104648,
        0.009811397627461993,
        0.03807571942461139,
        0.05239988557300934,
        0.0697633902436489,
        0.01195363002573191,
        0.017262762793832542,
        0.0175805702647709,
        0.006378019665714552,
        0.07985517909974171,
        0.09088098055684207,
        0.05473591549560944,
        0.07031005375132239,
        0.0009814052556840758,
        0.09297199693959465,
        0.08305213712673577,
        0.02231746929442955,
        0.02884852459659152,
        0.0486194854858107,
        0.08640555034504038,
        0.08648040872765651,
        0.04400201369796394,
        0.07011538887024986,
        0.03513068678815057,
        0.0745825687656115,
        0.003340827652632983,
        0.05492838895854262,
        0.048264312726418616,
        0.05951897424192847,
        0.05796350798093641,
        0.03133709859207463,
        0.020949398818428867,
        0.024973027150202522,
        0.06262714462871,
        0.04361392185594465,
        0.07164509858061027,
        0.046640750005020964,
        0.09897316979772897,
        0.0298374387601964,
        0.04009161999554524
      ]
    },
    {
      "content": "import React, { useState, useEffect } from \"react\";\nimport { Box, Text, useInput } from \"ink\";\nimport { loadAddedModels, deleteModel, AddedModel } from \"../../utils/added-models\";\n\ninterface DeleteModelProps {\n  onClose: () => void;\n  onDeleteModel: (modelName: string, providerName: string) => void;\n}\n\nexport default function DeleteModel({ onClose, onDeleteModel }: DeleteModelProps) {\n  const [addedModels, setAddedModels] = useState<AddedModel[]>([]);\n  const [filteredModels, setFilteredModels] = useState<AddedModel[]>([]);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isMounted, setIsMounted] = useState(true);\n\n  useEffect(() => {\n    loadModels();\n    \n    return () => {\n      setIsMounted(false);\n    };\n  }, []);\n\n  useEffect(() => {\n    updateFilteredModels();\n  }, [searchQuery, addedModels]);\n\n  const loadModels = () => {\n    const models = loadAddedModels();\n    if (isMounted) {\n      setAddedModels(models);\n    }\n  };\n\n  const updateFilteredModels = () => {\n    if (!searchQuery.trim()) {\n      setFilteredModels(addedModels);\n      return;\n    }\n\n    const query = searchQuery.toLowerCase();\n    const filtered = addedModels.filter(model => \n      model.modelName.toLowerCase().includes(query) ||\n      model.providerName.toLowerCase().includes(query)\n    ).sort((a, b) => a.modelName.localeCompare(b.modelName));\n\n    setFilteredModels(filtered);\n    \n    // Reset selection if current index is out of bounds\n    if (selectedIndex >= filtered.length) {\n      setSelectedIndex(0);\n    }\n  };\n\n  useInput((inputChar, key) => {\n    if (key.ctrl && inputChar === \"c\") {\n      onClose();\n      return;\n    }\n\n    if (key.escape) {\n      onClose();\n      return;\n    }\n\n    if (key.upArrow) {\n      setSelectedIndex(prev => prev === 0 ? Math.max(0, filteredModels.length - 1) : prev - 1);\n      return;\n    }\n\n    if (key.downArrow) {\n      setSelectedIndex(prev => filteredModels.length === 0 ? 0 : (prev + 1) % Math.min(10, filteredModels.length));\n      return;\n    }\n\n    if (key.return) {\n      if (filteredModels.length > 0 && selectedIndex < filteredModels.length) {\n        const selectedModel = filteredModels[selectedIndex];\n        onDeleteModel(selectedModel.modelName, selectedModel.providerName);\n        \n        // Refresh models after deletion\n        setTimeout(() => {\n          if (isMounted) {\n            loadModels();\n          }\n        }, 100);\n      }\n      return;\n    }\n\n    if (key.backspace || key.delete) {\n      setSearchQuery(prev => prev.slice(0, -1));\n      setSelectedIndex(0);\n      return;\n    }\n\n    if (inputChar && !key.ctrl && !key.meta) {\n      setSearchQuery(prev => prev + inputChar);\n      setSelectedIndex(0);\n      return;\n    }\n  });\n\n  if (addedModels.length === 0) {\n    return (\n      <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n        <Text color=\"yellow\">🗑️  Delete Model</Text>\n        <Box marginBottom={1}>\n          <Text color=\"gray\">No models have been added yet.</Text>\n        </Box>\n        <Box flexDirection=\"column\" marginTop={1}>\n          <Text color=\"gray\" dimColor>Use /add-model to add models first</Text>\n          <Text color=\"gray\" dimColor>Press Esc to close</Text>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n      <Text color=\"yellow\">🗑️  Delete Model</Text>\n      <Box marginBottom={1}>\n        <Text color=\"gray\">Search: </Text>\n        <Text>{searchQuery || \"\"}█</Text>\n      </Box>\n      \n      <Box flexDirection=\"column\" marginBottom={1}>\n        {filteredModels.length === 0 ? (\n          <Box borderStyle=\"round\" borderColor=\"gray\" paddingX={1}>\n            <Text color=\"gray\">No models found matching \"{searchQuery}\"</Text>\n          </Box>\n        ) : (\n          filteredModels.slice(0, 10).map((model, index) => {\n            const isSelected = index === selectedIndex;\n            const dateAdded = new Date(model.dateAdded).toLocaleDateString();\n            \n            return (\n              <Box \n                key={`${model.modelName}-${model.providerName}`}\n                borderStyle=\"round\" \n                borderColor={isSelected ? \"red\" : \"gray\"} \n                paddingX={1} \n                marginBottom={1}\n              >\n                <Box width={30}>\n                  <Text color={isSelected ? \"red\" : \"white\"}>{model.modelName}</Text>\n                </Box>\n                <Box width={15}>\n                  <Text color=\"cyan\">({model.providerName})</Text>\n                </Box>\n                <Box flexGrow={1}>\n                  <Text color=\"gray\" dimColor>Added {dateAdded}</Text>\n                </Box>\n              </Box>\n            );\n          })\n        )}\n        {filteredModels.length > 10 && (\n          <Box paddingX={1}>\n            <Text color=\"gray\" dimColor>... and {filteredModels.length - 10} more</Text>\n          </Box>\n        )}\n      </Box>\n\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"gray\" dimColor>• Type to search models</Text>\n        <Text color=\"gray\" dimColor>• Use ↑/↓ arrows to navigate</Text>\n        <Text color=\"red\" dimColor>• Press Enter to DELETE selected model</Text>\n        <Text color=\"gray\" dimColor>• Press Esc to cancel</Text>\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/delete-model.tsx",
      "embedding": [
        4.74,
        0.1,
        0,
        0.3,
        0.1,
        0.045437101953132164,
        0.09050991485260312,
        0.025660012026123426,
        0.04295840021177127,
        0.02104650855337712,
        0.0909103714226296,
        0.07088740356896685,
        0.09517799235840566,
        0.08498364236763783,
        0.04151654543264112,
        0.09761630641935626,
        0.031121168845540316,
        0.09998634204841078,
        0.08741186184833644,
        0.0060925625108113725,
        0.08416211638450095,
        0.0036708929359546174,
        0.08779064708790603,
        0.00581880692600888,
        0.058839994341909424,
        0.037390551342833124,
        0.06505387348897018,
        0.07089799997888482,
        0.06869215649423731,
        0.0832243896861222,
        0.061451016717055364,
        0.04573332356786191,
        0.05315499754226443,
        0.08072161914999788,
        0.03416755282346452,
        0.020090182623918842,
        0.016310385514111594,
        0.09823345997523014,
        0.05206556729730393,
        0.013895337173331457,
        0.09453273746992426,
        0.0909207128066139,
        0.006739485799689238,
        0.061430315895178805,
        0.005429297773720499,
        0.06336577174150902,
        0.039624330896394035,
        0.09132492759044913,
        0.03969932687970789,
        0.05305891091686285,
        0.06522709450485019,
        0.0415570055740934,
        0.041808982548263186,
        0.06703974804732421,
        0.033274705228960026,
        0.01786714582937391,
        0.06116216052333173,
        0.04257017214927387,
        0.09949150154630662,
        0.09262694713392979,
        0.06366538635166451,
        0.03626626819369703,
        0.004835998374238404,
        0.02467606587410619,
        0.040141979862811344,
        0.07421774734243436,
        0.02171157508431423,
        0.025838002949381236,
        0.0763179983445624,
        0.023796066528358775,
        0.08384978962468322,
        0.024590216052858382,
        0.07996087246135743,
        0.048789102521241946,
        0.07942374325470608,
        0.06484757744320868,
        0.023310450789936234,
        0.09718713040401683,
        0.08041063615705324,
        0.08473987495424475,
        0.0023416407770819217,
        0.05178394734408567,
        0.02672036611630485,
        0.04569403771533745,
        0.02065581104208769,
        0.028051686651657394,
        0.024639633867791912,
        0.06967142571370558,
        0.00751678489441241,
        0.055546583949532824,
        0.07858914529157447,
        0.023314994418747216,
        0.04830052299545998,
        0.09534524325806089,
        0.05100709261151587,
        0.06186349284245676,
        0.04037162640945943,
        0.07902750015639687,
        0.05192632870614664,
        0.06263542096014489
      ]
    },
    {
      "content": "import React, { useState, useEffect } from \"react\";\nimport { Box, Text, useInput } from \"ink\";\nimport { loadPrompts, CustomPrompt } from \"../../utils/prompts\";\n\ninterface DeletePromptProps {\n  onClose: () => void;\n  onDeletePrompt: (name: string) => void;\n}\n\nexport default function DeletePrompt({ onClose, onDeletePrompt }: DeletePromptProps) {\n  const [prompts, setPrompts] = useState<CustomPrompt[]>([]);\n  const [filteredPrompts, setFilteredPrompts] = useState<CustomPrompt[]>([]);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isMounted, setIsMounted] = useState(true);\n\n  useEffect(() => {\n    loadPromptsData();\n    \n    return () => {\n      setIsMounted(false);\n    };\n  }, []);\n\n  useEffect(() => {\n    updateFilteredPrompts();\n  }, [searchQuery, prompts]);\n\n  const loadPromptsData = () => {\n    const promptsData = loadPrompts();\n    if (isMounted) {\n      setPrompts(promptsData);\n    }\n  };\n\n  const updateFilteredPrompts = () => {\n    if (!searchQuery.trim()) {\n      setFilteredPrompts(prompts);\n      return;\n    }\n\n    const query = searchQuery.toLowerCase();\n    const filtered = prompts.filter(prompt => \n      prompt.name.toLowerCase().includes(query) ||\n      prompt.content.toLowerCase().includes(query)\n    ).sort((a, b) => a.name.localeCompare(b.name));\n\n    setFilteredPrompts(filtered);\n    \n    // Reset selection if current index is out of bounds\n    if (selectedIndex >= filtered.length) {\n      setSelectedIndex(0);\n    }\n  };\n\n  useInput((inputChar, key) => {\n    if (key.ctrl && inputChar === \"c\") {\n      onClose();\n      return;\n    }\n\n    if (key.escape) {\n      onClose();\n      return;\n    }\n\n    if (key.upArrow) {\n      setSelectedIndex(prev => prev === 0 ? Math.max(0, filteredPrompts.length - 1) : prev - 1);\n      return;\n    }\n\n    if (key.downArrow) {\n      setSelectedIndex(prev => filteredPrompts.length === 0 ? 0 : (prev + 1) % Math.min(10, filteredPrompts.length));\n      return;\n    }\n\n    if (key.return) {\n      if (filteredPrompts.length > 0 && selectedIndex < filteredPrompts.length) {\n        const selectedPrompt = filteredPrompts[selectedIndex];\n        onDeletePrompt(selectedPrompt.name);\n        \n        // Refresh prompts after deletion\n        setTimeout(() => {\n          if (isMounted) {\n            loadPromptsData();\n          }\n        }, 100);\n      }\n      return;\n    }\n\n    if (key.backspace || key.delete) {\n      setSearchQuery(prev => prev.slice(0, -1));\n      setSelectedIndex(0);\n      return;\n    }\n\n    if (inputChar && !key.ctrl && !key.meta) {\n      setSearchQuery(prev => prev + inputChar);\n      setSelectedIndex(0);\n      return;\n    }\n  });\n\n  if (prompts.length === 0) {\n    return (\n      <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n        <Text color=\"yellow\">🗑️  Delete Custom Prompt</Text>\n        <Box marginBottom={1}>\n          <Text color=\"gray\">No custom prompts have been added yet.</Text>\n        </Box>\n        <Box flexDirection=\"column\" marginTop={1}>\n          <Text color=\"gray\" dimColor>Use /add-prompt to add prompts first</Text>\n          <Text color=\"gray\" dimColor>Press Esc to close</Text>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n      <Text color=\"yellow\">🗑️  Delete Custom Prompt</Text>\n      <Box marginBottom={1}>\n        <Text color=\"gray\">Search: </Text>\n        <Text>{searchQuery || \"\"}█</Text>\n      </Box>\n      \n      <Box flexDirection=\"column\" marginBottom={1}>\n        {filteredPrompts.length === 0 ? (\n          <Box borderStyle=\"round\" borderColor=\"gray\" paddingX={1}>\n            <Text color=\"gray\">No prompts found matching \"{searchQuery}\"</Text>\n          </Box>\n        ) : (\n          filteredPrompts.slice(0, 10).map((prompt, index) => {\n            const isSelected = index === selectedIndex;\n            const dateAdded = new Date(prompt.dateAdded).toLocaleDateString();\n            const preview = prompt.content.length > 60 \n              ? prompt.content.substring(0, 60) + \"...\" \n              : prompt.content;\n            \n            return (\n              <Box \n                key={prompt.name}\n                borderStyle=\"round\" \n                borderColor={isSelected ? \"red\" : \"gray\"} \n                paddingX={1} \n                marginBottom={1}\n              >\n                <Box flexDirection=\"column\" width=\"100%\">\n                  <Box>\n                    <Box width={25}>\n                      <Text color={isSelected ? \"red\" : \"white\"}>{prompt.name}</Text>\n                    </Box>\n                    <Box flexGrow={1}>\n                      <Text color=\"gray\" dimColor>Added {dateAdded}</Text>\n                    </Box>\n                  </Box>\n                  <Box marginTop={1}>\n                    <Text color=\"gray\" dimColor>{preview.replace(/\\n/g, ' ')}</Text>\n                  </Box>\n                </Box>\n              </Box>\n            );\n          })\n        )}\n        {filteredPrompts.length > 10 && (\n          <Box paddingX={1}>\n            <Text color=\"gray\" dimColor>... and {filteredPrompts.length - 10} more</Text>\n          </Box>\n        )}\n      </Box>\n\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"gray\" dimColor>• Type to search prompts</Text>\n        <Text color=\"gray\" dimColor>• Use ↑/↓ arrows to navigate</Text>\n        <Text color=\"red\" dimColor>• Press Enter to DELETE selected prompt</Text>\n        <Text color=\"gray\" dimColor>• Press Esc to cancel</Text>\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/delete-prompt.tsx",
      "embedding": [
        4.95,
        0.1,
        0,
        0.3,
        0.1,
        0.09756437379202529,
        0.04983947454267568,
        0.010184366827738224,
        0.09563645801115156,
        0.08585724288981439,
        0.06768889386957576,
        0.09442667398702484,
        0.08480652002199611,
        0.021098042961147003,
        0.0668169053310139,
        0.06525788577288724,
        0.03180166917950688,
        0.05626373768020098,
        0.033936209580956105,
        0.03645933399619829,
        0.06974664596941597,
        0.05479608045999047,
        0.032671659319325495,
        0.08344475079696845,
        0.051637041664333964,
        0.032533383504730916,
        0.09690799933960503,
        0.06773241787341232,
        0.09785116534024611,
        0.09091463981446396,
        0.09418059456371902,
        0.03366500509607617,
        0.02170367914867054,
        0.07432997077300517,
        0.03480095643612482,
        0.014405223901698695,
        0.0760665028962561,
        0.030605896190531258,
        0.0643622536283403,
        0.03495128992440968,
        0.07308771939267832,
        0.03154537317505768,
        0.05680500840255213,
        0.030956203424509346,
        0.056906310467955946,
        0.06231001918540246,
        0.09416432376654088,
        0.05218833587549328,
        0.09417461778573347,
        0.09521186981334442,
        0.06301209497756884,
        0.05598459083770466,
        0.02922529451545095,
        0.06180508563919537,
        0.023679040766663197,
        0.0034107525887147163,
        0.09220572524625734,
        0.04735979575442694,
        0.04231060712602498,
        0.031829908679558316,
        0.061127837063397354,
        0.022689854683780555,
        0.07510051010962496,
        0.08169319832046712,
        0.014515378526163015,
        0.042605848288969385,
        0.04959577577207397,
        0.03963894204297444,
        0.07463506034656013,
        0.01039343778721732,
        0.03612002106318355,
        0.012413195947706603,
        0.01676576628146641,
        0.028858834535010258,
        0.07835550727104991,
        0.07628107379135667,
        0.08104845009137052,
        0.09473273748161892,
        0.041912893518011245,
        0.04835456470062412,
        0.027540985775140994,
        0.07280451688744934,
        0.055563693627151946,
        0.031295840640270835,
        0.08740803012113302,
        0.09288349608356714,
        0.05910421187382631,
        0.018713204068164836,
        0.0813905287979988,
        0.04469181959625426,
        0.004669519223038499,
        0.030285909216966136,
        0.09082127432277026,
        0.08326175735250232,
        0.024454319627819646,
        0.07382045198583256,
        0.027288982632444614,
        0.022380778213465735,
        0.040392340530675946,
        0.03744504460903693
      ]
    },
    {
      "content": "/**\n * Professional diff renderer component\n */\n\nimport React, { useMemo } from 'react';\nimport { Box, Text } from 'ink';\nimport { Colors } from '../utils/colors';\nimport crypto from 'crypto';\nimport { colorizeCode } from '../utils/code-colorizer';\nimport { MaxSizedBox } from '../shared/max-sized-box';\n\ninterface DiffLine {\n  type: 'add' | 'del' | 'context' | 'hunk' | 'other';\n  oldLine?: number;\n  newLine?: number;\n  content: string;\n}\n\n// Parsing function for expensive diff computation\nfunction parseDiffWithLineNumbers(diffContent: string): DiffLine[] {\n  const lines = diffContent.split('\\n');\n  const result: DiffLine[] = [];\n  let currentOldLine = 0;\n  let currentNewLine = 0;\n  let inHunk = false;\n  const hunkHeaderRegex = /^@@ -(\\d+),?\\d* \\+(\\d+),?\\d* @@/;\n\n  for (const line of lines) {\n    const hunkMatch = line.match(hunkHeaderRegex);\n    if (hunkMatch) {\n      currentOldLine = parseInt(hunkMatch[1], 10);\n      currentNewLine = parseInt(hunkMatch[2], 10);\n      inHunk = true;\n      result.push({ type: 'hunk', content: line });\n      // We need to adjust the starting point because the first line number applies to the *first* actual line change/context,\n      // but we increment *before* pushing that line. So decrement here.\n      currentOldLine--;\n      currentNewLine--;\n      continue;\n    }\n    if (!inHunk) {\n      // Skip standard Git header lines more robustly\n      if (\n        line.startsWith('--- ') ||\n        line.startsWith('+++ ') ||\n        line.startsWith('diff --git') ||\n        line.startsWith('index ') ||\n        line.startsWith('similarity index') ||\n        line.startsWith('rename from') ||\n        line.startsWith('rename to') ||\n        line.startsWith('new file mode') ||\n        line.startsWith('deleted file mode')\n      )\n        continue;\n      // If it's not a hunk or header, skip (or handle as 'other' if needed)\n      continue;\n    }\n    if (line.startsWith('+')) {\n      currentNewLine++; // Increment before pushing\n      result.push({\n        type: 'add',\n        newLine: currentNewLine,\n        content: line.substring(1),\n      });\n    } else if (line.startsWith('-')) {\n      currentOldLine++; // Increment before pushing\n      result.push({\n        type: 'del',\n        oldLine: currentOldLine,\n        content: line.substring(1),\n      });\n    } else if (line.startsWith(' ')) {\n      currentOldLine++; // Increment before pushing\n      currentNewLine++;\n      result.push({\n        type: 'context',\n        oldLine: currentOldLine,\n        newLine: currentNewLine,\n        content: line.substring(1),\n      });\n    } else if (line.startsWith('\\\\')) {\n      // Handle \"\\ No newline at end of file\"\n      result.push({ type: 'other', content: line });\n    }\n  }\n  return result;\n}\n\ninterface DiffRendererProps {\n  diffContent: string;\n  filename?: string;\n  tabWidth?: number;\n  availableTerminalHeight?: number;\n  terminalWidth?: number;\n}\n\nconst DEFAULT_TAB_WIDTH = 4; // Spaces per tab for normalization\n\n// Memoized DiffRenderer component with shallow prop comparison\nexport const DiffRenderer = React.memo(({\n  diffContent,\n  filename,\n  tabWidth = DEFAULT_TAB_WIDTH,\n  availableTerminalHeight,\n  terminalWidth = 80,\n}: DiffRendererProps): React.ReactElement => {\n  if (!diffContent || typeof diffContent !== 'string') {\n    return <Text color={Colors.AccentYellow}>No diff content.</Text>;\n  }\n\n  // Strip the first summary line (e.g. \"Updated file.txt with 1 addition and 2 removals\")\n  const lines = diffContent.split('\\n');\n  const firstLine = lines[0];\n  let actualDiffContent = diffContent;\n  \n  if (firstLine && (firstLine.startsWith('Updated ') || firstLine.startsWith('Created '))) {\n    actualDiffContent = lines.slice(1).join('\\n');\n  }\n  \n  // Use memoized parsing with content hash for caching\n  const contentHash = useMemo(() => \n    crypto.createHash('sha1').update(actualDiffContent).digest('hex'),\n    [actualDiffContent]\n  );\n  \n  const parsedLines = useMemo(() => \n    parseDiffWithLineNumbers(actualDiffContent),\n    [actualDiffContent]\n  );\n\n  if (parsedLines.length === 0) {\n    return <Text dimColor>No changes detected.</Text>;\n  }\n\n  // Memoize expensive render computation\n  const renderedOutput = useMemo(() => renderDiffContent(\n    parsedLines,\n    filename,\n    tabWidth,\n    availableTerminalHeight,\n    terminalWidth,\n  ), [parsedLines, filename, tabWidth, availableTerminalHeight, terminalWidth]);\n\n  return <>{renderedOutput}</>;\n});\n\n// Add display name for better debugging\nDiffRenderer.displayName = 'DiffRenderer';\n\nconst renderDiffContent = (\n  parsedLines: DiffLine[],\n  filename: string | undefined,\n  tabWidth = DEFAULT_TAB_WIDTH,\n  availableTerminalHeight: number | undefined,\n  terminalWidth: number,\n) => {\n  // 1. Normalize whitespace (replace tabs with spaces) *before* further processing\n  const normalizedLines = parsedLines.map((line) => ({\n    ...line,\n    content: line.content.replace(/\\t/g, ' '.repeat(tabWidth)),\n  }));\n\n  // Filter out non-displayable lines (hunks, potentially 'other') using the normalized list\n  const displayableLines = normalizedLines.filter(\n    (l) => l.type !== 'hunk' && l.type !== 'other',\n  );\n\n  if (displayableLines.length === 0) {\n    return <Text dimColor>No changes detected.</Text>;\n  }\n\n  // Calculate the minimum indentation across all displayable lines\n  let baseIndentation = Infinity; // Start high to find the minimum\n  for (const line of displayableLines) {\n    // Only consider lines with actual content for indentation calculation\n    if (line.content.trim() === '') continue;\n\n    const firstCharIndex = line.content.search(/\\S/); // Find index of first non-whitespace char\n    const currentIndent = firstCharIndex === -1 ? 0 : firstCharIndex; // Indent is 0 if no non-whitespace found\n    baseIndentation = Math.min(baseIndentation, currentIndent);\n  }\n  // If baseIndentation remained Infinity (e.g., no displayable lines with content), default to 0\n  if (!isFinite(baseIndentation)) {\n    baseIndentation = 0;\n  }\n\n  const key = filename\n    ? `diff-box-${filename}-${crypto.createHash('sha1').update(JSON.stringify(parsedLines)).digest('hex')}`\n    : `diff-box-${crypto.createHash('sha1').update(JSON.stringify(parsedLines)).digest('hex')}`;\n\n  let lastLineNumber: number | null = null;\n  const MAX_CONTEXT_LINES_WITHOUT_GAP = 5;\n\n  return (\n    <MaxSizedBox\n      maxHeight={availableTerminalHeight}\n      maxWidth={terminalWidth}\n      key={key}\n    >\n      {displayableLines.reduce<React.ReactNode[]>((acc, line, index) => {\n        // Determine the relevant line number for gap calculation based on type\n        let relevantLineNumberForGapCalc: number | null = null;\n        if (line.type === 'add' || line.type === 'context') {\n          relevantLineNumberForGapCalc = line.newLine ?? null;\n        } else if (line.type === 'del') {\n          // For deletions, the gap is typically in relation to the original file's line numbering\n          relevantLineNumberForGapCalc = line.oldLine ?? null;\n        }\n\n        if (\n          lastLineNumber !== null &&\n          relevantLineNumberForGapCalc !== null &&\n          relevantLineNumberForGapCalc >\n            lastLineNumber + MAX_CONTEXT_LINES_WITHOUT_GAP + 1\n        ) {\n          acc.push(\n            <Box key={`gap-${index}`}>\n              <Text wrap=\"truncate\">{'═'.repeat(terminalWidth)}</Text>\n            </Box>,\n          );\n        }\n\n        const lineKey = `diff-line-${index}`;\n        let gutterNumStr = '';\n        let backgroundColor: string | undefined = undefined;\n        let prefixSymbol = ' ';\n        let dim = false;\n\n        switch (line.type) {\n          case 'add':\n            gutterNumStr = (line.newLine ?? '').toString();\n            backgroundColor = '#86efac'; // Light green for additions\n            prefixSymbol = '+';\n            lastLineNumber = line.newLine ?? null;\n            break;\n          case 'del':\n            gutterNumStr = (line.oldLine ?? '').toString();\n            backgroundColor = 'redBright'; // Light red for deletions\n            prefixSymbol = '-';\n            // For deletions, update lastLineNumber based on oldLine if it's advancing.\n            // This helps manage gaps correctly if there are multiple consecutive deletions\n            // or if a deletion is followed by a context line far away in the original file.\n            if (line.oldLine !== undefined) {\n              lastLineNumber = line.oldLine;\n            }\n            break;\n          case 'context':\n            gutterNumStr = (line.newLine ?? '').toString();\n            dim = true;\n            prefixSymbol = ' ';\n            lastLineNumber = line.newLine ?? null;\n            break;\n          default:\n            return acc;\n        }\n\n        const displayContent = line.content.substring(baseIndentation);\n\n        acc.push(\n          <Box key={lineKey} flexDirection=\"row\">\n            <Text color={Colors.Gray} dimColor={dim}>{gutterNumStr.padEnd(4)}</Text>\n            <Text color={backgroundColor ? '#000000' : undefined} backgroundColor={backgroundColor} dimColor={!backgroundColor && dim}>{prefixSymbol} </Text>\n            <Text color={backgroundColor ? '#000000' : undefined} backgroundColor={backgroundColor} dimColor={!backgroundColor && dim} wrap=\"wrap\">\n              {displayContent}\n            </Text>\n          </Box>,\n        );\n        return acc;\n      }, [])}\n    </MaxSizedBox>\n  );\n};\n\n\nconst getLanguageFromExtension = (extension: string): string | null => {\n  const languageMap: { [key: string]: string } = {\n    js: 'javascript',\n    ts: 'typescript',\n    py: 'python',\n    json: 'json',\n    css: 'css',\n    html: 'html',\n    sh: 'bash',\n    md: 'markdown',\n    yaml: 'yaml',\n    yml: 'yaml',\n    txt: 'plaintext',\n    java: 'java',\n    c: 'c',\n    cpp: 'cpp',\n    rb: 'ruby',\n  };\n  return languageMap[extension] || null; // Return null if extension not found\n};",
      "filePath": "../src/ui/components/diff-renderer.tsx",
      "embedding": [
        10.31,
        0.2,
        0,
        0.6,
        0.1,
        0.011058713726213087,
        0.016659300457373637,
        0.05903217354606244,
        0.08755988318551276,
        0.058759199144739406,
        0.05275558164695269,
        0.01939453039229231,
        0.029240047765978973,
        0.014684252390704457,
        0.008646589211854017,
        0.06272543161876222,
        0.08879095716389149,
        0.0925990186078984,
        0.044313591681366,
        0.025115488293347865,
        0.034156076903021686,
        0.004866291363952358,
        0.07252288920228604,
        0.0878992120197492,
        0.0020453496634940784,
        0.009545934027420312,
        0.08996201730369228,
        0.07321374739124709,
        0.09372132657113542,
        0.08389149318743604,
        0.015014983684194039,
        0.0695952327271811,
        0.08178129517576466,
        0.046768058314777976,
        0.07264622594755675,
        0.07264010271565692,
        0.09607196999672643,
        0.03111987131093005,
        0.009456725531859134,
        0.09528017809894732,
        0.08192496571672597,
        0.05073188112860222,
        0.03467097393340051,
        0.008592354535432866,
        0.06275885019411515,
        0.011906381471655382,
        0.090588943345089,
        0.03127759292269749,
        0.038599810989914565,
        0.029086905378185746,
        0.08606038042165874,
        0.06837144164042024,
        0.08744372932929512,
        0.08883205147944177,
        0.07501239761402864,
        0.040144267940927014,
        0.016858679703045054,
        0.003087071052040336,
        0.08498899887159723,
        0.04368530146906627,
        0.029051780518965332,
        0.07562811244596868,
        0.08977659261277413,
        0.010818877815119844,
        0.0554609710167195,
        0.07993123954353448,
        0.06863068262259095,
        0.03732362075864492,
        0.08001387402914151,
        0.031164644498819984,
        0.008527846205360446,
        0.02279661150079261,
        0.03953575243813439,
        0.04584710794509425,
        0.013193371225152739,
        0.006717661286963739,
        0.02607363994676635,
        0.008339158018666526,
        0.07186460346560776,
        0.0982435267943803,
        0.061212811656427,
        0.008797674704892912,
        0.03363371920636232,
        0.013878755415522737,
        0.09870929164744713,
        0.05871712311149997,
        0.0009279299765353355,
        0.06498344179330803,
        0.0034031113867498022,
        0.04130975935501892,
        0.06267788116859091,
        0.035937697705973784,
        0.02389774030767954,
        0.08836550130994937,
        0.0010021670506834336,
        0.09789711359087139,
        0.027424129761093343,
        0.027606069762760633,
        0.013376619044314399,
        0.07535774281698815
      ]
    },
    {
      "content": "import React, { useState, useEffect } from 'react';\nimport { Box, Text, useInput, useApp } from 'ink';\nimport { fuzzySearch } from '../../utils/fuzzy-search';\nimport { expertModelsManager } from '../../utils/expert-models-manager';\nimport { getInstanceAvailableModels } from '../../utils/instance-models';\n\ninterface Model {\n  name: string;\n  provider: string;\n}\n\nimport { ExpertModelsConfig } from '../../utils/expert-models-manager';\n\ninterface ExpertModelsProps {\n  onExit: () => void;\n}\n\nexport const ExpertModels: React.FC<ExpertModelsProps> = ({ onExit }) => {\n  const { exit } = useApp();\n  const [config, setConfig] = useState<ExpertModelsConfig>({\n    enabled: false,\n    fastModel: null,\n    codeModel: null,\n    reasoningModel: null,\n    toolsModel: null,\n  });\n  const [availableModels, setAvailableModels] = useState<Model[]>([]);\n  const [currentField, setCurrentField] = useState<'enabled' | 'fast' | 'code' | 'reasoning' | 'tools'>('enabled');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filteredModels, setFilteredModels] = useState<Model[]>([]);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [showModelPicker, setShowModelPicker] = useState(false);\n\n  useEffect(() => {\n    // Load current expert models configuration\n    const expertConfig = expertModelsManager.getExpertModelsConfig();\n    setConfig(expertConfig);\n    \n    // Load available models\n    const instanceModels = getInstanceAvailableModels();\n    const models: Model[] = instanceModels.map(m => ({\n      name: m.model,\n      provider: m.description.split('(')[1]?.split(')')[0] || 'Unknown'\n    }));\n    setAvailableModels(models);\n    setFilteredModels(models);\n  }, []);\n\n  useEffect(() => {\n    if (searchQuery) {\n      const filtered = fuzzySearch(searchQuery, availableModels, (model) => model.name);\n      setFilteredModels(filtered);\n    } else {\n      setFilteredModels(availableModels);\n    }\n    setSelectedIndex(0);\n  }, [searchQuery, availableModels]);\n\n  useInput((input, key) => {\n    if (key.escape) {\n      if (showModelPicker) {\n        setShowModelPicker(false);\n        setSearchQuery('');\n      } else {\n        onExit();\n      }\n      return;\n    }\n\n    if (showModelPicker) {\n      if (key.upArrow) {\n        setSelectedIndex(Math.max(0, selectedIndex - 1));\n      } else if (key.downArrow) {\n        setSelectedIndex(Math.min(filteredModels.length - 1, selectedIndex + 1));\n      } else if (key.return) {\n        const selectedModel = filteredModels[selectedIndex];\n        if (selectedModel) {\n          const newConfig = { ...config };\n          switch (currentField) {\n            case 'fast':\n              newConfig.fastModel = selectedModel.name;\n              break;\n            case 'code':\n              newConfig.codeModel = selectedModel.name;\n              break;\n            case 'reasoning':\n              newConfig.reasoningModel = selectedModel.name;\n              break;\n            case 'tools':\n              newConfig.toolsModel = selectedModel.name;\n              break;\n          }\n          setConfig(newConfig);\n          expertModelsManager.setExpertModelsConfig(newConfig);\n        }\n        setShowModelPicker(false);\n        setSearchQuery('');\n      } else if (key.backspace || key.delete) {\n        setSearchQuery(searchQuery.slice(0, -1));\n      } else if (input && !key.ctrl && !key.meta) {\n        setSearchQuery(searchQuery + input);\n      }\n    } else {\n      if (key.upArrow) {\n        const fields: Array<typeof currentField> = ['enabled', 'fast', 'code', 'reasoning', 'tools'];\n        const currentIndex = fields.indexOf(currentField);\n        setCurrentField(fields[Math.max(0, currentIndex - 1)]);\n      } else if (key.downArrow) {\n        const fields: Array<typeof currentField> = ['enabled', 'fast', 'code', 'reasoning', 'tools'];\n        const currentIndex = fields.indexOf(currentField);\n        setCurrentField(fields[Math.min(fields.length - 1, currentIndex + 1)]);\n      } else if (key.return) {\n        if (currentField === 'enabled') {\n          const newConfig = { ...config, enabled: !config.enabled };\n          setConfig(newConfig);\n          expertModelsManager.setExpertModelsConfig(newConfig);\n        } else {\n          setShowModelPicker(true);\n        }\n      } else if (key.backspace || key.delete) {\n        if (currentField !== 'enabled') {\n          const newConfig = { ...config };\n          switch (currentField) {\n            case 'fast':\n              newConfig.fastModel = null;\n              break;\n            case 'code':\n              newConfig.codeModel = null;\n              break;\n            case 'reasoning':\n              newConfig.reasoningModel = null;\n              break;\n            case 'tools':\n              newConfig.toolsModel = null;\n              break;\n          }\n          setConfig(newConfig);\n          expertModelsManager.setExpertModelsConfig(newConfig);\n        }\n      }\n    }\n  });\n\n  if (showModelPicker) {\n    return (\n      <Box flexDirection=\"column\">\n        <Text bold color=\"cyan\">Select Model for {currentField === 'fast' ? 'Fast Operations' : \n          currentField === 'code' ? 'Code Tasks' : \n          currentField === 'reasoning' ? 'Complex Reasoning' : 'Tool Operations'}</Text>\n        <Text dimColor>Type to search, ↑↓ to navigate, Enter to select, Esc to cancel</Text>\n        \n        <Box marginTop={1}>\n          <Text>Search: {searchQuery}</Text>\n        </Box>\n\n        <Box flexDirection=\"column\" marginTop={1}>\n          {filteredModels.slice(0, 10).map((model, index) => (\n            <Box key={model.name}>\n              <Text color={index === selectedIndex ? 'cyan' : 'white'}>\n                {index === selectedIndex ? '► ' : '  '}\n                {model.name} <Text dimColor>({model.provider})</Text>\n              </Text>\n            </Box>\n          ))}\n          {filteredModels.length > 10 && (\n            <Text dimColor>... and {filteredModels.length - 10} more</Text>\n          )}\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box flexDirection=\"column\">\n      <Text bold color=\"cyan\">Expert Models Configuration</Text>\n      <Text dimColor>Use different models for different types of tasks</Text>\n      <Text dimColor>↑↓ to navigate, Enter to toggle/select, Backspace to clear, Esc to exit</Text>\n\n      <Box flexDirection=\"column\" marginTop={2}>\n        <Box>\n          <Text color={currentField === 'enabled' ? 'cyan' : 'white'}>\n            {currentField === 'enabled' ? '► ' : '  '}\n            Expert Mode: {config.enabled ? \n              <Text color=\"green\">Enabled</Text> : \n              <Text color=\"red\">Disabled</Text>\n            }\n          </Text>\n        </Box>\n\n        <Box marginTop={1}>\n          <Text color={currentField === 'fast' ? 'cyan' : config.enabled ? 'white' : 'gray'}>\n            {currentField === 'fast' ? '► ' : '  '}\n            Fast Operations: {config.fastModel ? \n              <Text color=\"green\">{config.fastModel}</Text> : \n              <Text dimColor>Not set</Text>\n            }\n          </Text>\n        </Box>\n\n        <Box>\n          <Text color={currentField === 'code' ? 'cyan' : config.enabled ? 'white' : 'gray'}>\n            {currentField === 'code' ? '► ' : '  '}\n            Code Tasks: {config.codeModel ? \n              <Text color=\"green\">{config.codeModel}</Text> : \n              <Text dimColor>Not set</Text>\n            }\n          </Text>\n        </Box>\n\n        <Box>\n          <Text color={currentField === 'reasoning' ? 'cyan' : config.enabled ? 'white' : 'gray'}>\n            {currentField === 'reasoning' ? '► ' : '  '}\n            Complex Reasoning: {config.reasoningModel ? \n              <Text color=\"green\">{config.reasoningModel}</Text> : \n              <Text dimColor>Not set</Text>\n            }\n          </Text>\n        </Box>\n\n        <Box>\n          <Text color={currentField === 'tools' ? 'cyan' : config.enabled ? 'white' : 'gray'}>\n            {currentField === 'tools' ? '► ' : '  '}\n            Tool Operations: {config.toolsModel ? \n              <Text color=\"green\">{config.toolsModel}</Text> : \n              <Text dimColor>Not set</Text>\n            }\n          </Text>\n        </Box>\n      </Box>\n\n      <Box marginTop={2}>\n        <Text dimColor>\n          • Fast: File navigation, simple commands{'\\n'}\n          • Code: Code editing, refactoring, syntax fixes{'\\n'}\n          • Reasoning: Complex problem solving, architecture decisions{'\\n'}\n          • Tools: Multi-tool workflows, complex orchestration\n        </Text>\n      </Box>\n    </Box>\n  );\n};",
      "filePath": "../src/ui/components/expert-models.tsx",
      "embedding": [
        7.74,
        0,
        0,
        0.6,
        0.1,
        0.006698929702309675,
        0.05175574224895946,
        0.06652833516870497,
        0.027527384848310434,
        0.006945407294473194,
        0.08457601737399324,
        0.09845099588370931,
        0.08295566040467493,
        0.06688695565937298,
        0.01449968044042186,
        0.026760527987070216,
        0.06366748527551243,
        0.05740190095062014,
        0.025171332829569106,
        0.07642394384165206,
        0.03681721527059141,
        0.021063538269987827,
        0.0504783620399386,
        0.0708171606819937,
        0.03310076449110042,
        0.018740711270913615,
        0.03640214383881124,
        0.08827110022249053,
        0.09296429535398942,
        0.022817018182303042,
        0.0944176453226982,
        0.09078903364556205,
        0.08031290565993278,
        0.07189992209352604,
        0.06104184285756251,
        0.022767414064762792,
        0.015372687640466077,
        0.07622372946708111,
        0.052821307036325364,
        0.06872018482341993,
        0.0735145757393372,
        0.003316773271092921,
        0.009135098903368888,
        0.07585927085825067,
        0.09213832908104258,
        0.011975505541470989,
        0.06328491379783685,
        0.0504119305710523,
        0.08536486595534605,
        0.07028709540212906,
        0.06456507203084182,
        0.028833930169382106,
        0.06747883857012764,
        0.021855888637491473,
        0.09585642135528781,
        0.09478712306315518,
        0.050253826724221844,
        0.003350895391095832,
        0.06433320252754109,
        0.006383666230736596,
        0.04653224665561653,
        0.04611486276937981,
        0.00882210841066432,
        0.0491865648630938,
        0.015235534892365744,
        0.09323306923165454,
        0.07454256375670663,
        0.09906971072331658,
        0.00662284287356878,
        0.0330590096207631,
        0.03551035070520913,
        0.03301325267130635,
        0.03713332793635476,
        0.0947469708046755,
        0.0740706808916553,
        0.04845698836362829,
        0.03161639231992276,
        0.08169989575873898,
        0.023401555151025544,
        0.09066203845842856,
        0.048372789106686215,
        0.004670889313369464,
        0.09637795121433576,
        0.012608276169674405,
        0.04670804298626372,
        0.06671681390722381,
        0.035610229076878275,
        0.04337079072811404,
        0.014573646400839458,
        0.035130167922632495,
        0.06500886505457398,
        0.017030618531053542,
        0.06848039788784253,
        0.035489259569294565,
        0.02904981075753479,
        0.029064969482013328,
        0.09340062063076154,
        0.00478740526344319,
        0.09427732313117262,
        0.04259321168382463
      ]
    },
    {
      "content": "import React from \"react\";\nimport { Box, Text } from \"ink\";\n\ninterface FileFinderProps {\n  files: string[];\n  selectedIndex: number;\n  query: string;\n  isVisible: boolean;\n  maxItems?: number;\n}\n\nexport function FileFinder({ \n  files, \n  selectedIndex, \n  query, \n  isVisible, \n  maxItems = 8 \n}: FileFinderProps) {\n  if (!isVisible || files.length === 0) {\n    return null;\n  }\n\n  const displayFiles = files.slice(0, maxItems);\n\n  return (\n    <Box flexDirection=\"column\" marginTop={1}>\n      <Box borderStyle=\"round\" borderColor=\"cyan\" paddingX={1}>\n        <Box flexDirection=\"column\">\n          <Text color=\"cyan\" bold>\n            {query.endsWith('/') ? '📁 Directories matching' : '📄 Files matching'} \"@{query}\"\n          </Text>\n          {displayFiles.map((file, index) => {\n            const isDirectory = file.endsWith('/');\n            const icon = isDirectory ? '📁' : '📄';\n            \n            return (\n              <Box key={index} paddingLeft={1}>\n                <Text\n                  color={index === selectedIndex ? \"black\" : \"white\"}\n                  backgroundColor={index === selectedIndex ? \"cyan\" : undefined}\n                >\n                  {index === selectedIndex ? \"▶ \" : \"  \"}\n                  {icon} {file}\n                </Text>\n              </Box>\n            );\n          })}\n          <Box marginTop={1} paddingX={1}>\n            <Text color=\"gray\" dimColor>\n              ↑↓ navigate • Enter select • Esc cancel\n            </Text>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/file-finder.tsx",
      "embedding": [
        1.51,
        0.1,
        0,
        0.2,
        0.1,
        0.016628083156202213,
        0.06254963761751232,
        0.03334233611432781,
        0.020496234344988797,
        0.011691194624030989,
        0.0721189685650519,
        0.07760173547345882,
        0.03421117261212644,
        0.08012516927613877,
        0.06620792392427431,
        0.04937782408826546,
        0.03623777086957376,
        0.07935045853073866,
        0.08094957288640481,
        0.08064375866282687,
        0.023061218590154742,
        0.08285854018277027,
        0.062010675000861264,
        0.02568498902868708,
        0.07807350273389305,
        0.04859849188786208,
        0.02818156422919024,
        0.03001406754384478,
        0.09688613400582861,
        0.027841150182380203,
        0.014365823358119624,
        0.04947332279513655,
        0.0668206446541502,
        0.08185483236544341,
        0.05031402084533128,
        0.09617107694269592,
        0.09750192833116735,
        0.015360536099406309,
        0.09401717402052191,
        0.05030947137694097,
        0.05320107901137239,
        0.014955248622957641,
        0.08906162146157755,
        0.0008096191865744062,
        0.08366169944656747,
        0.05210641025132188,
        0.07652701812920268,
        0.0071880737745559035,
        0.031384080734607016,
        0.009501711762676779,
        0.04568939492818472,
        0.05246848962078966,
        0.09431564825726102,
        0.024670461194768425,
        0.014696871292362614,
        0.01844303857095361,
        0.03037340973549506,
        0.027889575323723482,
        0.07436084397944066,
        0.04629772378784235,
        0.07582579901316255,
        0.06332875595106156,
        0.07999689191508658,
        0.09251442560991391,
        0.01621277377083066,
        0.017470060751334695,
        0.05158991223032411,
        0.004378982056597547,
        0.0975873883330914,
        0.08772417392856564,
        0.028732410855840086,
        0.07434120286723968,
        0.0757548595867072,
        0.0848740059405464,
        0.031091491467965627,
        0.030690930425550655,
        0.01752469753073016,
        0.04355092110069937,
        0.08436451649039656,
        0.06150003848385882,
        0.013440804596984046,
        0.0011204807913972493,
        0.06558559571003357,
        0.0252984273239669,
        0.04462918738825183,
        0.013627339172209652,
        0.04726304003790532,
        0.026283730256180117,
        0.005117764635161681,
        0.052571747115502554,
        0.07989063593740055,
        0.09736680627431814,
        0.009826495353002986,
        0.031008275552504707,
        0.03868748197789981,
        0.020300425569382087,
        0.05892067878235542,
        0.026293038128894466,
        0.07826099534293907,
        0.0312873584710317
      ]
    },
    {
      "content": "import React, { useState, useEffect } from \"react\";\nimport { Box, Text } from \"ink\";\n\ninterface LoadingSpinnerProps {\n  isActive: boolean;\n  processingTime: number;\n  tokenCount: number;\n}\n\nconst loadingTexts = [\n  \"Thinking...\",\n  \"Computing...\",\n  \"Analyzing...\",\n  \"Processing...\",\n  \"Calculating...\",\n  \"Interfacing...\",\n  \"Optimizing...\",\n  \"Synthesizing...\",\n  \"Decrypting...\",\n  \"Calibrating...\",\n  \"Bootstrapping...\",\n  \"Synchronizing...\",\n  \"Compiling...\",\n  \"Downloading...\",\n];\n\nexport function LoadingSpinner({ isActive, processingTime, tokenCount }: LoadingSpinnerProps) {\n  const [spinnerFrame, setSpinnerFrame] = useState(0);\n  const [loadingTextIndex, setLoadingTextIndex] = useState(0);\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const spinnerFrames = [\"/\", \"-\", \"\\\\\", \"|\"];\n    const interval = setInterval(() => {\n      setSpinnerFrame((prev) => (prev + 1) % spinnerFrames.length);\n    }, 250);\n\n    return () => clearInterval(interval);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    setLoadingTextIndex(Math.floor(Math.random() * loadingTexts.length));\n\n    const interval = setInterval(() => {\n      setLoadingTextIndex(Math.floor(Math.random() * loadingTexts.length));\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, [isActive]);\n\n  if (!isActive) return null;\n\n  const spinnerFrames = [\"/\", \"-\", \"\\\\\", \"|\"];\n\n  return (\n    <Box marginTop={1}>\n      <Text color=\"cyan\">\n        {spinnerFrames[spinnerFrame]} {loadingTexts[loadingTextIndex]}{\" \"}\n      </Text>\n      <Text color=\"gray\">\n        ({processingTime}s · ↑ {tokenCount} tokens · esc to interrupt)\n      </Text>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/loading-spinner.tsx",
      "embedding": [
        1.59,
        0.1,
        0,
        0.2,
        0.1,
        0.04455320734113316,
        0.08109296474415023,
        0.0016729322202930887,
        0.017968558062955643,
        0.05492355400586401,
        0.07412753238477604,
        0.06668097506819264,
        0.010871136777264579,
        0.06588988587735368,
        0.001782024488097056,
        0.07874625202770512,
        0.001569268531775936,
        0.039897175677503165,
        0.0763901904997159,
        0.05777967228900608,
        0.02030596004896238,
        0.08574948886331579,
        0.05266341486393805,
        0.06232410384566346,
        0.07059133862703003,
        0.03391119828049482,
        0.03587577015592697,
        0.07069191606699436,
        0.07854926764145487,
        0.08441751776068195,
        0.03271837545608576,
        0.05832985781794806,
        0.09813560534587089,
        0.09892361850207465,
        0.060770292467870024,
        0.03563353110003439,
        0.07083933902677438,
        0.0710654301358838,
        0.0019414665316447534,
        0.04046985910084089,
        0.01792598136267327,
        0.06896487450965193,
        0.06471076276061431,
        0.08287653629921915,
        0.08436071455793431,
        0.03232996841480947,
        0.06244754916561229,
        0.026501733752626766,
        0.08767625375010174,
        0.08752690869048085,
        0.014255644572532401,
        0.062378041253991705,
        0.05761740395373595,
        0.07943150733627485,
        0.01776218962051204,
        0.012417196943956944,
        0.012964845612013942,
        0.08513265731917942,
        0.082961656741385,
        0.06427110028925698,
        0.07474311365493291,
        0.011965894955009316,
        0.034039532710841425,
        0.026309180765387297,
        0.0167498856136999,
        0.09954428185841065,
        0.07904921911717458,
        0.03286743614244162,
        0.05014960906045325,
        0.052688733611364814,
        0.0314417164302976,
        0.0855311637937897,
        0.08146745385726564,
        0.02655363425165206,
        0.08123251630467025,
        0.09748778890923757,
        0.01757273797874277,
        0.09112478543357366,
        0.000685704602126891,
        0.0054091441151198575,
        0.08296675498070011,
        0.017552935579972107,
        0.020616588569350502,
        0.0678153837891422,
        0.08989573118713604,
        0.06827123041720407,
        0.04261632142534434,
        0.05581680895907718,
        0.0720495981890165,
        0.09827188016008166,
        0.06974941424264287,
        0.0030526674725822045,
        0.026003539180890014,
        0.001344231059536083,
        0.004430714748524889,
        0.030480376171334825,
        0.04090427374013428,
        0.004547276211918783,
        0.07957583259085144,
        0.08602800500411478
      ]
    },
    {
      "content": "import React from \"react\";\nimport { Box, Text } from \"ink\";\nimport { AddedMcpServer } from \"../../utils/added-mcp-servers\";\n\ninterface McpServerSelectionProps {\n  servers: AddedMcpServer[];\n  selectedIndex: number;\n  isVisible: boolean;\n}\n\nexport function McpServerSelection({ \n  servers, \n  selectedIndex, \n  isVisible \n}: McpServerSelectionProps) {\n  if (!isVisible || servers.length === 0) {\n    return null;\n  }\n\n  return (\n    <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n      <Text color=\"yellow\">🔗 MCP Servers</Text>\n      <Box marginBottom={1}>\n        <Text color=\"gray\">Available MCP servers:</Text>\n      </Box>\n      \n      <Box flexDirection=\"column\" marginBottom={1}>\n        {servers.slice(0, 10).map((server, index) => {\n          const isSelected = index === selectedIndex;\n          const dateAdded = new Date(server.dateAdded).toLocaleDateString();\n          \n          return (\n            <Box \n              key={server.name}\n              borderStyle=\"round\" \n              borderColor={isSelected ? \"blue\" : \"gray\"} \n              paddingX={1} \n              marginBottom={1}\n            >\n              <Box flexDirection=\"column\">\n                <Box>\n                  <Box width={20}>\n                    <Text color={isSelected ? \"blue\" : \"white\"}>{server.name}</Text>\n                  </Box>\n                  <Box width={40}>\n                    <Text color=\"cyan\">{server.command}</Text>\n                  </Box>\n                  <Box flexGrow={1}>\n                    <Text color=\"gray\" dimColor>Added {dateAdded}</Text>\n                  </Box>\n                </Box>\n                {server.description && (\n                  <Box paddingLeft={2}>\n                    <Text color=\"gray\" dimColor>{server.description}</Text>\n                  </Box>\n                )}\n              </Box>\n            </Box>\n          );\n        })}\n        {servers.length > 10 && (\n          <Box paddingX={1}>\n            <Text color=\"gray\" dimColor>... and {servers.length - 10} more</Text>\n          </Box>\n        )}\n      </Box>\n\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"gray\" dimColor>• Use ↑/↓ arrows to navigate</Text>\n        <Text color=\"gray\" dimColor>• Press Enter to view server details</Text>\n        <Text color=\"gray\" dimColor>• Press Esc to close</Text>\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/mcp-server-selection.tsx",
      "embedding": [
        1.83,
        0.1,
        0,
        0.3,
        0.1,
        0.06708756369535811,
        0.027308466398434064,
        0.07069131558206761,
        0.03327532579415563,
        0.08441862137041585,
        0.051387453765853436,
        0.07331089825546845,
        0.016772783678679393,
        0.06589049370677968,
        0.08900375820304132,
        0.07883058203045878,
        0.0910071702174786,
        0.08649169189725246,
        0.04074695547436862,
        0.0007152999256963889,
        0.016386333127216525,
        0.04258565032556552,
        0.06973893598154,
        0.08268709239224178,
        0.008553665352566298,
        0.0003471467024669717,
        0.09520369650535952,
        0.006481002448011053,
        0.018676016334234193,
        0.07958257146597424,
        0.049720139579651816,
        0.002694054790190037,
        0.09173976869636508,
        0.016952059015379394,
        0.027647060503937438,
        0.048022891177068365,
        0.008860947685307563,
        0.02461978585228121,
        0.07572169194194059,
        0.019406244877661794,
        0.09617788820791622,
        0.024742662571598517,
        0.03609518506697101,
        0.08293115755040803,
        0.020344945613683132,
        0.06264416277527594,
        0.05261341143000871,
        0.0037152369819992816,
        0.05454124233547859,
        0.057524693821656786,
        0.027325288814733117,
        0.01719607090152674,
        0.09557923811235051,
        0.07733266490167993,
        0.047027734350276545,
        0.08395208620753229,
        0.026642333470733262,
        0.016278835919127512,
        0.0886607594498283,
        0.014970945428642413,
        0.054336706534664374,
        0.05723423062810421,
        0.08609270779318728,
        0.008746687719516899,
        0.0304468814254983,
        0.06586532532396881,
        0.0788914939670478,
        0.04567021231659188,
        0.05917371708791472,
        0.07440553148851532,
        0.02287390323050317,
        0.006278319139893363,
        0.06875296359027021,
        0.08589068036280793,
        0.020584194330623064,
        0.046612877772553574,
        0.02383806104200702,
        0.028351199756195145,
        0.08473814341695876,
        0.05837509655561871,
        0.06385052124541943,
        0.03190252071619724,
        0.09396364699692614,
        0.0470989090254618,
        0.056242013345076926,
        0.09632741221887511,
        0.08348850816707756,
        0.00857824342526965,
        0.031185442935930063,
        0.008995453135691568,
        0.0806129764089482,
        0.00427992137507015,
        0.004027161695780457,
        0.0694062315432909,
        0.047652897337090855,
        0.061940423714075966,
        0.06895788125198414,
        0.010681679344490137,
        0.04059639928117398,
        0.04459289380415731
      ]
    },
    {
      "content": "import React from \"react\";\nimport { Box, Text } from \"ink\";\n\ninterface ModelOption {\n  model: string;\n  description: string;\n}\n\ninterface ModelSelectionProps {\n  models: ModelOption[];\n  selectedIndex: number;\n  isVisible: boolean;\n  currentModel: string;\n}\n\nexport function ModelSelection({\n  models,\n  selectedIndex,\n  isVisible,\n  currentModel,\n}: ModelSelectionProps) {\n  if (!isVisible) return null;\n\n  return (\n    <Box marginTop={1} flexDirection=\"column\">\n      <Box marginBottom={1}>\n        <Text color=\"cyan\">Select Model (current: {currentModel}):</Text>\n      </Box>\n      {models.map((modelOption, index) => (\n        <Box key={index} paddingLeft={1}>\n          <Text\n            color={index === selectedIndex ? \"black\" : \"white\"}\n            backgroundColor={index === selectedIndex ? \"cyan\" : undefined}\n          >\n            {modelOption.model}\n          </Text>\n          <Box marginLeft={1}>\n            <Text color=\"gray\">{modelOption.description}</Text>\n          </Box>\n        </Box>\n      ))}\n      <Box marginTop={1}>\n        <Text color=\"gray\" dimColor>\n          ↑↓ navigate • Enter/Tab select • Esc cancel\n        </Text>\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/model-selection.tsx",
      "embedding": [
        1.08,
        0.1,
        0,
        0.2,
        0.1,
        0.017789545297207377,
        0.07670036088541005,
        0.07083198262931854,
        0.056231856298479134,
        0.05256330651165463,
        0.07803779611079273,
        0.055657479874700704,
        0.02461209850091142,
        0.009966047526068111,
        0.09792887997758247,
        0.01250908160962273,
        0.07880790204719086,
        0.04684963963617116,
        0.0019304124001170543,
        0.023640552889872414,
        0.09923778504460921,
        0.09515706529257957,
        0.06574495610998406,
        0.09298984659130945,
        0.02630324387381875,
        0.004262335956946517,
        0.05318695016175645,
        0.02876938336553969,
        0.03883436484698671,
        0.037141805414538896,
        0.03343776957606603,
        0.0690610972362962,
        0.055178682882197405,
        0.03497412670453566,
        0.07964692260943618,
        0.02941652355437743,
        0.06012469647686485,
        0.08356281552967813,
        0.028845596585698276,
        0.02180152740264514,
        0.01508126671179675,
        0.030734245477930223,
        0.07739308691056362,
        0.08257284592530079,
        0.032120171537265166,
        0.09839540099430796,
        0.09694277429699699,
        0.07646543681773896,
        0.08209963933345904,
        0.09436932655396171,
        0.0520503956138091,
        0.02320504560153466,
        0.018254966330252254,
        0.017436232860054558,
        0.09702271197318,
        0.06062033548723866,
        0.06163402789254711,
        0.06087111966555839,
        0.09843932362804544,
        0.0011200475061669214,
        0.05969287632307542,
        0.03976281880257122,
        0.06361480205091617,
        0.07968372166752216,
        0.011586111251057874,
        0.0655549698288988,
        0.07300307753468553,
        0.03858428597300237,
        0.03811502129369126,
        0.07221574464544551,
        0.051676992933633564,
        0.012177922004904841,
        0.02352099005677105,
        0.061794027554265045,
        0.05741937388555658,
        0.02084104090853114,
        0.09847345779198624,
        0.04539129424341947,
        0.014694949133636183,
        0.08973010373967026,
        0.025921236201372034,
        0.08524054874894028,
        0.09425372374950164,
        0.027563243263817185,
        0.0842230126425372,
        0.025981173830394513,
        0.022981628020732104,
        0.06909057835750282,
        0.028050551459726937,
        0.05848383170806196,
        0.09666509800860727,
        0.04069497636163232,
        0.02844822218324926,
        0.08117988031227984,
        0.06981781971305001,
        0.04484028889045475,
        0.015005527721066593,
        0.08009923220041822,
        0.04175234444072976,
        0.05766446834635112
      ]
    },
    {
      "content": "import React from \"react\";\nimport { Text } from \"ink\";\n\ninterface NeonTextProps {\n  text: string;\n}\n\nexport function NeonText({ text }: NeonTextProps) {\n  const rainbowColors = ['red', 'magenta', 'yellow', 'green', 'cyan', 'blue'];\n  \n  return (\n    <>\n      {text.split('').map((char, index) => (\n        <Text key={index} color={rainbowColors[index % rainbowColors.length]} bold>\n          {char}\n        </Text>\n      ))}\n    </>\n  );\n}",
      "filePath": "../src/ui/components/neon-text.tsx",
      "embedding": [
        0.51,
        0.1,
        0,
        0.2,
        0.1,
        0.002767836973677651,
        0.04544566724728019,
        0.07773778085841834,
        0.0677918925345232,
        0.01783608529496569,
        0.06487232624639098,
        0.034099767959638816,
        0.0023952480159796785,
        0.07312705416088876,
        0.026270282190869933,
        0.03609400559546094,
        0.06057043690990598,
        0.07870378559797743,
        0.013808661009111479,
        0.019892047010752614,
        0.005530060809895843,
        0.02475661056309797,
        0.07517843177714059,
        0.05356978728515336,
        0.045990446066566895,
        0.006343637995099349,
        0.09825206538796064,
        0.05939953865804873,
        0.01414382791318809,
        0.05740760782857718,
        0.06400976279378606,
        0.08059418199008889,
        0.06054158170953969,
        0.0855657167563148,
        0.09534425390378469,
        0.059174152854551715,
        0.09376434774053925,
        0.08761259947145907,
        0.06202711530690065,
        0.09128999222014922,
        0.03485322213974478,
        0.027602374094478535,
        0.029572526558465564,
        0.054869467085993655,
        0.08994726098614064,
        0.002063458389043216,
        0.08842864043171027,
        0.0064239021087492245,
        0.08799251373805876,
        0.025634212239951926,
        0.02727467888317856,
        0.008952999983451759,
        0.05810235475730108,
        0.055225647204209395,
        0.03951020822719303,
        0.0030490748372464793,
        0.056908845308615036,
        0.050247849093988606,
        0.06316916573471903,
        0.022928108072460308,
        0.08894793357176678,
        0.001208828115815508,
        0.06041747899864724,
        0.060098671932256126,
        0.05952486521914605,
        0.09995505802125436,
        0.08183543342150042,
        0.015687394454621917,
        0.0651846453329849,
        0.07355398175925353,
        0.026071647935420862,
        0.0970865371856886,
        0.0074865658357870625,
        0.005085836660463816,
        0.06926241737686982,
        0.049547335627327355,
        0.08177095795063793,
        0.05297895856822387,
        0.016753989275991754,
        0.0435402602985871,
        0.06568629656638227,
        0.012569652844722213,
        0.001739079340486438,
        0.025950353135860527,
        0.07505578427695225,
        0.026539442023749395,
        0.0956475551734411,
        0.026817571536961626,
        0.01649125340833284,
        0.02800166798979813,
        0.09661132818066318,
        0.020584410629536032,
        0.031623072320711924,
        0.07870081277781314,
        0.08022858299954416,
        0.035208432293796534,
        0.068559732696245,
        0.054199939937369934,
        0.06764065662498461,
        0.02771016811469944
      ]
    },
    {
      "content": "import React, { useState, useEffect } from \"react\";\nimport { Box, Text, useInput } from \"ink\";\nimport { loadPrompts, CustomPrompt } from \"../../utils/prompts\";\n\ninterface PromptsListProps {\n  onClose: () => void;\n  onSelectPrompt?: (promptName: string | null) => void;\n  selectedPrompt?: string | null;\n}\n\nexport default function PromptsList({ onClose, onSelectPrompt, selectedPrompt }: PromptsListProps) {\n  const [prompts, setPrompts] = useState<CustomPrompt[]>([]);\n  const [allOptions, setAllOptions] = useState<(CustomPrompt | { name: string; content: string; dateAdded: string; isNone: boolean })[]>([]);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [showContent, setShowContent] = useState(false);\n  const [justSelected, setJustSelected] = useState<string | null>(null);\n  const [showSuccessMessage, setShowSuccessMessage] = useState(false);\n\n  useEffect(() => {\n    const promptsData = loadPrompts();\n    setPrompts(promptsData);\n    \n    // Create options list with \"None\" option first, then all prompts\n    const noneOption = {\n      name: \"GIGA (Default)\",\n      content: \"Use default GIGA assistant prompt with file editing and coding tools\",\n      dateAdded: new Date().toISOString(),\n      isNone: true\n    };\n    \n    const options = [noneOption, ...promptsData];\n    setAllOptions(options);\n    \n    // Set initial selected index based on current selected prompt\n    if (selectedPrompt) {\n      const promptIndex = promptsData.findIndex(p => p.name === selectedPrompt);\n      if (promptIndex !== -1) {\n        setSelectedIndex(promptIndex + 1); // +1 because None is first\n      }\n    } else {\n      setSelectedIndex(0); // None is selected\n    }\n  }, [selectedPrompt]);\n\n  useInput((inputChar, key) => {\n    if (key.ctrl && inputChar === \"c\") {\n      onClose();\n      return;\n    }\n\n    if (key.escape) {\n      if (showContent) {\n        setShowContent(false);\n      } else {\n        onClose();\n      }\n      return;\n    }\n\n    if (!showContent) {\n      if (key.upArrow) {\n        setSelectedIndex(prev => prev === 0 ? Math.max(0, allOptions.length - 1) : prev - 1);\n        return;\n      }\n\n      if (key.downArrow) {\n        setSelectedIndex(prev => allOptions.length === 0 ? 0 : (prev + 1) % allOptions.length);\n        return;\n      }\n\n      if (key.return) {\n        if (allOptions.length > 0 && selectedIndex < allOptions.length) {\n          // Select this prompt\n          const selected = allOptions[selectedIndex];\n          const promptName = 'isNone' in selected && selected.isNone ? null : selected.name;\n          \n          setJustSelected(promptName);\n          setShowSuccessMessage(true);\n          \n          if (onSelectPrompt) {\n            onSelectPrompt(promptName);\n          }\n          \n          // Show success message briefly then close\n          setTimeout(() => {\n            onClose();\n          }, 1000);\n        }\n        return;\n      }\n\n      if (inputChar === ' ') {\n        // Space to select\n        if (allOptions.length > 0 && selectedIndex < allOptions.length) {\n          const selected = allOptions[selectedIndex];\n          const promptName = 'isNone' in selected && selected.isNone ? null : selected.name;\n          \n          setJustSelected(promptName);\n          setShowSuccessMessage(true);\n          \n          if (onSelectPrompt) {\n            onSelectPrompt(promptName);\n          }\n          \n          // Show success message briefly then close\n          setTimeout(() => {\n            onClose();\n          }, 1000);\n        }\n        return;\n      }\n\n      if (inputChar === 'v' || inputChar === 'V') {\n        // 'v' to view content\n        if (allOptions.length > 0 && selectedIndex < allOptions.length) {\n          setShowContent(true);\n        }\n        return;\n      }\n    }\n  });\n\n  if (showSuccessMessage) {\n    const selectedName = justSelected || \"GIGA (Default)\";\n    return (\n      <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n        <Text color=\"green\">✅ System Prompt Changed!</Text>\n        <Box marginBottom={1} borderStyle=\"round\" borderColor=\"green\" paddingX={1}>\n          <Text color=\"green\">Now using: {selectedName}</Text>\n        </Box>\n        <Box marginTop={1}>\n          <Text color=\"gray\" dimColor>Closing...</Text>\n        </Box>\n      </Box>\n    );\n  }\n\n  if (allOptions.length <= 1) { // Only \"GIGA\" option exists\n    return (\n      <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n        <Text color=\"yellow\">🎯 Select System Prompt</Text>\n        <Box marginBottom={1}>\n          <Text color=\"gray\">No custom prompts added. Using default GIGA assistant.</Text>\n        </Box>\n        <Box flexDirection=\"column\" marginBottom={1}>\n          <Box borderStyle=\"round\" borderColor=\"green\" paddingX={1}>\n            <Text color=\"green\">● GIGA (Default)</Text>\n          </Box>\n        </Box>\n        <Box flexDirection=\"column\" marginTop={1}>\n          <Text color=\"gray\" dimColor>• Press Space or Enter to confirm</Text>\n          <Text color=\"gray\" dimColor>• Use /add-prompt to add custom system prompts</Text>\n          <Text color=\"gray\" dimColor>• Custom prompts completely replace GIGA</Text>\n          <Text color=\"gray\" dimColor>• Press Esc to close</Text>\n        </Box>\n      </Box>\n    );\n  }\n\n  if (showContent) {\n    const selectedOption = allOptions[selectedIndex];\n    const contentLines = selectedOption.content.split('\\n');\n    \n    return (\n      <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n        <Text color=\"yellow\">📝 Prompt: {selectedOption.name}</Text>\n        <Box marginBottom={1}>\n          <Text color=\"gray\">\n            {'isNone' in selectedOption && selectedOption.isNone \n              ? \"Default system prompt\" \n              : `Added: ${new Date(selectedOption.dateAdded).toLocaleDateString()}`\n            }\n          </Text>\n        </Box>\n        \n        <Box flexDirection=\"column\" borderStyle=\"round\" borderColor=\"blue\" paddingX={1} marginBottom={1} minHeight={15}>\n          {contentLines.map((line, index) => (\n            <Text key={index}>{line}</Text>\n          ))}\n        </Box>\n\n        <Box flexDirection=\"column\" marginTop={1}>\n          <Text color=\"gray\" dimColor>• Press Space or Enter to select this prompt</Text>\n          <Text color=\"gray\" dimColor>• Press Esc to go back to prompt list</Text>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n      <Text color=\"yellow\">🎯 Select System Prompt</Text>\n      <Box marginBottom={1}>\n        <Text color=\"gray\">\n          Current: {selectedPrompt || \"GIGA (Default)\"}\n        </Text>\n      </Box>\n      \n      <Box flexDirection=\"column\" marginBottom={1}>\n        {allOptions.map((option, index) => {\n          const isSelected = index === selectedIndex;\n          const isCurrentlyActive = selectedPrompt === option.name || (!selectedPrompt && 'isNone' in option && option.isNone);\n          const dateAdded = 'isNone' in option && option.isNone \n            ? \"Default\" \n            : new Date(option.dateAdded).toLocaleDateString();\n          const preview = option.content.length > 80 \n            ? option.content.substring(0, 80) + \"...\" \n            : option.content;\n          \n          // Color coding: green for currently active, blue for selected, gray for others\n          let borderColor = \"gray\";\n          let textColor = \"white\";\n          \n          if (isCurrentlyActive) {\n            borderColor = \"green\";\n            textColor = \"green\";\n          } else if (isSelected) {\n            borderColor = \"blue\"; \n            textColor = \"blue\";\n          }\n          \n          return (\n            <Box \n              key={option.name}\n              borderStyle=\"round\" \n              borderColor={borderColor}\n              paddingX={1} \n              marginBottom={1}\n            >\n              <Box flexDirection=\"column\" width=\"100%\">\n                <Box>\n                  <Box width={25}>\n                    <Text color={textColor}>\n                      {isCurrentlyActive ? \"● \" : isSelected ? \"▶ \" : \"○ \"}{option.name}\n                    </Text>\n                  </Box>\n                  <Box flexGrow={1}>\n                    <Text color=\"gray\" dimColor>{dateAdded}</Text>\n                  </Box>\n                </Box>\n                <Box marginTop={1}>\n                  <Text color=\"gray\" dimColor>{preview.replace(/\\n/g, ' ')}</Text>\n                </Box>\n              </Box>\n            </Box>\n          );\n        })}\n      </Box>\n\n      <Box flexDirection=\"column\" marginTop={1}>\n        <Text color=\"gray\" dimColor>• Use ↑/↓ arrows to navigate</Text>\n        <Text color=\"gray\" dimColor>• Press Space or Enter to select prompt</Text>\n        <Text color=\"gray\" dimColor>• Press V to view full content</Text>\n        <Text color=\"gray\" dimColor>• Custom prompts completely replace GIGA</Text>\n        <Text color=\"green\" dimColor>• Green = Currently active prompt</Text>\n        <Text color=\"blue\" dimColor>• Blue = Currently selected option</Text>\n        <Text color=\"gray\" dimColor>• Press Esc to close</Text>\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/prompts-list.tsx",
      "embedding": [
        8.47,
        0.1,
        0,
        0.3,
        0.1,
        0.07741440748630059,
        0.0675930282959432,
        0.061331772345485785,
        0.005921378691549184,
        0.071934105923757,
        0.025197767818439177,
        0.09575650754953235,
        0.01557481971033229,
        0.08244971045927961,
        0.023496374903297756,
        0.006140075647847543,
        0.02623103189830365,
        0.023126656560415307,
        0.005885094527577695,
        0.06489021266952134,
        0.04133264723955041,
        0.06291426936489411,
        0.043488152678171126,
        0.07492607168768492,
        0.019416140075019007,
        0.028426644520172042,
        0.05318406752042579,
        0.025499159174133892,
        0.07978128219775037,
        0.041605781389957235,
        0.08471381060697673,
        0.04839576230009877,
        0.09095464106120976,
        0.07105111064609768,
        0.0894812550479906,
        0.007654133598862223,
        0.035819538553292264,
        0.03524998510689412,
        0.08458332833967583,
        0.017614480091012043,
        0.023392472345827076,
        0.09298467603508291,
        0.08332750800654809,
        0.022625219947142075,
        0.09091086406278945,
        0.09041449083716838,
        0.027196756486045484,
        0.0521725434530238,
        0.03839493553869581,
        0.07153687853848845,
        0.05483208118062336,
        0.08958184561505377,
        0.06960853166966247,
        0.03962364429773255,
        0.06828909486302918,
        0.07045798897180305,
        0.04397833841412768,
        0.08923674974224416,
        0.0973613790165672,
        0.026612595907528694,
        0.024759060260171807,
        0.03380173657983381,
        0.045403529602080196,
        0.028415291479502926,
        0.03684941990362239,
        0.02302873340077778,
        0.00810565279708877,
        0.04354423588614732,
        0.088508088569083,
        0.0658635872157143,
        0.0666659817395893,
        0.021070387576556604,
        0.08975086783064581,
        0.08244018569820977,
        0.07779657775099072,
        0.045710949652477254,
        0.029220997956144745,
        0.09845708328206176,
        0.0199280443497174,
        0.08682721933868091,
        0.020691738730944598,
        0.0072643807091289266,
        0.002525806082879556,
        0.07462195958500077,
        0.08935775001269985,
        0.0793795533942579,
        0.027741282105080603,
        0.07573243741988832,
        0.08155694409177816,
        0.034531596736543706,
        0.053738653717646294,
        0.04678698359979522,
        0.034055741572729774,
        0.07446356556774081,
        0.03471543422526501,
        0.02869573454537442,
        0.03266591142000016,
        0.07890566378309183,
        0.08946918842461349,
        0.028287248528677235
      ]
    },
    {
      "content": "import React, { useState, useEffect } from \"react\";\nimport { Box, Text, useInput } from \"ink\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as os from \"os\";\nimport { validateApiKey } from \"../../utils/api-key-validator\";\nimport { refreshGlobalSharedInfo } from \"../../utils/api-keys\";\n\ninterface Provider {\n  name: string;\n  keyName: string;\n  description: string;\n}\n\ninterface ProviderSettingsProps {\n  providers: Provider[];\n  selectedIndex: number;\n  onClose: () => void;\n}\n\ninterface UserSettings {\n  apiKey?: string;\n  groqApiKey?: string;\n  anthropicApiKey?: string;\n  openRouterApiKey?: string;\n  googleApiKey?: string;\n  xaiApiKey?: string;\n  cerebrasApiKey?: string;\n  perplexityApiKey?: string;\n  openaiApiKey?: string;\n  ollamaBaseUrl?: string;\n}\n\nexport default function ProviderSettings({ providers, selectedIndex: initialSelectedIndex, onClose }: ProviderSettingsProps) {\n  const [apiKeys, setApiKeys] = useState<Record<string, string>>({});\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const [editingIndex, setEditingIndex] = useState<number | null>(null);\n  const [selectedIndex, setSelectedIndex] = useState(initialSelectedIndex);\n  const [error, setError] = useState(\"\");\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n  const [validationStatus, setValidationStatus] = useState<Record<string, boolean>>({});\n  const [isValidating, setIsValidating] = useState(false);\n  const [isMounted, setIsMounted] = useState(true);\n\n  useEffect(() => {\n    loadExistingKeys();\n    \n    return () => {\n      setIsMounted(false);\n    };\n  }, []);\n\n  const loadExistingKeys = () => {\n    try {\n      const homeDir = os.homedir();\n      const settingsFile = path.join(homeDir, '.giga', 'user-settings.json');\n      \n      if (fs.existsSync(settingsFile)) {\n        const settings: UserSettings = JSON.parse(fs.readFileSync(settingsFile, 'utf8'));\n        const keys: Record<string, string> = {};\n        \n        providers.forEach(provider => {\n          const key = settings[provider.keyName as keyof UserSettings];\n          if (key) {\n            keys[provider.keyName] = key;\n          }\n        });\n        \n        setApiKeys(keys);\n      }\n    } catch (error) {\n      setError(\"Could not load existing API keys\");\n    }\n  };\n\n  const validateCurrentKey = async (providerName: string, key: string) => {\n    if (!key.trim()) {\n      if (isMounted) {\n        setValidationErrors(prev => {\n          const newErrors = { ...prev };\n          delete newErrors[providerName]; // Remove error instead of setting empty string\n          return newErrors;\n        });\n        setValidationStatus(prev => ({ ...prev, [providerName]: false }));\n      }\n      return;\n    }\n\n    if (isMounted) {\n      setIsValidating(true);\n    }\n    \n    try {\n      const result = await validateApiKey(providerName.toLowerCase(), key);\n      \n      if (!isMounted) return; // Component unmounted, don't update state\n      \n      if (result.isValid) {\n        setValidationErrors(prev => {\n          const newErrors = { ...prev };\n          delete newErrors[providerName]; // Remove error instead of setting empty string\n          return newErrors;\n        });\n        setValidationStatus(prev => ({ ...prev, [providerName]: true }));\n      } else {\n        const errorMessage = result.error?.trim() || \"Invalid API key\";\n        // Never set empty string as error message\n        if (errorMessage) {\n          setValidationErrors(prev => ({ ...prev, [providerName]: errorMessage }));\n        }\n        setValidationStatus(prev => ({ ...prev, [providerName]: false }));\n      }\n    } catch (error) {\n      if (!isMounted) return; // Component unmounted, don't update state\n      \n      setValidationErrors(prev => ({ ...prev, [providerName]: \"Validation failed\" }));\n      setValidationStatus(prev => ({ ...prev, [providerName]: false }));\n    }\n    \n    if (isMounted) {\n      setIsValidating(false);\n    }\n  };\n\n  const saveApiKeys = async () => {\n    try {\n      const homeDir = os.homedir();\n      const gigaDir = path.join(homeDir, '.giga');\n      const settingsFile = path.join(gigaDir, 'user-settings.json');\n      \n      if (!fs.existsSync(gigaDir)) {\n        fs.mkdirSync(gigaDir, { mode: 0o700 });\n      }\n      \n      let settings: UserSettings = {};\n      if (fs.existsSync(settingsFile)) {\n        try {\n          settings = JSON.parse(fs.readFileSync(settingsFile, 'utf8'));\n        } catch {\n          settings = {};\n        }\n      }\n      \n      Object.entries(apiKeys).forEach(([keyName, value]) => {\n        if (value.trim()) {\n          (settings as any)[keyName] = value.trim();\n        }\n      });\n      \n      fs.writeFileSync(settingsFile, JSON.stringify(settings, null, 2), { mode: 0o600 });\n      \n      // Refresh global shared info after API key changes\n      refreshGlobalSharedInfo();\n      \n      onClose();\n    } catch (error) {\n      setError(\"Could not save API keys\");\n    }\n  };\n\n  useInput((inputChar, key) => {\n    if (key.ctrl && inputChar === \"c\") {\n      onClose();\n      return;\n    }\n\n    if (key.escape) {\n      if (editingIndex !== null) {\n        setEditingIndex(null);\n        setCurrentInput(\"\");\n      } else {\n        // Validate all keys before saving\n        const validationPromises = providers.map(async (provider) => {\n          const key = apiKeys[provider.keyName];\n          if (key) {\n            await validateCurrentKey(provider.name, key);\n          }\n        });\n        \n        Promise.all(validationPromises).then(() => {\n          saveApiKeys();\n        });\n      }\n      return;\n    }\n\n    if (editingIndex !== null) {\n      if (key.return) {\n        const provider = providers[editingIndex];\n        setApiKeys(prev => ({\n          ...prev,\n          [provider.keyName]: currentInput\n        }));\n        setCurrentInput(\"\");\n        setEditingIndex(null);\n        setError(\"\");\n        return;\n      }\n\n      if (key.backspace || key.delete) {\n        setCurrentInput(prev => prev.slice(0, -1));\n        return;\n      }\n\n      if (inputChar && !key.ctrl && !key.meta) {\n        setCurrentInput(prev => prev + inputChar);\n        setError(\"\");\n      }\n    } else {\n      if (key.upArrow) {\n        // Validate current provider's key before moving\n        const currentProvider = providers[selectedIndex];\n        const currentKey = apiKeys[currentProvider.keyName];\n        if (currentKey && currentKey.trim()) {\n          validateCurrentKey(currentProvider.name, currentKey);\n        }\n        \n        const newIndex = selectedIndex === 0 ? providers.length - 1 : selectedIndex - 1;\n        setSelectedIndex(newIndex);\n        return;\n      }\n\n      if (key.downArrow) {\n        // Validate current provider's key before moving\n        const currentProvider = providers[selectedIndex];\n        const currentKey = apiKeys[currentProvider.keyName];\n        if (currentKey && currentKey.trim()) {\n          validateCurrentKey(currentProvider.name, currentKey);\n        }\n        \n        const newIndex = (selectedIndex + 1) % providers.length;\n        setSelectedIndex(newIndex);\n        return;\n      }\n\n      if (key.return) {\n        setEditingIndex(selectedIndex);\n        const provider = providers[selectedIndex];\n        setCurrentInput(apiKeys[provider.keyName] || \"\");\n        return;\n      }\n    }\n  });\n\n  const maskApiKey = (key: string) => {\n    if (!key) return \"\";\n    if (key.length <= 8) return \"*\".repeat(key.length);\n    return key.substring(0, 4) + \"*\".repeat(key.length - 8) + key.substring(key.length - 4);\n  };\n\n  return (\n    <Box flexDirection=\"column\" paddingX={2} paddingY={1}>\n      <Text color=\"yellow\">🔑 Provider API Keys Configuration</Text>\n      <Box marginBottom={1}>\n        <Text color=\"gray\">Configure API keys for different AI providers:</Text>\n      </Box>\n      \n      <Box flexDirection=\"column\" marginBottom={1}>\n        {providers.map((provider, index) => {\n          const isSelected = index === selectedIndex && editingIndex === null;\n          const isEditing = index === editingIndex;\n          const currentKey = apiKeys[provider.keyName] || \"\";\n          const hasValidationError = validationErrors[provider.name];\n          const isValid = validationStatus[provider.name];\n          \n          let borderColor = \"gray\";\n          if (isSelected) borderColor = \"blue\";\n          else if (isEditing) borderColor = \"green\";\n          else if (hasValidationError) borderColor = \"red\";\n          else if (isValid) borderColor = \"green\";\n          \n          return (\n            <Box key={provider.keyName} flexDirection=\"column\" marginBottom={1}>\n              <Box \n                borderStyle=\"round\" \n                borderColor={borderColor} \n                paddingX={1}\n              >\n                <Box width={12}>\n                  <Text color={isSelected ? \"blue\" : \"white\"}>{provider.name}:</Text>\n                </Box>\n                <Box flexGrow={1}>\n                  {isEditing ? (\n                    <Text>{(currentInput || \"\") + \"█\"}</Text>\n                  ) : (\n                    <Box>\n                      <Text color=\"gray\">\n                        {currentKey ? (provider.keyName === 'ollamaBaseUrl' ? currentKey : maskApiKey(currentKey)) : \"Not configured\"}\n                      </Text>\n                      {isValid && !hasValidationError && (\n                        <Text color=\"green\"> ✓</Text>\n                      )}\n                    </Box>\n                  )}\n                </Box>\n                <Box width={25}>\n                  <Text color=\"gray\" dimColor>{provider.description}</Text>\n                </Box>\n              </Box>\n              {hasValidationError && String(hasValidationError).trim() && (\n                <Box paddingLeft={2}>\n                  <Text color=\"red\">❌ {String(hasValidationError).trim()}</Text>\n                </Box>\n              )}\n            </Box>\n          );\n        })}\n      </Box>\n\n      {error && error.trim() ? (\n        <Box marginBottom={1}>\n          <Text color=\"red\">❌ {error}</Text>\n        </Box>\n      ) : null}\n\n      <Box flexDirection=\"column\" marginTop={1}>\n        {editingIndex !== null ? (\n          <>\n            <Text color=\"yellow\">Editing {providers[editingIndex].name} {providers[editingIndex].keyName === 'ollamaBaseUrl' ? 'Base URL' : 'API Key'}:</Text>\n            <Text color=\"gray\" dimColor>• Type your {providers[editingIndex].keyName === 'ollamaBaseUrl' ? 'Ollama base URL (e.g., http://localhost:11434)' : 'API key'}</Text>\n            <Text color=\"gray\" dimColor>• Press Enter to save</Text>\n            <Text color=\"gray\" dimColor>• Press Esc to cancel</Text>\n          </>\n        ) : (\n          <>\n            <Text color=\"gray\" dimColor>• Use ↑/↓ arrows to navigate</Text>\n            <Text color=\"gray\" dimColor>• Press Enter to edit selected provider</Text>\n            <Text color=\"gray\" dimColor>• Press Esc to save and exit</Text>\n            <Text color=\"gray\" dimColor>• Press Ctrl+C to exit without saving</Text>\n          </>\n        )}\n        <Text color=\"gray\" dimColor>Keys saved to ~/.giga/user-settings.json</Text>\n        {isValidating && (\n          <Text color=\"yellow\">🔄 Validating API keys...</Text>\n        )}\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/provider-settings.tsx",
      "embedding": [
        10.37,
        0.1,
        0,
        0.7,
        0.1,
        0.0606239940189077,
        0.05866314496193869,
        0.06647001091446257,
        0.052528556924824416,
        0.026114862344252945,
        0.019031738681131574,
        0.02405653372252955,
        0.04950131716109001,
        0.07360738512432623,
        0.052976170428232786,
        0.0767019152485569,
        0.07788319013280733,
        0.09586574986174747,
        0.07828510973556616,
        0.056912609035566636,
        0.08960132285644784,
        0.08303582222456583,
        0.027515858016629192,
        0.012517007576023543,
        0.031588342350437996,
        0.030680218262607917,
        0.02244745675126253,
        0.028326287842069843,
        0.07966051968299559,
        0.000985092013511879,
        0.06026709466878401,
        0.039043009059655326,
        0.01918623189667558,
        0.04371993825820894,
        0.03831419036215986,
        0.015097798936701202,
        0.034932602842789796,
        0.09376737548742292,
        0.0302863585264606,
        0.013246007096982194,
        0.09393012058402372,
        0.003833351671117136,
        0.01685418870834069,
        0.05217125003606793,
        0.03706936763172485,
        0.05272690493443669,
        0.052354626269074195,
        0.0037286405203533104,
        0.0008791274298065144,
        0.07129362510918866,
        0.06512637303225813,
        0.0504733108859326,
        0.05398288582166699,
        0.0415247128013436,
        0.08845098028265833,
        0.01496047593803218,
        0.05464103593306921,
        0.015527445563512376,
        0.07631791157154971,
        0.04024433510372823,
        0.029241787572849055,
        0.08972371557831715,
        0.09275718043204455,
        0.09064702842340933,
        0.0729642003634387,
        0.0833405677050031,
        0.015520027659796022,
        0.0990707643094275,
        0.07676857852553924,
        0.09557701115069152,
        0.09031655598074916,
        0.0751023987241868,
        0.013253903696164249,
        0.04036936196299086,
        0.06640368622175971,
        0.06893497104164889,
        0.05224853289673558,
        0.0906906350318824,
        0.08338181640132748,
        0.046033850709267736,
        0.008593412736481376,
        0.03061294772083563,
        0.019624309689531674,
        0.04350346416398209,
        0.018969898575347,
        0.07649206650085758,
        0.05726546504753052,
        0.013570349847935582,
        0.055054154844420305,
        0.031459295692231416,
        0.008590481128492112,
        0.054171822213330716,
        0.06507674724765448,
        0.03870540033737431,
        0.04998570356902496,
        0.0339175974119677,
        0.09555772382341052,
        0.0062310418825827,
        0.09633414809629195,
        0.0547145659802248
      ]
    },
    {
      "content": "import React, { useState, useEffect } from \"react\";\nimport { Box, Text } from \"ink\";\nimport { OpenRouterProvider, getModelProvidersWithFallback, isOpenRouterModel } from \"../../utils/openrouter-providers\";\nimport { getOpenRouterProvider } from \"../../utils/added-models\";\nimport { loadApiKeys } from \"../../utils/api-keys\";\n\ninterface ModelOption {\n  model: string;\n  description: string;\n}\n\ninterface RouteSelectionProps {\n  models: ModelOption[];\n  selectedModelIndex: number;\n  selectedProviderIndex: number;\n  isVisible: boolean;\n  currentModel: string;\n  viewMode: 'models' | 'providers';\n  currentSelectedModel?: string;\n  providers: OpenRouterProvider[];\n  isLoadingProviders: boolean;\n  onModelSelect: (model: string) => void;\n  onProviderSelect: (model: string, provider: OpenRouterProvider) => void;\n  onBack: () => void;\n}\n\nexport function RouteSelection({\n  models,\n  selectedModelIndex,\n  selectedProviderIndex,\n  isVisible,\n  currentModel,\n  viewMode,\n  currentSelectedModel,\n  providers,\n  isLoadingProviders,\n  onModelSelect,\n  onProviderSelect,\n  onBack,\n}: RouteSelectionProps) {\n  if (!isVisible) return null;\n\n  if (viewMode === 'models') {\n    return (\n      <Box marginTop={1} flexDirection=\"column\">\n        <Box marginBottom={1}>\n          <Text color=\"cyan\">Select Model to Configure Provider (current: {currentModel}):</Text>\n        </Box>\n        {models.length === 0 ? (\n          <Box paddingLeft={1}>\n            <Text color=\"yellow\">No OpenRouter models found. Add models with format \"author/model\" using /add-model.</Text>\n          </Box>\n        ) : (\n          models.map((modelOption, index) => {\n          const openRouterProvider = getOpenRouterProvider(modelOption.model);\n          const hasProviderSet = openRouterProvider !== null;\n          \n          return (\n            <Box key={index} paddingLeft={1}>\n              <Text\n                color={index === selectedModelIndex ? \"black\" : \"white\"}\n                backgroundColor={index === selectedModelIndex ? \"cyan\" : undefined}\n              >\n                {modelOption.model}\n                {hasProviderSet && (\n                  <Text color={index === selectedModelIndex ? \"black\" : \"green\"}>\n                    {\" \"}→ {openRouterProvider}\n                  </Text>\n                )}\n              </Text>\n              <Box marginLeft={1}>\n                <Text color=\"gray\">{modelOption.description}</Text>\n              </Box>\n            </Box>\n          );\n        })\n        )}\n        <Box marginTop={1}>\n          <Text color=\"gray\" dimColor>\n            ↑↓ navigate • Enter configure provider • Esc cancel\n          </Text>\n        </Box>\n      </Box>\n    );\n  }\n\n  // Provider selection view\n  return (\n    <Box marginTop={1} flexDirection=\"column\">\n      <Box marginBottom={1}>\n        <Text color=\"cyan\">\n          Select Provider for {currentSelectedModel}:\n        </Text>\n      </Box>\n      \n      {isLoadingProviders ? (\n        <Box paddingLeft={1}>\n          <Text color=\"yellow\">Loading available providers...</Text>\n        </Box>\n      ) : providers.length === 0 ? (\n        <Box paddingLeft={1}>\n          <Text color=\"red\">No providers available for this model</Text>\n        </Box>\n      ) : (\n        providers.map((provider, index) => {\n          const currentProvider = getOpenRouterProvider(currentSelectedModel || '');\n          const isCurrentlySelected = currentProvider === provider.id;\n          \n          return (\n            <Box key={index} paddingLeft={1}>\n              <Text\n                color={index === selectedProviderIndex ? \"black\" : \"white\"}\n                backgroundColor={index === selectedProviderIndex ? \"cyan\" : undefined}\n              >\n                {provider.name}\n                {isCurrentlySelected && (\n                  <Text color={index === selectedProviderIndex ? \"black\" : \"green\"}>\n                    {\" \"}(current)\n                  </Text>\n                )}\n              </Text>\n              <Box marginLeft={1} flexDirection=\"column\">\n                {provider.pricing && (\n                  <Text color=\"gray\" dimColor>\n                    ${provider.pricing.prompt}/1k prompt • ${provider.pricing.completion}/1k completion\n                  </Text>\n                )}\n                {(provider.quantization || provider.uptime || provider.context_length) && (\n                  <Text color=\"gray\" dimColor>\n                    {provider.quantization ? `${provider.quantization}` : ''}\n                    {provider.quantization && provider.uptime ? ' • ' : ''}\n                    {provider.uptime ? `${provider.uptime}% uptime` : ''}\n                    {(provider.quantization || provider.uptime) && provider.context_length ? ' • ' : ''}\n                    {provider.context_length ? `${provider.context_length.toLocaleString()} context` : ''}\n                  </Text>\n                )}\n              </Box>\n            </Box>\n          );\n        })\n      )}\n      \n      <Box marginTop={1}>\n        <Text color=\"gray\" dimColor>\n          ↑↓ navigate • Enter select provider • Esc back to models\n        </Text>\n      </Box>\n    </Box>\n  );\n}\n\n// Hook for managing route selection state\nexport function useRouteSelection() {\n  const [viewMode, setViewMode] = useState<'models' | 'providers'>('models');\n  const [currentSelectedModel, setCurrentSelectedModel] = useState<string>('');\n  const [providers, setProviders] = useState<OpenRouterProvider[]>([]);\n  const [isLoadingProviders, setIsLoadingProviders] = useState(false);\n\n  const handleModelSelect = async (model: string) => {\n    setCurrentSelectedModel(model);\n    setViewMode('providers');\n    setIsLoadingProviders(true);\n    setProviders([]);\n\n    try {\n      const apiKeys = loadApiKeys();\n      const openRouterKey = apiKeys.openRouterApiKey;\n      \n      if (openRouterKey) {\n        const modelProviders = await getModelProvidersWithFallback(model, openRouterKey);\n        setProviders(modelProviders);\n      } else {\n        // If no OpenRouter key, show message\n        setProviders([]);\n      }\n    } catch (error) {\n      console.error('Error fetching providers:', error);\n      setProviders([]);\n    } finally {\n      setIsLoadingProviders(false);\n    }\n  };\n\n  const handleBack = () => {\n    setViewMode('models');\n    setCurrentSelectedModel('');\n    setProviders([]);\n    setIsLoadingProviders(false);\n  };\n\n  const reset = () => {\n    setViewMode('models');\n    setCurrentSelectedModel('');\n    setProviders([]);\n    setIsLoadingProviders(false);\n  };\n\n  return {\n    viewMode,\n    currentSelectedModel,\n    providers,\n    isLoadingProviders,\n    handleModelSelect,\n    handleBack,\n    reset,\n  };\n}",
      "filePath": "../src/ui/components/route-selection.tsx",
      "embedding": [
        5.49,
        0.2,
        0,
        0.5,
        0.2,
        0.07914290056052875,
        0.0008507760545572674,
        0.003957745553518211,
        0.02906586240946009,
        0.03196863018091781,
        0.008544767572589818,
        0.0792327232129133,
        0.01345281589202848,
        0.08538108105835168,
        0.04209091156444131,
        0.028352880188120367,
        0.021466208511615483,
        0.05827677153596596,
        0.09236423148392464,
        0.005535770960119146,
        0.09668575628216552,
        0.07671124030768012,
        0.011463227063737081,
        0.009296999078194635,
        0.07919044197448177,
        0.09396056151004956,
        0.05512811798018871,
        0.027964368194757373,
        0.02534633326957111,
        0.0826891998228244,
        0.09197307192934678,
        0.07849837467818256,
        0.09209315517327031,
        0.05680721636666043,
        0.04454714100089744,
        0.08836513763850239,
        0.017570254056419755,
        0.07447523402013087,
        0.06090544507468859,
        0.026762883446946762,
        0.09458261939151469,
        0.0734919195298132,
        0.0037363681743144087,
        0.003033610548164589,
        0.06943860946194018,
        0.04391872614680403,
        0.02554895285474659,
        0.09792188162234478,
        0.05362433430540617,
        0.027029540709013335,
        0.026359111772030444,
        0.01670814960043011,
        0.08423579624425126,
        0.004719113626531346,
        0.0921612762087187,
        0.07663043904295962,
        0.07694350384334721,
        0.06514788447282635,
        0.03846400977510575,
        0.024027251880496425,
        0.0882797568124399,
        0.011704728079322303,
        0.08385635812986625,
        0.030320102291470086,
        0.005992407556537649,
        0.0025442512842330568,
        0.06556799030203002,
        0.08916515433717496,
        0.0654824840012892,
        0.08760493563699745,
        0.015639214959662407,
        0.06942579122097874,
        0.05011925818359295,
        0.014428831125546672,
        0.03275823553012858,
        0.06297356887264123,
        0.006654142024233667,
        0.07147189410334995,
        0.08181797818022074,
        0.06300766201737289,
        0.026635327380616927,
        0.05769080476953097,
        0.0087623448084876,
        0.0701467402966445,
        0.09011617572793637,
        0.0518763639928326,
        0.07978036023047436,
        0.03647483687698853,
        0.07759623937196053,
        0.07332427652743198,
        0.05690910726543277,
        0.006314649907372971,
        0.0020861687522230276,
        0.09525582672354038,
        0.04734463168976406,
        0.041568611586125195,
        0.06951117080961793,
        0.07496318093017441,
        0.04251348240080434,
        0.01880138977789463
      ]
    },
    {
      "content": "import React from \"react\";\nimport { Box, Text } from \"ink\";\n\ninterface TemperatureSelectorProps {\n  temperature: number;\n  isVisible: boolean;\n}\n\nexport function TemperatureSelector({\n  temperature,\n  isVisible,\n}: TemperatureSelectorProps) {\n  if (!isVisible) return null;\n\n  const formatTemperature = (temp: number): string => {\n    return temp.toFixed(1);\n  };\n\n  const createTemperatureBar = (temp: number): string => {\n    const position = Math.round(temp * 10);\n    const bar = Array(11).fill('─');\n    bar[position] = '●';\n    return bar.join('');\n  };\n\n  return (\n    <Box marginTop={1} flexDirection=\"column\" borderStyle=\"round\" borderColor=\"cyan\" padding={1}>\n      <Box justifyContent=\"center\">\n        <Text color=\"cyan\" bold>\n          🌡️  Temperature Settings\n        </Text>\n      </Box>\n      \n      <Box marginTop={1} flexDirection=\"column\">\n        <Box justifyContent=\"center\">\n          <Text>\n            Current: <Text color=\"yellow\" bold>{formatTemperature(temperature)}</Text>\n          </Text>\n        </Box>\n        \n        <Box marginTop={1} justifyContent=\"center\">\n          <Text color=\"gray\">0.0 </Text>\n          <Text color=\"cyan\">{createTemperatureBar(temperature)}</Text>\n          <Text color=\"gray\"> 1.0</Text>\n        </Box>\n        \n        <Box marginTop={1} justifyContent=\"center\">\n          <Text color=\"gray\">\n            {temperature <= 0.3 ? 'Conservative' : temperature <= 0.7 ? 'Balanced' : 'Creative'}\n          </Text>\n        </Box>\n      </Box>\n      \n      <Box marginTop={1} justifyContent=\"center\">\n        <Text color=\"gray\" dimColor>\n          ←→ adjust • Enter confirm • Esc cancel\n        </Text>\n      </Box>\n    </Box>\n  );\n}",
      "filePath": "../src/ui/components/temperature-selector.tsx",
      "embedding": [
        1.48,
        0.1,
        0,
        0.2,
        0.1,
        0.06232660727009498,
        0.09330904788523867,
        0.09375759965434624,
        0.013894477360385805,
        0.09771181539128614,
        0.0542905011822245,
        0.03432650748868082,
        0.02041445865058167,
        0.08855399494357759,
        0.05984080209186761,
        0.040745295016143046,
        0.05436806056264694,
        0.028418119793076416,
        0.08652663372572994,
        0.03967729736189235,
        0.04782967280499,
        0.07618064716934768,
        0.08477808686374037,
        0.05312099000162181,
        0.046342756242378116,
        0.08913904528239835,
        0.03048212363384031,
        0.08485860168117546,
        0.004835541329046411,
        0.02820214766235144,
        0.05957161024333683,
        0.03482726261033514,
        0.05105495765378473,
        0.04234922788793162,
        0.04879433597437932,
        0.04190285782194314,
        0.00895484691718743,
        0.09695878651091702,
        0.06231415799630662,
        0.016880253540565028,
        0.08190585845679328,
        0.018068180459183125,
        0.08201139187994554,
        0.007334004969336939,
        0.08178255643759957,
        0.050007429887741144,
        0.007080462736793903,
        0.0877685242585684,
        0.09797346630369294,
        0.07352158605772893,
        0.0756615820939821,
        0.09363202537426331,
        0.015119183458347674,
        0.022545339796999287,
        0.06622448817565545,
        0.0633210563169878,
        0.09164444064061511,
        0.08806321220312197,
        0.01546120850720102,
        0.07365345332806791,
        0.026613865756515545,
        0.03088642022301711,
        0.0006474738286224358,
        0.03223477733493504,
        0.08880339490627791,
        0.018868118599927566,
        0.0846060281409066,
        0.058804613273291076,
        0.05871327930711519,
        0.02935830708232147,
        0.006434426322565023,
        0.014860933896113938,
        0.004357793802847821,
        0.028565745244191632,
        0.0039450559820545465,
        0.04524126280608104,
        0.007090895433626699,
        0.06377385569296891,
        0.05670282991147782,
        0.06639915237052625,
        0.05185457153364176,
        0.05779381686441503,
        0.08702653392776233,
        0.04823687329314208,
        0.01157186888938091,
        0.09463757968745004,
        0.02895131883122755,
        0.030429970740612836,
        0.051889974026836885,
        0.02822346097981049,
        0.06861011251788696,
        0.051741306649916545,
        0.012106850239650857,
        0.07351867140933566,
        0.05268134046746492,
        0.015716827792538947,
        0.0040492849768230315,
        0.06124252968700512,
        0.01915419882042504,
        0.023684973336182205
      ]
    },
    {
      "content": "import React from 'react';\nimport { Box } from 'ink';\n\ninterface MaxSizedBoxProps {\n  maxHeight?: number;\n  maxWidth?: number;\n  children: React.ReactNode;\n}\n\nexport const MaxSizedBox: React.FC<MaxSizedBoxProps> = ({\n  maxHeight,\n  maxWidth,\n  children,\n  ...props\n}) => {\n  return (\n    <Box \n      flexDirection=\"column\"\n      {...props}\n    >\n      {children}\n    </Box>\n  );\n};",
      "filePath": "../src/ui/shared/max-sized-box.tsx",
      "embedding": [
        0.43,
        0,
        0,
        0.2,
        0.1,
        0.06537997326625478,
        0.099322609869905,
        0.007478908181331945,
        0.056612390165622674,
        0.05058987151329267,
        0.07320953207190203,
        0.06594229425097721,
        0.08292412496744392,
        0.025049760781704324,
        0.0654474521001857,
        0.05071586847742337,
        0.03355582299294984,
        0.027849752617832027,
        0.03891851236350191,
        0.030564241615634192,
        0.09251119798482493,
        0.005915210138664817,
        0.07366365245846937,
        0.08640678443543143,
        0.08307215818451913,
        0.019542506133213934,
        0.010576867952226888,
        0.05376202616419637,
        0.011822873957618786,
        0.043029224582037076,
        0.029035404055139727,
        0.037059432020091765,
        0.06645492010649127,
        0.04177786848509938,
        0.04498545768540601,
        0.04013943071984893,
        0.07842110233221633,
        0.09410667861418232,
        0.042431382308863536,
        0.09874527904902305,
        0.08635279300033495,
        0.08120312607948774,
        0.0008968599480114192,
        0.07469634351184297,
        0.08089993532811428,
        0.09431173211531894,
        0.0365994857557767,
        0.07837216129416438,
        0.04055912433044946,
        0.001216002386642734,
        0.08030014826682329,
        0.07295988147597085,
        0.030689504453023844,
        0.09776237076505846,
        0.038211498643650234,
        0.009290391782819174,
        0.029460468769282322,
        0.08630251289807954,
        0.07351248467847345,
        0.018545237912608693,
        0.0579685214526559,
        0.016751641872821278,
        0.013032133870178587,
        0.09423327420414881,
        0.0653406675508067,
        0.007961443164214566,
        0.049261496086625126,
        0.08463422892751378,
        0.06359069368327226,
        0.04289798846924835,
        0.08455180038742299,
        0.006644828833104322,
        0.02727721392386595,
        0.08811027656074462,
        0.0686450963782622,
        0.04193433697482904,
        0.04147947648576278,
        0.03692428320416143,
        0.08161351551669782,
        0.03728391905800509,
        0.08727491278848665,
        0.0814328231109468,
        0.051038093012897884,
        0.01105219491664713,
        0.019734331052701504,
        0.08405872601062946,
        0.03668995026431583,
        0.07401966115582549,
        0.004822551309251744,
        0.0697002889260312,
        0.022882014729455502,
        0.09963367543870559,
        0.03209145775673379,
        0.051678337593902106,
        0.053297762485053704,
        0.023605623111685282,
        0.05393605521181018,
        0.06252547606951507,
        0.03452976282683523,
        0.05286595221325008
      ]
    },
    {
      "content": "import React from 'react';\nimport { Text, Box } from 'ink';\n\nexport const colorizeCode = (\n  content: string,\n  language: string | null,\n  availableTerminalHeight?: number,\n  terminalWidth?: number\n): React.ReactNode => {\n  // Simple plain text rendering - could be enhanced with syntax highlighting later\n  return (\n    <Box flexDirection=\"column\">\n      {content.split('\\n').map((line, index) => (\n        <Text key={index} wrap=\"wrap\">\n          {line}\n        </Text>\n      ))}\n    </Box>\n  );\n};",
      "filePath": "../src/ui/utils/code-colorizer.tsx",
      "embedding": [
        0.6,
        0,
        0,
        0.2,
        0.1,
        0.022817312430325677,
        0.022535115692781937,
        0.0033009176918051275,
        0.008222522065530103,
        0.07686691105928768,
        0.005359946025976526,
        0.0547280105480512,
        0.09922854302641841,
        0.04493438010484657,
        0.04665448639450856,
        0.01867729628994649,
        0.09499024951724283,
        0.025230224263596647,
        0.025615858387377177,
        0.030420569185860436,
        0.0772923682666507,
        0.0694832590348535,
        0.09333089118948756,
        0.07586806552518777,
        0.045331267679633594,
        0.024028593847392865,
        0.058986709944757944,
        0.03091686841346332,
        0.06372413016042096,
        0.0020664323728203484,
        0.06695439876331195,
        0.09190180624899433,
        0.006858924854310611,
        0.03754386430793381,
        0.09558076286854793,
        0.02412812306859069,
        0.08780576184568836,
        0.0006092531846320637,
        0.033170970793747846,
        0.012419751783983824,
        0.07011074984227975,
        0.08077284556196945,
        0.01768069644450312,
        0.038040489093365194,
        0.06133763571980499,
        0.007789229582122504,
        0.011148519184740836,
        0.05368604092315955,
        0.01532965539297465,
        0.09009222131924151,
        0.04698046119189772,
        0.016580590074185785,
        0.04921512826310087,
        0.07211965244198325,
        0.026748622280612602,
        0.05109900420465056,
        0.01142052242451731,
        0.03897927981552836,
        0.07143059708924308,
        0.08973080146245471,
        0.036070729011818785,
        0.07212426668296146,
        0.03789357570741547,
        0.017839300075495258,
        0.052041706888290074,
        0.06371678167708837,
        0.08970681147205911,
        0.014372770601831198,
        0.035256631447690825,
        0.09355061733948951,
        0.010165854507532346,
        0.07523863566584671,
        0.005591688528298189,
        0.0818046226937274,
        0.021789740442838424,
        0.0639965685768148,
        0.08726634138624967,
        0.012494568680695796,
        0.018763911005922274,
        0.011787249979101012,
        0.04776589071301788,
        0.09531348424128067,
        0.07233174105284446,
        0.08465197783049438,
        0.04108161966826293,
        0.008193572117148051,
        0.003885036154107524,
        0.03469826308290868,
        0.03341981194387879,
        0.07360921731112124,
        0.008232498025927449,
        0.01688361774926872,
        0.06258373996772154,
        0.036729667570280525,
        0.009176980392567402,
        0.07128844256634269,
        0.010284051081225666,
        0.058059385072156224,
        0.061459101161674204,
        0.0020390874146475556
      ]
    },
    {
      "content": "/**\n * Color constants for the CLI interface\n */\nexport const Colors = {\n  AccentYellow: 'yellow',\n  Gray: 'gray',\n  Red: 'red',\n  Green: 'green',\n  Blue: 'blue',\n  Cyan: 'cyan',\n  Magenta: 'magenta',\n  White: 'white',\n  Black: 'black'\n} as const;",
      "filePath": "../src/ui/utils/colors.ts",
      "embedding": [
        0.35,
        0,
        0,
        0,
        0.1,
        0.06466265012943243,
        0.0678946262920775,
        0.09217821228081795,
        0.0945992434444929,
        0.08762034148016336,
        0.029998747942159676,
        0.015616792975912142,
        0.029432310183178226,
        0.025874008919096015,
        0.05255208685639845,
        0.059024206720320375,
        0.05603057885940104,
        0.06113407038700879,
        0.07827849218528965,
        0.08999220964126778,
        0.06435853889120792,
        0.026666677319587263,
        0.05654149578062804,
        0.09808718824525167,
        0.003712903374025889,
        0.07346649535618002,
        0.06443940482078114,
        0.06616304747377875,
        0.0026353841255923553,
        0.060776152661430376,
        0.09103054348978087,
        0.014376417841782075,
        0.04573199417626616,
        0.07999778525338576,
        0.005290898136922795,
        0.038590844140467845,
        0.018613293809138353,
        0.02675684732748025,
        0.0799515563740088,
        0.06494491317141307,
        0.05318524701434593,
        0.07297397352323971,
        0.032994680409364784,
        0.07717061243777362,
        0.013895782195886275,
        0.02555336539933355,
        0.037497082214074766,
        0.02768284493550144,
        0.0010670436363259372,
        0.02334094641954343,
        0.09976178138022786,
        0.017178570448799314,
        0.054761080102178034,
        0.044642899442150254,
        0.07670586379910582,
        0.06502989607060582,
        0.05658644377113442,
        0.09224476639649241,
        0.016125349222816065,
        0.08962847143719152,
        0.07136421774123693,
        0.01441149074366136,
        0.06315301898835725,
        0.030895242576755466,
        0.012274681861223768,
        0.09127227933273563,
        0.009536670831936135,
        0.04790032558927163,
        0.0539100755451205,
        0.026098712640852142,
        0.02133511296938564,
        0.0843898257371037,
        0.015091357017382935,
        0.017757640214068848,
        0.040770940647099296,
        0.060340534119113665,
        0.0733496938776489,
        0.03480235900036858,
        0.07543075251239441,
        0.08364154464165957,
        0.07365531528115114,
        0.02728318196197317,
        0.08403179861081322,
        0.04777285943482107,
        0.04080245220818788,
        0.07062862696894005,
        0.08798278856692066,
        0.02385617975299551,
        0.08885180400767415,
        0.06066900814038004,
        0.07585576447109536,
        0.014780920590807168,
        0.07425972642316678,
        0.021411426975911387,
        0.04659969804365324,
        0.0696321839396941,
        0.017271279229171467,
        0.05381739249883791,
        0.05406147463196154,
        0.007466376607287106
      ]
    },
    {
      "content": "import React from 'react';\nimport Markdown from 'ink-markdown';\n\nexport function MarkdownRenderer({ content }: { content: string }) {\n  return <Markdown>{content}</Markdown>;\n}",
      "filePath": "../src/ui/utils/markdown-renderer.tsx",
      "embedding": [
        0.21,
        0.1,
        0,
        0.2,
        0.1,
        0.09175886454173261,
        0.0428985426281977,
        0.012164993215057141,
        0.04539912970748319,
        0.05363784890152588,
        0.018366799616430975,
        0.01769557646920129,
        0.07454728766450308,
        0.03266592919900265,
        0.05775948160254011,
        0.022160541684195702,
        0.0812187480066658,
        0.09883693504763806,
        0.027110951744763745,
        0.06823693620048556,
        0.012597475013030102,
        0.05846123822144364,
        0.03027888499582526,
        0.008015594477146481,
        0.01427261221962658,
        0.015977884499437323,
        0.03818362269938985,
        0.06452102568202614,
        0.08599156256813631,
        0.04928928646860934,
        0.03373324816756081,
        0.052291317920189734,
        0.03593412081161791,
        0.016810047121660888,
        0.0006285362612703738,
        0.09186581083312416,
        0.08826807789772323,
        0.046330565039764494,
        0.073432113815283,
        0.0365748830500899,
        0.05912074376917831,
        0.09546733194110069,
        0.08632336555764814,
        0.09764297983761086,
        0.037340122210394046,
        0.02162033995723314,
        0.033661463804759074,
        0.0769328194452063,
        0.009620816004372645,
        0.0568744814857417,
        0.0064662885716870845,
        0.02771973348623835,
        0.06765309550297786,
        0.048144836003303174,
        0.03478136730757976,
        0.010268511996379093,
        0.09711018951767036,
        0.06015360186655736,
        0.09196966337429761,
        0.09101035122072071,
        0.05837126480828867,
        0.07464059305037939,
        0.016872823298689155,
        0.0667320280773267,
        0.00023565895361886692,
        0.06590949310736276,
        0.028370617353471763,
        0.03373019351922629,
        0.09568434851428412,
        0.009826978832051227,
        0.08170467898926873,
        0.09615161708284693,
        0.02520194535761493,
        0.06632691768134989,
        0.03697586915817443,
        0.04256720075430831,
        0.08791322500301306,
        0.05176618143216434,
        0.036340096245903286,
        0.006157527410264475,
        0.08058607115098619,
        0.0697822147594014,
        0.02796727695677528,
        0.05255877318273503,
        0.06877550412984793,
        0.007401444224316245,
        0.05963684591877272,
        0.017567487369572966,
        0.08308184598031676,
        0.0003502842352534841,
        0.024941479207476504,
        0.011184074153003066,
        0.031196193985773092,
        0.09001528867764133,
        0.04576330019843688,
        0.021961899634287498,
        0.09036892253345118,
        0.019043730927079373,
        0.026895124616888512,
        0.030313041503595584
      ]
    },
    {
      "content": "import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as os from \"os\";\n\nexport interface AddedMcpServer {\n  name: string;\n  command: string;\n  args?: string[];\n  env?: Record<string, string>;\n  description?: string;\n  dateAdded: string;\n}\n\ninterface AddedMcpServersStorage {\n  servers: AddedMcpServer[];\n}\n\nconst getStorageFile = (): string => {\n  const homeDir = os.homedir();\n  const gigaDir = path.join(homeDir, '.giga');\n  \n  // Create .giga directory if it doesn't exist\n  if (!fs.existsSync(gigaDir)) {\n    fs.mkdirSync(gigaDir, { mode: 0o700 });\n  }\n  \n  return path.join(gigaDir, 'added-mcp-servers.json');\n};\n\nexport function loadAddedMcpServers(): AddedMcpServer[] {\n  try {\n    const storageFile = getStorageFile();\n    \n    if (!fs.existsSync(storageFile)) {\n      return [];\n    }\n    \n    const data: AddedMcpServersStorage = JSON.parse(fs.readFileSync(storageFile, 'utf8'));\n    return data.servers || [];\n  } catch (error) {\n    console.error('Error loading added MCP servers:', error);\n    return [];\n  }\n}\n\nexport function saveAddedMcpServers(servers: AddedMcpServer[]): void {\n  try {\n    const storageFile = getStorageFile();\n    const data: AddedMcpServersStorage = { servers };\n    \n    fs.writeFileSync(storageFile, JSON.stringify(data, null, 2), { mode: 0o600 });\n  } catch (error) {\n    console.error('Error saving added MCP servers:', error);\n  }\n}\n\nexport function addMcpServer(\n  name: string, \n  command: string, \n  args?: string[], \n  env?: Record<string, string>,\n  description?: string\n): void {\n  const servers = loadAddedMcpServers();\n  \n  // Check if server already exists\n  const exists = servers.some(s => s.name === name);\n  if (!exists) {\n    const newServer: AddedMcpServer = {\n      name,\n      command,\n      args,\n      env,\n      description,\n      dateAdded: new Date().toISOString(),\n    };\n    \n    servers.push(newServer);\n    saveAddedMcpServers(servers);\n  }\n}\n\nexport function deleteMcpServer(name: string): boolean {\n  const servers = loadAddedMcpServers();\n  const initialLength = servers.length;\n  \n  const filteredServers = servers.filter(s => s.name !== name);\n  \n  if (filteredServers.length < initialLength) {\n    saveAddedMcpServers(filteredServers);\n    return true;\n  }\n  \n  return false;\n}\n\nexport function getAllAddedMcpServers(): AddedMcpServer[] {\n  return loadAddedMcpServers();\n}\n\nexport function isMcpServerAdded(name: string): boolean {\n  const servers = loadAddedMcpServers();\n  return servers.some(s => s.name === name);\n}\n\nexport function getMcpServerByName(name: string): AddedMcpServer | undefined {\n  const servers = loadAddedMcpServers();\n  return servers.find(s => s.name === name);\n}",
      "filePath": "../src/utils/added-mcp-servers.ts",
      "embedding": [
        2.93,
        0.7,
        0,
        0.3,
        0.8,
        0.011069501428312235,
        0.06903440810078612,
        0.026572262165940955,
        0.054542976576559446,
        0.06089698468608195,
        0.019580866507878682,
        0.06185987254609587,
        0.0035404520773081095,
        0.023119254987089624,
        0.04979615571307619,
        0.09615985986283034,
        0.09053632535881044,
        0.09776871109625818,
        0.0038765082311995828,
        0.05684283236656491,
        0.06641381021704447,
        0.06443302181773906,
        0.030245545674478472,
        0.00558295137412348,
        0.0329638611184215,
        0.07686540796761615,
        0.0104492187351672,
        0.013032126386980803,
        0.0387530129792973,
        0.02367185945333902,
        0.07081694504704661,
        0.09613885282575088,
        0.08204450092154589,
        0.002471937344161035,
        0.044206924991104304,
        0.04650732280865716,
        0.042896645327849516,
        0.03044778514558505,
        0.05622561796679487,
        0.05338554729985835,
        0.016525652123623124,
        0.06254398836609147,
        0.03963413160023386,
        0.08906543410480851,
        0.08141061445320598,
        0.024990559162942072,
        0.06257108821272647,
        0.06440180814994906,
        0.08126380243225034,
        0.007400088298680385,
        0.07618896970305267,
        0.04798423848916921,
        0.02648524018309666,
        0.05678600856426032,
        0.08932739748850739,
        0.0865352113013278,
        0.08521476849207968,
        0.028303924940098514,
        0.007029181890168979,
        0.08022700049520669,
        0.013496124654838348,
        0.09525483978050109,
        0.022983311652359728,
        0.021552371891546754,
        0.09253222798492196,
        0.01809189271256886,
        0.05356558913218232,
        0.00007637325949449991,
        0.08024324497651054,
        0.044207951261024996,
        0.08657916048049619,
        0.05872477567119442,
        0.01688613150236169,
        0.04917660656130887,
        0.03578363718790894,
        0.03339739381336267,
        0.05597023375682582,
        0.004027817420172742,
        0.05600791025901103,
        0.021235641252551143,
        0.06234400452308199,
        0.01280955714459181,
        0.025634288731983902,
        0.08900867116353291,
        0.08150059519821086,
        0.058007450729082526,
        0.09637603398353216,
        0.038411629226629496,
        0.0729006788835188,
        0.028027071895442547,
        0.022890770010445816,
        0.049214577714719404,
        0.05547694905572614,
        0.0831127781065618,
        0.047225393454592396,
        0.0496558764598885,
        0.01632887340212105,
        0.048916258472828246,
        0.08555341437184683,
        0.08568263637810147
      ]
    },
    {
      "content": "import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as os from \"os\";\n\nexport interface AddedModel {\n  modelName: string;\n  providerName: string;\n  dateAdded: string;\n  openRouterProvider?: string; // For OpenRouter models, stores the preferred compute provider (e.g., \"Groq\", \"Cerebras\")\n}\n\ninterface AddedModelsStorage {\n  models: AddedModel[];\n}\n\nconst getStorageFile = (): string => {\n  const homeDir = os.homedir();\n  const gigaDir = path.join(homeDir, '.giga');\n  \n  // Create .giga directory if it doesn't exist\n  if (!fs.existsSync(gigaDir)) {\n    fs.mkdirSync(gigaDir, { mode: 0o700 });\n  }\n  \n  return path.join(gigaDir, 'added-models.json');\n};\n\nexport function loadAddedModels(): AddedModel[] {\n  try {\n    const storageFile = getStorageFile();\n    \n    if (!fs.existsSync(storageFile)) {\n      return [];\n    }\n    \n    const data: AddedModelsStorage = JSON.parse(fs.readFileSync(storageFile, 'utf8'));\n    return data.models || [];\n  } catch (error) {\n    console.error('Error loading added models:', error);\n    return [];\n  }\n}\n\nexport function saveAddedModels(models: AddedModel[]): void {\n  try {\n    const storageFile = getStorageFile();\n    const data: AddedModelsStorage = { models };\n    \n    fs.writeFileSync(storageFile, JSON.stringify(data, null, 2), { mode: 0o600 });\n  } catch (error) {\n    console.error('Error saving added models:', error);\n  }\n}\n\nexport function addModel(modelName: string, providerName: string): void {\n  const models = loadAddedModels();\n  \n  // Check if model already exists\n  const exists = models.some(m => m.modelName === modelName && m.providerName === providerName);\n  if (!exists) {\n    const newModel: AddedModel = {\n      modelName,\n      providerName,\n      dateAdded: new Date().toISOString(),\n    };\n    \n    models.push(newModel);\n    saveAddedModels(models);\n  }\n}\n\nexport function deleteModel(modelName: string, providerName: string): boolean {\n  const models = loadAddedModels();\n  const initialLength = models.length;\n  \n  const filteredModels = models.filter(m => \n    !(m.modelName === modelName && m.providerName === providerName)\n  );\n  \n  if (filteredModels.length < initialLength) {\n    saveAddedModels(filteredModels);\n    return true;\n  }\n  \n  return false;\n}\n\nexport function getAddedModelsForProvider(providerName: string): AddedModel[] {\n  const models = loadAddedModels();\n  return models.filter(m => m.providerName === providerName);\n}\n\nexport function getAllAddedModels(): AddedModel[] {\n  return loadAddedModels();\n}\n\nexport function isModelAdded(modelName: string, providerName: string): boolean {\n  const models = loadAddedModels();\n  return models.some(m => m.modelName === modelName && m.providerName === providerName);\n}\n\nexport function setOpenRouterProvider(modelName: string, openRouterProvider: string): boolean {\n  const models = loadAddedModels();\n  console.log(`DEBUG: Looking for model ${modelName} with provider OpenRouter`);\n  console.log(`DEBUG: Available models:`, models.map(m => `${m.modelName} (${m.providerName})`));\n  \n  const modelIndex = models.findIndex(m => m.modelName === modelName && m.providerName === 'OpenRouter');\n  console.log(`DEBUG: Found model at index: ${modelIndex}`);\n  \n  if (modelIndex === -1) {\n    console.log(`DEBUG: Model ${modelName} not found or not an OpenRouter model`);\n    return false; // Model not found or not an OpenRouter model\n  }\n  \n  console.log(`DEBUG: Setting openRouterProvider to ${openRouterProvider} for ${modelName}`);\n  models[modelIndex].openRouterProvider = openRouterProvider;\n  saveAddedModels(models);\n  return true;\n}\n\nexport function getOpenRouterProvider(modelName: string): string | null {\n  const models = loadAddedModels();\n  const model = models.find(m => m.modelName === modelName && m.providerName === 'OpenRouter');\n  return model?.openRouterProvider || null;\n}",
      "filePath": "../src/utils/added-models.ts",
      "embedding": [
        4.16,
        0.9,
        0,
        0.3,
        1,
        0.018852009629776213,
        0.02302170777508559,
        0.07181275773226324,
        0.031309054657732684,
        0.08317605495098468,
        0.05174778703110231,
        0.042753985426000764,
        0.09787074418396227,
        0.05817241683043448,
        0.06809352339305456,
        0.058319505302368436,
        0.08559564203067731,
        0.026269317298337282,
        0.040485835052946686,
        0.06698125078761498,
        0.0058837266558023245,
        0.04129940037647317,
        0.09564181055792352,
        0.06232521547409689,
        0.018561795580575424,
        0.01069237791650709,
        0.01484837619807533,
        0.08756584960345494,
        0.04595384241765987,
        0.036227438281845235,
        0.09071865981226916,
        0.08232168435305215,
        0.05605235947247374,
        0.0035681406447876877,
        0.08693141158856744,
        0.03937062860362674,
        0.07499744918836264,
        0.0992941039160915,
        0.023556619766354727,
        0.027846926693530727,
        0.040474082371467796,
        0.04403742926235017,
        0.0027524955648326023,
        0.08864378432519007,
        0.09940562376805101,
        0.08296448928094476,
        0.07416899911014788,
        0.033691957592343294,
        0.08791904498610607,
        0.03853487772659059,
        0.015127106246181089,
        0.02567880179912757,
        0.03149860164406898,
        0.04055681781854337,
        0.05047167196257355,
        0.024928639513204145,
        0.014848763910265862,
        0.0132194187501256,
        0.057755883750001735,
        0.08859993490290806,
        0.048370397596955786,
        0.08501295152355404,
        0.08085805683101857,
        0.09133539193074983,
        0.0016021625704985333,
        0.007528114251471596,
        0.08922923743688213,
        0.011825679681841728,
        0.02917631494853358,
        0.07298132097999785,
        0.07410143976277526,
        0.04257640147566949,
        0.044291825601021406,
        0.06847153542699269,
        0.08987535500169729,
        0.006843833292122659,
        0.0240821336497153,
        0.049918583962773946,
        0.07543010131724737,
        0.04353698276231721,
        0.0008807143277883346,
        0.02918855136021973,
        0.0574085933184071,
        0.09828461575487761,
        0.09083861717505107,
        0.06898707912976625,
        0.043724575266215066,
        0.002397273170837777,
        0.0038375064786151606,
        0.0022753481816455757,
        0.06599884801341432,
        0.03684111775188086,
        0.05798171026611895,
        0.023055743483473612,
        0.0900977288280146,
        0.09687391716808648,
        0.07134186811666375,
        0.03134683451544882,
        0.019017134150373916,
        0.08580064453237295
      ]
    },
    {
      "content": "import OpenAI from 'openai';\nimport Cerebras from '@cerebras/cerebras_cloud_sdk';\nimport { testOllamaConnection } from './ollama-models';\n\nexport interface ApiKeyValidationResult {\n  isValid: boolean;\n  error?: string;\n}\n\n// Validate OpenRouter API key\nexport async function validateOpenRouterKey(apiKey: string): Promise<ApiKeyValidationResult> {\n  try {\n    const client = new OpenAI({\n      apiKey,\n      baseURL: 'https://openrouter.ai/api/v1',\n      timeout: 10000,\n    });\n    \n    await client.models.list();\n    return { isValid: true };\n  } catch (error: any) {\n    return { isValid: false, error: error?.message || \"API validation failed\" };\n  }\n}\n\n// Validate Anthropic API key\nexport async function validateAnthropicKey(apiKey: string): Promise<ApiKeyValidationResult> {\n  try {\n    const client = new OpenAI({\n      apiKey,\n      baseURL: 'https://api.anthropic.com/v1',\n      timeout: 10000,\n    });\n    \n    await client.models.list();\n    return { isValid: true };\n  } catch (error: any) {\n    return { isValid: false, error: error?.message || \"API validation failed\" };\n  }\n}\n\n// Validate Google API key\nexport async function validateGoogleKey(apiKey: string): Promise<ApiKeyValidationResult> {\n  try {\n    const client = new OpenAI({\n      apiKey,\n      baseURL: 'https://generativelanguage.googleapis.com/v1beta/openai',\n      timeout: 10000,\n    });\n    \n    await client.models.list();\n    return { isValid: true };\n  } catch (error: any) {\n    return { isValid: false, error: error?.message || \"API validation failed\" };\n  }\n}\n\n// Validate xAI API key\nexport async function validateXaiKey(apiKey: string): Promise<ApiKeyValidationResult> {\n  try {\n    const client = new OpenAI({\n      apiKey,\n      baseURL: 'https://api.x.ai/v1',\n      timeout: 10000,\n    });\n    \n    await client.models.list();\n    return { isValid: true };\n  } catch (error: any) {\n    return { isValid: false, error: error?.message || \"API validation failed\" };\n  }\n}\n\n// Validate Groq API key\nexport async function validateGroqKey(apiKey: string): Promise<ApiKeyValidationResult> {\n  try {\n    const client = new OpenAI({\n      apiKey,\n      baseURL: 'https://api.groq.com/openai/v1',\n      timeout: 10000,\n    });\n    \n    await client.models.list();\n    return { isValid: true };\n  } catch (error: any) {\n    return { isValid: false, error: error?.message || \"API validation failed\" };\n  }\n}\n\n// Validate Cerebras API key\nexport async function validateCerebrasKey(apiKey: string, model?: string): Promise<ApiKeyValidationResult> {\n  try {\n    const client = new Cerebras({\n      apiKey,\n      timeout: 10000,\n    });\n    \n    // Use the provided model or default to qwen-3-235b-a22b-instruct-2507 for validation\n    const validationModel = model || 'qwen-3-235b-a22b-instruct-2507';\n    \n    // Try a simple chat completion request instead of listing models\n    const response = await client.chat.completions.create({\n      model: validationModel,\n      messages: [{ role: 'user', content: 'test' }],\n      max_completion_tokens: 1,\n      temperature: 0.1,\n    });\n    \n    return { isValid: true };\n  } catch (error: any) {\n    return { isValid: false, error: error?.message || \"API validation failed\" };\n  }\n}\n\n// Validate Perplexity API key\nexport async function validatePerplexityKey(apiKey: string): Promise<ApiKeyValidationResult> {\n  try {\n    const response = await fetch('https://api.perplexity.ai/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'sonar',\n        messages: [{ role: 'user', content: 'test' }],\n        max_tokens: 1,\n      }),\n      signal: AbortSignal.timeout(10000),\n    });\n    \n    if (response.status === 401) {\n      return { isValid: false, error: 'Invalid API key' };\n    }\n    \n    return { isValid: true };\n  } catch (error: any) {\n    return { isValid: false, error: error?.message || \"API validation failed\" };\n  }\n}\n\n// Validate OpenAI API key\nexport async function validateOpenaiKey(apiKey: string): Promise<ApiKeyValidationResult> {\n  try {\n    const client = new OpenAI({\n      apiKey,\n      baseURL: 'https://api.openai.com/v1',\n      timeout: 10000,\n    });\n    \n    await client.models.list();\n    return { isValid: true };\n  } catch (error: any) {\n    return { isValid: false, error: error?.message || \"API validation failed\" };\n  }\n}\n\n// Validate Ollama connection (baseUrl instead of API key)\nexport async function validateOllamaUrl(baseUrl: string): Promise<ApiKeyValidationResult> {\n  try {\n    const result = await testOllamaConnection(baseUrl);\n    \n    if (result.success) {\n      return { \n        isValid: true, \n      };\n    } else {\n      return { \n        isValid: false, \n        error: result.error || \"Cannot connect to Ollama\" \n      };\n    }\n  } catch (error: any) {\n    return { isValid: false, error: error?.message || \"Ollama connection failed\" };\n  }\n}\n\n// Main validation function that routes to the correct provider\nexport async function validateApiKey(provider: string, apiKey: string, model?: string): Promise<ApiKeyValidationResult> {\n  // Special case for Ollama - it's a base URL, not an API key, and can be empty (defaults to localhost)\n  if (provider.toLowerCase() === 'ollama') {\n    const baseUrl = apiKey || 'http://localhost:11434';\n    return validateOllamaUrl(baseUrl);\n  }\n\n  if (!apiKey || !apiKey.trim()) {\n    return { isValid: false, error: 'API key is empty' };\n  }\n\n  switch (provider.toLowerCase()) {\n    case 'openrouter':\n      return validateOpenRouterKey(apiKey);\n    case 'anthropic':\n      return validateAnthropicKey(apiKey);\n    case 'google':\n      return validateGoogleKey(apiKey);\n    case 'xai':\n      return validateXaiKey(apiKey);\n    case 'groq':\n      return validateGroqKey(apiKey);\n    case 'cerebras':\n      return validateCerebrasKey(apiKey, model);\n    case 'perplexity':\n      return validatePerplexityKey(apiKey);\n    case 'openai':\n      return validateOpenaiKey(apiKey);\n    default:\n      return { isValid: false, error: 'Unknown provider' };\n  }\n}",
      "filePath": "../src/utils/api-key-validator.ts",
      "embedding": [
        6.87,
        1.1,
        0,
        0.3,
        1.1,
        0.020839975695802218,
        0.09648447157806539,
        0.09366908285649542,
        0.09143805442694473,
        0.014229156156049184,
        0.011964688489505583,
        0.0763339874171304,
        0.05759244331360811,
        0.08073762202219005,
        0.004342774616412593,
        0.03686828146742047,
        0.06330076416252899,
        0.0741738588345216,
        0.09546009206950101,
        0.056378195892837435,
        0.05737380938753042,
        0.06649784634509674,
        0.08210272690970667,
        0.08398218969459627,
        0.0669180713417813,
        0.09904484153953913,
        0.05459927157633951,
        0.07549882020033087,
        0.06524300629726461,
        0.009984427681064124,
        0.08929713191816341,
        0.0600965069981656,
        0.043759287021968074,
        0.09739228564098426,
        0.0380902756397571,
        0.05978944310300385,
        0.07735201411567076,
        0.04527186364567198,
        0.010326274463843944,
        0.09675540468808277,
        0.0785209672927557,
        0.08925196951280133,
        0.08676572979337935,
        0.013115192760929074,
        0.023862645151352238,
        0.055790371556846345,
        0.0830692220210492,
        0.023377887980719072,
        0.049277598473093036,
        0.06363375070966328,
        0.0008088930895390645,
        0.0633460046198238,
        0.04888086156473875,
        0.07295382496878697,
        0.02993548564908062,
        0.06711490590561643,
        0.0023790583665188937,
        0.0955203336341904,
        0.053916149986812156,
        0.0051735812654397865,
        0.01102319485518758,
        0.01906641879066987,
        0.08711187783460651,
        0.05507822496849335,
        0.02943878291927873,
        0.0033544636700883704,
        0.03510564687123185,
        0.08525394848704199,
        0.08585572654064351,
        0.07380346941749293,
        0.09797656079543295,
        0.09028723990135896,
        0.05832352082900887,
        0.039001716007681875,
        0.02125070993505167,
        0.04843349672223466,
        0.0388734958192297,
        0.055979580768241305,
        0.06933244903178032,
        0.035264758973143566,
        0.015344748480591176,
        0.0013617693655796792,
        0.08017794980939831,
        0.07882161177512192,
        0.044458692769981135,
        0.08960829216468248,
        0.04810404701001966,
        0.045882569775325205,
        0.06939618289317355,
        0.046763750323878764,
        0.029357785602022148,
        0.05019059671317033,
        0.022313804720986652,
        0.02216761716934055,
        0.07913558237307647,
        0.044185906797857444,
        0.00950028467225369,
        0.09417230600288479,
        0.02650861342445107,
        0.08282036067922993
      ]
    },
    {
      "content": "import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as os from \"os\";\n\ninterface UserSettings {\n  apiKey?: string;\n  groqApiKey?: string;\n  anthropicApiKey?: string;\n  openRouterApiKey?: string;\n  googleApiKey?: string;\n  xaiApiKey?: string;\n  cerebrasApiKey?: string;\n  perplexityApiKey?: string;\n  openaiApiKey?: string;\n  ollamaBaseUrl?: string;\n}\n\nexport interface ApiKeys {\n  xaiApiKey?: string;\n  groqApiKey?: string;\n  anthropicApiKey?: string;\n  openRouterApiKey?: string;\n  googleApiKey?: string;\n  cerebrasApiKey?: string;\n  perplexityApiKey?: string;\n  openaiApiKey?: string;\n  ollamaBaseUrl?: string;\n}\n\nfunction checkShellFiles(): ApiKeys {\n  const homeDir = os.homedir();\n  const shellFiles = [\n    path.join(homeDir, '.bashrc'),\n    path.join(homeDir, '.zshrc'),\n    path.join(homeDir, '.bash_profile'),\n    path.join(homeDir, '.profile')\n  ];\n  \n  const keys: ApiKeys = {};\n  const keyPatterns = {\n    xaiApiKey: /export\\s+XAI_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n    groqApiKey: /export\\s+GROQ_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n    anthropicApiKey: /export\\s+(?:ANTHROPIC_API_KEY|CLAUDE_API_KEY)\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n    openRouterApiKey: /export\\s+OPENROUTER_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n    googleApiKey: /export\\s+GOOGLE_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n    cerebrasApiKey: /export\\s+CEREBRAS_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n    perplexityApiKey: /export\\s+PERPLEXITY_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n    openaiApiKey: /export\\s+OPENAI_API_KEY\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n    ollamaBaseUrl: /export\\s+OLLAMA_BASE_URL\\s*=\\s*['\"]?([^'\";\\s]+)['\"]?/,\n  } as const;\n  \n  for (const file of shellFiles) {\n    try {\n      if (fs.existsSync(file)) {\n        const content = fs.readFileSync(file, 'utf8');\n        \n        for (const [keyName, pattern] of Object.entries(keyPatterns)) {\n          if (!keys[keyName as keyof ApiKeys]) {\n            const match = content.match(pattern);\n            if (match && match[1]) {\n              (keys as any)[keyName] = match[1];\n            }\n          }\n        }\n      }\n    } catch (error) {\n      // Ignore errors reading shell files\n    }\n  }\n  \n  return keys;\n}\n\nfunction saveShellKeysToSettings(shellKeys: ApiKeys): void {\n  try {\n    const homeDir = os.homedir();\n    const settingsDir = path.join(homeDir, '.giga');\n    const settingsFile = path.join(settingsDir, 'user-settings.json');\n    \n    // Create .giga directory if it doesn't exist\n    if (!fs.existsSync(settingsDir)) {\n      fs.mkdirSync(settingsDir, { recursive: true });\n    }\n    \n    // Load existing settings or create empty object\n    let settings: UserSettings = {};\n    if (fs.existsSync(settingsFile)) {\n      settings = JSON.parse(fs.readFileSync(settingsFile, 'utf8'));\n    }\n    \n    // Only save shell keys that are not already in settings and are not empty\n    let hasChanges = false;\n    const keyMappings: { [K in keyof ApiKeys]: keyof UserSettings } = {\n      xaiApiKey: 'xaiApiKey',\n      groqApiKey: 'groqApiKey', \n      anthropicApiKey: 'anthropicApiKey',\n      openRouterApiKey: 'openRouterApiKey',\n      googleApiKey: 'googleApiKey',\n      cerebrasApiKey: 'cerebrasApiKey',\n      perplexityApiKey: 'perplexityApiKey',\n      openaiApiKey: 'openaiApiKey',\n      ollamaBaseUrl: 'ollamaBaseUrl',\n    };\n    \n    for (const [apiKeyName, settingsKeyName] of Object.entries(keyMappings)) {\n      const shellValue = shellKeys[apiKeyName as keyof ApiKeys];\n      if (shellValue && !settings[settingsKeyName]) {\n        (settings as any)[settingsKeyName] = shellValue;\n        hasChanges = true;\n      }\n    }\n    \n    // Handle legacy apiKey field\n    if (shellKeys.xaiApiKey && !settings.apiKey && !settings.xaiApiKey) {\n      settings.apiKey = shellKeys.xaiApiKey;\n      hasChanges = true;\n    }\n    \n    // Save settings file if there were changes\n    if (hasChanges) {\n      fs.writeFileSync(settingsFile, JSON.stringify(settings, null, 2));\n      // Refresh global shared info after changes\n      try {\n        const now = new Date();\n        fs.utimesSync(settingsFile, now, now);\n      } catch (refreshError) {\n        // Silently ignore refresh errors\n      }\n    }\n  } catch (error) {\n    // Silently ignore errors to avoid disrupting the application\n  }\n}\n\nexport function refreshGlobalSharedInfo(): void {\n  try {\n    const homeDir = os.homedir();\n    const settingsFile = path.join(homeDir, '.giga', 'user-settings.json');\n    \n    // If user-settings.json exists, refresh global shared info\n    if (fs.existsSync(settingsFile)) {\n      // Trigger refresh by updating modification time\n      const now = new Date();\n      fs.utimesSync(settingsFile, now, now);\n    }\n  } catch (error) {\n    // Silently ignore errors\n  }\n}\n\nexport function loadApiKeys(): ApiKeys {\n  try {\n    const homeDir = os.homedir();\n    const settingsFile = path.join(homeDir, '.giga', 'user-settings.json');\n    \n    // Start with environment variables\n    const envKeys: ApiKeys = {\n      xaiApiKey: process.env.XAI_API_KEY,\n      groqApiKey: process.env.GROQ_API_KEY,\n      anthropicApiKey: process.env.ANTHROPIC_API_KEY || process.env.CLAUDE_API_KEY,\n      openRouterApiKey: process.env.OPENROUTER_API_KEY,\n      googleApiKey: process.env.GOOGLE_API_KEY,\n      cerebrasApiKey: process.env.CEREBRAS_API_KEY,\n      perplexityApiKey: process.env.PERPLEXITY_API_KEY,\n      openaiApiKey: process.env.OPENAI_API_KEY,\n      ollamaBaseUrl: process.env.OLLAMA_BASE_URL,\n    };\n    \n    // Check shell files for exported variables\n    const shellKeys = checkShellFiles();\n    \n    // Save shell keys to settings if they're not already saved\n    saveShellKeysToSettings(shellKeys);\n    \n    // Load settings file\n    let settingsKeys: ApiKeys = {};\n    if (fs.existsSync(settingsFile)) {\n      const settings: UserSettings = JSON.parse(fs.readFileSync(settingsFile, 'utf8'));\n      settingsKeys = {\n        xaiApiKey: settings.apiKey || settings.xaiApiKey, // backwards compatibility\n        groqApiKey: settings.groqApiKey,\n        anthropicApiKey: settings.anthropicApiKey,\n        openRouterApiKey: settings.openRouterApiKey,\n        googleApiKey: settings.googleApiKey,\n        cerebrasApiKey: settings.cerebrasApiKey,\n        perplexityApiKey: settings.perplexityApiKey,\n        openaiApiKey: settings.openaiApiKey,\n        ollamaBaseUrl: settings.ollamaBaseUrl,\n      };\n    }\n    \n    // Priority: env vars > shell files > settings file\n    return {\n      xaiApiKey: envKeys.xaiApiKey || shellKeys.xaiApiKey || settingsKeys.xaiApiKey,\n      groqApiKey: envKeys.groqApiKey || shellKeys.groqApiKey || settingsKeys.groqApiKey,\n      anthropicApiKey: envKeys.anthropicApiKey || shellKeys.anthropicApiKey || settingsKeys.anthropicApiKey,\n      openRouterApiKey: envKeys.openRouterApiKey || shellKeys.openRouterApiKey || settingsKeys.openRouterApiKey,\n      googleApiKey: envKeys.googleApiKey || shellKeys.googleApiKey || settingsKeys.googleApiKey,\n      cerebrasApiKey: envKeys.cerebrasApiKey || shellKeys.cerebrasApiKey || settingsKeys.cerebrasApiKey,\n      perplexityApiKey: envKeys.perplexityApiKey || shellKeys.perplexityApiKey || settingsKeys.perplexityApiKey,\n      openaiApiKey: envKeys.openaiApiKey || shellKeys.openaiApiKey || settingsKeys.openaiApiKey,\n      ollamaBaseUrl: envKeys.ollamaBaseUrl || shellKeys.ollamaBaseUrl || settingsKeys.ollamaBaseUrl || 'http://localhost:11434',\n    };\n  } catch (error) {\n    return {};\n  }\n}",
      "filePath": "../src/utils/api-keys.ts",
      "embedding": [
        6.41,
        0.4,
        0,
        0.3,
        1.3,
        0.07598518530656187,
        0.05802047858174295,
        0.006853917591439541,
        0.03201935090982363,
        0.07531835439794465,
        0.04249880304066377,
        0.0883345521168113,
        0.07356833455761795,
        0.08972625414708134,
        0.017959314031529904,
        0.09018001773350472,
        0.08991055698390743,
        0.03691286288824285,
        0.022081285753588878,
        0.03188197870733278,
        0.010411995078666126,
        0.080791563071054,
        0.09624304930142076,
        0.06153107458799978,
        0.05962996423549728,
        0.0630962448494453,
        0.09722896524584967,
        0.005667285243368458,
        0.01603947726148336,
        0.027487723614459093,
        0.09992483335653468,
        0.07283313292488676,
        0.08081453495541294,
        0.07072331614844025,
        0.05702735083521773,
        0.04253071882134705,
        0.07708294653729526,
        0.0064030495388376135,
        0.034146183838897025,
        0.029604757427230757,
        0.06436838770381724,
        0.000057887245959242776,
        0.0637864831672849,
        0.04410007985057967,
        0.07923042892842624,
        0.051711311857936516,
        0.030566060568176002,
        0.08289544723965711,
        0.049671875179253366,
        0.08660107211546555,
        0.005847080630648105,
        0.06079966169214865,
        0.05008097986701857,
        0.0059121260743548515,
        0.007569236888835951,
        0.08589575028284793,
        0.09839482546674151,
        0.06544989978674838,
        0.07443120343998735,
        0.04294672556999938,
        0.0709716244366912,
        0.033517866111669896,
        0.030847843671235633,
        0.06287667433514586,
        0.03420920044255415,
        0.0666799350566486,
        0.047250575099012676,
        0.051002196261443214,
        0.04829087862626389,
        0.036523123292240056,
        0.041466394661867204,
        0.07242130703502701,
        0.06448650911131956,
        0.012523582414108315,
        0.03223155548795641,
        0.08293771328717965,
        0.04571411553010474,
        0.0894953759530584,
        0.03131302298088972,
        0.02364342853913014,
        0.001407950334618191,
        0.029664140424015287,
        0.010460118328960778,
        0.025611913979579227,
        0.04169709914869157,
        0.013440740540506979,
        0.02314405981043063,
        0.06676807048391226,
        0.029243848987943688,
        0.09109685462998185,
        0.002961893588742104,
        0.08033840819457816,
        0.040092070988128704,
        0.0952382605885107,
        0.034796044812220095,
        0.021774573502407725,
        0.055001460126406866,
        0.013905961481732966,
        0.032179903854117724,
        0.07689104923909673
      ]
    },
    {
      "content": "import { exec } from 'child_process';\nimport { promisify } from 'util';\nimport { EventEmitter } from 'events';\nimport { modeManager } from './mode-manager';\nimport { AgentMode } from '../types';\n\nconst execAsync = promisify(exec);\n\nexport interface ConfirmationOptions {\n  operation: string;\n  filename: string;\n  showVSCodeOpen?: boolean;\n  content?: string;  // Content to show in confirmation dialog\n}\n\nexport interface ConfirmationResult {\n  confirmed: boolean;\n  dontAskAgain?: boolean;\n  feedback?: string;\n}\n\nexport class ConfirmationService extends EventEmitter {\n  private static instance: ConfirmationService;\n  private skipConfirmationThisSession = false;\n  private pendingConfirmation: Promise<ConfirmationResult> | null = null;\n  private resolveConfirmation: ((result: ConfirmationResult) => void) | null = null;\n  private headlessMode = false;\n  \n  // Session flags for different operation types\n  private sessionFlags = {\n    fileOperations: false,\n    bashCommands: false,\n    allOperations: false\n  };\n\n  static getInstance(): ConfirmationService {\n    if (!ConfirmationService.instance) {\n      ConfirmationService.instance = new ConfirmationService();\n    }\n    return ConfirmationService.instance;\n  }\n\n  constructor() {\n    super();\n  }\n\n  async requestConfirmation(options: ConfirmationOptions, operationType: 'file' | 'bash' = 'file'): Promise<ConfirmationResult> {\n    // In headless mode, auto-approve all operations\n    if (this.headlessMode) {\n      return { confirmed: true };\n    }\n\n    // In GIGA mode, default to no confirmations (full power mode)\n    const currentMode = modeManager.getCurrentMode();\n    if (currentMode === AgentMode.GIGA) {\n      // GIGA mode = full power, no permission requests by default\n      return { confirmed: true };\n    }\n\n    // In CHILL mode, always ask for confirmation unless user has set session flags\n    if (currentMode === AgentMode.CHILL) {\n      // Check session flags first\n      if (this.sessionFlags.allOperations || \n          (operationType === 'file' && this.sessionFlags.fileOperations) ||\n          (operationType === 'bash' && this.sessionFlags.bashCommands)) {\n        return { confirmed: true };\n      }\n      // In CHILL mode, we need to ask for confirmation\n    }\n\n    // In PLAN mode, generally approve basic operations but still respect session flags\n    if (currentMode === AgentMode.PLAN) {\n      if (this.sessionFlags.allOperations || \n          (operationType === 'file' && this.sessionFlags.fileOperations) ||\n          (operationType === 'bash' && this.sessionFlags.bashCommands)) {\n        return { confirmed: true };\n      }\n      // For PLAN mode, we might want to be more permissive for read operations\n      // but still ask for write operations - the individual tools can decide\n    }\n\n    // If VS Code should be opened, try to open it\n    if (options.showVSCodeOpen) {\n      try {\n        await this.openInVSCode(options.filename);\n      } catch (error) {\n        // If VS Code opening fails, continue without it\n        options.showVSCodeOpen = false;\n      }\n    }\n\n    // Create a promise that will be resolved by the UI component\n    this.pendingConfirmation = new Promise<ConfirmationResult>((resolve) => {\n      this.resolveConfirmation = resolve;\n    });\n\n    // Emit custom event that the UI can listen to (using setImmediate to ensure the UI updates)\n    setImmediate(() => {\n      this.emit('confirmation-requested', options);\n    });\n\n    const result = await this.pendingConfirmation;\n    \n    if (result.dontAskAgain) {\n      // Set the appropriate session flag based on operation type\n      if (operationType === 'file') {\n        this.sessionFlags.fileOperations = true;\n      } else if (operationType === 'bash') {\n        this.sessionFlags.bashCommands = true;\n      }\n      // Could also set allOperations for global skip\n    }\n\n    return result;\n  }\n\n  confirmOperation(confirmed: boolean, dontAskAgain?: boolean): void {\n    if (this.resolveConfirmation) {\n      this.resolveConfirmation({ confirmed, dontAskAgain });\n      this.resolveConfirmation = null;\n      this.pendingConfirmation = null;\n    }\n  }\n\n  rejectOperation(feedback?: string): void {\n    if (this.resolveConfirmation) {\n      this.resolveConfirmation({ confirmed: false, feedback });\n      this.resolveConfirmation = null;\n      this.pendingConfirmation = null;\n    }\n  }\n\n  private async openInVSCode(filename: string): Promise<void> {\n    // Try different VS Code commands\n    const commands = ['code', 'code-insiders', 'codium'];\n    \n    for (const cmd of commands) {\n      try {\n        await execAsync(`which ${cmd}`);\n        await execAsync(`${cmd} \"${filename}\"`);\n        return;\n      } catch (error) {\n        // Continue to next command\n        continue;\n      }\n    }\n    \n    throw new Error('VS Code not found');\n  }\n\n  isPending(): boolean {\n    return this.pendingConfirmation !== null;\n  }\n\n  resetSession(): void {\n    this.sessionFlags = {\n      fileOperations: false,\n      bashCommands: false,\n      allOperations: false\n    };\n  }\n  \n  getSessionFlags() {\n    return { ...this.sessionFlags };\n  }\n\n  setHeadlessMode(enabled: boolean): void {\n    this.headlessMode = enabled;\n  }\n\n  isHeadlessMode(): boolean {\n    return this.headlessMode;\n  }\n}",
      "filePath": "../src/utils/confirmation-service.ts",
      "embedding": [
        5.91,
        0,
        0.1,
        0.5,
        0.3,
        0.0782533332186029,
        0.09657883624289121,
        0.08573446143765084,
        0.01597698948493198,
        0.017880354744950266,
        0.062447245185796946,
        0.0019364919015492867,
        0.013017305474793317,
        0.04038485599531915,
        0.06489941925206266,
        0.07970453562696764,
        0.0024815729101122065,
        0.05265725015713758,
        0.00505159555359227,
        0.033738384977440576,
        0.05620006124649725,
        0.04123371467268098,
        0.018193111231598214,
        0.0013799937714139678,
        0.08565885975587582,
        0.07528219336993161,
        0.02237056655382639,
        0.0794940018323323,
        0.013577411325167654,
        0.07194990683749078,
        0.08609011766074649,
        0.030411769894915588,
        0.02891212532945092,
        0.08027264823432002,
        0.015037258016344113,
        0.014926788826361392,
        0.03785943242895954,
        0.047842767678953874,
        0.08246582492964939,
        0.0415335626904912,
        0.03633919825238037,
        0.03892491259355307,
        0.04020483905008987,
        0.04482803901409105,
        0.08627238017313188,
        0.0568995743844569,
        0.024552171847682006,
        0.0029717047191130663,
        0.01863734829080046,
        0.08509406978165437,
        0.06682973343210992,
        0.0857724507021624,
        0.07570306888276761,
        0.06138222848465924,
        0.08760100289612842,
        0.02773058692055097,
        0.013580423802334908,
        0.033013477210273146,
        0.09503075503758349,
        0.08638791418117098,
        0.012512863353194981,
        0.06437560738450882,
        0.034464274207061406,
        0.03864073297524609,
        0.05610657583220772,
        0.07879488640444705,
        0.04386128440342564,
        0.060206927539275416,
        0.025976641891179788,
        0.012083646948750616,
        0.08970801503311038,
        0.00885250484021094,
        0.05993512172171193,
        0.026191160678424776,
        0.00471575066646448,
        0.08079187282378707,
        0.022766470561528286,
        0.04527658854857872,
        0.06194079924351684,
        0.07776738602772641,
        0.018033545821980034,
        0.06852454274551194,
        0.08521551319297371,
        0.00211164281594185,
        0.09260933633580604,
        0.07836238299067927,
        0.08405636486729208,
        0.04885243637170231,
        0.042135092708703095,
        0.030587510421098696,
        0.013563573693937693,
        0.04271434553332,
        0.05216324079844159,
        0.062323591416403756,
        0.02553052413025595,
        0.05099517537083882,
        0.013047920292758586,
        0.07713516236330684,
        0.047374136622094935,
        0.05474832281903699
      ]
    },
    {
      "content": "import path from 'path';\nimport fs from 'fs/promises';\nimport os from 'os';\nimport { ChatEntry } from '../agent/giga-agent';\nimport { loadApiKeys } from './api-keys';\n\nexport interface SavedConversation {\n  id: string;\n  title: string;\n  messages: ChatEntry[];\n  createdAt: Date;\n  updatedAt: Date;\n  model: string;\n  messageCount: number;\n}\n\nexport interface ConversationSummary {\n  id: string;\n  title: string;\n  createdAt: Date;\n  updatedAt: Date;\n  model: string;\n  messageCount: number;\n  preview: string; // First user message preview\n}\n\nexport class ConversationManager {\n  private static instance: ConversationManager;\n  private conversationsDir: string;\n\n  private constructor() {\n    this.conversationsDir = path.join(os.homedir(), '.giga', 'conversations');\n  }\n\n  static getInstance(): ConversationManager {\n    if (!ConversationManager.instance) {\n      ConversationManager.instance = new ConversationManager();\n    }\n    return ConversationManager.instance;\n  }\n\n  private async ensureConversationsDir(): Promise<void> {\n    try {\n      await fs.mkdir(this.conversationsDir, { recursive: true });\n    } catch (error) {\n      console.error('Failed to create conversations directory:', error);\n    }\n  }\n\n  private generateConversationId(): string {\n    return `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private getConversationPath(id: string): string {\n    return path.join(this.conversationsDir, `${id}.json`);\n  }\n\n  async generateTitle(messages: ChatEntry[]): Promise<string> {\n    const apiKeys = loadApiKeys();\n    const groqApiKey = apiKeys.groqApiKey || process.env.GROQ_API_KEY;\n\n    if (!groqApiKey) {\n      // Fallback to first user message if no API key\n      const firstUserMessage = messages.find(m => m.type === 'user');\n      return firstUserMessage?.content.slice(0, 50) + '...' || 'Untitled Conversation';\n    }\n\n    try {\n      // Get first few meaningful messages for context\n      const contextMessages = messages\n        .filter(m => m.type === 'user' || m.type === 'assistant')\n        .slice(0, 6)\n        .map(m => `${m.type}: ${m.content}`)\n        .join('\\n');\n\n      const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${groqApiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: 'llama-3.3-70b-versatile',\n          messages: [\n            {\n              role: 'system',\n              content: 'Generate a concise 3-6 word title for this coding conversation. Focus on the main task/topic. Examples: \"React Component Bug Fix\", \"Database Schema Design\", \"API Integration Setup\".'\n            },\n            {\n              role: 'user',\n              content: `Conversation:\\n${contextMessages}\\n\\nTitle:`\n            }\n          ],\n          max_tokens: 20,\n          temperature: 0.1\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json() as any;\n        const title = data.choices?.[0]?.message?.content?.trim();\n        if (title && title.length > 0) {\n          return title.replace(/['\"]/g, ''); // Remove quotes if any\n        }\n      }\n    } catch (error) {\n      console.error('Failed to generate title:', error);\n    }\n\n    // Fallback to first user message\n    const firstUserMessage = messages.find(m => m.type === 'user');\n    return firstUserMessage?.content.slice(0, 50) + '...' || 'Untitled Conversation';\n  }\n\n  async saveConversation(messages: ChatEntry[], model: string, existingId?: string): Promise<string> {\n    await this.ensureConversationsDir();\n\n    const id = existingId || this.generateConversationId();\n    const now = new Date();\n    \n    // Generate title if this is a new conversation or if it doesn't have many messages yet\n    let title = 'New Conversation';\n    if (messages.length >= 2) {\n      title = await this.generateTitle(messages);\n    }\n\n    const conversation: SavedConversation = {\n      id,\n      title,\n      messages,\n      createdAt: existingId ? (await this.loadConversation(id))?.createdAt || now : now,\n      updatedAt: now,\n      model,\n      messageCount: messages.filter(m => m.type === 'user' || m.type === 'assistant').length\n    };\n\n    const filePath = this.getConversationPath(id);\n    await fs.writeFile(filePath, JSON.stringify(conversation, null, 2));\n    return id;\n  }\n\n  async loadConversation(id: string): Promise<SavedConversation | null> {\n    try {\n      const filePath = this.getConversationPath(id);\n      const data = await fs.readFile(filePath, 'utf-8');\n      const conversation = JSON.parse(data);\n      \n      // Convert date strings back to Date objects\n      conversation.createdAt = new Date(conversation.createdAt);\n      conversation.updatedAt = new Date(conversation.updatedAt);\n      conversation.messages = conversation.messages.map((msg: any) => ({\n        ...msg,\n        timestamp: new Date(msg.timestamp)\n      }));\n\n      return conversation;\n    } catch (error) {\n      console.error(`Failed to load conversation ${id}:`, error);\n      return null;\n    }\n  }\n\n  async listConversations(): Promise<ConversationSummary[]> {\n    await this.ensureConversationsDir();\n\n    try {\n      const files = await fs.readdir(this.conversationsDir);\n      const jsonFiles = files.filter(f => f.endsWith('.json'));\n\n      const summaries: ConversationSummary[] = [];\n\n      for (const file of jsonFiles) {\n        try {\n          const id = file.replace('.json', '');\n          const conversation = await this.loadConversation(id);\n          \n          if (conversation) {\n            const firstUserMessage = conversation.messages.find(m => m.type === 'user');\n            const preview = firstUserMessage?.content.slice(0, 100) + '...' || 'No messages';\n\n            summaries.push({\n              id: conversation.id,\n              title: conversation.title,\n              createdAt: conversation.createdAt,\n              updatedAt: conversation.updatedAt,\n              model: conversation.model,\n              messageCount: conversation.messageCount,\n              preview\n            });\n          }\n        } catch (error) {\n          console.error(`Failed to process conversation file ${file}:`, error);\n        }\n      }\n\n      // Sort by most recently updated first\n      return summaries.sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());\n    } catch (error) {\n      console.error('Failed to list conversations:', error);\n      return [];\n    }\n  }\n\n  async deleteConversation(id: string): Promise<boolean> {\n    try {\n      const filePath = this.getConversationPath(id);\n      await fs.unlink(filePath);\n      return true;\n    } catch (error) {\n      console.error(`Failed to delete conversation ${id}:`, error);\n      return false;\n    }\n  }\n\n  async searchConversations(query: string): Promise<ConversationSummary[]> {\n    const allConversations = await this.listConversations();\n    \n    if (!query.trim()) {\n      return allConversations;\n    }\n\n    const lowerQuery = query.toLowerCase();\n    \n    return allConversations.filter(conv => \n      conv.title.toLowerCase().includes(lowerQuery) ||\n      conv.preview.toLowerCase().includes(lowerQuery)\n    );\n  }\n}",
      "filePath": "../src/utils/conversation-manager.ts",
      "embedding": [
        6.89,
        0,
        0.1,
        0.5,
        0.3,
        0.0125421027411309,
        0.03579583129016597,
        0.002481251856546474,
        0.0976379828551349,
        0.012032614713068025,
        0.08693189889644755,
        0.08070200750930762,
        0.018380179960289067,
        0.0025686967663939853,
        0.03378265499578781,
        0.02580731003428941,
        0.06609614777227614,
        0.03015027819400136,
        0.0438059279810382,
        0.08431081673445473,
        0.07562397003238742,
        0.027680579599421176,
        0.08866339203639277,
        0.0376618715142355,
        0.07510725571017829,
        0.0336516137252863,
        0.0619423751227063,
        0.061876205672195664,
        0.08828919990638379,
        0.06842651158981765,
        0.08152567882103191,
        0.016055897926901097,
        0.039546044011210625,
        0.07909701496166872,
        0.06515814110457378,
        0.009971218798731852,
        0.06597070804172735,
        0.025898825524468608,
        0.08455797670613018,
        0.08325313698049698,
        0.05762408519288964,
        0.0377788919058095,
        0.009861515930411104,
        0.02331072400061761,
        0.003880490897644684,
        0.07805790852724648,
        0.08988381811090901,
        0.03905803273433426,
        0.07827265623633839,
        0.0777655771253089,
        0.02243143571979235,
        0.01943508161791534,
        0.07199692357747892,
        0.049001395189924316,
        0.053445223622808104,
        0.029222032401384712,
        0.07405301926413303,
        0.06832305610693701,
        0.07647532004585036,
        0.07200615208042373,
        0.002827030265992703,
        0.010589190034567986,
        0.00833241361501792,
        0.022219679182285214,
        0.015924811616641166,
        0.07553838273838816,
        0.04131949545771383,
        0.07678757217729824,
        0.026555728106084055,
        0.025438770952997326,
        0.08941576359857278,
        0.05521743486807568,
        0.001735465871321451,
        0.02549524048497286,
        0.048308053548474374,
        0.03631017683574405,
        0.06405311248506394,
        0.009007858112995648,
        0.09713287709162177,
        0.07719843583305486,
        0.002085759880576199,
        0.05501845237716677,
        0.02484174622623341,
        0.06522370678030032,
        0.006468028292855477,
        0.01880105167343731,
        0.0149376991470634,
        0.035494641063479986,
        0.0390427603887423,
        0.0002505329224677722,
        0.005819599968344302,
        0.09442750215491207,
        0.05978485822361852,
        0.07982595734830655,
        0.0612293575849041,
        0.09493828583200765,
        0.0013202598705091663,
        0.07031835636158883,
        0.09743026858365433,
        0.05031744007576366
      ]
    },
    {
      "content": "import * as fs from 'fs';\nimport * as path from 'path';\nimport { getPromptsAsSystemPrompt } from './prompts';\n\nexport function loadCustomInstructions(workingDirectory: string = process.cwd()): string | null {\n  try {\n    const instructionsPath = path.join(workingDirectory, '.giga', 'GIGA.md');\n    \n    let customInstructions = '';\n    \n    // Load global custom prompts first\n    const globalPrompts = getPromptsAsSystemPrompt();\n    if (globalPrompts) {\n      customInstructions += globalPrompts;\n    }\n    \n    // Then load project-specific GIGA.md if it exists\n    if (fs.existsSync(instructionsPath)) {\n      const projectInstructions = fs.readFileSync(instructionsPath, 'utf-8');\n      if (projectInstructions.trim()) {\n        if (customInstructions) {\n          customInstructions += '\\n\\n' + projectInstructions.trim();\n        } else {\n          customInstructions = projectInstructions.trim();\n        }\n      }\n    }\n    \n    return customInstructions || null;\n  } catch (error) {\n    console.warn('Failed to load custom instructions:', error);\n    return null;\n  }\n}",
      "filePath": "../src/utils/custom-instructions.ts",
      "embedding": [
        1.11,
        0.1,
        0,
        0.3,
        0.1,
        0.03782791017678575,
        0.04004939228768389,
        0.01523792898850921,
        0.022555857534920745,
        0.042796903252575916,
        0.08168237829416052,
        0.08750191165984458,
        0.04232013660019457,
        0.04998198690079493,
        0.009836984171863973,
        0.09257728504702922,
        0.09732848466246635,
        0.0881447905879854,
        0.09109532766662229,
        0.07089954302975272,
        0.07781869897224841,
        0.03684555501183232,
        0.08771240086919592,
        0.054734899978103324,
        0.06846013981087073,
        0.009345879624358167,
        0.09613677629723522,
        0.04920738469957445,
        0.040212737633040924,
        0.006705821032650339,
        0.028182306885513486,
        0.0696608675785873,
        0.027072252669409325,
        0.04257163535242289,
        0.00806809948157632,
        0.07298350047976135,
        0.009698268335064254,
        0.07587119789078484,
        0.09564718223156399,
        0.028695279340174674,
        0.027250361089772624,
        0.09145473123802826,
        0.07381334394068077,
        0.07012694950387546,
        0.02309905534239083,
        0.02006255071467147,
        0.03343110521881242,
        0.050907741701586996,
        0.057263890159004106,
        0.00736166248426643,
        0.06481098112021391,
        0.023252601023072042,
        0.07621214825021441,
        0.0883965147119411,
        0.09539217750530732,
        0.07298411934924173,
        0.08621310677086778,
        0.09473232724152775,
        0.09137817359784794,
        0.0037041195708035326,
        0.009675061345254267,
        0.08876446422719433,
        0.060484843011213534,
        0.04505497267181502,
        0.02938488287504363,
        0.0692091648121962,
        0.026288804102223652,
        0.040945131829720406,
        0.0380603825182739,
        0.0975105278250272,
        0.06924891665285847,
        0.025893748304061128,
        0.08187586230143437,
        0.04696345235755526,
        0.023413653035065686,
        0.0021846565589311085,
        0.011649407619088137,
        0.09083340097234686,
        0.05257248225671122,
        0.03439727081347021,
        0.04983509336761682,
        0.004576506287074722,
        0.057043312775831204,
        0.04890686145580547,
        0.05040069139551048,
        0.09190296043834181,
        0.09171910884581601,
        0.06755104872405478,
        0.09739241299402872,
        0.057405266504862086,
        0.03752059990870227,
        0.008953796516846925,
        0.03184578602090006,
        0.04460419664436323,
        0.08931731912586285,
        0.06809772007283235,
        0.018707800480298842,
        0.0460213774989915,
        0.08592761167335677,
        0.06038463361272735
      ]
    },
    {
      "content": "import { PROVIDER_MODELS, ProviderName } from './provider-models';\nimport { fetchOllamaModels } from './ollama-models';\n\nexport interface ModelInfo {\n  id: string;\n  name?: string;\n  description?: string;\n  provider?: string;\n}\n\nexport interface ModelFetchResult {\n  success: boolean;\n  models: string[];\n  error?: string;\n}\n\n// Fetch models from OpenRouter API\nasync function fetchOpenRouterModels(apiKey: string): Promise<ModelFetchResult> {\n  try {\n    const response = await fetch('https://openrouter.ai/api/v1/models', {\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      signal: AbortSignal.timeout(10000),\n    });\n\n    if (!response.ok) {\n      return { success: false, models: [], error: `HTTP ${response.status}` };\n    }\n\n    const data = await response.json() as any;\n    const models = data.data || data;\n    const modelIds = Array.isArray(models) \n      ? models.map((model: any) => model.id).filter(Boolean)\n      : [];\n\n    return { success: true, models: modelIds };\n  } catch (error: any) {\n    return { success: false, models: [], error: error.message };\n  }\n}\n\n// Fetch models from Google AI API\nasync function fetchGoogleModels(apiKey: string): Promise<ModelFetchResult> {\n  try {\n    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`, {\n      signal: AbortSignal.timeout(10000),\n    });\n\n    if (!response.ok) {\n      return { success: false, models: [], error: `HTTP ${response.status}` };\n    }\n\n    const data = await response.json() as any;\n    const models = data.models || [];\n    const modelIds = models\n      .map((model: any) => model.name?.replace('models/', '') || model.id)\n      .filter(Boolean);\n\n    return { success: true, models: modelIds };\n  } catch (error: any) {\n    return { success: false, models: [], error: error.message };\n  }\n}\n\n// Fetch models from xAI API\nasync function fetchXaiModels(apiKey: string): Promise<ModelFetchResult> {\n  try {\n    const response = await fetch('https://api.x.ai/v1/models', {\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      signal: AbortSignal.timeout(10000),\n    });\n\n    if (!response.ok) {\n      return { success: false, models: [], error: `HTTP ${response.status}` };\n    }\n\n    const data = await response.json() as any;\n    const models = data.data || data;\n    const modelIds = Array.isArray(models) \n      ? models.map((model: any) => model.id).filter(Boolean)\n      : [];\n\n    return { success: true, models: modelIds };\n  } catch (error: any) {\n    return { success: false, models: [], error: error.message };\n  }\n}\n\n// Fetch models from Groq API\nasync function fetchGroqModels(apiKey: string): Promise<ModelFetchResult> {\n  try {\n    const response = await fetch('https://api.groq.com/openai/v1/models', {\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      signal: AbortSignal.timeout(10000),\n    });\n\n    if (!response.ok) {\n      return { success: false, models: [], error: `HTTP ${response.status}` };\n    }\n\n    const data = await response.json() as any;\n    const models = data.data || [];\n    const modelIds = models.map((model: any) => model.id).filter(Boolean);\n\n    return { success: true, models: modelIds };\n  } catch (error: any) {\n    return { success: false, models: [], error: error.message };\n  }\n}\n\n// Fetch models from Cerebras API\nasync function fetchCerebrasModels(apiKey: string): Promise<ModelFetchResult> {\n  try {\n    const response = await fetch('https://api.cerebras.ai/v1/models', {\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      signal: AbortSignal.timeout(10000),\n    });\n\n    if (!response.ok) {\n      return { success: false, models: [], error: `HTTP ${response.status}` };\n    }\n\n    const data = await response.json() as any;\n    const models = data.data || [];\n    const modelIds = models.map((model: any) => model.id).filter(Boolean);\n\n    return { success: true, models: modelIds };\n  } catch (error: any) {\n    return { success: false, models: [], error: error.message };\n  }\n}\n\n// Fetch models from Perplexity API\nasync function fetchPerplexityModels(apiKey: string): Promise<ModelFetchResult> {\n  try {\n    const response = await fetch('https://api.perplexity.ai/models', {\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      signal: AbortSignal.timeout(10000),\n    });\n\n    if (!response.ok) {\n      return { success: false, models: [], error: `HTTP ${response.status}` };\n    }\n\n    const data = await response.json() as any;\n    const models = Array.isArray(data) ? data : data.data || [];\n    const modelIds = models.map((model: any) => model.id || model.name).filter(Boolean);\n\n    return { success: true, models: modelIds };\n  } catch (error: any) {\n    return { success: false, models: [], error: error.message };\n  }\n}\n\n// Fetch models from OpenAI API\nasync function fetchOpenaiModels(apiKey: string): Promise<ModelFetchResult> {\n  try {\n    const response = await fetch('https://api.openai.com/v1/models', {\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n      },\n      signal: AbortSignal.timeout(10000),\n    });\n\n    if (!response.ok) {\n      return { success: false, models: [], error: `HTTP ${response.status}` };\n    }\n\n    const data = await response.json() as any;\n    const models = data.data || [];\n    const modelIds = models.map((model: any) => model.id).filter(Boolean);\n\n    return { success: true, models: modelIds };\n  } catch (error: any) {\n    return { success: false, models: [], error: error.message };\n  }\n}\n\n// Fetch models from Ollama API\nasync function fetchOllamaModelsFromApi(baseUrl: string): Promise<ModelFetchResult> {\n  try {\n    const models = await fetchOllamaModels(baseUrl);\n    return { success: true, models };\n  } catch (error: any) {\n    return { success: false, models: [], error: error.message };\n  }\n}\n\n// Main function to fetch models for a provider\nexport async function fetchProviderModels(provider: ProviderName, apiKey: string): Promise<ModelFetchResult> {\n  // For Ollama, apiKey is actually the base URL\n  if (provider.toLowerCase() === 'ollama') {\n    const baseUrl = apiKey || 'http://localhost:11434';\n    return await fetchOllamaModelsFromApi(baseUrl);\n  }\n\n  if (!apiKey || !apiKey.trim()) {\n    return { success: false, models: [], error: 'API key is required' };\n  }\n\n  try {\n    switch (provider.toLowerCase() as ProviderName) {\n      case 'openrouter':\n        return await fetchOpenRouterModels(apiKey);\n      case 'google':\n        return await fetchGoogleModels(apiKey);\n      case 'xai':\n        return await fetchXaiModels(apiKey);\n      case 'groq':\n        return await fetchGroqModels(apiKey);\n      case 'cerebras':\n        // Cerebras uses static models since API doesn't return correct model names\n        return { success: true, models: PROVIDER_MODELS.cerebras };\n      case 'perplexity':\n        return await fetchPerplexityModels(apiKey);\n      case 'openai':\n        return await fetchOpenaiModels(apiKey);\n      case 'anthropic':\n        // Anthropic doesn't have a public models endpoint, use static list\n        return { success: true, models: PROVIDER_MODELS.anthropic };\n      default:\n        return { success: false, models: [], error: 'Unknown provider' };\n    }\n  } catch (error: any) {\n    return { success: false, models: [], error: error.message };\n  }\n}\n\n// Fetch models with fallback to static list\nexport async function fetchModelsWithFallback(provider: ProviderName, apiKey: string): Promise<string[]> {\n  const result = await fetchProviderModels(provider, apiKey);\n  \n  if (result.success && result.models.length > 0) {\n    return result.models.sort();\n  }\n  \n  // Fallback to static models\n  const staticModels = PROVIDER_MODELS[provider] || [];\n  return staticModels.sort();\n}",
      "filePath": "../src/utils/dynamic-model-fetcher.ts",
      "embedding": [
        9.07,
        1.1,
        0,
        0.2,
        0.4,
        0.009638289816306612,
        0.08185679110261745,
        0.016192375138524142,
        0.045420271750596465,
        0.007513693628691521,
        0.029090311238927594,
        0.09329529663421077,
        0.061140980951979285,
        0.09757846051914429,
        0.04720876354600831,
        0.07666849220741995,
        0.01341261411025978,
        0.04193258943485295,
        0.048706927417936766,
        0.061326498309523136,
        0.06719565746813451,
        0.04237003757372078,
        0.09517015460008793,
        0.08783138389925821,
        0.007461798208846283,
        0.08730116098864703,
        0.04840037485125151,
        0.017418653147834428,
        0.029682554143846542,
        0.0019447134607505356,
        0.04151462490001393,
        0.03897848191950133,
        0.08170803602040397,
        0.08641524835795465,
        0.07931370470290977,
        0.042784517803618305,
        0.02050374238483741,
        0.005373076546578326,
        0.0007981089742380766,
        0.03298086354699418,
        0.04190231846303875,
        0.04987656178496547,
        0.09362516381154748,
        0.0006203123179108317,
        0.07853070680016395,
        0.05070151432096246,
        0.036490500981758135,
        0.03301680722004215,
        0.015583874939062181,
        0.025087478167828126,
        0.08555442974185946,
        0.0026848151294754153,
        0.05327828329744479,
        0.059516526335112556,
        0.06892176420809476,
        0.08944946289154587,
        0.08309064508565289,
        0.04502194239946394,
        0.01464015853364159,
        0.037877812553181636,
        0.01961116156188989,
        0.04080103909085693,
        0.04930558374613121,
        0.0813024017221171,
        0.058696720897088474,
        0.014198555421353643,
        0.025560461890794552,
        0.08417425985865369,
        0.02295221895083223,
        0.006649887409708611,
        0.05132065604674529,
        0.0726865072014433,
        0.053525408378505515,
        0.04595777125564814,
        0.03984398369808743,
        0.025643543247688305,
        0.03715633716114058,
        0.013451245279498914,
        0.008247571085792705,
        0.08300115927303353,
        0.02355568395788652,
        0.06244984231480314,
        0.09066131466639606,
        0.09331405876048009,
        0.037266771196053365,
        0.05912549676601138,
        0.007511780923565992,
        0.04338093900168197,
        0.07875829588956339,
        0.06892110215873821,
        0.027225974032950184,
        0.005190121780456514,
        0.03215471630309974,
        0.010147837125234684,
        0.07878418574595289,
        0.05112588790576156,
        0.010701290527648078,
        0.023770471167260276,
        0.05084152992796436,
        0.052622297047381875
      ]
    },
    {
      "content": "import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as os from \"os\";\n\nexport interface ExpertModelsConfig {\n  enabled: boolean;\n  fastModel: string | null;\n  codeModel: string | null;\n  reasoningModel: string | null;\n  toolsModel: string | null;\n}\n\nclass ExpertModelsManager {\n  private static instance: ExpertModelsManager;\n  \n  private constructor() {}\n\n  static getInstance(): ExpertModelsManager {\n    if (!ExpertModelsManager.instance) {\n      ExpertModelsManager.instance = new ExpertModelsManager();\n    }\n    return ExpertModelsManager.instance;\n  }\n  \n  private getGigaDir(): string {\n    const homeDir = os.homedir();\n    const gigaDir = path.join(homeDir, '.giga');\n    \n    if (!fs.existsSync(gigaDir)) {\n      fs.mkdirSync(gigaDir, { mode: 0o700 });\n    }\n    \n    return gigaDir;\n  }\n  \n  private getConfigPath(): string {\n    const gigaDir = this.getGigaDir();\n    return path.join(gigaDir, 'expert-models.json');\n  }\n  \n  public getExpertModelsConfig(): ExpertModelsConfig {\n    try {\n      const configPath = this.getConfigPath();\n      \n      if (!fs.existsSync(configPath)) {\n        return {\n          enabled: false,\n          fastModel: null,\n          codeModel: null,\n          reasoningModel: null,\n          toolsModel: null,\n        };\n      }\n      \n      const config: ExpertModelsConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n      \n      // Validate config structure\n      if (typeof config.enabled !== 'boolean') {\n        config.enabled = false;\n      }\n      \n      return config;\n    } catch (error) {\n      console.error('Error loading expert models config:', error);\n      return {\n        enabled: false,\n        fastModel: null,\n        codeModel: null,\n        reasoningModel: null,\n        toolsModel: null,\n      };\n    }\n  }\n  \n  public setExpertModelsConfig(expertModels: ExpertModelsConfig): void {\n    try {\n      const configPath = this.getConfigPath();\n      \n      fs.writeFileSync(\n        configPath, \n        JSON.stringify(expertModels, null, 2), \n        { mode: 0o600 }\n      );\n    } catch (error) {\n      console.error('Error saving expert models config:', error);\n    }\n  }\n\n  public migrateFromSessionConfig(sessionConfigPath: string): boolean {\n    try {\n      if (!fs.existsSync(sessionConfigPath)) {\n        return false;\n      }\n\n      const sessionConfig = JSON.parse(fs.readFileSync(sessionConfigPath, 'utf8'));\n      \n      if (sessionConfig.expertModels) {\n        // Check if global config already exists\n        const globalConfigPath = this.getConfigPath();\n        if (!fs.existsSync(globalConfigPath)) {\n          console.log('Migrating expert models config from session to global storage...');\n          this.setExpertModelsConfig(sessionConfig.expertModels);\n          return true;\n        }\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Error migrating expert models config:', error);\n      return false;\n    }\n  }\n\n  public migrateFromAllSessions(): void {\n    try {\n      const homeDir = os.homedir();\n      const sessionsDir = path.join(homeDir, '.giga', 'sessions');\n      \n      if (!fs.existsSync(sessionsDir)) {\n        return;\n      }\n\n      // Check if global config already exists\n      if (fs.existsSync(this.getConfigPath())) {\n        return; // Don't overwrite existing global config\n      }\n\n      const sessionDirs = fs.readdirSync(sessionsDir);\n      let latestConfig: ExpertModelsConfig | null = null;\n      let latestTimestamp = 0;\n\n      // Find the most recently used session with expert models config\n      for (const sessionDir of sessionDirs) {\n        const configPath = path.join(sessionsDir, sessionDir, 'config.json');\n        \n        if (fs.existsSync(configPath)) {\n          try {\n            const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n            \n            if (config.expertModels && config.lastUsed) {\n              const timestamp = new Date(config.lastUsed).getTime();\n              if (timestamp > latestTimestamp) {\n                latestTimestamp = timestamp;\n                latestConfig = config.expertModels;\n              }\n            }\n          } catch (error) {\n            // Skip invalid config files\n            continue;\n          }\n        }\n      }\n\n      // If we found a config, migrate it\n      if (latestConfig) {\n        console.log('Migrating expert models config from most recent session to global storage...');\n        this.setExpertModelsConfig(latestConfig);\n      }\n    } catch (error) {\n      console.error('Error migrating expert models from sessions:', error);\n    }\n  }\n}\n\n// Export singleton instance\nexport const expertModelsManager = ExpertModelsManager.getInstance();",
      "filePath": "../src/utils/expert-models-manager.ts",
      "embedding": [
        4.45,
        0,
        0.1,
        0.3,
        0.2,
        0.008002806498137316,
        0.054680181722739724,
        0.028527305577952945,
        0.00177702635708491,
        0.04956929923185563,
        0.001328462039151779,
        0.03225703458608964,
        0.06835221047768111,
        0.08570658150135979,
        0.0707236856510724,
        0.0063941656720304055,
        0.05516596028660495,
        0.08427814592853528,
        0.09989459092099706,
        0.09010220537076652,
        0.05979763865607125,
        0.028600731051553675,
        0.0912432220630742,
        0.07485633040840177,
        0.08719237488744398,
        0.05330284726278514,
        0.028290916941204704,
        0.01937678984878919,
        0.027858331736838216,
        0.01602164952931867,
        0.0032588410200895426,
        0.09098345980723883,
        0.05528535159444621,
        0.06825730574968096,
        0.05385523001051562,
        0.07403434044185636,
        0.043391005476057225,
        0.03757322666861832,
        0.001215673059042144,
        0.014081433752847095,
        0.08629896622081566,
        0.07711196232283958,
        0.0040697583899368395,
        0.03263238205302265,
        0.026040722210198763,
        0.0353195940742787,
        0.0077882295098026695,
        0.019854789753884983,
        0.04062263103450259,
        0.08744493177832302,
        0.08417529386221743,
        0.08038842405324555,
        0.06012972012846747,
        0.02892482421189052,
        0.050812522413371024,
        0.03771621773876595,
        0.056073384596308874,
        0.02402457979064504,
        0.028361773239076273,
        0.03172005583467163,
        0.008242571945984446,
        0.03950356398945019,
        0.07572337025248803,
        0.010856351218828353,
        0.07025195852784219,
        0.0646493679644291,
        0.06802988911237316,
        0.02529898041020147,
        0.050088339244111324,
        0.037727399190671446,
        0.06075291015069208,
        0.05466421176147447,
        0.08795387676778,
        0.004967885018819085,
        0.09300268904935073,
        0.048624999767968274,
        0.028953335827519047,
        0.04852859128142428,
        0.04810495735207687,
        0.08152001908407853,
        0.05643602888728391,
        0.04258600686663794,
        0.05324549028633241,
        0.05298252566300259,
        0.0723544921184701,
        0.09385846624492682,
        0.05954519291745286,
        0.005443625421162868,
        0.009986812438136417,
        0.07680099983176254,
        0.06624732560504674,
        0.06821683364272983,
        0.061827583305806344,
        0.06737885012275473,
        0.04958140015797287,
        0.08148394832568823,
        0.058580496698414135,
        0.09472202104703531,
        0.0029630224844614528,
        0.04409812116291594
      ]
    },
    {
      "content": "import * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface FileInfo {\n  name: string;\n  relativePath: string;\n  isDirectory: boolean;\n}\n\n/**\n * Get all files in the current directory and subdirectories\n */\nexport function getAllFiles(rootDir: string = process.cwd(), maxDepth: number = 3): FileInfo[] {\n  const files: FileInfo[] = [];\n  \n  function walkDirectory(dir: string, currentDepth: number = 0) {\n    if (currentDepth > maxDepth) return;\n    \n    try {\n      const entries = fs.readdirSync(dir, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        // Skip hidden files and common ignore patterns\n        if (entry.name.startsWith('.') || \n            entry.name === 'node_modules' || \n            entry.name === 'dist' || \n            entry.name === 'build' ||\n            entry.name === '.git') {\n          continue;\n        }\n        \n        const fullPath = path.join(dir, entry.name);\n        const relativePath = path.relative(rootDir, fullPath);\n        \n        if (entry.isDirectory()) {\n          files.push({\n            name: entry.name,\n            relativePath,\n            isDirectory: true\n          });\n          walkDirectory(fullPath, currentDepth + 1);\n        } else {\n          files.push({\n            name: entry.name,\n            relativePath,\n            isDirectory: false\n          });\n        }\n      }\n    } catch (error) {\n      // Ignore permission errors and continue\n    }\n  }\n  \n  walkDirectory(rootDir);\n  return files;\n}\n\n/**\n * Extract file search query from input text after @ symbol\n * Only returns a result if @ is the last \"word\" (no spaces after @)\n */\nexport function extractFileQuery(input: string): { beforeAt: string; query: string; afterAt: string; isDirectory: boolean } | null {\n  const atIndex = input.lastIndexOf('@');\n  if (atIndex === -1) return null;\n  \n  // Check if there are any spaces after the @ symbol\n  const afterAt = input.substring(atIndex + 1);\n  if (afterAt.includes(' ')) {\n    // There's a space after @, so this is not an active file query\n    return null;\n  }\n  \n  const beforeAt = input.substring(0, atIndex);\n  const query = afterAt; // Everything after @ until end of string\n  const isDirectory = query.endsWith('/');\n  \n  // Only show file finder if there's at least the @ symbol\n  // Allow empty query to show all files/directories\n  return { beforeAt, query, afterAt: '', isDirectory };\n}\n\n/**\n * Filter files to get only files or only directories based on query\n */\nexport function getFilteredItems(files: FileInfo[], query: string, isDirectory: boolean): string[] {\n  // Remove trailing slash for directory search\n  const searchQuery = isDirectory ? query.slice(0, -1) : query;\n  \n  if (isDirectory) {\n    // Filter for directories only\n    let results = files\n      .filter(file => file.isDirectory)\n      .map(file => file.relativePath + '/');\n    \n    // If there's a search query, filter by it\n    if (searchQuery) {\n      results = results.filter(path => \n        path.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n    \n    return results.sort().slice(0, 10); // Limit results\n  } else {\n    // Filter for files only\n    let results = files\n      .filter(file => !file.isDirectory)\n      .map(file => file.relativePath);\n    \n    // If there's a search query, filter by it\n    if (query) {\n      results = results.filter(path => \n        path.toLowerCase().includes(query.toLowerCase())\n      );\n    }\n    \n    return results.sort().slice(0, 10); // Limit results\n  }\n}\n\n/**\n * Replace the file query in input with the selected file path\n */\nexport function replaceFileQuery(input: string, selectedFile: string): string {\n  const queryInfo = extractFileQuery(input);\n  if (!queryInfo) return input;\n  \n  return queryInfo.beforeAt + selectedFile + queryInfo.afterAt;\n}",
      "filePath": "../src/utils/file-finder.ts",
      "embedding": [
        4.73,
        0.5,
        0,
        0.2,
        0.5,
        0.0828031616533105,
        0.041259298217872546,
        0.03966754525509393,
        0.011272431201486266,
        0.059164046409301056,
        0.09295765638066822,
        0.033998789522645866,
        0.03024377783824127,
        0.0053426038373151526,
        0.0889931158663763,
        0.03163523369072654,
        0.09172157467693227,
        0.005403896789348651,
        0.016398511029779995,
        0.03538600796474758,
        0.08309927768272556,
        0.01912324125182744,
        0.035644563988737867,
        0.04820209819901175,
        0.009817126068161831,
        0.025771810288571253,
        0.032352257242448244,
        0.005192984565110182,
        0.09622914389505205,
        0.09222705471519033,
        0.005030633072915892,
        0.009886419480305298,
        0.011140120456372749,
        0.006740022662192158,
        0.05265230587972367,
        0.059950555066901334,
        0.027714375837591565,
        0.0038703899080749895,
        0.060094831455537616,
        0.06191780635817576,
        0.037612478766185786,
        0.09984914070639639,
        0.07472968253314559,
        0.003476122403985882,
        0.09959807737323528,
        0.015363512248290023,
        0.031064815361417253,
        0.055851696718446836,
        0.07912370022144616,
        0.0258167508238471,
        0.08664340178204166,
        0.09087309201622956,
        0.05623653803982033,
        0.0943253825499804,
        0.07303361615509563,
        0.04789743651934883,
        0.09750963719394981,
        0.03258147018080709,
        0.086966972999929,
        0.09938721003201997,
        0.02021157832078191,
        0.005535814350912194,
        0.041009883089655655,
        0.0182175550822555,
        0.039168216386014865,
        0.002127543817219024,
        0.03679297122257458,
        0.0032820675398437917,
        0.09316405915480998,
        0.09215042656266506,
        0.002555942678618517,
        0.08681881666075725,
        0.04976278132205713,
        0.06879397710902106,
        0.02849983608132045,
        0.0429129312372214,
        0.014929771567175489,
        0.08000456724201246,
        0.08356311615138043,
        0.01517899334423849,
        0.07338923554934738,
        0.0627873926205184,
        0.016319420310005505,
        0.0958498178099307,
        0.034658199740589146,
        0.021601815269441882,
        0.03379880457418645,
        0.07231582221179453,
        0.07063308188024318,
        0.027590778997386614,
        0.08640983324840572,
        0.03896646463930066,
        0.04729832149490765,
        0.09044625746877624,
        0.008565372761698654,
        0.02666734113071293,
        0.08779095043852853,
        0.05576616722257776,
        0.026955511211031426,
        0.030545145549887544
      ]
    },
    {
      "content": "interface FuzzyMatch {\n  item: any;\n  score: number;\n  matches: number[];\n}\n\n/**\n * Simple fuzzy matching algorithm that scores matches based on:\n * - Exact matches get highest score\n * - Sequential character matches get high score\n * - Character matches get base score\n * - Shorter strings with matches get bonus points\n */\nexport function fuzzyMatch(query: string, target: string): FuzzyMatch | null {\n  if (!query || !target) return null;\n  \n  const lowerQuery = query.toLowerCase();\n  const lowerTarget = target.toLowerCase();\n  \n  // Exact match gets maximum score\n  if (lowerTarget === lowerQuery) {\n    return {\n      item: target,\n      score: 1000,\n      matches: Array.from({ length: target.length }, (_, i) => i)\n    };\n  }\n  \n  // If target starts with query, give it high score\n  if (lowerTarget.startsWith(lowerQuery)) {\n    return {\n      item: target,\n      score: 900,\n      matches: Array.from({ length: lowerQuery.length }, (_, i) => i)\n    };\n  }\n  \n  const matches: number[] = [];\n  let queryIndex = 0;\n  let score = 0;\n  let consecutiveMatches = 0;\n  \n  for (let i = 0; i < lowerTarget.length && queryIndex < lowerQuery.length; i++) {\n    if (lowerTarget[i] === lowerQuery[queryIndex]) {\n      matches.push(i);\n      queryIndex++;\n      consecutiveMatches++;\n      \n      // Base score for each match\n      score += 10;\n      \n      // Bonus for consecutive matches\n      if (consecutiveMatches > 1) {\n        score += consecutiveMatches * 5;\n      }\n      \n      // Bonus for matches at the beginning\n      if (i === queryIndex - 1) {\n        score += 20;\n      }\n    } else {\n      consecutiveMatches = 0;\n    }\n  }\n  \n  // If we didn't match all query characters, no match\n  if (queryIndex < lowerQuery.length) {\n    return null;\n  }\n  \n  // Bonus for shorter targets (more relevant)\n  const lengthBonus = Math.max(0, 100 - target.length);\n  score += lengthBonus;\n  \n  return {\n    item: target,\n    score,\n    matches\n  };\n}\n\nexport function fuzzySearch<T>(\n  query: string,\n  items: T[],\n  getText: (item: T) => string,\n  limit = 10\n): T[] {\n  if (!query.trim()) {\n    return items.slice(0, limit);\n  }\n  \n  const matches: Array<{ item: T; score: number }> = [];\n  \n  for (const item of items) {\n    const text = getText(item);\n    const match = fuzzyMatch(query, text);\n    \n    if (match) {\n      matches.push({ item, score: match.score });\n    }\n  }\n  \n  // Sort by score (descending) and return items\n  return matches\n    .sort((a, b) => b.score - a.score)\n    .slice(0, limit)\n    .map(match => match.item);\n}",
      "filePath": "../src/utils/fuzzy-search.ts",
      "embedding": [
        3.5,
        0.2,
        0,
        0,
        0.2,
        0.08457888158556659,
        0.02548267652956925,
        0.08151810509556749,
        0.023624487869009128,
        0.03794918721308186,
        0.08839374478365979,
        0.017299660255611617,
        0.07318611691500775,
        0.028000459854396587,
        0.036776252222068984,
        0.07933980015075376,
        0.05235176176002228,
        0.09194795668486533,
        0.07529552791526778,
        0.06991033076098231,
        0.014395407908131087,
        0.04347143142575153,
        0.011324457425324487,
        0.022094372437830204,
        0.052107246270918,
        0.05515974987645605,
        0.04382584655573954,
        0.004764818456555931,
        0.03398189744862156,
        0.08855136299933102,
        0.025290989360937613,
        0.019087583703158842,
        0.08277546928803596,
        0.03507216847248368,
        0.06357395837854894,
        0.029761275181387582,
        0.05992072784634744,
        0.07610898127374968,
        0.05484661869032237,
        0.0019730007137116036,
        0.07455586454487666,
        0.09150792740167021,
        0.012708478611380025,
        0.04483172558512673,
        0.08823908211929832,
        0.07283654405452461,
        0.0914482199372015,
        0.028882123232632076,
        0.03137915077373017,
        0.07586821148222686,
        0.07538221266994181,
        0.018391170251986534,
        0.07331043874190162,
        0.061690330939977805,
        0.0825712914171407,
        0.06084227363121153,
        0.03213652497591255,
        0.021666133354677233,
        0.07981998517152679,
        0.053527408193266915,
        0.016587024142644593,
        0.08949359983291105,
        0.05331817004225834,
        0.08451124081573338,
        0.02707290749121534,
        0.023577840686720176,
        0.011669962339012685,
        0.0016537087736943291,
        0.05834353624519043,
        0.05308472022917521,
        0.09863462365332906,
        0.0019155204070234078,
        0.048995286461197975,
        0.058341263831321266,
        0.02427328629796879,
        0.06244815833186527,
        0.06981090397069722,
        0.058515259281166465,
        0.006997373261053941,
        0.009146053497707507,
        0.08582633571770637,
        0.05702405409647219,
        0.04169044648115819,
        0.04675461710147484,
        0.028169445185350674,
        0.042504922462855754,
        0.051927180594756234,
        0.009383475046161195,
        0.08522407146070803,
        0.003884205773661509,
        0.03896526918357607,
        0.018803076170154934,
        0.05557644207223516,
        0.024141806534606115,
        0.0647935162451726,
        0.0015433384050497767,
        0.06921985257065026,
        0.0934639735853643,
        0.056997928750460884,
        0.045793694239685226
      ]
    },
    {
      "content": "import * as fs from \"fs\";\nimport * as path from \"path\";\nimport { sessionManager } from \"./session-manager\";\nimport { AddedModel, loadAddedModels, saveAddedModels } from \"./added-models\";\n\nexport interface InstanceModelPreferences {\n  instanceId: string;\n  favoriteModels: string[];\n  recentlyUsedModels: string[];\n  lastUpdated: string;\n}\n\nconst getInstancePreferencesPath = (): string => {\n  const sessionInfo = sessionManager.getSessionInfo();\n  if (!sessionInfo) {\n    throw new Error('No active session found');\n  }\n  \n  const homeDir = require('os').homedir();\n  const sessionDir = path.join(homeDir, '.giga', 'sessions', sessionInfo.instanceId);\n  \n  // Ensure session directory exists\n  if (!fs.existsSync(sessionDir)) {\n    fs.mkdirSync(sessionDir, { recursive: true, mode: 0o700 });\n  }\n  \n  return path.join(sessionDir, 'model-preferences.json');\n};\n\nexport function loadInstanceModelPreferences(): InstanceModelPreferences {\n  try {\n    const preferencesPath = getInstancePreferencesPath();\n    const sessionInfo = sessionManager.getSessionInfo();\n    \n    if (!sessionInfo) {\n      throw new Error('No active session found');\n    }\n    \n    if (!fs.existsSync(preferencesPath)) {\n      // Return default preferences for new session\n      return {\n        instanceId: sessionInfo.instanceId,\n        favoriteModels: [],\n        recentlyUsedModels: sessionInfo.currentModel ? [sessionInfo.currentModel] : [],\n        lastUpdated: new Date().toISOString()\n      };\n    }\n    \n    const data: InstanceModelPreferences = JSON.parse(fs.readFileSync(preferencesPath, 'utf8'));\n    return data;\n  } catch (error) {\n    console.error('Error loading instance model preferences:', error);\n    const sessionInfo = sessionManager.getSessionInfo();\n    return {\n      instanceId: sessionInfo?.instanceId || 'unknown',\n      favoriteModels: [],\n      recentlyUsedModels: [],\n      lastUpdated: new Date().toISOString()\n    };\n  }\n}\n\nexport function saveInstanceModelPreferences(preferences: InstanceModelPreferences): void {\n  try {\n    const preferencesPath = getInstancePreferencesPath();\n    preferences.lastUpdated = new Date().toISOString();\n    \n    fs.writeFileSync(\n      preferencesPath, \n      JSON.stringify(preferences, null, 2), \n      { mode: 0o600 }\n    );\n  } catch (error) {\n    console.error('Error saving instance model preferences:', error);\n  }\n}\n\nexport function addModelToRecentlyUsed(modelName: string): void {\n  try {\n    const preferences = loadInstanceModelPreferences();\n    \n    // Remove model if it already exists in the list\n    preferences.recentlyUsedModels = preferences.recentlyUsedModels.filter(m => m !== modelName);\n    \n    // Add to the beginning of the list\n    preferences.recentlyUsedModels.unshift(modelName);\n    \n    // Keep only the last 10 recently used models\n    preferences.recentlyUsedModels = preferences.recentlyUsedModels.slice(0, 10);\n    \n    saveInstanceModelPreferences(preferences);\n  } catch (error) {\n    console.error('Error adding model to recently used:', error);\n  }\n}\n\nexport function toggleModelFavorite(modelName: string): boolean {\n  try {\n    const preferences = loadInstanceModelPreferences();\n    \n    const isFavorite = preferences.favoriteModels.includes(modelName);\n    \n    if (isFavorite) {\n      // Remove from favorites\n      preferences.favoriteModels = preferences.favoriteModels.filter(m => m !== modelName);\n    } else {\n      // Add to favorites\n      preferences.favoriteModels.push(modelName);\n    }\n    \n    saveInstanceModelPreferences(preferences);\n    return !isFavorite; // Return new favorite status\n  } catch (error) {\n    console.error('Error toggling model favorite:', error);\n    return false;\n  }\n}\n\nexport function getInstanceAvailableModels(): { model: string; description: string; isFavorite: boolean; isRecentlyUsed: boolean }[] {\n  try {\n    const preferences = loadInstanceModelPreferences();\n    const globalModels = loadAddedModels();\n    \n    // Only show global added models (no built-in models)\n    const modelsWithPreferences = globalModels.map(m => ({\n      model: m.modelName,\n      description: `${m.modelName} (${m.providerName})`,\n      isFavorite: preferences.favoriteModels.includes(m.modelName),\n      isRecentlyUsed: preferences.recentlyUsedModels.includes(m.modelName)\n    }));\n    \n    // Sort: favorites first, then recently used, then alphabetically\n    return modelsWithPreferences.sort((a, b) => {\n      if (a.isFavorite && !b.isFavorite) return -1;\n      if (!a.isFavorite && b.isFavorite) return 1;\n      if (a.isRecentlyUsed && !b.isRecentlyUsed) return -1;\n      if (!a.isRecentlyUsed && b.isRecentlyUsed) return 1;\n      return a.model.localeCompare(b.model);\n    });\n  } catch (error) {\n    console.error('Error getting instance available models:', error);\n    return [];\n  }\n}\n\n// Update recently used when model is selected\nexport function onModelSelected(modelName: string): void {\n  addModelToRecentlyUsed(modelName);\n  sessionManager.setCurrentModel(modelName);\n}",
      "filePath": "../src/utils/instance-models.ts",
      "embedding": [
        4.65,
        0.6,
        0,
        0.4,
        0.7,
        0.039705555231833445,
        0.06695067565796585,
        0.07321024488970955,
        0.09454380134264571,
        0.04908539302625157,
        0.058323396506277686,
        0.025067551843398907,
        0.026244802321382755,
        0.011917890492087102,
        0.08258932301557341,
        0.08371276984132253,
        0.05787066896548415,
        0.05256427251601647,
        0.006556201097237014,
        0.05370537187631655,
        0.06663021087415234,
        0.014245891924427335,
        0.02166130214923384,
        0.01740106639922241,
        0.008429659084594398,
        0.020463812979271936,
        0.08820818365335402,
        0.010940787647537965,
        0.05931408899092514,
        0.008860380829136505,
        0.019011219677821736,
        0.06812781730798198,
        0.08841162308057289,
        0.06136916657697812,
        0.08767278935967504,
        0.03506869248475961,
        0.004600795472074182,
        0.012540619918403295,
        0.02349277846398954,
        0.08790132986499169,
        0.03984125521329393,
        0.04608011176134358,
        0.03954926082921757,
        0.07087852534513404,
        0.031081779294682532,
        0.08992860451486648,
        0.08221898655701886,
        0.03362051706590428,
        0.08631353790928005,
        0.04072195155753701,
        0.07981314028656213,
        0.09950795596524069,
        0.06072123840522349,
        0.07252689434185883,
        0.015759492409649835,
        0.012794932033668428,
        0.0730924213080814,
        0.03893430197916118,
        0.0719147846416235,
        0.041581805877383464,
        0.0022146325445810966,
        0.05567799663721962,
        0.04073788986643059,
        0.036950000763889115,
        0.08127740504270947,
        0.045658206678615615,
        0.0831333570243137,
        0.017612463848144078,
        0.09995398097365286,
        0.08917440395646517,
        0.029663196967270513,
        0.05392322715819338,
        0.08132108532986712,
        0.09080532427537247,
        0.04378435948422332,
        0.07557958779420021,
        0.03264776333108115,
        0.061115086758937336,
        0.06491272942170728,
        0.05314304466930414,
        0.0665066423082376,
        0.07973525441871256,
        0.0625954720366524,
        0.018398311884158802,
        0.05032432153600336,
        0.006988808427092952,
        0.02233848162565314,
        0.026913492948644525,
        0.00211991633492058,
        0.09312010630535049,
        0.06565013244370631,
        0.045143487578450436,
        0.06805748295647607,
        0.08795808835552778,
        0.04518006130802188,
        0.007053345467136552,
        0.043417978962150765,
        0.07295171953329466,
        0.042130848683426474,
        0.060136643466866924
      ]
    },
    {
      "content": "import { AgentMode, ModeConfig } from '../types';\n\nexport class ModeManager {\n  private static instance: ModeManager;\n  private currentMode: AgentMode = AgentMode.CHILL;\n  private modeConfigs: Record<AgentMode, ModeConfig> = {\n    [AgentMode.PLAN]: {\n      mode: AgentMode.PLAN,\n      allowExpertModels: false,\n      requireConfirmation: false,\n      displayName: '📋 PLAN MODE',\n      description: 'Planning and thinking only - no expert models'\n    },\n    [AgentMode.CHILL]: {\n      mode: AgentMode.CHILL,\n      allowExpertModels: true,\n      requireConfirmation: true,\n      displayName: '😌 CHILL MODE',\n      description: 'All models available - asks permission for tool calls'\n    },\n    [AgentMode.GIGA]: {\n      mode: AgentMode.GIGA,\n      allowExpertModels: true,\n      requireConfirmation: false,\n      displayName: '⚡ GIGA MODE',\n      description: 'Full power - no permission requests'\n    }\n  };\n\n  private constructor() {}\n\n  static getInstance(): ModeManager {\n    if (!ModeManager.instance) {\n      ModeManager.instance = new ModeManager();\n    }\n    return ModeManager.instance;\n  }\n\n  getCurrentMode(): AgentMode {\n    return this.currentMode;\n  }\n\n  getCurrentModeConfig(): ModeConfig {\n    return this.modeConfigs[this.currentMode];\n  }\n\n  getAllModes(): AgentMode[] {\n    return [AgentMode.PLAN, AgentMode.CHILL, AgentMode.GIGA];\n  }\n\n  cycleMode(): AgentMode {\n    const modes = this.getAllModes();\n    const currentIndex = modes.indexOf(this.currentMode);\n    const nextIndex = (currentIndex + 1) % modes.length;\n    this.currentMode = modes[nextIndex];\n    return this.currentMode;\n  }\n\n  setMode(mode: AgentMode): void {\n    this.currentMode = mode;\n  }\n\n  shouldAllowExpertModels(): boolean {\n    return this.modeConfigs[this.currentMode].allowExpertModels;\n  }\n\n  shouldRequireConfirmation(): boolean {\n    return this.modeConfigs[this.currentMode].requireConfirmation;\n  }\n\n  getModeDisplayName(): string {\n    return this.modeConfigs[this.currentMode].displayName;\n  }\n\n  getModeDescription(): string {\n    return this.modeConfigs[this.currentMode].description;\n  }\n}\n\nexport const modeManager = ModeManager.getInstance();",
      "filePath": "../src/utils/mode-manager.ts",
      "embedding": [
        1.93,
        0,
        0.1,
        0.1,
        0.2,
        0.04575099382616359,
        0.09217178854628115,
        0.007073432809739677,
        0.050005501226035476,
        0.07450753658289715,
        0.047599569307224476,
        0.04620718588952009,
        0.09215354791253244,
        0.051979590612426164,
        0.09078460366295762,
        0.05969923686598855,
        0.08484148576634126,
        0.035877813130542995,
        0.07593256535660553,
        0.04898186795749493,
        0.0775335487669211,
        0.08511734469766329,
        0.027929918100343433,
        0.016699680157515384,
        0.08749031660735944,
        0.014734766655785603,
        0.0037709826556352024,
        0.04717363514290218,
        0.08567907410660262,
        0.053578652941367245,
        0.03697865069071896,
        0.017069673360986127,
        0.039431084036396606,
        0.0408894915101372,
        0.09763029765784076,
        0.04835535187918007,
        0.04430803001325844,
        0.09311758473085269,
        0.0875710794392452,
        0.04509864436636275,
        0.08271807733092013,
        0.05758215430407492,
        0.01070665548386538,
        0.038373218953663725,
        0.04964644938236508,
        0.07361701286020127,
        0.08978676976241828,
        0.030473793655335014,
        0.05003196205020813,
        0.014797209760334707,
        0.022814615050826815,
        0.08572346889213994,
        0.04332601502503698,
        0.03202203383556788,
        0.08599121436436302,
        0.07667674168776434,
        0.015978684302202728,
        0.04387820497966543,
        0.04671616773776695,
        0.08163581896791869,
        0.003546675224648632,
        0.08294550244459495,
        0.043517979334305824,
        0.007408793726048424,
        0.023559895239410246,
        0.048663083566607784,
        0.0045725023125461894,
        0.05215728220692048,
        0.01029951071483124,
        0.029591153007774942,
        0.06310986206276378,
        0.09399627572536634,
        0.024374823983938844,
        0.0029334042812749874,
        0.022292447134839036,
        0.03593546624421017,
        0.05090571496377721,
        0.05720106716037024,
        0.018059363869122835,
        0.05169832967466357,
        0.020784898071659175,
        0.07798511343000392,
        0.033285339532515855,
        0.04151419367831796,
        0.06309095169127242,
        0.05655701584412731,
        0.0406268042183539,
        0.048978346849996114,
        0.01746865780352592,
        0.041866245631433624,
        0.030901277463705246,
        0.08850503892840314,
        0.05655840920582527,
        0.03778399316989922,
        0.015607665084254886,
        0.03956151167105189,
        0.023019867779980774,
        0.09318414559316043,
        0.07468305133866643,
        0.04357388309178789
      ]
    },
    {
      "content": "import axios from 'axios';\n\nexport interface OllamaModel {\n  name: string;\n  model: string;\n  modified_at: string;\n  size: number;\n  digest: string;\n  details?: {\n    parent_model?: string;\n    format?: string;\n    family?: string;\n    families?: string[];\n    parameter_size?: string;\n    quantization_level?: string;\n  };\n}\n\nexport interface OllamaModelsResponse {\n  models: OllamaModel[];\n}\n\nexport async function fetchOllamaModels(baseUrl: string = 'http://localhost:11434'): Promise<string[]> {\n  try {\n    // Remove any trailing slashes and ensure proper URL format\n    let cleanBaseUrl = baseUrl.replace(/\\/+$/, '');\n    \n    // Add http:// protocol if missing\n    if (!cleanBaseUrl.startsWith('http://') && !cleanBaseUrl.startsWith('https://')) {\n      cleanBaseUrl = `http://${cleanBaseUrl}`;\n    }\n    \n    const apiUrl = `${cleanBaseUrl}/api/tags`;\n    \n    const response = await axios.get(apiUrl, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      timeout: 10000, // 10 second timeout\n    });\n\n    const data = response.data as OllamaModelsResponse;\n    \n    if (!data.models || !Array.isArray(data.models)) {\n      throw new Error('Invalid response format from Ollama API');\n    }\n\n    // Extract model names and sort them\n    const modelNames = data.models\n      .map(model => model.name)\n      .filter(name => name && name.trim())\n      .sort();\n\n    return modelNames;\n  } catch (error: any) {\n    console.error('Error fetching Ollama models:', error.message);\n    \n    // Return empty array on error - will fallback to static list\n    return [];\n  }\n}\n\nexport async function searchOllamaModels(\n  query: string, \n  baseUrl: string = 'http://localhost:11434'\n): Promise<string[]> {\n  try {\n    const allModels = await fetchOllamaModels(baseUrl);\n    \n    if (!query || !query.trim()) {\n      return allModels;\n    }\n\n    const searchTerm = query.toLowerCase().trim();\n    \n    // Filter models that contain the search term\n    const filtered = allModels.filter(model => \n      model.toLowerCase().includes(searchTerm)\n    );\n\n    // Sort by relevance: exact matches first, then starts with, then contains\n    const sorted = filtered.sort((a, b) => {\n      const aLower = a.toLowerCase();\n      const bLower = b.toLowerCase();\n      \n      // Exact match\n      if (aLower === searchTerm && bLower !== searchTerm) return -1;\n      if (bLower === searchTerm && aLower !== searchTerm) return 1;\n      \n      // Starts with\n      if (aLower.startsWith(searchTerm) && !bLower.startsWith(searchTerm)) return -1;\n      if (bLower.startsWith(searchTerm) && !aLower.startsWith(searchTerm)) return 1;\n      \n      // Alphabetical for same relevance\n      return a.localeCompare(b);\n    });\n\n    return sorted;\n  } catch (error) {\n    console.error('Error searching Ollama models:', error);\n    return [];\n  }\n}\n\nexport async function testOllamaConnection(baseUrl: string = 'http://localhost:11434'): Promise<{\n  success: boolean;\n  error?: string;\n  modelCount?: number;\n}> {\n  try {\n    const models = await fetchOllamaModels(baseUrl);\n    \n    return {\n      success: true,\n      modelCount: models.length\n    };\n  } catch (error: any) {\n    return {\n      success: false,\n      error: error.message || 'Unknown error'\n    };\n  }\n}\n\n// Get popular/recommended Ollama models for new users\nexport function getRecommendedOllamaModels(): string[] {\n  return [\n    'llama3.2:3b',    // Latest Llama, good balance\n    'llama3.2:1b',    // Fastest small model\n    'qwen2.5:7b',     // Good alternative\n    'phi3:3.8b',      // Microsoft's efficient model\n    'gemma2:9b',      // Google's model\n    'mistral:7b',     // Popular choice\n    'codellama:7b',   // Code-focused\n    'neural-chat:7b', // Conversational\n    'tinyllama:1.1b', // Ultra-fast tiny model\n  ];\n}",
      "filePath": "../src/utils/ollama-models.ts",
      "embedding": [
        4.1,
        0.4,
        0,
        0.1,
        0.6,
        0.020511292118853774,
        0.025780010250847418,
        0.062488665387293085,
        0.09872605962351688,
        0.05935786909858111,
        0.015643814358503972,
        0.09096508431942867,
        0.07910919237616869,
        0.04178849796907344,
        0.03887871224294425,
        0.01034580557628827,
        0.04807045473517019,
        0.0583206171285393,
        0.0355406249276907,
        0.09091154518768363,
        0.0900503913302775,
        0.0887345424427054,
        0.010694231037437607,
        0.033872993988733384,
        0.07859821938356261,
        0.051249171639898075,
        0.001353350721594282,
        0.05381925150340592,
        0.07987450690904542,
        0.008726111981910967,
        0.026138229331569132,
        0.08122548588153856,
        0.06632793121006485,
        0.009357898768162898,
        0.06176414639448491,
        0.0029150552405833863,
        0.059561228801960846,
        0.0629589705787799,
        0.0862006532949971,
        0.03760881562626642,
        0.09280515096610546,
        0.04976763663369871,
        0.0555600298934025,
        0.055557626457837496,
        0.076039251809011,
        0.06438058504199433,
        0.02954414104376546,
        0.0772352238554834,
        0.08986326940764817,
        0.01988823494717683,
        0.0075037453238017806,
        0.015561068339293117,
        0.024970913448367982,
        0.03687966197386638,
        0.02708938293453117,
        0.06990378693518559,
        0.08708385421238396,
        0.06314844850924332,
        0.04041360729369817,
        0.015315066366931597,
        0.03276923986305887,
        0.08135984710252218,
        0.05457128324047503,
        0.038843252906433846,
        0.08428976829379053,
        0.03285705897235235,
        0.03801982265467638,
        0.08745208879283511,
        0.035538529060234726,
        0.061368728801745015,
        0.07595464500761329,
        0.08724243269677506,
        0.008079135861795128,
        0.09536803066103869,
        0.08123101217081817,
        0.033070474094511686,
        0.07100179412399214,
        0.04454634875932672,
        0.07102919156305518,
        0.03362533532936505,
        0.02221283740874861,
        0.033098414281724,
        0.0014365367495452253,
        0.06342678020180784,
        0.0750328705602379,
        0.0638958663607239,
        0.06493432250502673,
        0.02257957739717721,
        0.05959560905580477,
        0.0032199580868561895,
        0.036681923888905434,
        0.044985951806338055,
        0.049563077845888905,
        0.04388245929123892,
        0.052917081571806114,
        0.027894850833424713,
        0.04288057898388701,
        0.01009855510005271,
        0.03634079886041049,
        0.0915543399146039
      ]
    },
    {
      "content": "export interface OpenRouterProvider {\n  id: string;\n  name: string;\n  description?: string;\n  pricing?: {\n    prompt: number;\n    completion: number;\n  };\n  quantization?: string;\n  uptime?: number;\n  context_length?: number;\n}\n\nexport interface OpenRouterModelDetails {\n  id: string;\n  name: string;\n  description?: string;\n  providers: OpenRouterProvider[];\n  context_length?: number;\n  architecture?: {\n    modality?: string;\n    tokenizer?: string;\n    instruct_type?: string;\n  };\n}\n\nexport interface ProviderFetchResult {\n  success: boolean;\n  providers: OpenRouterProvider[];\n  error?: string;\n}\n\n// Fetch available providers for a specific model from OpenRouter\nexport async function fetchModelProviders(modelId: string, apiKey: string): Promise<ProviderFetchResult> {\n  if (!apiKey || !apiKey.trim()) {\n    return { success: false, providers: [], error: 'OpenRouter API key is required' };\n  }\n\n  try {\n    // The correct endpoint format is /api/v1/models/{author}/{slug}/endpoints\n    // Split the modelId into author and slug\n    const modelParts = modelId.split('/');\n    if (modelParts.length !== 2) {\n      return { success: false, providers: [], error: `Invalid model ID format. Expected 'author/model', got: ${modelId}` };\n    }\n    \n    const [author, slug] = modelParts;\n    const url = `https://openrouter.ai/api/v1/models/${encodeURIComponent(author)}/${encodeURIComponent(slug)}/endpoints`;\n    console.log(`DEBUG: Fetching providers for model: ${modelId} from URL: ${url}`);\n    \n    const response = await fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      signal: AbortSignal.timeout(10000),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text().catch(() => 'Unable to read error response');\n      console.log(`DEBUG: HTTP ${response.status} error:`, errorText);\n      return { success: false, providers: [], error: `HTTP ${response.status}: ${response.statusText} - ${errorText}` };\n    }\n\n    const endpointsData = await response.json() as any;\n    \n    // The actual response format is: { \"data\": { \"id\": \"...\", \"endpoints\": [...] } }\n    const providers: OpenRouterProvider[] = [];\n    \n    let endpointsArray: any[] = [];\n    \n    // Handle different possible response formats\n    if (endpointsData.data && endpointsData.data.endpoints && Array.isArray(endpointsData.data.endpoints)) {\n      // Format: { data: { endpoints: [...] } }\n      endpointsArray = endpointsData.data.endpoints;\n    } else if (endpointsData.endpoints && Array.isArray(endpointsData.endpoints)) {\n      // Format: { endpoints: [...] }\n      endpointsArray = endpointsData.endpoints;\n    }\n    \n    if (endpointsArray.length > 0) {\n      // Parse the endpoints into our provider format\n      providers.push(...endpointsArray.map((endpoint: any) => ({\n        id: endpoint.provider_name || endpoint.name || 'unknown',\n        name: endpoint.provider_name || endpoint.name || 'Unknown Provider',\n        description: endpoint.name,\n        pricing: endpoint.pricing ? {\n          prompt: parseFloat(endpoint.pricing.prompt || '0'),\n          completion: parseFloat(endpoint.pricing.completion || '0')\n        } : undefined,\n        quantization: endpoint.quantization,\n        uptime: endpoint.uptime_last_30m ? parseFloat(endpoint.uptime_last_30m.toFixed(1)) : undefined,\n        context_length: endpoint.context_length\n      })));\n    }\n    \n    if (providers.length === 0) {\n      return { success: false, providers: [], error: 'No providers available for this model' };\n    }\n\n    return { success: true, providers };\n  } catch (error: any) {\n    return { success: false, providers: [], error: error.message };\n  }\n}\n\n// Fetch all available providers for all models (for caching)\nexport async function fetchAllModelProviders(apiKey: string): Promise<Map<string, OpenRouterProvider[]>> {\n  if (!apiKey || !apiKey.trim()) {\n    return new Map();\n  }\n\n  try {\n    const response = await fetch('https://openrouter.ai/api/v1/models', {\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n      },\n      signal: AbortSignal.timeout(15000),\n    });\n\n    if (!response.ok) {\n      console.error(`Failed to fetch OpenRouter models: HTTP ${response.status}`);\n      return new Map();\n    }\n\n    const data = await response.json() as any;\n    const models = data.data || [];\n    const modelProvidersMap = new Map<string, OpenRouterProvider[]>();\n\n    // Build map of model ID to providers\n    models.forEach((model: OpenRouterModelDetails) => {\n      if (model.id && model.providers) {\n        modelProvidersMap.set(model.id, model.providers);\n      }\n    });\n\n    return modelProvidersMap;\n  } catch (error: any) {\n    console.error('Error fetching all model providers:', error);\n    return new Map();\n  }\n}\n\n// Common OpenRouter provider names for fallback when API fails\nexport const COMMON_OPENROUTER_PROVIDERS: OpenRouterProvider[] = [\n  { id: 'Groq', name: 'Groq', description: 'Fast inference with Groq chips' },\n  { id: 'Cerebras', name: 'Cerebras', description: 'Ultra-fast inference with Cerebras wafer-scale engine' },\n  { id: 'OpenAI', name: 'OpenAI', description: 'Official OpenAI API' },\n  { id: 'Anthropic', name: 'Anthropic', description: 'Official Anthropic API' },\n  { id: 'Google', name: 'Google', description: 'Google AI models' },\n  { id: 'Meta', name: 'Meta', description: 'Meta Llama models' },\n  { id: 'Mistral', name: 'Mistral', description: 'Mistral AI models' },\n  { id: 'Qwen', name: 'Qwen', description: 'Alibaba Qwen models' },\n  { id: 'DeepSeek', name: 'DeepSeek', description: 'DeepSeek models' },\n];\n\n// Check if a model ID is in OpenRouter format (author/model)\nexport function isOpenRouterModel(modelId: string): boolean {\n  return modelId.includes('/') && modelId.split('/').length === 2;\n}\n\n// Get providers for a model with fallback\nexport async function getModelProvidersWithFallback(\n  modelId: string, \n  apiKey: string\n): Promise<OpenRouterProvider[]> {\n  // Only try to fetch providers for OpenRouter models\n  if (!isOpenRouterModel(modelId)) {\n    console.warn(`Model ${modelId} is not in OpenRouter format (author/model), skipping provider fetch`);\n    return [];\n  }\n  \n  const result = await fetchModelProviders(modelId, apiKey);\n  \n  if (result.success && result.providers.length > 0) {\n    return result.providers;\n  }\n  \n  // If API call failed, return empty array instead of hardcoded fallbacks\n  // This forces the user to check their API key or model availability\n  console.warn(`Failed to fetch providers for model ${modelId}: ${result.error}`);\n  return [];\n}",
      "filePath": "../src/utils/openrouter-providers.ts",
      "embedding": [
        7.33,
        0.4,
        0,
        0,
        0.8,
        0.01921879678741586,
        0.029165572765425075,
        0.005779247978632252,
        0.0904886083568618,
        0.024264476794703106,
        0.0793268450842576,
        0.06767512970577311,
        0.037076213619412955,
        0.05670749410028149,
        0.03281161320603181,
        0.05407744984348289,
        0.09911127259086144,
        0.016310720054205585,
        0.09201218187618333,
        0.09118262730215572,
        0.04565233542796218,
        0.008929354483640429,
        0.07908031532850095,
        0.059243158018231205,
        0.0017664235721907562,
        0.0937995479929764,
        0.03708517152509024,
        0.03184545037042246,
        0.06943041974663265,
        0.09203177744681358,
        0.044230248551781474,
        0.009230119595677932,
        0.021255711510030043,
        0.09049569100033698,
        0.053004876824032966,
        0.08342084538100522,
        0.08937986748937697,
        0.06890520458782533,
        0.09415943201860512,
        0.07286040670324559,
        0.09078598716342279,
        0.005773870468616638,
        0.03759933146340997,
        0.023033193705816947,
        0.048888661319791096,
        0.04328378630433552,
        0.022597505626677363,
        0.059921548443152596,
        0.04755930721285609,
        0.07941973414102407,
        0.03199001417748615,
        0.019937368190965934,
        0.03057644575173676,
        0.0023023423113622933,
        0.03028298645007187,
        0.09956395283816284,
        0.05503112373500199,
        0.07819677266165376,
        0.03653872130746366,
        0.03796884960429765,
        0.06503304963795718,
        0.06600442452900633,
        0.00030710763783518006,
        0.043265566553462045,
        0.045291687453876295,
        0.09007267931716624,
        0.0575786235747126,
        0.04840756720457565,
        0.06515386468992178,
        0.06791523029021167,
        0.05661499034484259,
        0.08466229315663912,
        0.005101016413448467,
        0.010346207758868797,
        0.09271900626757014,
        0.0573255228752821,
        0.02404128620819699,
        0.04797818463298732,
        0.012243000793199722,
        0.035525336836276455,
        0.0801157776613757,
        0.02718733336959719,
        0.06782992059098708,
        0.09094306234846944,
        0.08560871623300553,
        0.0839506971215096,
        0.08406493491304984,
        0.01872015214491325,
        0.031037684887289797,
        0.0975171160528208,
        0.007679935054567189,
        0.09839249932833337,
        0.07304774910653282,
        0.00749563369070535,
        0.06819572479658978,
        0.07799865575688802,
        0.0741563776942442,
        0.09846612840934998,
        0.00501547218646925,
        0.01824297748825947
      ]
    },
    {
      "content": "import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as os from \"os\";\n\nexport interface CustomPrompt {\n  name: string;\n  content: string;\n  dateAdded: string;\n}\n\ninterface PromptsStorage {\n  prompts: CustomPrompt[];\n}\n\nconst getStorageFile = (): string => {\n  const homeDir = os.homedir();\n  const gigaDir = path.join(homeDir, '.giga');\n  \n  // Create .giga directory if it doesn't exist\n  if (!fs.existsSync(gigaDir)) {\n    fs.mkdirSync(gigaDir, { mode: 0o700 });\n  }\n  \n  return path.join(gigaDir, 'prompts.json');\n};\n\nexport function loadPrompts(): CustomPrompt[] {\n  try {\n    const storageFile = getStorageFile();\n    \n    if (!fs.existsSync(storageFile)) {\n      return [];\n    }\n    \n    const data: PromptsStorage = JSON.parse(fs.readFileSync(storageFile, 'utf8'));\n    return data.prompts || [];\n  } catch (error) {\n    console.error('Error loading prompts:', error);\n    return [];\n  }\n}\n\nexport function savePrompts(prompts: CustomPrompt[]): void {\n  try {\n    const storageFile = getStorageFile();\n    const data: PromptsStorage = { prompts };\n    \n    fs.writeFileSync(storageFile, JSON.stringify(data, null, 2), { mode: 0o600 });\n  } catch (error) {\n    console.error('Error saving prompts:', error);\n  }\n}\n\nexport function addPrompt(name: string, content: string): void {\n  const prompts = loadPrompts();\n  \n  // Check if prompt already exists\n  const exists = prompts.some(p => p.name === name);\n  if (!exists) {\n    const newPrompt: CustomPrompt = {\n      name,\n      content,\n      dateAdded: new Date().toISOString(),\n    };\n    \n    prompts.push(newPrompt);\n    savePrompts(prompts);\n  }\n}\n\nexport function deletePrompt(name: string): boolean {\n  const prompts = loadPrompts();\n  const initialLength = prompts.length;\n  \n  const filteredPrompts = prompts.filter(p => p.name !== name);\n  \n  if (filteredPrompts.length < initialLength) {\n    savePrompts(filteredPrompts);\n    return true;\n  }\n  \n  return false;\n}\n\nexport function getAllPrompts(): CustomPrompt[] {\n  return loadPrompts();\n}\n\nexport function getPromptByName(name: string): CustomPrompt | undefined {\n  const prompts = loadPrompts();\n  return prompts.find(p => p.name === name);\n}\n\nexport function isPromptExists(name: string): boolean {\n  const prompts = loadPrompts();\n  return prompts.some(p => p.name === name);\n}\n\nexport function getPromptsAsSystemPrompt(): string {\n  const prompts = loadPrompts();\n  if (prompts.length === 0) {\n    return '';\n  }\n  \n  return prompts.map(prompt => prompt.content).join('\\n\\n');\n}",
      "filePath": "../src/utils/prompts.ts",
      "embedding": [
        2.92,
        0.8,
        0,
        0.3,
        0.9,
        0.09819426355056868,
        0.0009762983617473631,
        0.0677268902069544,
        0.07021442841297588,
        0.09692068591687941,
        0.029870927699512162,
        0.06485223855707777,
        0.015651294701985365,
        0.03583798211369287,
        0.09677718300665739,
        0.050549533097603766,
        0.0016682201331967295,
        0.005160802980209112,
        0.025178948464990372,
        0.07475824291518679,
        0.05820097233702201,
        0.040079549561326824,
        0.01336066500815375,
        0.06258441082208085,
        0.0037715738473070304,
        0.05259607058067409,
        0.004547053791125588,
        0.02083980703600662,
        0.011188353708370825,
        0.0897182321322108,
        0.01599433207805756,
        0.06399044313276807,
        0.018206949799528294,
        0.01985027490255239,
        0.005815077698206195,
        0.014607311475078745,
        0.003769590059813477,
        0.09438367920741064,
        0.031273897374726224,
        0.04333538782684035,
        0.03612027627099893,
        0.022808278021003128,
        0.010214739860757872,
        0.015862119610847613,
        0.0853052486135414,
        0.07909528280167206,
        0.03273927289015795,
        0.06782868150905327,
        0.023735270030633495,
        0.030651269809599258,
        0.0032898364051160314,
        0.021057766114940524,
        0.08027743026740328,
        0.03132689783104632,
        0.08653815091694454,
        0.0258781529737509,
        0.03468510841436323,
        0.03125777593553487,
        0.042903332649990224,
        0.08296166554535453,
        0.09495330204374951,
        0.0782122365803624,
        0.018637777334489247,
        0.018015048353387655,
        0.08021098137818611,
        0.02354924525135127,
        0.05547963972666164,
        0.006622369714438747,
        0.011295968391921285,
        0.07220295317384791,
        0.060441008141569434,
        0.078098987299485,
        0.008510981790887119,
        0.0953546084307669,
        0.02177680537234619,
        0.0897557753316538,
        0.0833201292533395,
        0.0741253441796567,
        0.019913153092076488,
        0.07488210427299745,
        0.040100215928510985,
        0.0865983130722847,
        0.032355259815275664,
        0.011645586169663137,
        0.014244680639803876,
        0.07317965640403384,
        0.05227544433202123,
        0.050870463100421516,
        0.0575006673510726,
        0.004333390021601791,
        0.0932394440557629,
        0.02234201266345901,
        0.017357969094284033,
        0.004502858168289115,
        0.05117256217220746,
        0.01183266149827078,
        0.09751887791487807,
        0.08126499913177572,
        0.09156118350978329,
        0.0548393334290733
      ]
    },
    {
      "content": "// Available models for each provider\nexport const PROVIDER_MODELS = {\n  openrouter: [\n    // OpenAI models on OpenRouter\n    \"openai/gpt-4o\",\n    \"openai/gpt-4o-mini\",\n    \"openai/gpt-4-turbo\",\n    \"openai/gpt-4\",\n    \"openai/gpt-3.5-turbo\",\n    \"openai/o1-preview\",\n    \"openai/o1-mini\",\n    \n    // Anthropic models on OpenRouter\n    \"anthropic/claude-3.5-sonnet\",\n    \"anthropic/claude-3-opus\",\n    \"anthropic/claude-3-sonnet\",\n    \"anthropic/claude-3-haiku\",\n    \n    // Google models on OpenRouter\n    \"google/gemini-pro-1.5\",\n    \"google/gemini-flash-1.5\",\n    \"google/gemini-2.0-flash-exp\",\n    \n    // Meta models\n    \"meta-llama/llama-3.3-70b-instruct\",\n    \"meta-llama/llama-3.1-70b-instruct\",\n    \"meta-llama/llama-3.1-8b-instruct\",\n    \"meta-llama/llama-3.2-90b-vision-instruct\",\n    \"meta-llama/llama-3.2-11b-vision-instruct\",\n    \"meta-llama/llama-3.2-3b-instruct\",\n    \"meta-llama/llama-3.2-1b-instruct\",\n    \n    // Qwen models\n    \"qwen/qwen-2.5-72b-instruct\",\n    \"qwen/qwen-2.5-32b-instruct\",\n    \"qwen/qwen-2.5-14b-instruct\",\n    \"qwen/qwen-2.5-7b-instruct\",\n    \"qwen/qwen2-vl-72b-instruct\",\n    \"qwen/qwen2-vl-7b-instruct\",\n    \"qwen/qwen3-235b-a22b-07-25\",\n    \"qwen/qwen3-coder\",\n    \n    // DeepSeek models\n    \"deepseek/deepseek-chat\",\n    \"deepseek/deepseek-coder\",\n    \"deepseek/deepseek-r1-0528\",\n    \n    // Mistral models\n    \"mistralai/mistral-large\",\n    \"mistralai/mistral-medium\",\n    \"mistralai/mistral-small\",\n    \"mistralai/codestral-mamba\",\n    \n    // Other popular models\n    \"microsoft/wizardlm-2-8x22b\",\n    \"databricks/dbrx-instruct\",\n    \"cohere/command-r-plus\",\n    \"cohere/command-r\",\n    \"z-ai/glm-4.5\",\n  ],\n  \n  anthropic: [\n    \"claude-3-5-sonnet-20241022\",\n    \"claude-3-5-sonnet-20240620\",\n    \"claude-3-opus-20240229\",\n    \"claude-3-sonnet-20240229\",\n    \"claude-3-haiku-20240307\",\n    \"claude-sonnet-4-20250514\",\n  ],\n  \n  google: [\n    \"gemini-2.0-flash-exp\",\n    \"gemini-1.5-pro-latest\",\n    \"gemini-1.5-pro\",\n    \"gemini-1.5-flash-latest\",\n    \"gemini-1.5-flash\",\n    \"gemini-1.5-flash-8b\",\n    \"gemini-1.0-pro\",\n    \"gemini-pro-vision\",\n    \"gemini-2.0-flash\",\n    \"gemini-2.5-flash\",\n  ],\n  \n  xai: [\n    \"grok-beta\",\n    \"grok-4-latest\",\n    \"grok-3-latest\",\n    \"grok-3-fast\",\n    \"grok-3-mini-fast\",\n    \"grok-2-1212\",\n    \"grok-2-latest\",\n  ],\n  \n  groq: [\n    \"llama-3.3-70b-versatile\",\n    \"llama-3.1-70b-versatile\",\n    \"llama-3.1-8b-instant\",\n    \"llama-3.2-90b-vision-preview\",\n    \"llama-3.2-11b-vision-preview\",\n    \"llama-3.2-3b-preview\",\n    \"llama-3.2-1b-preview\",\n    \"llama3-groq-70b-8192-tool-use-preview\",\n    \"llama3-groq-8b-8192-tool-use-preview\",\n    \"llama3-70b-8192\",\n    \"llama3-8b-8192\",\n    \"mixtral-8x7b-32768\",\n    \"gemma-7b-it\",\n    \"gemma2-9b-it\",\n    \"moonshotai/kimi-k2-instruct\",\n  ],\n  \n  cerebras: [\n    \"llama3.1-8b\",\n    \"llama3.1-70b\",\n    \"llama-3.3-70b\",\n    \"llama-4-scout-17b-16e-instruct\",\n    \"qwen-3-32b\",\n    \"qwen-3-235b-a22b-instruct-2507\",\n    \"qwen2.5-7b-instruct\",\n    \"qwen2.5-14b-instruct\",\n    \"qwen2.5-32b-instruct\",\n    \"qwen2.5-72b-instruct\",\n  ],\n  \n  perplexity: [\n    \"llama-3.1-sonar-small-128k-online\",\n    \"llama-3.1-sonar-large-128k-online\",\n    \"llama-3.1-sonar-huge-128k-online\",\n    \"llama-3.1-sonar-small-128k-chat\",\n    \"llama-3.1-sonar-large-128k-chat\",\n    \"llama-3.1-8b-instruct\",\n    \"llama-3.1-70b-instruct\",\n    \"sonar-small-online\",\n    \"sonar-medium-online\",\n    \"sonar-small-chat\",\n    \"sonar-medium-chat\",\n    \"sonar\",\n    \"sonar-pro\",\n    \"sonar-deep-research\",\n  ],\n  \n  openai: [\n    \"gpt-4o\",\n    \"gpt-4o-mini\",\n    \"gpt-4-turbo\",\n    \"gpt-4-turbo-preview\",\n    \"gpt-4\",\n    \"gpt-3.5-turbo\",\n    \"gpt-3.5-turbo-16k\",\n    \"o1-preview\",\n    \"o1-mini\",\n    \"text-davinci-003\",\n    \"text-davinci-002\",\n    \"code-davinci-002\",\n  ],\n  \n  ollama: [\n    // Popular Ollama models - models will be fetched dynamically\n    \"llama3.2:3b\",\n    \"llama3.2:1b\", \n    \"llama3.1:8b\",\n    \"llama3.1:70b\",\n    \"llama3:8b\",\n    \"llama3:70b\",\n    \"qwen2.5:7b\",\n    \"qwen2.5:14b\",\n    \"qwen2.5:32b\",\n    \"mistral:7b\",\n    \"gemma2:9b\",\n    \"gemma2:27b\",\n    \"phi3:3.8b\",\n    \"phi3:14b\",\n    \"deepseek-coder:6.7b\",\n    \"codellama:7b\",\n    \"codellama:13b\",\n    \"neural-chat:7b\",\n    \"tinyllama:1.1b\",\n  ],\n};\n\nexport type ProviderName = keyof typeof PROVIDER_MODELS;",
      "filePath": "../src/utils/provider-models.ts",
      "embedding": [
        2.21,
        0,
        0,
        0,
        0.2,
        0.07560506647181635,
        0.06973527667189153,
        0.03250787408057459,
        0.01584671480465324,
        0.09153906786780736,
        0.039207168230661185,
        0.03948713443820299,
        0.03053686988498805,
        0.08094361890358431,
        0.09230977805781548,
        0.01195351174080548,
        0.01100295702406421,
        0.028895405460908154,
        0.09806540826649476,
        0.008493300121827297,
        0.05193988579652256,
        0.09138339127970733,
        0.07502628178760473,
        0.04532618959944004,
        0.07915907496283911,
        0.01238643681145133,
        0.08735060740988355,
        0.09942035966956485,
        0.00136833352060578,
        0.021584770561700262,
        0.009287609301040311,
        0.07354343667430831,
        0.0687651408622391,
        0.08240562522439542,
        0.0521910655966018,
        0.018796806383796508,
        0.03441032085433739,
        0.07915662092521547,
        0.07301570364960216,
        0.07234083160273495,
        0.013370026735529629,
        0.08307264679144065,
        0.09912384605818719,
        0.09238133156116222,
        0.02895305583377741,
        0.03666329363957168,
        0.04528756608099832,
        0.030618028358330898,
        0.08403365512752503,
        0.002549929906454007,
        0.09717247678887049,
        0.08695346270038029,
        0.05079652836160893,
        0.09224371540897779,
        0.004689256948726773,
        0.015723643097797536,
        0.09732854205224922,
        0.037308067778168474,
        0.018785161838665076,
        0.03479157940092364,
        0.0662272781389279,
        0.09698368352200476,
        0.07489347376241012,
        0.07152944732820286,
        0.03929131534866215,
        0.08059078593649849,
        0.03722984742283325,
        0.06966519520329442,
        0.09484342484899684,
        0.024814206320527145,
        0.07183423613596789,
        0.08440376894758025,
        0.006371253715920056,
        0.08508988700510424,
        0.060625556980085454,
        0.06629409693728976,
        0.09267761557216947,
        0.05109374254164269,
        0.05330774672221146,
        0.09560139170032383,
        0.04217498410678379,
        0.05853928376866298,
        0.09990469226221921,
        0.012351041543946763,
        0.09523239226911848,
        0.03297822141195017,
        0.07583032127138292,
        0.002122850117259767,
        0.0801660900220372,
        0.051969257619279355,
        0.011945072871323315,
        0.047483931578173766,
        0.025270380436679365,
        0.03126987708732957,
        0.025815311943448507,
        0.011083377072059942,
        0.09678856923978628,
        0.009965586015413908,
        0.023090181748607264,
        0.09437187700695422
      ]
    },
    {
      "content": "import * as fs from \"fs\";\nimport * as path from \"path\";\nimport { sessionManager } from \"./session-manager\";\n\nexport interface ModelProviderPreference {\n  modelId: string;\n  preferredProvider: string;\n  providerName: string;\n  dateAdded: string;\n  lastUsed: string;\n}\n\nexport interface ProviderPreferences {\n  instanceId: string;\n  modelProviderMap: ModelProviderPreference[];\n  lastUpdated: string;\n}\n\nconst getProviderPreferencesPath = (): string => {\n  const sessionInfo = sessionManager.getSessionInfo();\n  if (!sessionInfo) {\n    throw new Error('No active session found');\n  }\n  \n  const homeDir = require('os').homedir();\n  const sessionDir = path.join(homeDir, '.giga', 'sessions', sessionInfo.instanceId);\n  \n  // Ensure session directory exists\n  if (!fs.existsSync(sessionDir)) {\n    fs.mkdirSync(sessionDir, { recursive: true, mode: 0o700 });\n  }\n  \n  return path.join(sessionDir, 'provider-preferences.json');\n};\n\nexport function loadProviderPreferences(): ProviderPreferences {\n  try {\n    const preferencesPath = getProviderPreferencesPath();\n    const sessionInfo = sessionManager.getSessionInfo();\n    \n    if (!sessionInfo) {\n      throw new Error('No active session found');\n    }\n    \n    if (!fs.existsSync(preferencesPath)) {\n      // Return default preferences for new session\n      return {\n        instanceId: sessionInfo.instanceId,\n        modelProviderMap: [],\n        lastUpdated: new Date().toISOString()\n      };\n    }\n    \n    const data: ProviderPreferences = JSON.parse(fs.readFileSync(preferencesPath, 'utf8'));\n    return data;\n  } catch (error) {\n    console.error('Error loading provider preferences:', error);\n    const sessionInfo = sessionManager.getSessionInfo();\n    return {\n      instanceId: sessionInfo?.instanceId || 'unknown',\n      modelProviderMap: [],\n      lastUpdated: new Date().toISOString()\n    };\n  }\n}\n\nexport function saveProviderPreferences(preferences: ProviderPreferences): void {\n  try {\n    const preferencesPath = getProviderPreferencesPath();\n    preferences.lastUpdated = new Date().toISOString();\n    \n    fs.writeFileSync(\n      preferencesPath, \n      JSON.stringify(preferences, null, 2), \n      { mode: 0o600 }\n    );\n  } catch (error) {\n    console.error('Error saving provider preferences:', error);\n  }\n}\n\nexport function setModelProviderPreference(\n  modelId: string, \n  providerId: string, \n  providerName: string\n): void {\n  try {\n    const preferences = loadProviderPreferences();\n    const now = new Date().toISOString();\n    \n    // Remove existing preference for this model\n    preferences.modelProviderMap = preferences.modelProviderMap.filter(\n      p => p.modelId !== modelId\n    );\n    \n    // Add new preference\n    preferences.modelProviderMap.push({\n      modelId,\n      preferredProvider: providerId,\n      providerName,\n      dateAdded: now,\n      lastUsed: now\n    });\n    \n    saveProviderPreferences(preferences);\n  } catch (error) {\n    console.error('Error setting model provider preference:', error);\n  }\n}\n\nexport function getModelProviderPreference(modelId: string): ModelProviderPreference | null {\n  try {\n    const preferences = loadProviderPreferences();\n    return preferences.modelProviderMap.find(p => p.modelId === modelId) || null;\n  } catch (error) {\n    console.error('Error getting model provider preference:', error);\n    return null;\n  }\n}\n\nexport function updateModelProviderLastUsed(modelId: string): void {\n  try {\n    const preferences = loadProviderPreferences();\n    const preference = preferences.modelProviderMap.find(p => p.modelId === modelId);\n    \n    if (preference) {\n      preference.lastUsed = new Date().toISOString();\n      saveProviderPreferences(preferences);\n    }\n  } catch (error) {\n    console.error('Error updating model provider last used:', error);\n  }\n}\n\nexport function removeModelProviderPreference(modelId: string): void {\n  try {\n    const preferences = loadProviderPreferences();\n    preferences.modelProviderMap = preferences.modelProviderMap.filter(\n      p => p.modelId !== modelId\n    );\n    saveProviderPreferences(preferences);\n  } catch (error) {\n    console.error('Error removing model provider preference:', error);\n  }\n}\n\nexport function getAllModelProviderPreferences(): ModelProviderPreference[] {\n  try {\n    const preferences = loadProviderPreferences();\n    return preferences.modelProviderMap.sort((a, b) => \n      new Date(b.lastUsed).getTime() - new Date(a.lastUsed).getTime()\n    );\n  } catch (error) {\n    console.error('Error getting all model provider preferences:', error);\n    return [];\n  }\n}",
      "filePath": "../src/utils/provider-preferences.ts",
      "embedding": [
        4.28,
        0.7,
        0,
        0.3,
        0.9,
        0.02595074814246089,
        0.030299186632349973,
        0.013311888925791028,
        0.03654729360921325,
        0.0681522586331612,
        0.06832686275606274,
        0.04720250155162984,
        0.055067078525594074,
        0.0029161089727500313,
        0.02496853714783355,
        0.012721277403284848,
        0.007811248885494815,
        0.026948290670935262,
        0.07074042419474198,
        0.048232514160455424,
        0.037823685198531104,
        0.022009338622876663,
        0.07133219158572825,
        0.09519420254336394,
        0.09747357054845833,
        0.03567001006641135,
        0.05027663868057239,
        0.041984697460159974,
        0.0672574434378421,
        0.030447763700179188,
        0.09464436860684718,
        0.0702782875075789,
        0.09530864592505825,
        0.05853086513271029,
        0.031795587730821896,
        0.02667960529208424,
        0.07573243178362238,
        0.0063553760719425095,
        0.002522824323430917,
        0.058386022005199295,
        0.0840935262046113,
        0.041357662333823667,
        0.06166575120200535,
        0.013764689443955203,
        0.09869122813825021,
        0.09108780877245032,
        0.030098883459247817,
        0.0646536708638286,
        0.08370077902375544,
        0.0882153579065989,
        0.044366601390167765,
        0.0028739165099883612,
        0.08822028148412919,
        0.049173719965885924,
        0.07565057713370936,
        0.0978729281004228,
        0.038204554976616956,
        0.07168333738838288,
        0.0835963130139347,
        0.03913524177266271,
        0.09231398545612118,
        0.03256505556070765,
        0.08014691407488107,
        0.03804146047083893,
        0.09477599109231932,
        0.03033594928747556,
        0.007172080005062609,
        0.002082590508561333,
        0.0779561378341539,
        0.03919840634862129,
        0.04903642974106125,
        0.018863513023093737,
        0.0677019223839812,
        0.07820735374388307,
        0.061265624240023936,
        0.007502461356340685,
        0.07701924195440124,
        0.03689728418447559,
        0.08038340018065965,
        0.0698538318942497,
        0.07564354831093155,
        0.07435524227037375,
        0.0553757422719221,
        0.07182083745844962,
        0.019142258685046334,
        0.07291760726195094,
        0.052431190646042264,
        0.045677534141056665,
        0.057769243475498826,
        0.06366223422614999,
        0.0044822004804505825,
        0.07156607055603957,
        0.02056523006922455,
        0.048150455617641155,
        0.025405991772360227,
        0.04163382429920437,
        0.02929784509460778,
        0.06599182530297985,
        0.06303105664787588,
        0.06103933555693164
      ]
    },
    {
      "content": "import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as os from \"os\";\nimport { randomUUID } from \"crypto\";\n\nexport interface SessionConfig {\n  instanceId: string;\n  currentModel: string;\n  temperature?: number;\n  createdAt: string;\n  lastUsed: string;\n}\n\nclass SessionManager {\n  private instanceId: string;\n  private sessionDir: string;\n  \n  constructor() {\n    this.instanceId = randomUUID();\n    this.sessionDir = this.getSessionDir();\n    this.ensureSessionDir();\n    this.saveSessionConfig();\n  }\n  \n  private getGigaDir(): string {\n    const homeDir = os.homedir();\n    const gigaDir = path.join(homeDir, '.giga');\n    \n    if (!fs.existsSync(gigaDir)) {\n      fs.mkdirSync(gigaDir, { mode: 0o700 });\n    }\n    \n    return gigaDir;\n  }\n  \n  private getSessionDir(): string {\n    const gigaDir = this.getGigaDir();\n    return path.join(gigaDir, 'sessions', this.instanceId);\n  }\n  \n  private ensureSessionDir(): void {\n    if (!fs.existsSync(this.sessionDir)) {\n      fs.mkdirSync(this.sessionDir, { recursive: true, mode: 0o700 });\n    }\n  }\n  \n  private getSessionConfigPath(): string {\n    return path.join(this.sessionDir, 'config.json');\n  }\n  \n  private saveSessionConfig(): void {\n    try {\n      const config: SessionConfig = {\n        instanceId: this.instanceId,\n        currentModel: 'moonshotai/kimi-k2-instruct', // default model\n        createdAt: new Date().toISOString(),\n        lastUsed: new Date().toISOString()\n      };\n      \n      fs.writeFileSync(\n        this.getSessionConfigPath(), \n        JSON.stringify(config, null, 2), \n        { mode: 0o600 }\n      );\n    } catch (error) {\n      console.error('Error saving session config:', error);\n    }\n  }\n  \n  public getInstanceId(): string {\n    return this.instanceId;\n  }\n  \n  public getCurrentModel(): string {\n    try {\n      const configPath = this.getSessionConfigPath();\n      \n      if (!fs.existsSync(configPath)) {\n        return 'moonshotai/kimi-k2-instruct'; // default fallback\n      }\n      \n      const config: SessionConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n      return config.currentModel || 'moonshotai/kimi-k2-instruct';\n    } catch (error) {\n      console.error('Error loading current model:', error);\n      return 'moonshotai/kimi-k2-instruct';\n    }\n  }\n  \n  public setCurrentModel(modelName: string): void {\n    try {\n      const configPath = this.getSessionConfigPath();\n      let config: SessionConfig;\n      \n      if (fs.existsSync(configPath)) {\n        config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n      } else {\n        config = {\n          instanceId: this.instanceId,\n          currentModel: modelName,\n          createdAt: new Date().toISOString(),\n          lastUsed: new Date().toISOString()\n        };\n      }\n      \n      config.currentModel = modelName;\n      config.lastUsed = new Date().toISOString();\n      \n      fs.writeFileSync(\n        configPath, \n        JSON.stringify(config, null, 2), \n        { mode: 0o600 }\n      );\n    } catch (error) {\n      console.error('Error saving current model:', error);\n    }\n  }\n  \n  public getTemperature(): number {\n    try {\n      const configPath = this.getSessionConfigPath();\n      \n      if (!fs.existsSync(configPath)) {\n        return 0.7; // default temperature\n      }\n      \n      const config: SessionConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n      return config.temperature ?? 0.7;\n    } catch (error) {\n      console.error('Error loading temperature:', error);\n      return 0.7;\n    }\n  }\n  \n  public setTemperature(temperature: number): void {\n    try {\n      const configPath = this.getSessionConfigPath();\n      let config: SessionConfig;\n      \n      if (fs.existsSync(configPath)) {\n        config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n      } else {\n        config = {\n          instanceId: this.instanceId,\n          currentModel: 'moonshotai/kimi-k2-instruct',\n          temperature: temperature,\n          createdAt: new Date().toISOString(),\n          lastUsed: new Date().toISOString()\n        };\n      }\n      \n      config.temperature = temperature;\n      config.lastUsed = new Date().toISOString();\n      \n      fs.writeFileSync(\n        configPath, \n        JSON.stringify(config, null, 2), \n        { mode: 0o600 }\n      );\n    } catch (error) {\n      console.error('Error saving temperature:', error);\n    }\n  }\n  \n  public getSessionInfo(): SessionConfig | null {\n    try {\n      const configPath = this.getSessionConfigPath();\n      \n      if (!fs.existsSync(configPath)) {\n        return null;\n      }\n      \n      return JSON.parse(fs.readFileSync(configPath, 'utf8'));\n    } catch (error) {\n      console.error('Error loading session info:', error);\n      return null;\n    }\n  }\n  \n  // Cleanup old sessions (optional - called periodically)\n  public static cleanupOldSessions(olderThanDays: number = 7): void {\n    try {\n      const homeDir = os.homedir();\n      const sessionsDir = path.join(homeDir, '.giga', 'sessions');\n      \n      if (!fs.existsSync(sessionsDir)) {\n        return;\n      }\n      \n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - olderThanDays);\n      \n      const sessionDirs = fs.readdirSync(sessionsDir);\n      \n      for (const sessionDir of sessionDirs) {\n        const sessionPath = path.join(sessionsDir, sessionDir);\n        const configPath = path.join(sessionPath, 'config.json');\n        \n        if (fs.existsSync(configPath)) {\n          try {\n            const config: SessionConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n            const lastUsed = new Date(config.lastUsed);\n            \n            if (lastUsed < cutoffDate) {\n              fs.rmSync(sessionPath, { recursive: true, force: true });\n            }\n          } catch (error) {\n            // If we can't read the config, consider it for cleanup\n            const stats = fs.statSync(sessionPath);\n            if (stats.mtime < cutoffDate) {\n              fs.rmSync(sessionPath, { recursive: true, force: true });\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error cleaning up old sessions:', error);\n    }\n  }\n}\n\n// Export singleton instance\nexport const sessionManager = new SessionManager();",
      "filePath": "../src/utils/session-manager.ts",
      "embedding": [
        5.74,
        0,
        0.1,
        0.4,
        0.2,
        0.08420348067615807,
        0.035841537269166,
        0.08387213176915612,
        0.08108871294560246,
        0.008962667725056795,
        0.013472401867809826,
        0.09836891663136685,
        0.061179462316924595,
        0.07263637626298672,
        0.0075438405451846435,
        0.00825061498369305,
        0.019763305261021692,
        0.088995120131005,
        0.009209677895714875,
        0.03265260047469342,
        0.013147072758261026,
        0.09266837383697299,
        0.04496926961225894,
        0.05948516160357773,
        0.06548573137041729,
        0.09485239746261472,
        0.024572913889822214,
        0.09395143076508898,
        0.05420362077104327,
        0.056252156676728865,
        0.005313516750494929,
        0.08186045047104051,
        0.06281457528313189,
        0.06929300726585368,
        0.09334245917145018,
        0.03348071622366973,
        0.025344192778136446,
        0.062184030301541994,
        0.09512723890793884,
        0.04535452242376373,
        0.052095043787333664,
        0.002519082613451462,
        0.0017470184406714663,
        0.07520516699689257,
        0.04063960710066183,
        0.03912749051326339,
        0.09749429178024856,
        0.041497623525517814,
        0.052319754211605056,
        0.015023133612407646,
        0.07903155581289428,
        0.012069928029406552,
        0.03476683561250016,
        0.04698225556067498,
        0.08049080294020003,
        0.06773550636994977,
        0.0737415060252472,
        0.04468301999211355,
        0.03120682841538326,
        0.04674005853727117,
        0.05939476044310006,
        0.05916598405966683,
        0.04172325607872898,
        0.007247339897212957,
        0.08117414375522597,
        0.056008080492539504,
        0.034496272768666035,
        0.09298385647844284,
        0.03946348220343835,
        0.07442882310256645,
        0.08319585395296672,
        0.016920366936082565,
        0.013994024529656436,
        0.07418472419563364,
        0.017318876945678963,
        0.04744975458730283,
        0.07244712022810083,
        0.07096946787218512,
        0.07194543727497525,
        0.08579307599611266,
        0.0571114533456799,
        0.07678832472412134,
        0.06358376687296245,
        0.04514721733396801,
        0.09394430076550947,
        0.02006269324064132,
        0.02323223316816957,
        0.06477326964759117,
        0.0026745390351044953,
        0.061672583171623475,
        0.04048296197358003,
        0.0902296198880837,
        0.00897193661250133,
        0.03195480861589056,
        0.03894337585878963,
        0.07013960489760022,
        0.004695783379857765,
        0.05301023983616421,
        0.09397643185903261,
        0.0011995131241816282
      ]
    },
    {
      "content": "import { get_encoding, encoding_for_model, Tiktoken } from 'tiktoken';\n\nexport class TokenCounter {\n  private encoder: Tiktoken;\n\n  constructor(model: string = 'gpt-4') {\n    try {\n      // Try to get encoding for specific model\n      this.encoder = encoding_for_model(model as any);\n    } catch {\n      // Fallback to cl100k_base (used by GPT-4 and most modern models)\n      this.encoder = get_encoding('cl100k_base');\n    }\n  }\n\n  /**\n   * Count tokens in a string\n   */\n  countTokens(text: string): number {\n    if (!text) return 0;\n    return this.encoder.encode(text).length;\n  }\n\n  /**\n   * Count tokens in messages array (for chat completions)\n   */\n  countMessageTokens(messages: Array<{ role: string; content: string | null; [key: string]: any }>): number {\n    let totalTokens = 0;\n    \n    for (const message of messages) {\n      // Every message follows <|start|>{role/name}\\n{content}<|end|\\>\\n\n      totalTokens += 3; // Base tokens per message\n      \n      if (message.content && typeof message.content === 'string') {\n        totalTokens += this.countTokens(message.content);\n      }\n      \n      if (message.role) {\n        totalTokens += this.countTokens(message.role);\n      }\n      \n      // Add extra tokens for tool calls if present\n      if (message.tool_calls) {\n        totalTokens += this.countTokens(JSON.stringify(message.tool_calls));\n      }\n    }\n    \n    totalTokens += 3; // Every reply is primed with <|start|>assistant<|message|>\n    \n    return totalTokens;\n  }\n\n  /**\n   * Estimate tokens for streaming content\n   * This is an approximation since we don't have the full response yet\n   */\n  estimateStreamingTokens(accumulatedContent: string): number {\n    return this.countTokens(accumulatedContent);\n  }\n\n  /**\n   * Clean up resources\n   */\n  dispose(): void {\n    this.encoder.free();\n  }\n}\n\n/**\n * Create a token counter instance\n */\nexport function createTokenCounter(model?: string): TokenCounter {\n  return new TokenCounter(model);\n}",
      "filePath": "../src/utils/token-counter.ts",
      "embedding": [
        2.28,
        0.1,
        0.1,
        0.1,
        0.2,
        0.09220386890460466,
        0.09308345324024954,
        0.08037718308667843,
        0.045685879489692216,
        0.06237821758388973,
        0.006057702227018547,
        0.06140282214645759,
        0.02404569125934807,
        0.054366838082941564,
        0.01816557162163269,
        0.028247486706314308,
        0.019951621711508397,
        0.020122293045345643,
        0.08244205506582591,
        0.07375930977813709,
        0.05686976901665952,
        0.03469330619923394,
        0.09349048314965808,
        0.04614562697912764,
        0.03350344657384237,
        0.04141925917605919,
        0.013139833436999582,
        0.03199217441971688,
        0.023932281742108787,
        0.08286550904170831,
        0.07020096009663195,
        0.04936635615100902,
        0.05424241158370008,
        0.01707777823405613,
        0.07575991603481305,
        0.077078141975568,
        0.08408155234579294,
        0.037112120419536425,
        0.0880253840889906,
        0.029219710295125413,
        0.08188384147543679,
        0.07892023703815179,
        0.061149496171251365,
        0.07890169171131302,
        0.07340131917145484,
        0.07041116684374223,
        0.0790371748613624,
        0.0875673129327467,
        0.03599514320303809,
        0.09882893865161382,
        0.01698065448389331,
        0.0858331090659737,
        0.05350008570645717,
        0.07454570446137347,
        0.02895073277152912,
        0.05857378697145604,
        0.018099021247141446,
        0.08562652322359143,
        0.05629901165394346,
        0.04186697156291778,
        0.09363989926538013,
        0.06220686564439444,
        0.022176567106662704,
        0.08556345090924657,
        0.034194692423417064,
        0.013850923625813461,
        0.022204211920956743,
        0.015515926298779716,
        0.04314104845391408,
        0.055097112281552486,
        0.047107715713430136,
        0.06292505657804152,
        0.08600616481335199,
        0.0714762424935583,
        0.060408066979034364,
        0.0990583040652182,
        0.0902630684093003,
        0.012228619595621338,
        0.05328238533032903,
        0.07512758185527424,
        0.028554248864711265,
        0.0782646090290588,
        0.04550628611988399,
        0.07044829169701747,
        0.006623456665487304,
        0.029418205464674142,
        0.0707901231249838,
        0.09992499359507795,
        0.04577821790131288,
        0.03419974881445472,
        0.0811481705403376,
        0.01080188171894555,
        0.05959866403293454,
        0.0023292961885638674,
        0.021326323411669845,
        0.08032491201580436,
        0.02951643097736564,
        0.03904458162621319,
        0.05937200484436285,
        0.045252532131145246
      ]
    }
  ]
}